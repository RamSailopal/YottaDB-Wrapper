%GO Global Output Utility
GT.M 04-JUL-2022 11:37:33
^HELP

^HELP("s","ABOUT_YOTTADB")
About_YottaDB
^HELP("s","ABOUT_YOTTADB",1)
   About YottaDB
^HELP("s","ABOUT_YOTTADB",2)

^HELP("s","ABOUT_YOTTADB",3)
   YottaDB runs on a wide variety of computer platforms. Consult YottaDB for the
^HELP("s","ABOUT_YOTTADB",4)
   current list of Supported platforms.
^HELP("s","ABOUT_YOTTADB",5)

^HELP("s","ABOUT_YOTTADB",6)
   In addition to preserving the traditional features of M, YottaDB also offers
^HELP("s","ABOUT_YOTTADB",7)
   an optimized compiler that produces object code that does not require
^HELP("s","ABOUT_YOTTADB",8)
   internal interpreters during execution.
^HELP("s","ABOUT_YOTTADB",9)

^HELP("s","ABOUT_YOTTADB",10)
   On all platforms, the YottaDB dynamic linking mechanism activates compiled
^HELP("s","ABOUT_YOTTADB",11)
   objects. On some platforms, you can link the object modules into shared
^HELP("s","ABOUT_YOTTADB",12)
   object libraries.
^HELP("s","ABOUT_YOTTADB",13)

^HELP("s","ABOUT_YOTTADB",14)
   In keeping with the focus on creating fully compiled code, YottaDB is tightly
^HELP("s","ABOUT_YOTTADB",15)
   integrated with the operating system environment and permits the use of
^HELP("s","ABOUT_YOTTADB",16)
   operating system utilities for program development.
^HELP("s","ABOUT_YOTTADB",17)

^HELP("s","ABOUT_YOTTADB",18)
   YottaDB also provides a full complement of M tools for creating, compiling,
^HELP("s","ABOUT_YOTTADB",19)
   and debugging source code. Many of these tasks are accomplished from the
^HELP("s","ABOUT_YOTTADB",20)
   YottaDB facility called Direct Mode, which offers the look and feel of an
^HELP("s","ABOUT_YOTTADB",21)
   interpreted language that is familiar to the traditional M programmer.
^HELP("s","ABOUT_YOTTADB",22)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT")
Copyright
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",1)
   Copyright
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",2)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",3)
   Copyright 1987 - 2003, 2013 - 2019
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",4)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",5)
   Fidelity National Information Services, Inc. and/or its subsidiaries. All
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",6)
   rights reserved.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",7)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",8)
   Copyright 2017-2020 YottaDB LLC and/or its subsidiaries. All Rights Reserved.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",9)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",10)
   Permission is granted to copy, distribute and/or modify this document
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",11)
   under the terms of the GNU Free Documentation License, Version 1.3 or any
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",12)
   later version published by the Free Software Foundation; with no Invariant
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",13)
   Sections, no Front-Cover Texts and no Back-Cover Texts.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",14)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",15)
   GT.M(TM) is a trademark of Fidelity National Information Services, Inc.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",16)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",17)
   YottaDB(TM) is a trademark of YottaDB LLC.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",18)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",19)
   Other trademarks are the property of their respective owners.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",20)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",21)
   This document contains a description of YottaDB and the operating
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",22)
   instructions pertaining to the various functions that comprise the system.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",23)
   This document does not contain any commitment of YottaDB. YottaDB believes
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",24)
   the information in this publication is accurate as of its publication
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",25)
   date; such information is subject to change without notice.  YottaDB is
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",26)
   not responsible for any errors or defects.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",27)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",28)
   **Note**
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",29)

^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",30)
   This help file is a concise representation of the revision r1.30 of the
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",31)
   Administration and Operations Guide. To obtain a copy of the current
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",32)
   revision, go to https://docs.yottadb.com/ProgrammersGuide/index.html.
^HELP("s","ABOUT_YOTTADB","s","COPYRIGHT",33)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT")
Programming_Environment
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT",1)
   Programming Environment
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT",3)
   The YottaDB Programming Environment is described in the following sections.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT",4)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA")
Managing_Data
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",1)
   Managing Data
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",3)
   The scope of M data is either process local or global.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",4)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",5)
     o Local variables last only for the duration of the current session;
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",6)
       YottaDB deletes them when the M process terminates.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",7)
     o Global variables contain data that persists beyond the process. YottaDB
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",8)
       stores global variables on disk. A Global Directory organizes global
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",9)
       variables and describes the organization of a database. The YottaDB
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",10)
       administrator uses the Global Directory Editor (GDE) to create and
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",11)
       manage Global Directories. A Global Directory maps global names to a
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",12)
       database file. YottaDB uses this mapping when it stores and retrieves
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",13)
       globals from the database. Several Global Directories may refer to a
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",14)
       single database file.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA",15)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT")
Database_Management
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",1)
   Database Management
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",3)
   The Global Directory Editor (GDE) creates, modifies, maintains, and
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",4)
   displays the characteristics of Global Directories. GDE also maps LOCKs on
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",5)
   resource names to the region of the database specified for the
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",6)
   corresponding global variables.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",7)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",8)
   The M Peripheral Interchange Program (MUPIP) creates database files and
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",9)
   provides tools for YottaDB database management and database journaling.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_DATA","s","DATABASE_MANAGEMENT",10)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE")
Managing_Source_Code
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",1)
   Managing Source Code
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",3)
   In the YottaDB programming environment, source routines are generated and
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",4)
   stored as standard UNIX files. They are created and edited with standard
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",5)
   UNIX text editors. YottaDB accepts source lines of up to 32K bytes. When
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",6)
   YottaDB encounters a line with a length greater than 32K bytes in a source
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",7)
   file, it emits a %YDB-W-LSEXPECTED warning. This warning identifies cases
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",8)
   where a line greater than 32K bytes is split into multiple lines, which
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",9)
   causes statements beyond the character prior to the limit to execute
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",10)
   irrespective of any starting IF, ELSE or FOR commands. The 32K byte limit
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",11)
   applies to XECUTE command arguments and Direct Mode input as well.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",12)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",13)
   YottaDB is designed to work with the operating system utilities and enhances
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",14)
   them when beneficial. The following sections describe the process of
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",15)
   programming and debugging with YottaDB and from the operating system.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE",16)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG")
Program_Debug
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",1)
   Program Debug
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",3)
   The YottaDB programmer can use any UNIX text editor to create M source files.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",4)
   If you generate a program from within the Direct Mode, it also accesses
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",5)
   the UNIX text editor specified by the environment variable EDITOR and
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",6)
   provides additional capabilities to automate and enhance the process.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",7)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",8)
   The YottaDB programmer also uses the Direct Mode facility to interactively
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",9)
   debug, modify, and execute M routines. In Direct Mode, YottaDB executes each
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",10)
   M command immediately, as if it had been in-line at the point where YottaDB
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",11)
   initiated Direct Mode.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG",12)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER")
YottaDB_Compiler
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",1)
   YottaDB Compiler
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",3)
   The YottaDB compiler operates on source files to produce object files
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",4)
   consisting of position-independent, native object code, which on some
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",5)
   platforms can be linked into shared object libraries. YottaDB provides syntax
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",6)
   error checking at compile-time and allows you to enable or disable the
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",7)
   compile-as-written mode. By default, YottaDB produces an object file even if
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",8)
   the compiler detects errors in the source code. This compile-as-written
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",9)
   mode facilitates a flexible approach to debugging.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","PROGRAM_DEBUG","s","YOTTADB_COMPILER",10)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT")
Source_File_Management
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",1)
   Source File Management
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",3)
   In addition to standard M "percent" utilities, YottaDB permits the use of the
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",4)
   standard UNIX file manipulation tools, for example, the diff, grep, cp,
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",5)
   and mv commands. The YottaDB programmer can also use the powerful facilities
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",6)
   provided by the UNIX directory structure, such as time and date
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",7)
   information, tree-structured directories, and file protection codes.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",8)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",9)
   YottaDB programs are compatible with most source management software, for
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",10)
   example, RCS and SCCS.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","SOURCE_FILE_MANAGEMENT",11)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM")
The_Run-Time_System
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",1)
   The Run-Time System
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",2)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",3)
   A YottaDB programmer can execute an M routine from the shell or
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",4)
   interactively, using the M commands from Direct Mode.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",5)

^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",6)
   The run-time system executes compile-as-written code as long as it does
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",7)
   not encounter the compile-time errors. If it detects an error, the
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",8)
   run-time system suspends execution of a routine immediately and transfers
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",9)
   control to Direct Mode or to a user-written error routine.
^HELP("s","ABOUT_YOTTADB","s","PROGRAMMING_ENVIRONMENT","s","MANAGING_SOURCE_CODE","s","THE_RUN-TIME_SYSTEM",10)

^HELP("s","COMMANDS")
Commands
^HELP("s","COMMANDS",1)
   Commands
^HELP("s","COMMANDS",2)

^HELP("s","COMMANDS",3)
   This chapter describes M language commands implemented in YottaDB. All
^HELP("s","COMMANDS",4)
   commands starting with the letter Z are YottaDB additions to the ANSI
^HELP("s","COMMANDS",5)
   standard command set. The M standard specifies standard abbreviations for
^HELP("s","COMMANDS",6)
   commands and rejects any non-standard abbreviation.
^HELP("s","COMMANDS",7)

^HELP("s","COMMANDS","s","BREAK")
Break
^HELP("s","COMMANDS","s","BREAK",1)
   Break
^HELP("s","COMMANDS","s","BREAK",2)

^HELP("s","COMMANDS","s","BREAK",3)
   The BREAK command pauses execution of the code and initiates Direct Mode.
^HELP("s","COMMANDS","s","BREAK",4)

^HELP("s","COMMANDS","s","BREAK",5)
   The format of the BREAK command is:
^HELP("s","COMMANDS","s","BREAK",6)

^HELP("s","COMMANDS","s","BREAK",7)
   B[REAK][:tvexpr] [expr[:tvexpr][,...]]
^HELP("s","COMMANDS","s","BREAK",8)

^HELP("s","COMMANDS","s","BREAK",9)
   Issuing a BREAK command inside an M transaction destroys the Isolation of
^HELP("s","COMMANDS","s","BREAK",10)
   that transaction. Because of the way that YottaDB implements transaction
^HELP("s","COMMANDS","s","BREAK",11)
   processing, a BREAK within a transaction may cause the transaction to
^HELP("s","COMMANDS","s","BREAK",12)
   suffer an indefinite number of restarts ("live lock").
^HELP("s","COMMANDS","s","BREAK",13)

^HELP("s","COMMANDS","s","BREAK",14)
   ZCONTINUE resumes execution of the interrupted program.
^HELP("s","COMMANDS","s","BREAK",15)

^HELP("s","COMMANDS","s","BREAK",16)
     o The body of a program
^HELP("s","COMMANDS","s","BREAK",17)
     o A ZBREAK action
^HELP("s","COMMANDS","s","BREAK",18)
     o A device EXCEPTION
^HELP("s","COMMANDS","s","BREAK",19)
     o A ZSTEP action
^HELP("s","COMMANDS","s","BREAK",20)

^HELP("s","COMMANDS","s","BREAK",21)
   The VIEW "BREAKMSG" mask selectively enables or disables these messages.
^HELP("s","COMMANDS","s","BREAK",22)
   By default, a process executing a YottaDB image displays all BREAK messages.
^HELP("s","COMMANDS","s","BREAK",23)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",5)
   LOOP0     F  S act=$O(^act(act)) Q:act=""  B:debug  D LOOP1
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",7)
   This FOR loop contains a BREAK with a command postconditional.
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",9)
   Example:
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",11)
   YDB>ZPRINT ^br
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",12)
   br;
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",13)
         kill
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",14)
         for i=1:1:3 do break;
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",15)
         quit
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",16)
   break;
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",17)
         write "Iteration ",i,?15,"x=",$get(x,"<UNDEF>"),!
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",18)
         break:$data(x) "write ""OK"",!":x,"write ""Wrong again"",!":'x
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",19)
         set x=$increment(x,$data(x))
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",20)
         quit
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",21)
   YDB>DO ^br
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",22)
   Iteration 1    x=<UNDEF>
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",23)
   Iteration 2    x=0
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",24)
   %YDB-I-BREAK, Break instruction encountered
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",25)
               At M source location break+2^br
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",26)
   YDB>ZCONTINUE
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",27)
   Wrong again
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",28)
   %YDB-I-BREAK, Break instruction encountered
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",29)
               At M source location break+2^br
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",30)
   YDB>ZCONTINUE
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",31)
   Iteration 3    x=1
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",32)
   OK
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",33)
   %YDB-I-BREAK, Break instruction encountered
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",34)
               At M source location break+2^br
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",35)
   YDB>ZCONTINUE
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",36)
   %YDB-I-BREAK, Break instruction encountered
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",37)
               At M source location break+2^br
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",38)
   YDB>ZCONTINUE
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",39)
   YDB>
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",40)

^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",41)
   This uses a BREAK with both command and argument postconditionals. The
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",42)
   actions display debugging messages.
^HELP("s","COMMANDS","s","BREAK","s","EXAMPLES",43)

^HELP("s","COMMANDS","s","CLOSE")
Close
^HELP("s","COMMANDS","s","CLOSE",1)
   Close
^HELP("s","COMMANDS","s","CLOSE",2)

^HELP("s","COMMANDS","s","CLOSE",3)
   The CLOSE command breaks the connection between a process and a device.
^HELP("s","COMMANDS","s","CLOSE",4)

^HELP("s","COMMANDS","s","CLOSE",5)
   The format of the CLOSE command is:
^HELP("s","COMMANDS","s","CLOSE",6)

^HELP("s","COMMANDS","s","CLOSE",7)
   C[LOSE][:tvexpr] expr[:(keyword[=expr][:...])][,...]
^HELP("s","COMMANDS","s","CLOSE",8)

^HELP("s","COMMANDS","s","DO")
Do
^HELP("s","COMMANDS","s","DO",1)
   Do
^HELP("s","COMMANDS","s","DO",2)

^HELP("s","COMMANDS","s","DO",3)
   The DO command makes an entry in the YottaDB invocation stack and transfers
^HELP("s","COMMANDS","s","DO",4)
   execution to the location specified by the entryref.
^HELP("s","COMMANDS","s","DO",5)

^HELP("s","COMMANDS","s","DO",6)
   The format of the DO command is:
^HELP("s","COMMANDS","s","DO",7)

^HELP("s","COMMANDS","s","DO",8)
   D[O][:tvexpr] [entryref[(expr|.lvn[,...])][:tvexpr][,...]]
^HELP("s","COMMANDS","s","DO",9)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",5)
   YDB>DO ^%RD
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",7)
   This example invokes the routine directory utility program (%RD) from
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",8)
   Direct Mode. The caret symbol (^) specifies that the DO command invokes
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",9)
   %RD as an external routine.
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",11)
   Example:
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",13)
   YDB>DO A(3)
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",15)
   This example invokes the subroutine at label A and passes the value 3 as a
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",16)
   parameter. The DO argument does not have a caret symbol (^), therefore, it
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",17)
   identifies A as a label in the current routine.
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",19)
   Example:
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",21)
   ReportA ; Label for ReportA
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",22)
           SET di="" OPEN outfile USE outfile
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",23)
           FOR  SET di=$ORDER(^div(di)) QUIT:di=""  DO PREP DO  DO POST
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",24)
           .SET de="",(nr,gr)=0
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",25)
           .WRITE "Division ",di,! F   S de=$ORDER(^de(di,de)) QUIT:de=""   DO
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",26)
           ..WRITE "Department ",de," Gross Rev: ",^grev(di,de),!
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",27)
           ..WRITE "Department ",de," Net Rev: ",^nrev(di,de),!
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",28)
           ..SET gr=gr+^grev(di,de),nr=nr+^nrev(di,de)
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",29)
           .W "Division Gross Rev: ",gr,!,"Division Net Rev: ",nr,!
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",30)
            DO PRINT^OUTPUT(outfile)
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",31)
            QUIT
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",32)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",33)
   Example:
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",34)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",35)
   YDB>zprint ^SQR
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",36)
   SQR(z);
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",37)
     set revert=0
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",38)
     if $view("undef") set revert=1 view "noundef"
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",39)
     if z="" write "Missing parameter.",!     view:revert "undef" quit
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",40)
     else  write z*z,! view:revert "undef" quit
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",41)
   YDB>do ^SQR(10)
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",42)
   100
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",43)
   YDB>do ^SQR
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",44)
   Missing parameter.
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",45)

^HELP("s","COMMANDS","s","DO","s","EXAMPLES",46)
   This examples demonstrates label invocations using DO with and without
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",47)
   parentheses.
^HELP("s","COMMANDS","s","DO","s","EXAMPLES",48)

^HELP("s","COMMANDS","s","ELSE")
Else
^HELP("s","COMMANDS","s","ELSE",1)
   Else
^HELP("s","COMMANDS","s","ELSE",2)

^HELP("s","COMMANDS","s","ELSE",3)
   ELSE executes the remainder of the line after the ELSE if $TEST is FALSE
^HELP("s","COMMANDS","s","ELSE",4)
   (0). YottaDB does not execute the rest of the line if $TEST is TRUE (1).
^HELP("s","COMMANDS","s","ELSE",5)

^HELP("s","COMMANDS","s","ELSE",6)
   The format of the ELSE command is:
^HELP("s","COMMANDS","s","ELSE",7)

^HELP("s","COMMANDS","s","ELSE",8)
   E[LSE]
^HELP("s","COMMANDS","s","ELSE",9)

^HELP("s","COMMANDS","s","ELSE",10)
   ELSE is analogous to IF '$TEST, except the latter statement switches $TEST
^HELP("s","COMMANDS","s","ELSE",11)
   to its complement and ELSE never alters $TEST.
^HELP("s","COMMANDS","s","ELSE",12)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",5)
   If x=+x Set x=x+y
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",6)
   Else  Write !,x
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",7)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",8)
   The IF command evaluates the conditional expression x=+x and sets $TEST.
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",9)
   If $TEST=1 (TRUE), YottaDB executes the commands following the IF. The ELSE
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",10)
   on the following line specifies an alternative action to take if the
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",11)
   expression is false.
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",13)
   Example:
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",15)
   If x=+x Do ^GOFISH
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",16)
   Else  Set x=x_"^"_y
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",18)
   The DO with an argument after the IF raises the possibility that the
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",19)
   routine ^GOFISH changes the value of $TEST, thus making it possible to
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",20)
   execute both the commands following the IF and the commands following the
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",21)
   ELSE.
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",23)
   Example:
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",24)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",25)
   Open dev::0 Else  Write !,"Device unavailable" QUIT
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",26)

^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",27)
   This ELSE depends on the result of the timeout on the OPEN command. If the
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",28)
   OPEN succeeds, it sets $TEST to one (1) and YottaDB skips the rest of the
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",29)
   line after the ELSE. If the OPEN fails, it sets $TEST to zero (0), and
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",30)
   YottaDB executes the remainder of the line after the ELSE.
^HELP("s","COMMANDS","s","ELSE","s","EXAMPLES",31)

^HELP("s","COMMANDS","s","FOR")
For
^HELP("s","COMMANDS","s","FOR",1)
   For
^HELP("s","COMMANDS","s","FOR",2)

^HELP("s","COMMANDS","s","FOR",3)
   The FOR command provides a looping mechanism in YottaDB. FOR does not
^HELP("s","COMMANDS","s","FOR",4)
   generate an additional level in the M standard stack model.
^HELP("s","COMMANDS","s","FOR",5)

^HELP("s","COMMANDS","s","FOR",6)
   The format of the FOR command is:
^HELP("s","COMMANDS","s","FOR",7)

^HELP("s","COMMANDS","s","FOR",8)
   F[OR][lvn=expr[:numexpr1[:numexpr2]][,...]]]
^HELP("s","COMMANDS","s","FOR",9)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",5)
   YDB>Kill i For i=1:1:5 Write !,i
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",6)
   1
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",7)
   2
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",8)
   3
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",9)
   4
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",10)
   5
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",11)
   YDB>Write i
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",12)
   5
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",13)
   YDB>
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",15)
   This FOR loop has a control variable, i, which has the value one (1) on
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",16)
   the first iteration, then the value two (2), and so on, until in the last
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",17)
   iteration i has the value five (5). The FOR terminates because
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",18)
   incrementing i would cause it to exceed the limit. Notice that i is not
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",19)
   incremented beyond the limit.
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",21)
   Example:
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",23)
   YDB>FOR x="hello",2,"goodbye" WRITE !,x
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",24)
   hello
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",25)
   2
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",26)
   goodbye
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",27)
   YDB>
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",28)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",29)
   This FOR loop uses the control variable x and a series of arguments that
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",30)
   have no increments or limits. Notice that the control variable may have a
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",31)
   string value.
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",32)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",33)
   Example:
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",34)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",35)
   YDB>For x="hello":1:-1 Write !,x
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",36)
   YDB>ZWRite x
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",37)
   x=0
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",38)
   YDB>
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",39)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",40)
   Because the argument has an increment, the FOR initializes the control
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",41)
   variable x to the numeric evaluation of "hello" (0). Then, YottaDB never
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",42)
   executes the remainder of the line because the increment is positive, and
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",43)
   the value of the control variable (0) initializes to greater than the
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",44)
   limiting value (-1).
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",45)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",46)
   Example:
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",47)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",48)
   YDB>For y=-1:-3:-6,y:4:y+10,"end" Write !,y
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",49)
   -1
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",50)
   -4
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",51)
   -4
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",52)
   0
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",53)
   4
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",54)
   end
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",55)
   YDB>
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",56)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",57)
   Example:
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",58)

^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",59)
   YDB>Set x="" For  Set x=$Order(ar(x)) Quit:x=""  Write !,x
^HELP("s","COMMANDS","s","FOR","s","EXAMPLES",60)

^HELP("s","COMMANDS","s","GOTO")
Goto
^HELP("s","COMMANDS","s","GOTO",1)
   Goto
^HELP("s","COMMANDS","s","GOTO",2)

^HELP("s","COMMANDS","s","GOTO",3)
   The GOTO command transfers execution to a location specified by its
^HELP("s","COMMANDS","s","GOTO",4)
   argument.
^HELP("s","COMMANDS","s","GOTO",5)

^HELP("s","COMMANDS","s","GOTO",6)
   The format of the GOTO command is:
^HELP("s","COMMANDS","s","GOTO",7)

^HELP("s","COMMANDS","s","GOTO",8)
   G[OTO][:tvexpr] entryref[:tvexpr][,...]
^HELP("s","COMMANDS","s","GOTO",9)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",5)
   YDB>GOTO TIME+4
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",7)
   This GOTO command transfers control from Direct Mode to the line that is
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",8)
   four (4) lines after the line labeled TIME (in the currently active
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",9)
   routine). Using an offset is typically a debugging technique and rarely
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",10)
   used in production code.
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",12)
   Example:
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",14)
   GOTO A:x<0,^A:x=0,A^B
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",15)

^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",16)
   This GOTO command transfers control to label A in the current routine, if
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",17)
   x is less than zero (0), to routine ^A if x is equal to zero (0), and
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",18)
   otherwise to label A in routine ^B. Once any of the transfers occurs, the
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",19)
   rest of the arguments have no effect.
^HELP("s","COMMANDS","s","GOTO","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","HALT")
Halt
^HELP("s","COMMANDS","s","HALT",1)
   Halt
^HELP("s","COMMANDS","s","HALT",2)

^HELP("s","COMMANDS","s","HALT",3)
   The HALT command stops the program execution and cause YottaDB to return
^HELP("s","COMMANDS","s","HALT",4)
   control to the operating system environment that invoked the YottaDB image.
^HELP("s","COMMANDS","s","HALT",5)

^HELP("s","COMMANDS","s","HALT",6)
   The format of the HALT command is:
^HELP("s","COMMANDS","s","HALT",7)

^HELP("s","COMMANDS","s","HALT",8)
   H[ALT][:tvexpr]
^HELP("s","COMMANDS","s","HALT",9)

^HELP("s","COMMANDS","s","HALT",10)
   Example:
^HELP("s","COMMANDS","s","HALT",11)

^HELP("s","COMMANDS","s","HALT",12)
   $ gtm
^HELP("s","COMMANDS","s","HALT",13)
   YDB>HALT
^HELP("s","COMMANDS","s","HALT",14)
   $
^HELP("s","COMMANDS","s","HALT",15)

^HELP("s","COMMANDS","s","HALT",16)
   Because we invoke this YottaDB image interactively, the HALT in Direct Mode
^HELP("s","COMMANDS","s","HALT",17)
   leaves the process at the shell prompt.
^HELP("s","COMMANDS","s","HALT",18)

^HELP("s","COMMANDS","s","HANG")
Hang
^HELP("s","COMMANDS","s","HANG",1)
   Hang
^HELP("s","COMMANDS","s","HANG",2)

^HELP("s","COMMANDS","s","HANG",3)
   The HANG command suspends YottaDB program execution for a period of time
^HELP("s","COMMANDS","s","HANG",4)
   specified by the command argument.
^HELP("s","COMMANDS","s","HANG",5)

^HELP("s","COMMANDS","s","HANG",6)
   The format of the HANG command is:
^HELP("s","COMMANDS","s","HANG",7)

^HELP("s","COMMANDS","s","HANG",8)
   H[ANG][:tvexpr] numexpr[,...]
^HELP("s","COMMANDS","s","HANG",9)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",5)
   For  Quit:$Data(^CTRL(1))  Hang 30
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",7)
   This FOR loop repeatedly tests for the existence of ^CTRL(1), and
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",8)
   terminates when that global variable exists. Otherwise the routine HANGs
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",9)
   for 30 seconds and tests again.
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",11)
   Example:
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",13)
   SET t=1 For  Quit:$Data(^CTRL(1))  Hang t If t<30 Set t=t+1
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",15)
   This is similar to the previous example, except that it uses an adaptive
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",16)
   time that lengthens from 1 second to a limit of 30 seconds if the routine
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",17)
   stays in the loop.
^HELP("s","COMMANDS","s","HANG","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","IF")
If
^HELP("s","COMMANDS","s","IF",1)
   If
^HELP("s","COMMANDS","s","IF",2)

^HELP("s","COMMANDS","s","IF",3)
   The IF command provides conditional execution of the remaining commands on
^HELP("s","COMMANDS","s","IF",4)
   the line. When IF has an argument, it updates $TEST with the truth value
^HELP("s","COMMANDS","s","IF",5)
   of its evaluated argument. YottaDB executes the remainder of a line after an
^HELP("s","COMMANDS","s","IF",6)
   IF statement when $TEST is 1 (TRUE). When $TEST is 0 (FALSE), YottaDB does
^HELP("s","COMMANDS","s","IF",7)
   not execute the rest of the line. When the IF argument evaluates to a
^HELP("s","COMMANDS","s","IF",8)
   literal FALSE (0), YottaDB discards the command and its arguments at compile
^HELP("s","COMMANDS","s","IF",9)
   time, which means it does not perform any validity checking on the
^HELP("s","COMMANDS","s","IF",10)
   remainder of the line.
^HELP("s","COMMANDS","s","IF",11)

^HELP("s","COMMANDS","s","IF",12)
   The format of the IF command is:
^HELP("s","COMMANDS","s","IF",13)

^HELP("s","COMMANDS","s","IF",14)
   I[F] [tvexpr[,...]]
^HELP("s","COMMANDS","s","IF",15)

^HELP("s","COMMANDS","s","IF",16)
   Example:
^HELP("s","COMMANDS","s","IF",17)

^HELP("s","COMMANDS","s","IF",18)
   IF A,B ...
^HELP("s","COMMANDS","s","IF",19)
   is equivalent to
^HELP("s","COMMANDS","s","IF",20)
   IF A IF B
^HELP("s","COMMANDS","s","IF",21)

^HELP("s","COMMANDS","s","IF",22)
   An IF with more than one argument behaves as if those arguments were
^HELP("s","COMMANDS","s","IF",23)
   logically "ANDed." However, execution of the line ceases with the
^HELP("s","COMMANDS","s","IF",24)
   evaluation of the first false argument. For IF argument expressions
^HELP("s","COMMANDS","s","IF",25)
   containing the "AND" operator (&), by default, execution still ceases with
^HELP("s","COMMANDS","s","IF",26)
   the evaluation of the first false argument, however any global references
^HELP("s","COMMANDS","s","IF",27)
   within the expression act in sequence to maintain the naked reference. The
^HELP("s","COMMANDS","s","IF",28)
   "FULL_BOOLEAN" and "SIDE_EFFECTS" compiler settings modify this behavior
^HELP("s","COMMANDS","s","IF",29)
   if you desire YottaDB to provide side effects it would otherwise bypass due
^HELP("s","COMMANDS","s","IF",30)
   to short-circuiting of Boolean expressions.
^HELP("s","COMMANDS","s","IF",31)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",5)
   IF x=+x!(x="") Do BAL
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",7)
   In this example, the DO executes if x contains a number or a null string.
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",9)
   Example:
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",11)
   Write !,?50,BAL If 'BAL Write "****"
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",12)
   IF  Set EMPTY(acct)=""
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",14)
   The IF in the first line changes the value of $TEST, determining the
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",15)
   execution of the code following the argumentless IF in the second line.
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",16)
   Such argumentless IFs may serve as a form of line continuation.
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",18)
   Example:
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",20)
   YDB>Set X=1,Y=1,Z=2 Kill UNDEF
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",21)
   YDB>If X=1,Y=1,Z=3,UNDEF=0 Write "HI"
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",22)
   YDB>
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",23)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",24)
   The IF command causes YottaDB to cease executing the line after it determines
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",25)
   Z is not equal to three (3). Therefore, YottaDB never evaluates the reference
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",26)
   to the undefined variable and never generates an error.
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",27)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",28)
   Example:
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",29)

^HELP("s","COMMANDS","s","IF","s","EXAMPLES",30)
   YDB>Set X=1 Kill UNDEF
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",31)
   YDB>If X=1!(UNDEF=3) Write "HI"
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",32)
   HI
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",33)
   YDB>
^HELP("s","COMMANDS","s","IF","s","EXAMPLES",34)

^HELP("s","COMMANDS","s","JOB")
Job
^HELP("s","COMMANDS","s","JOB",1)
   Job
^HELP("s","COMMANDS","s","JOB",2)

^HELP("s","COMMANDS","s","JOB",3)
   The JOB command initiates another YottaDB process that executes the named
^HELP("s","COMMANDS","s","JOB",4)
   routine.
^HELP("s","COMMANDS","s","JOB",5)

^HELP("s","COMMANDS","s","JOB",6)
   $ZJOB is set to the pid of the process created by the JOB command.
^HELP("s","COMMANDS","s","JOB",7)

^HELP("s","COMMANDS","s","JOB",8)
   The format of the JOB command is:
^HELP("s","COMMANDS","s","JOB",9)

^HELP("s","COMMANDS","s","JOB",10)
   J[OB][:tvexpr] entryref[(expr[,...])]
^HELP("s","COMMANDS","s","JOB",11)
   [:[(keyword[=value][:...])][:numexpr]][,...]
^HELP("s","COMMANDS","s","JOB",12)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",5)
   YDB>JOB ^TEST("V54001","")
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",7)
   This creates a job that starts doing the routine ^TEST (with 2 parameters)
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",8)
   in the current working directory.
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",9)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",10)
   Example:
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",12)
   JOB PRINTLABELS(TYPE,PRNTR,WAITIM)
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",14)
   This passes three values (TYPE, PRNTR, and WAITIM) to the new job, which
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",15)
   starts at the label PRINTLABELS of the current routine.
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",17)
   Example:
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",19)
   set jout="serverjob.mjo"
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",20)
   set jerr="serverjob.mje"
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",21)
   job @("check(a,b):(OUTPUT="""_jout_""":ERROR="""_jerr_""")")
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",23)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",24)
   This passes two values (a and b) to the new job, which starts at the label
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",25)
   check of the current routine. It also specifies that the stdout of the
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",26)
   jobbed process to be the file name stored in the local variable jout and
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",27)
   stderr to be the file name stored in the local variable jerr.
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",28)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",29)
   Example:
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",30)

^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",31)
   Refer to the sockexamplemulti31.m program in Using Socket Devices section
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",32)
   for more examples on the JOB command.
^HELP("s","COMMANDS","s","JOB","s","EXAMPLES",33)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS")
JOB_Processparameters
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS",1)
   JOB Processparameters
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS",3)
   The following sections describe the processparameters available for the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS",4)
   JOB command in YottaDB.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS",5)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","CMD[LINE]=""STRLIT""")
CMD[LINE]="strlit"
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","CMD[LINE]=""STRLIT""",1)
   CMD[LINE]="strlit"
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","CMD[LINE]=""STRLIT""",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","CMD[LINE]=""STRLIT""",3)
   The string literal specifies the $ZCMDLINE of the JOB'd process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","CMD[LINE]=""STRLIT""",4)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT")
DEF[AULT]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",1)
   DEF[AULT]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",3)
   The string literal specifies the default directory.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",4)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",5)
   The maximum directory length is 255 characters.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",6)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",7)
   If the JOB command does not specify a DEFAULT directory, YottaDB uses the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",8)
   current default directory of the parent process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","DEF[AULT]=STRLIT",9)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT")
ERR[OR]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",1)
   ERR[OR]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",3)
   strlit specifies the stderr of the JOBbed process. strlit can either be a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",4)
   file or a DETACHed socket (that is, a socket from the socket pool). To
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",5)
   pass a DETACHed socket as the stderr of the JOBbed process, specify strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",6)
   in the form of "SOCKET:<handle>" where <handle> is the socket handle. On
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",7)
   successful completion of the JOBbed process, the passed socket is closed
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",8)
   and is no longer available to the parent process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",9)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",10)
   The maximum string length is 255 characters.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",11)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",12)
   By default, JOB constructs the error file from the routinename using a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",13)
   file extension of .mje: the default directory of the process created by
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",14)
   the JOB command.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","ERR[OR]=STRLIT",15)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT")
GBL[DIR]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",1)
   GBL[DIR]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",3)
   The string literal specifies a value for the environment variable
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",4)
   ydb_gbldir.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",5)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",6)
   The maximum string length is 255 characters.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",7)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",8)
   By default, the job uses the same specification for ydb_gbldir as that
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",9)
   defined in $ZGBLDIR for the process using the JOB command.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","GBL[DIR]=STRLIT",10)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT")
IN[PUT]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",1)
   IN[PUT]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",3)
   strlit specifies the stdin of the JOBbed process. strlit can either be a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",4)
   file or a DETACHed socket (that is, a socket from the socket pool). To
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",5)
   pass a DETACHed socket as the stdin of the JOBbed process, specify strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",6)
   in the form of "SOCKET:<handle>" where <handle> is the socket handle. On
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",7)
   successful completion of the JOB command, the passed socket is closed and
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",8)
   is no longer available to the parent process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",9)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",10)
   **Note**
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",11)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",12)
   Specify a DETACHed socket in both INPUT and OUTPUT parameters to pass it
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",13)
   as the $PRINCIPAL of the JOBbed process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",14)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",15)
   The maximum string length is 255 characters.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",16)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",17)
   YottaDB does not supply a default file extension.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",18)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",19)
   By default, the job takes its input from the null device.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","IN[PUT]=STRLIT",20)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT")
OUT[PUT]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",1)
   OUT[PUT]=strlit
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",3)
   strlit specifies the stdout of the JOBbed process. strlit can either be a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",4)
   file or a DETACHed socket (that is, a socket from the socket pool). To
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",5)
   pass a DETACHed socket as the stdout of the job, specify strlit in the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",6)
   form of "SOCKET:<handle>" where <handle> is the socket handle. On
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",7)
   successful completion of the JOB command, the passed socket is closed and
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",8)
   is no longer available to the parent process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",9)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",10)
   **Note**
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",11)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",12)
   Specify a DETACHed socket in both INPUT and OUTPUT parameters to pass it
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",13)
   as the $PRINCIPAL of the JOBbed process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",14)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",15)
   The maximum string length is 255 characters.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",16)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",17)
   By default, JOB constructs the output file pathname from the routinename
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",18)
   using a file extension of .mjo and the current default directory of the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",19)
   process created by the JOB command.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","OUT[PUT]=STRLIT",20)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]")
PASS[CURLVN]
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",1)
   PASS[CURLVN]
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",3)
   With the PASSCURLVN jobparameter, the JOB'd process inherits the current
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",4)
   collation, local variables, aliases, and alias containers from the current
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",5)
   stack level of the parent process. Therefore, a ZWRITE in the JOB'd
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",6)
   process has the same output, except for any out of scope aliases, as a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",7)
   ZWRITE in the context of the JOB command. If the JOB command finds a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",8)
   ZWRITE representation of any lvn, consisting of its full name, its
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",9)
   subscripts, corresponding value, quotes and the equal-sign (=), exceeding
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",10)
   1MiB, it produces a JOBLVN2LONG error in the parent process, and a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",11)
   JOBLVNDETAIL error in the error output stream of the JOB'd process. If a
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",12)
   JOB command does not specify PASSCURLVN, the JOB'd process(es) inherits no
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",13)
   local variables from the parent, although it can receive values passed as
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",14)
   parameters to an actuallist entryref. While not an inexpensive command,
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",15)
   you can use the "exclusive" NEW command to control the context passed to
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",16)
   the JOB'd process; for example, adding "NEW (LOCALA,LOCALB)" before the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",17)
   JOB command would pass only LOCALA and LOCALB.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",18)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",19)
   If a parameter in the formal list of JOB'ed entryref shares the same name
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",20)
   with a local in the parent process, the parameter passing facility applies
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",21)
   the actuallist in the JOB command argument to the formallist at the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",22)
   invoked label superseding any local variable passed from the parent
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",23)
   process by the PASSCURLVN option.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","PASS[CURLVN]",24)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""")
STA[RTUP]="/path/to/shell/script"
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",1)
   STA[RTUP]="/path/to/shell/script"
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",2)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",3)
   Specifies the location of the shell script that executes before running
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",4)
   the named routine.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",5)

^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",6)
   The JOBbed process spawns a shell session to execute the shell script. If
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",7)
   the shell script fails, the JOB'd process terminates without running the
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",8)
   named routine. Because STARTUP executes in a separate shell, it has no
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",9)
   impact on the environment of the JOB'd process, which is inherited from
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",10)
   the parent. STARTUP is useful for actions such as creating directories.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",11)
   Use PIPE devices instead of the JOB command to control the environment of
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",12)
   a spawned process.
^HELP("s","COMMANDS","s","JOB","s","JOB_PROCESSPARAMETERS","s","STA[RTUP]=""/PATH/TO/SHELL/SCRIPT""",13)

^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT")
The_JOB_Environment
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",1)
   The JOB Environment
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",2)

^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",3)
   When the JOB is forked, UNIX creates the environment for the new process
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",4)
   by copying the environment of the process issuing the JOB command and
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",5)
   making a few minor modifications. By default, the standard input is
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",6)
   assigned to the null device, the standard output is assigned to
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",7)
   routinename.mjo, and the standard error is assigned to routinename.mje.
^HELP("s","COMMANDS","s","JOB","s","THE_JOB_ENVIRONMENT",8)

^HELP("s","COMMANDS","s","KILL")
Kill
^HELP("s","COMMANDS","s","KILL",1)
   Kill
^HELP("s","COMMANDS","s","KILL",2)

^HELP("s","COMMANDS","s","KILL",3)
   The KILL command deletes local or global variables and their descendant
^HELP("s","COMMANDS","s","KILL",4)
   nodes.
^HELP("s","COMMANDS","s","KILL",5)

^HELP("s","COMMANDS","s","KILL",6)
   The format of the KILL command is:
^HELP("s","COMMANDS","s","KILL",7)

^HELP("s","COMMANDS","s","KILL",8)
   K[ILL][:tvexpr] [glvn | (glvn[,...]) | *lname | *lvn ]
^HELP("s","COMMANDS","s","KILL",9)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",5)
   YDB>Kill  Set a=0,a(1)=1,a(1,1)="under" KILL a(1) ZWR
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",6)
   a=0
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",7)
   YDB>
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",9)
   This uses an argumentless KILL to get a "fresh start" by deleting all
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",10)
   existing local variables. After SETting a, a(1), and a(1,1), the KILL
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",11)
   deletes a(1) and its descendants. The ZWRITE shows only a remaining.
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",13)
   Example:
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",15)
   YDB>Kill (a,b),^AB(a,b)
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",17)
   The first argument (an exclusive KILL) specifies to KILL all local
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",18)
   variables except a and b. The second argument deletes ^AB(a,b) and any
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",19)
   descendants of that global variable node.
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",21)
   Example:
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",23)
       kill *
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",24)
       write !,"ydb_stdxkill=",+$ztrnlnm("ydb_stdxkill"),!
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",25)
       set (A,B,C,E)="input"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",26)
       do X(.A,.B)
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",27)
       zwrite
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",28)
       write !,"____________",!
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",29)
       set (A,B,C,E)="input"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",30)
       do Y(.A,.B)
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",31)
       zwrite
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",32)
       write !,"____________",!
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",33)
       set (A,B,C,E)="base"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",34)
       set *C=A,*D=B
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",35)
       kill (C,D)
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",36)
       zwrite
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",37)
       quit
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",38)
   X(C,D)    set (C,D)="output"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",39)
       kill (C,D)
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",40)
       quit
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",41)
   Y(C,D)    set (C,D)="output"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",42)
       kill (A,C,D)
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",43)
       quit
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",44)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",45)
   Produces the following output:
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",46)

^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",47)
   ydb_stdxkill=0
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",48)
   A="output"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",49)
   B="output"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",50)
   C="input"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",51)
   ____________
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",52)
   A="output"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",53)
   B="output"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",54)
   C="input"
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",55)
   ____________
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",56)
   A="base" ;*
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",57)
   B="base" ;*
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",58)
   *C=A
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",59)
   *D=B
^HELP("s","COMMANDS","s","KILL","s","EXAMPLES",60)

^HELP("s","COMMANDS","s","LOCK")
Lock
^HELP("s","COMMANDS","s","LOCK",1)
   Lock
^HELP("s","COMMANDS","s","LOCK",2)

^HELP("s","COMMANDS","s","LOCK",3)
   The LOCK command reserves and releases resource names, and provides a
^HELP("s","COMMANDS","s","LOCK",4)
   semaphore capability for YottaDB processes. This capability can be used for
^HELP("s","COMMANDS","s","LOCK",5)
   interprocess synchronization and signaling.
^HELP("s","COMMANDS","s","LOCK",6)

^HELP("s","COMMANDS","s","LOCK",7)
   Assigning a LOCK does not specify any explicit control over variables and
^HELP("s","COMMANDS","s","LOCK",8)
   does not directly effect either read or write access to global (or local)
^HELP("s","COMMANDS","s","LOCK",9)
   data. However, an application that adheres to clearly defined conventions
^HELP("s","COMMANDS","s","LOCK",10)
   of LOCKing before any access can indirectly achieve such an effect.
^HELP("s","COMMANDS","s","LOCK",11)

^HELP("s","COMMANDS","s","LOCK",12)
   YottaDB recommends implementing database Consistency using transaction
^HELP("s","COMMANDS","s","LOCK",13)
   processing rather than LOCKs. If you wish to avoid YottaDB's use of
^HELP("s","COMMANDS","s","LOCK",14)
   optimistic concurrency for TP, place the LOCK just before the original
^HELP("s","COMMANDS","s","LOCK",15)
   TSTART and release it after the final TCOMMIT.
^HELP("s","COMMANDS","s","LOCK",16)

^HELP("s","COMMANDS","s","LOCK",17)
   The format of the LOCK command is:
^HELP("s","COMMANDS","s","LOCK",18)

^HELP("s","COMMANDS","s","LOCK",19)
   L[OCK][:tvexpr] [[-|+]nref|(nref[,...])[:numexpr] [,...]]
^HELP("s","COMMANDS","s","LOCK",20)

^HELP("s","COMMANDS","s","LOCK",21)
   Currently, LOCK of an argument within a parenthetical list where the
^HELP("s","COMMANDS","s","LOCK",22)
   argument includes an extrinsic function that performs LOCK, ZALLOCATE or
^HELP("s","COMMANDS","s","LOCK",23)
   ZDEALLOCATE actions produces a BADLOCKNEST error except where there is
^HELP("s","COMMANDS","s","LOCK",24)
   only one such argument, it is the first argument in the list and the
^HELP("s","COMMANDS","s","LOCK",25)
   LOCK'ng as a consequence of the extrinsic function(s) is simple. Note that
^HELP("s","COMMANDS","s","LOCK",26)
   this pattern may still produce some unintended outcomes, so YottaDB recommends
^HELP("s","COMMANDS","s","LOCK",27)
   against its use.
^HELP("s","COMMANDS","s","LOCK",28)

^HELP("s","COMMANDS","s","MERGE")
Merge
^HELP("s","COMMANDS","s","MERGE",1)
   Merge
^HELP("s","COMMANDS","s","MERGE",2)

^HELP("s","COMMANDS","s","MERGE",3)
   The MERGE command copies a variable and all its descendants into another
^HELP("s","COMMANDS","s","MERGE",4)
   variable. MERGE does not delete the destination variable, nor any of its
^HELP("s","COMMANDS","s","MERGE",5)
   descendants.
^HELP("s","COMMANDS","s","MERGE",6)

^HELP("s","COMMANDS","s","MERGE",7)
   The format of MERGE command is:
^HELP("s","COMMANDS","s","MERGE",8)

^HELP("s","COMMANDS","s","MERGE",9)
   M[ERGE][:tvexpr] glvn1=glvn2[,...]
^HELP("s","COMMANDS","s","MERGE",10)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",5)
   YDB>Set ^gbl1="one"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",7)
   YDB>Set ^gbl1(1,1)="oneone"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",8)
   YDB>Set ^gbl1(1,1,3)="oneonethree"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",9)
   YDB>Set ^gbl1(1,2,4)="onetwofour"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",10)
   YDB>Set ^gbl2(2)="gbl2_2"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",11)
   YDB>Set ^gbl2(2,1,3)="gbl2_2_1_3"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",12)
   YDB>Set ^gbl2(2,1,4,5)="gbl2_2_1_4_5"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",13)
   YDB>Merge ^gbl1(1)=^gbl2(2)
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",14)
   YDB>WRITE $Reference
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",15)
   ^gbl1(1)
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",16)
   YDB>ZWRite ^gbl1
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",17)
   ^gbl1="one"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",18)
   ^gbl1(1)="gbl2_2"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",19)
   ^gbl1(1,1)="oneone"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",20)
   ^gbl1(1,1,3)="gbl2_2_1_3"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",21)
   ^gbl1(1,1,4,5)="gbl2_2_1_4_5"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",22)
   ^gbl1(1,2,4)="onetwofour"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",23)
   YDB>ZWRITE ^gbl2
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",24)
   ^gbl2(2)="gbl2_2"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",25)
   ^gbl2(2,1,3)="gbl2_2_1_3"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",26)
   ^gbl2(2,1,4,5)="gbl2_2_1_4_5"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",27)
   YDB>
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",28)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",29)
   This example illustrates how MERGE copies a sub-tree of one global into
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",30)
   another. The nodes in the sub-tree of ^gbl(2), for which $DATA() value is
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",31)
   1 or 11, are copied to sub-tree of ^gbl1(1) as follows:
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",32)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",33)
   ^gbl1(1) is updated from the value of ^gbl2(2)
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",34)
   ^gbl1(1,1,3) is updated from the value of ^gbl2(2,1,3)
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",35)
   ^gbl1(1,1,4,5) is updated from the value of ^gbl2(2,1,4,5)
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",36)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",37)
   Since ^gbl1(2,1) and ^gbl2(2,2,4) do not have values ($DATA()=0), the
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",38)
   corresponding nodes ^gbl1(1,1) and ^gbl(1,2,4) respectively are left
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",39)
   unchanged. The naked indicator takes the value ^gbl(1) as if SET replaced
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",40)
   MERGE. Notice that the MERGE command does not change ^gbl2(2) or its
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",41)
   descendants. Ancestor nodes of ^gbl(1) are also left unchanged.
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",42)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",43)
   Example:
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",44)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",45)
   YDB>Kill
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",46)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",47)
   YDB>Set ^gbl(1,2)="1,2"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",48)
   YDB>Merge lcl(3,4)=^gbl(1)
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",49)
   YDB>Set ^("naked")=2
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",50)
   YDB>ZWRite ^gbl
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",51)
   ^gbl(1,2)="1,2"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",52)
   ^gbl("naked")=2
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",53)
   YDB>ZWRite lcl
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",54)
   lcl(3,4,2)="1,2"
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",55)
   YDB>
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",56)

^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",57)
   This example illustrates how MERGE creates a sub-tree of a variable when
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",58)
   the variable does not exist. Also, notice how the naked indicator is set
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",59)
   when the source of the MERGE is a global and the destination a local.
^HELP("s","COMMANDS","s","MERGE","s","EXAMPLES",60)

^HELP("s","COMMANDS","s","NEW")
New
^HELP("s","COMMANDS","s","NEW",1)
   New
^HELP("s","COMMANDS","s","NEW",2)

^HELP("s","COMMANDS","s","NEW",3)
   The NEW command "stacks" copies of local variables and reinitializes those
^HELP("s","COMMANDS","s","NEW",4)
   variables. An explicit or implicit QUIT from a DO, XECUTE or extrinsic
^HELP("s","COMMANDS","s","NEW",5)
   function "unstacks" the NEWed variables, that is, restores the variable to
^HELP("s","COMMANDS","s","NEW",6)
   the stacked value. A NEW lasts only while the current scope of execution
^HELP("s","COMMANDS","s","NEW",7)
   is active.
^HELP("s","COMMANDS","s","NEW",8)

^HELP("s","COMMANDS","s","NEW",9)
   The format of the NEW command is:
^HELP("s","COMMANDS","s","NEW",10)

^HELP("s","COMMANDS","s","NEW",11)
   N[EW][:tvexpr] [[(]lvn[,...][)][,...]]
^HELP("s","COMMANDS","s","NEW",12)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",5)
   NEW1;
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",6)
     Set A(1)=1,B=4,C=5
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",7)
     Write !,"VARIABLES BEFORE NEW:",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",8)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",9)
     Do LABEL
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",10)
     Write !,"VARIABLES AFTER RETURN:",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",11)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",12)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",13)
   LABEL
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",14)
     New A Set C=7
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",15)
     Write !,"VARIABLES AFTER NEW:",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",16)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",17)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",19)
   Produces the results:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",21)
   VARIABLES BEFORE NEW:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",22)
   A(1)=1
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",23)
   B=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",24)
   C=5
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",25)
   VARIABLES AFTER NEW:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",26)
   B=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",27)
   C=7
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",28)
   VARIABLES AFTER RETURN:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",29)
   A(1)=1
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",30)
   B=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",31)
   C=7
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",32)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",33)
   Example:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",34)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",35)
   NEW2;
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",36)
     Set (A,B,C,D)="TEST"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",37)
     Do LABEL
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",38)
     Write !,"VARIABLES AFTER RETURN:",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",39)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",40)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",41)
   LABEL
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",42)
     New (B,C) SET (A,B,Z)="NEW"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",43)
     Write !,"VARIABLES AFTER EXCLUSIVE NEW:",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",44)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",45)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",46)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",47)
   Produces the results:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",48)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",49)
   VARIABLES AFTER EXCLUSIVE NEW:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",50)
   A="NEW"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",51)
   B="NEW"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",52)
   C="TEST"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",53)
   Z="NEW"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",54)
   VARIABLES AFTER RETURN:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",55)
   A="TEST"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",56)
   B="NEW"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",57)
   C="TEST"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",58)
   D="TEST"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",59)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",60)
   Example:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",61)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",62)
   /usr/local/lib/yottadb/r130/ydb -run ^stackalias
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",63)
   stackalias ; Demonstrate New with alias
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",64)
     ZPrint ; Print this program
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",65)
     Set A=1,*B=A,*C(2)=A ; Create some aliases
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",66)
     Write "------------",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",67)
     Write "ZWRite in the caller before subprogram",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",68)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",69)
     Do S1 ; Call a subprogram
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",70)
     Write "------------",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",71)
     Write "ZWRite in the caller after subprogram - A association is restored",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",72)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",73)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",74)
    ;
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",75)
   S1  ; Subprogram
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",76)
     New A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",77)
     Set A="I am not an alias",B="I am an alias"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",78)
     Write "------------",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",79)
     Write "ZWRite in the subprogram with new A and modified B",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",80)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",81)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",82)
   ------------
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",83)
   ZWRite in the caller before subprogram
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",84)
   A=1 ;*
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",85)
   *B=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",86)
   C=3
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",87)
   *C(2)=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",88)
   D=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",89)
   ------------
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",90)
   ZWRite in the subprogram with new A and modified B
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",91)
   A="I am not an alias"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",92)
   B="I am an alias" ;*
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",93)
   C=3
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",94)
   *C(2)=B
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",95)
   D=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",96)
   ------------
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",97)
   ZWRite in the caller after subprogram - A association is restored
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",98)
   A="I am an alias" ;*
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",99)
   *B=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",100)
   C=3
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",101)
   *C(2)=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",102)
   D=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",103)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",104)
   The following is essentially the same as the prior example but using an
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",105)
   exclusive NEW:
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",106)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",107)
   $ /usr/local/lib/yottadb/r130/ydb -run ^stackalias1
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",108)
   stackalias1 ; Demonstrate New with alias
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",109)
     ZPrint ; Print this program
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",110)
     Set A=1,*B=A,*C(2)=A ; Create some aliases
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",111)
     Write "------------",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",112)
     Write "ZWRite in the caller before subprogram",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",113)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",114)
     Do S1 ; Call a subprogram
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",115)
     Write "------------",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",116)
     Write "ZWRite in the caller after subprogram - A association is restored",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",117)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",118)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",119)
    ;
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",120)
   S1  ; Subprogram
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",121)
     New (B)
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",122)
     Set A="I am not an alias",B="I am an alias"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",123)
     Write "------------",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",124)
     Write "ZWRite in the subprogram - Notice B is flagged as an alias",!
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",125)
     ZWRite
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",126)
     Quit
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",127)
   ------------
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",128)
   ZWRite in the caller before subprogram
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",129)
   A=1 ;*
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",130)
   *B=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",131)
   C=3
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",132)
   *C(2)=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",133)
   D=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",134)
   ------------
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",135)
   ZWRite in the subprogram - Notice B is flagged as an alias
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",136)
   A="I am not an alias"
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",137)
   B="I am an alias" ;*
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",138)
   ------------
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",139)
   ZWRite in the caller after subprogram - A association is restored
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",140)
   A="I am an alias" ;*
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",141)
   *B=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",142)
   C=3
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",143)
   *C(2)=A
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",144)
   D=4
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",145)

^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",146)
   An exclusive New can create a scope in which only one association between
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",147)
   a name or an lvn and an array may be visible. In this case, ZWRITE
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",148)
   nevertheless shows the existence of an alias, even when that array is
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",149)
   accessible from only one name or lvn.
^HELP("s","COMMANDS","s","NEW","s","EXAMPLES",150)

^HELP("s","COMMANDS","s","OPEN")
Open
^HELP("s","COMMANDS","s","OPEN",1)
   Open
^HELP("s","COMMANDS","s","OPEN",2)

^HELP("s","COMMANDS","s","OPEN",3)
   The OPEN command creates a connection between a YottaDB process and a device.
^HELP("s","COMMANDS","s","OPEN",4)

^HELP("s","COMMANDS","s","OPEN",5)
   The format of the OPEN command is:
^HELP("s","COMMANDS","s","OPEN",6)

^HELP("s","COMMANDS","s","OPEN",7)
   O[PEN][:tvexpr] expr[:[(keyword[=expr][:...])] [:numexpr]][,...]
^HELP("s","COMMANDS","s","OPEN",8)

^HELP("s","COMMANDS","s","QUIT")
Quit
^HELP("s","COMMANDS","s","QUIT",1)
   Quit
^HELP("s","COMMANDS","s","QUIT",2)

^HELP("s","COMMANDS","s","QUIT",3)
   Except when a QUIT appears on a line after a FOR, the QUIT command
^HELP("s","COMMANDS","s","QUIT",4)
   terminates execution of the current YottaDB invocation stack level initiated
^HELP("s","COMMANDS","s","QUIT",5)
   by a DO, XECUTE, extrinsic function or special variable, and return
^HELP("s","COMMANDS","s","QUIT",6)
   control to the next "lower" level. In this case, QUIT restores any values
^HELP("s","COMMANDS","s","QUIT",7)
   stacked at the current level by NEWs or by parameter passing. A QUIT
^HELP("s","COMMANDS","s","QUIT",8)
   command terminates any closest FOR command on the same line. Note that M
^HELP("s","COMMANDS","s","QUIT",9)
   overloads the QUIT command to terminate DO, FOR, XECUTE and extrinsics
^HELP("s","COMMANDS","s","QUIT",10)
   ($$) of which FOR is the most different.
^HELP("s","COMMANDS","s","QUIT",11)

^HELP("s","COMMANDS","s","QUIT",12)
   The format of the QUIT command is:
^HELP("s","COMMANDS","s","QUIT",13)

^HELP("s","COMMANDS","s","QUIT",14)
   Q[UIT][:tvexpr] [expr | *lname | *lvn]
^HELP("s","COMMANDS","s","QUIT",15)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",5)
        Do A
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",6)
        Quit
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",7)
   A    Write !,"This is label A"
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",9)
   The explicit QUIT at the line preceding the label A prevents line A from
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",10)
   executing twice. The sub-routine at line A terminates with the implicit
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",11)
   QUIT at the end of the routine.
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",13)
   Example:
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",15)
          Write $$ESV
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",16)
           Quit
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",17)
   ESV()
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",18)
           QUIT "value of this Extrinsic Special Variable"
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",20)
   Because the label ESV has an argument list (which is empty), YottaDB can only
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",21)
   legally reach that label with an extrinsic invocation. The QUIT on the
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",22)
   second line prevents execution from erroneously "falling through" to the
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",23)
   line labeled ESV. Because ESV identifies a subroutine that implements an
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",24)
   extrinsic special variable, the QUIT on the line after ESV has an argument
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",25)
   to provide the value of the extrinsic.
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",26)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",27)
   Example:
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",28)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",29)
   Set x="" For  Set x=$Order(^BAL(x)) Quit:x]]"AR5999"!'$Length(x)  DO STF
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",30)

^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",31)
   The postconditional QUIT terminates the FOR loop. Note the two spaces
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",32)
   after the QUIT because it has no argument.
^HELP("s","COMMANDS","s","QUIT","s","EXAMPLES",33)

^HELP("s","COMMANDS","s","READ")
Read
^HELP("s","COMMANDS","s","READ",1)
   Read
^HELP("s","COMMANDS","s","READ",2)

^HELP("s","COMMANDS","s","READ",3)
   The READ command transfers the input from the current device to a global
^HELP("s","COMMANDS","s","READ",4)
   or local variable specified as a READ argument. For convenience, READ also
^HELP("s","COMMANDS","s","READ",5)
   accepts arguments that perform limited output to the current device.
^HELP("s","COMMANDS","s","READ",6)

^HELP("s","COMMANDS","s","READ",7)
   The format of the READ command is:
^HELP("s","COMMANDS","s","READ",8)

^HELP("s","COMMANDS","s","READ",9)
   R[EAD][:tvexpr] (glvn|*glvn|glvn#intexpr)[:numexpr]|strlit|fcc[,...]
^HELP("s","COMMANDS","s","READ",10)

^HELP("s","COMMANDS","s","SET")
Set
^HELP("s","COMMANDS","s","SET",1)
   Set
^HELP("s","COMMANDS","s","SET",2)

^HELP("s","COMMANDS","s","SET",3)
   SET assigns values to variables or to a selected portion of a variable.
^HELP("s","COMMANDS","s","SET",4)

^HELP("s","COMMANDS","s","SET",5)
   The format of the SET command is:
^HELP("s","COMMANDS","s","SET",6)

^HELP("s","COMMANDS","s","SET",7)
   S[ET][:tvexpr] setleft=expr | (setleft[,...])=expr | *lvn=lname | aliascontainer[,...]
^HELP("s","COMMANDS","s","SET",8)

^HELP("s","COMMANDS","s","SET",9)
   where
^HELP("s","COMMANDS","s","SET",10)

^HELP("s","COMMANDS","s","SET",11)
   setleft == glvn | $EXTRACT(glvn,[,intexpr1[,intexpr2]]) | $PIECE(glvn,expr1[,intexpr1[,intexpr2]]) | isv
^HELP("s","COMMANDS","s","SET",12)

^HELP("s","COMMANDS","s","SET",13)
   and
^HELP("s","COMMANDS","s","SET",14)

^HELP("s","COMMANDS","s","SET",15)
   aliascontainer == lvn | exfunc | exvar
^HELP("s","COMMANDS","s","SET",16)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",5)
   YDB>Kill  Set a="x",(b,c)=1,@a="hello" ZWRite
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",6)
   a=x
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",7)
   b=1
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",8)
   c=1
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",9)
   x="hello"
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",10)
   YDB>
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",12)
   The KILL command deletes any previously defined local variables. The SET
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",13)
   command has three arguments. The first shows a simple direct assignment.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",14)
   The second shows the form that assigns the same value to multiple
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",15)
   variables. The third shows atomic indirection on the left of the equal
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",16)
   sign. The ZWRITE command displays the results of the assignments.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",18)
   Example:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",20)
   YDB>Set ^(3,4)=^X(1,2)
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",21)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",22)
   As YottaDB evaluates the right-hand side of the equal sign before the
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",23)
   left-hand side within a SET argument, the right-hand expression determines
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",24)
   the naked reference indicator prior to evaluation of the left-hand side.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",25)
   Therefore, this example assigns ^X(1,3,4) the value of ^X(1,2).
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",26)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",27)
   Example:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",28)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",29)
   YDB>Kill x Set $Piece(x,"^",2)="piece 3" ZWRite x
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",30)
   x="^^piece 3"
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",31)
   YDB>
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",32)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",33)
   This SET demonstrates a "set piece" and shows how SET generates missing
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",34)
   delimiters when required.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",35)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",36)
   Example:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",37)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",38)
   YDB>Set x="I love hotdogs"
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",39)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",40)
   YDB>Set $Extract(x,3,6)="want"
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",41)
   YDB>Write x
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",42)
   I want hotdogs
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",43)
   YDB>Set $Extract(x,7)=" many "
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",44)
   YDB>Write x
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",45)
   I want many hotdogs
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",46)
   YDB>
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",47)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",48)
   The SET $EXTRACT command replaces and extracts the specified characters
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",49)
   with the value of the expression on the right hand side of the equal-sign
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",50)
   (=).
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",51)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",52)
   Example:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",53)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",54)
   YDB>kill A,B
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",55)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",56)
   YDB>set A=1,A(1)=1,A(2)=2
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",57)
   YDB>set *B=A ; A & B are aliases.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",58)
   YDB>zwrite B
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",59)
   B=1 ;*
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",60)
   B(1)=1
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",61)
   B(2)=2
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",62)
   YDB>
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",63)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",64)
   This SET * command creates an alias associated between A and B. It
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",65)
   associates the entire tree of nodes of A including its root and all
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",66)
   descendants with B.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",67)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",68)
   Example:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",69)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",70)
   YDB>kill A,B,C
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",71)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",72)
   YDB>set A=1,*C(2)=A ; C(2) is a container
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",73)
   YDB>zwrite
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",74)
   A=1 ;*
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",75)
   *C(2)=A
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",76)
   YDB>set *B=C(2) ; B is now an alias
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",77)
   YDB>write B,":",$length(C(2)),":" ; An alias variable provides access but a container doesn't
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",78)
   1:0:
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",79)
   YDB>
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",80)

^HELP("s","COMMANDS","s","SET","s","EXAMPLES",81)
   This SET * command creates an alias by dereferencing an alias container.
^HELP("s","COMMANDS","s","SET","s","EXAMPLES",82)

^HELP("s","COMMANDS","s","TCOMMIT")
TCommit
^HELP("s","COMMANDS","s","TCOMMIT",1)
   TCommit
^HELP("s","COMMANDS","s","TCOMMIT",2)

^HELP("s","COMMANDS","s","TCOMMIT",3)
   The TCOMMIT command marks the end of a transaction or sub-transaction and
^HELP("s","COMMANDS","s","TCOMMIT",4)
   decrements $TLEVEL. If TCOMMIT marks the end of a transaction (decrements
^HELP("s","COMMANDS","s","TCOMMIT",5)
   $TLEVEL to zero), it invokes a COMMIT, which makes the database updates
^HELP("s","COMMANDS","s","TCOMMIT",6)
   performed by the transaction generally available. A TCOMMIT issued when no
^HELP("s","COMMANDS","s","TCOMMIT",7)
   transaction is in progress ($TLEVEL=0) produces an error.
^HELP("s","COMMANDS","s","TCOMMIT",8)

^HELP("s","COMMANDS","s","TCOMMIT",9)
   The format of the TCOMMIT command is:
^HELP("s","COMMANDS","s","TCOMMIT",10)

^HELP("s","COMMANDS","s","TCOMMIT",11)
   TC[OMMIT][:tvexpr]
^HELP("s","COMMANDS","s","TCOMMIT",12)

^HELP("s","COMMANDS","s","TCOMMIT",13)
   For an example of the use of the TCOMMIT command, refer to the chapter on
^HELP("s","COMMANDS","s","TCOMMIT",14)
   General Language Features of M in YottaDB Programmer's Guide.
^HELP("s","COMMANDS","s","TCOMMIT",15)

^HELP("s","COMMANDS","s","TRESTART")
TREstart
^HELP("s","COMMANDS","s","TRESTART",1)
   TREstart
^HELP("s","COMMANDS","s","TRESTART",2)

^HELP("s","COMMANDS","s","TRESTART",3)
   The TRESTART command attempts to RESTART the current transaction. A
^HELP("s","COMMANDS","s","TRESTART",4)
   RESTART transfers control back to the initial TSTART and restores much of
^HELP("s","COMMANDS","s","TRESTART",5)
   the process state to what it was when that TSTART was originally executed.
^HELP("s","COMMANDS","s","TRESTART",6)
   A TRESTART issued when no transaction is in progress ($TLEVEL=0) or when
^HELP("s","COMMANDS","s","TRESTART",7)
   the transaction does not have RESTART enabled produces an error.
^HELP("s","COMMANDS","s","TRESTART",8)

^HELP("s","COMMANDS","s","TRESTART",9)
   A TRESTART command causes the TP transaction to RESTART in the same way
^HELP("s","COMMANDS","s","TRESTART",10)
   that YottaDB uses to implicitly restart the transaction in case of resource
^HELP("s","COMMANDS","s","TRESTART",11)
   conflicts. All restarts increment the internal transaction retry count to
^HELP("s","COMMANDS","s","TRESTART",12)
   a maximum of three (3), at which point, YottaDB performs the entire TP
^HELP("s","COMMANDS","s","TRESTART",13)
   transaction within a critical section on all databases referenced in the
^HELP("s","COMMANDS","s","TRESTART",14)
   transaction.
^HELP("s","COMMANDS","s","TRESTART",15)

^HELP("s","COMMANDS","s","TRESTART",16)
   YottaDB issues a TRESTMAX runtime error when application code attempts a
^HELP("s","COMMANDS","s","TRESTART",17)
   TRESTART more than once during a transaction while $TRESTART=4 (note: in
^HELP("s","COMMANDS","s","TRESTART",18)
   order to be wholesome, TRESTART usage in application code should always be
^HELP("s","COMMANDS","s","TRESTART",19)
   conditional). In the final retry, YottaDB holds the critical section lock on
^HELP("s","COMMANDS","s","TRESTART",20)
   all databases involved in the transaction. Since a TRESTART cancels all
^HELP("s","COMMANDS","s","TRESTART",21)
   the work done in the current transaction and transfers control back to the
^HELP("s","COMMANDS","s","TRESTART",22)
   TSTART, limiting the number of times this can be done in the final retry
^HELP("s","COMMANDS","s","TRESTART",23)
   limits the time a process can (by virtue of holding a critical section
^HELP("s","COMMANDS","s","TRESTART",24)
   lock on the databases) prevent other processes from updating the database.
^HELP("s","COMMANDS","s","TRESTART",25)

^HELP("s","COMMANDS","s","TRESTART",26)
   YottaDB limits TP restarts in the final retry due to non-availability of
^HELP("s","COMMANDS","s","TRESTART",27)
   M-locks in a similar fashion. YottaDB allows a maximum of 16 such restarts
^HELP("s","COMMANDS","s","TRESTART",28)
   after which it issues a TPLOCKRESTMAX runtime error.
^HELP("s","COMMANDS","s","TRESTART",29)

^HELP("s","COMMANDS","s","TRESTART",30)
   The format for the TRESTART command is:
^HELP("s","COMMANDS","s","TRESTART",31)

^HELP("s","COMMANDS","s","TRESTART",32)
   TRE[START][:tvexpr]
^HELP("s","COMMANDS","s","TRESTART",33)

^HELP("s","COMMANDS","s","TRESTART",34)
   For an example of the use of the TRESTART command, refer to the chapter on
^HELP("s","COMMANDS","s","TRESTART",35)
   "General Language Features of M" in the YottaDB Programmer's Guide.
^HELP("s","COMMANDS","s","TRESTART",36)

^HELP("s","COMMANDS","s","TROLLBACK")
TROllback
^HELP("s","COMMANDS","s","TROLLBACK",1)
   TROllback
^HELP("s","COMMANDS","s","TROLLBACK",2)

^HELP("s","COMMANDS","s","TROLLBACK",3)
   The TROLLBACK command terminates a transaction by causing a ROLLBACK,
^HELP("s","COMMANDS","s","TROLLBACK",4)
   which removes all database updates performed within a transaction. A
^HELP("s","COMMANDS","s","TROLLBACK",5)
   TROLLBACK without an argument also sets $TLEVEL and $TRESTART to zero (0).
^HELP("s","COMMANDS","s","TROLLBACK",6)
   Issuing a TROLLBACK when no transaction is in progress ($TLEVEL=0)
^HELP("s","COMMANDS","s","TROLLBACK",7)
   produces an error.
^HELP("s","COMMANDS","s","TROLLBACK",8)

^HELP("s","COMMANDS","s","TROLLBACK",9)
   The format of the TROLLBACK command is:
^HELP("s","COMMANDS","s","TROLLBACK",10)

^HELP("s","COMMANDS","s","TROLLBACK",11)
   TRO[LLBACK][:tvexpr] [intexpr]
^HELP("s","COMMANDS","s","TROLLBACK",12)

^HELP("s","COMMANDS","s","TROLLBACK",13)
   For an example of the use of the TROLLBACK command, refer to the chapter
^HELP("s","COMMANDS","s","TROLLBACK",14)
   on "General Language Features of M" in the YottaDB Programmer's Guide.
^HELP("s","COMMANDS","s","TROLLBACK",15)

^HELP("s","COMMANDS","s","TSTART")
TStart
^HELP("s","COMMANDS","s","TSTART",1)
   TStart
^HELP("s","COMMANDS","s","TSTART",2)

^HELP("s","COMMANDS","s","TSTART",3)
   The TSTART command marks the beginning of a transaction or sub-transaction
^HELP("s","COMMANDS","s","TSTART",4)
   and increments $TLEVEL. When TSTART marks the beginning of a transaction
^HELP("s","COMMANDS","s","TSTART",5)
   ($TLEVEL=1), its arguments determine whether the transaction may RESTART
^HELP("s","COMMANDS","s","TSTART",6)
   and whether serializability is enforced. If a transaction may RESTART, the
^HELP("s","COMMANDS","s","TSTART",7)
   TSTART arguments determine which local variables are restored during a
^HELP("s","COMMANDS","s","TSTART",8)
   RESTART. Serializability is enforced by LOCK commands or, if the SERIAL
^HELP("s","COMMANDS","s","TSTART",9)
   keyword is specified, by YottaDB.
^HELP("s","COMMANDS","s","TSTART",10)

^HELP("s","COMMANDS","s","TSTART",11)
   The format of the TSTART command is:
^HELP("s","COMMANDS","s","TSTART",12)

^HELP("s","COMMANDS","s","TSTART",13)
   TS[TART][:tvexpr] [([lvn...])|lvn|*|][:keyword|(keyword...)]
^HELP("s","COMMANDS","s","TSTART",14)

^HELP("s","COMMANDS","s","TSTART",15)
   For an example of the TSTART command, refer to the chapter on "General
^HELP("s","COMMANDS","s","TSTART",16)
   Language Features of M" in the YottaDB Programmer's Guide.
^HELP("s","COMMANDS","s","TSTART",17)

^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]")
S[ERIAL]
^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",1)
   S[ERIAL]
^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",2)

^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",3)
   The SERIAL keyword indicates that YottaDB must ensure the serializability of
^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",4)
   the transaction. Note that YottaDB always serializes transactions regardless
^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",5)
   of the SERIAL keyword. On a nested TSTART, this portion of the argument is
^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",6)
   irrelevant.
^HELP("s","COMMANDS","s","TSTART","s","S[ERIAL]",7)

^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR")
T[RANSACTIONID]=expr
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",1)
   T[RANSACTIONID]=expr
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",2)

^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",3)
   The TRANSACTIONID keyword declares an arbitrary transaction
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",4)
   identification.
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",5)

^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",6)
   If TRANSACTIONID="BATCH" or "BA" at transaction completion, the process
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",7)
   immediately continues execution. When a process issues a [final] TCOMMIT
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",8)
   for a transaction and journaling is active, by default the process waits
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",9)
   until the entire transaction is written to the journal file(s) before
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",10)
   executing the next command. This ensures that every transaction is durable
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",11)
   before the process moves on to the next step. Transactions flagged as
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",12)
   "BATCH" have lower latency and higher throughput, but a lower guarantee of
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",13)
   durability. Normally this flag is used when operational procedures (such
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",14)
   as a backup) or application code (such as a checkpoint algorithm) provides
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",15)
   an acceptable alternative means of ensuring durability.
^HELP("s","COMMANDS","s","TSTART","s","T[RANSACTIONID]=EXPR",16)

^HELP("s","COMMANDS","s","USE")
Use
^HELP("s","COMMANDS","s","USE",1)
   Use
^HELP("s","COMMANDS","s","USE",2)

^HELP("s","COMMANDS","s","USE",3)
   The USE command selects the current device for READs (input) and WRITEs
^HELP("s","COMMANDS","s","USE",4)
   (output).
^HELP("s","COMMANDS","s","USE",5)

^HELP("s","COMMANDS","s","USE",6)
   The format of the USE command is:
^HELP("s","COMMANDS","s","USE",7)

^HELP("s","COMMANDS","s","USE",8)
   U[SE][:tvexpr] expr[:(keyword[=expr][:...])][,...]
^HELP("s","COMMANDS","s","USE",9)

^HELP("s","COMMANDS","s","VIEW")
View
^HELP("s","COMMANDS","s","VIEW",1)
   View
^HELP("s","COMMANDS","s","VIEW",2)

^HELP("s","COMMANDS","s","VIEW",3)
   The VIEW command adjusts an environmental factor selected by a keyword
^HELP("s","COMMANDS","s","VIEW",4)
   argument. For example, VIEW controls journal buffer flushing, determines
^HELP("s","COMMANDS","s","VIEW",5)
   whether YottaDB reports undefined variables as errors or treats them as null,
^HELP("s","COMMANDS","s","VIEW",6)
   and determines which BREAK commands should display messages.
^HELP("s","COMMANDS","s","VIEW",7)

^HELP("s","COMMANDS","s","VIEW",8)
   The format of the VIEW command is:
^HELP("s","COMMANDS","s","VIEW",9)

^HELP("s","COMMANDS","s","VIEW",10)
   V[IEW][:tvexpr] keyword[:expr2[:...]][,...]
^HELP("s","COMMANDS","s","VIEW",11)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",5)
   YDB>Kill A
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",7)
   YDB>View "NOUNDEF"
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",8)
   YDB>Write A,?10,$L(A)
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",9)
            0
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",10)
   YDB>
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",12)
   This demonstrates how a VIEW that specifies NOUNDEF prevents UNDEFined
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",13)
   errors.
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",15)
   Example 2:
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",17)
   YDB>ZLink "NOSENSE"
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",18)
   %YDB-E-LABELMISSING Label referenced but
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",19)
   not defined:lab
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",20)
   %YDB-I-SRCNAM in source module /home/gtmuser1/.yottadb/r130_x86_64/r/
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",21)
   NOSENSE.m
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",22)
   YDB>ZPrint ^NOSENSE
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",23)
   NOSENSE;
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",24)
           Do lab
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",25)
           Quit
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",26)
   LAB  Write !,"THIS IS NOSENSE"
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",27)
           Quit
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",28)
   YDB>View "LABELS":"UPPER"
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",29)
   YDB>ZLink "NOSENSE.m"
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",30)
   YDB>Do ^NOSENSE
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",31)
   THIS IS NOSENSE
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",32)
   YDB>
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",33)

^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",34)
   This demonstrates use of VIEW "LABELS" to make label handling case
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",35)
   insensitive. Notice that the routine was ZLINKed with an extension of .m
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",36)
   to force a recompile and ensure that the object code and the run-time
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",37)
   handling of labels is the same.
^HELP("s","COMMANDS","s","VIEW","s","EXAMPLES",38)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS")
Key_Words
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS",1)
   Key Words
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR")
BADCHAR
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",1)
   BADCHAR
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",3)
   Enables or disable the gneration of an error when character-oriented
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",4)
   functions encounter malformed byte sequences (illegal characters).
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",6)
   At process startup, YottaDB initializes BADCHAR from the environment variable
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",7)
   ydb_badchar. Set the environment variable $ydb_badchar to a non-zero
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",8)
   number or "YES" (or "Y") to enable VIEW "BADCHAR". Set the environment
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",9)
   variable $ydb_badchar to 0 or "NO" or "FALSE" (or "N" or "F") to enable
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",10)
   VIEW "NOBADCHAR". By default, YottaDB enables VIEW "BADCHAR".
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",11)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",12)
   With VIEW "BADCHAR", YottaDB functions generate the BADCHAR error when they
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",13)
   encounter malformed byte sequences. With this setting, YottaDB detects and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",14)
   clearly reports potential application program logic errors as soon as they
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",15)
   appear. As an illegal UTF-8 character in the argument of a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",16)
   character-oriented function likely indicates a logic issue, YottaDB recommends
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",17)
   using VIEW "BADCHAR" in production environments.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",18)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",19)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",20)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",21)
   When all strings consist of well-formed characters, the value of VIEW
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",22)
   [NO]BADCHAR has no effect whatsoever. With VIEW "NOBADCHAR", the same
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",23)
   functions treat malformed byte sequences as valid characters. During the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",24)
   migration of an application to add support for the UTF-8 mode, illegal
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",25)
   character errors are likely to be frequent and indicative of application
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",26)
   code that is yet to be modified. VIEW "NOBADCHAR" suppresses these errors
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",27)
   at times when their presence impedes development.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BADCHAR",28)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG")
BREAKMSG
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",1)
   BREAKMSG
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",3)
   "BREAKMSG":value
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",5)
   Sets the value of the BREAK message mask. When YottaDB processes a BREAK
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",6)
   command, the BREAK message mask controls whether to display a message
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",7)
   describing the source of the BREAK.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",8)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",9)
   The mask uses the following four values that are added together to provide
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",10)
   the BREAKMSG value.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",11)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",12)
   1 - BREAKs within the body of a program
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",13)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",14)
   2 - BREAKs within a ZBREAK action
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",15)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",16)
   4 - BREAKs within a device EXCEPTION
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",17)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",18)
   8 - BREAKs within a ZSTEP action
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",19)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",20)
   16 - ZBREAKs within a trigger removed due to updated trigger
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",21)
   (TRIGZBREAKREM)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",22)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",23)
   The default BREAKMSG mask is 31 (1+2+4+8+16) which means that YottaDB
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",24)
   displays all BREAK messages.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",25)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",26)
   Example:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",27)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",28)
   YDB>VIEW "BREAKMSG":5
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",29)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",30)
   In this example the BREAKMSG value is 5, representing the sum of 1 and 4.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",31)
   This enables BREAKS within the body of a program (value 1) and for a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",32)
   device EXCEPTION (value 4).
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","BREAKMSG",33)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH")
DBFLUSH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",1)
   DBFLUSH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",3)
   DBFLUSH[:<region_list>[:N]]
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",5)
   When using the BG access method, writes modified blocks in the global
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",6)
   buffers to the database file. By default, this command option operates on
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",7)
   all regions under the current global directory. N specifies the number of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",8)
   blocks to write; by default, DBFLUSH writes all modified blocks. Normally
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",9)
   YottaDB schedules block flushing at appropriate times, but this option exists
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",10)
   for an application to explore the impact of flushing on their work load.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",11)
   See also the DBSYNC and EPOCH VIEW Options.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBFLUSH",12)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC")
DBSYNC
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",1)
   DBSYNC
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",3)
   "DBSYNC":<region_list>
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",5)
   Performs a file system hardening sync - fsync() - operation on the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",6)
   database file. By default, this command option operates on all regions
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",7)
   under the current global directory. Normally YottaDB schedules block flushing
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",8)
   at appropriate times, but this option exists for an application to explore
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",9)
   the impact of file hardening on their work load. See also the DBFLUSH and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",10)
   EPOCH VIEW Options.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DBSYNC",11)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM")
DMTERM
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",1)
   DMTERM
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",3)
   Provides a mechanism to retain default line terminators for direct mode
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",4)
   user interaction (including the BREAK command) independent of any
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",5)
   TERMINATOR deviceparameter changes for $PRINCIPAL. With VIEW "NODMTERM",
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",6)
   TERMINATOR deviceparameter apply to both READs from $PRINCIPAL and direct
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",7)
   mode interactions. A case-insensitive value of the environment variable
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",8)
   ydb_dmterm is "1", "yes", or "true" establishes a DMTERM state at process
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",9)
   initiation; all other values, including no value, result in the default
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",10)
   VIEW "NODMTERM" behavior. $VIEW("DMTERM") returns 1 for DMTERM mode or 0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",11)
   for NODMTERM mode.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","DMTERM",12)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH")
EPOCH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",1)
   EPOCH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",3)
   "EPOCH"[:<region_list>]
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",5)
   Flushes the database buffers and, if journaling is enabled, writes an
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",6)
   EPOCH record. By default, this command option operates on all regions
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",7)
   under the current global directory. Normally YottaDB schedules epochs as a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",8)
   user controlled journaling characteristic, but this option exists for an
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",9)
   application to explore the impact of epochs on their work load. See also
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",10)
   the DBFLUSH and DBSYNC VIEW Options. Epochs include DBFLUSH and DBSYNC
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",11)
   actions, but performing them before the epoch may reduce the duration of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",12)
   these actions within the epoch.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","EPOCH",13)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH")
FLUSH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",1)
   FLUSH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",3)
   "FLUSH"[:<region_list>]
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",5)
   Flushes dirty global buffers from the global buffer pool. If journaling is
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",6)
   turned on, "FLUSH" writes an EPOCH record and flushes dirty journal
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",7)
   buffers prior to flushing dirty global buffers. If no region is specified,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",8)
   VIEW "FLUSH" flushes all regions in the current global directory that the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",9)
   YottaDB process has opened.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FLUSH",10)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN")
FULL_BOOLEANWARN
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",1)
   FULL_BOOLEANWARN
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",3)
   Controls the evaluation of Boolean expressions (expressions evaluated as a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",4)
   logical TRUE or FALSE).
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",6)
   By default, YottaDB enables VIEW "NOFULL_BOOLEAN" which means that YottaDB stops
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",7)
   evaluating a Boolean expression as soon as it establishes a definitive
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",8)
   result. For example, neither 0&$$abc^def() nor 1!$$abc^def() executes
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",9)
   $$abc^def(). However, in the case of global references, such as 0&^a or
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",10)
   1!^a, YottaDB sets $reference and the naked indicator without actually
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",11)
   accessing the global variable.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",12)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",13)
   With VIEW "FULL_BOOLEAN", YottaDB ensures that all side effect expression
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",14)
   atoms, extrinsic functions ($$), external functions ($&), and $INCREMENT()
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",15)
   execute in left-to-right order.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",16)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",17)
   With VIEW "FULL_BOOLWARN", YottaDB not only evaluates Boolean expressions
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",18)
   like "FULL_BOOLEAN" but produces a BOOLSIDEFFECT warning when it
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",19)
   encounters Boolean expressions that may induce side-effects; that is:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",20)
   expressions with side effects after the first Boolean operator - extrinsic
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",21)
   functions, external calls and $INCREMENT().
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",22)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",23)
   YottaDB picks up the value of [NO]FULL_BOOL[EAN][WARN] from the environment
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",24)
   variable ydb_boolean. If ydb_boolean is undefined or evaluates to an
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",25)
   integer zero (0), the initial setting the default "NOFULL_BOOLEAN", if it
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",26)
   evaluates to an integer one (1), the initial setting is "FULL_BOOLEAN" and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",27)
   if it evaluates to integer two (2) the initial setting is "FULL_BOOLWARN".
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",28)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",29)
   VIEW "[NO]FULL_BOOL[EAN][WARN]" takes effect immediately for indirection
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",30)
   and XECUTE.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",31)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",32)
   VIEW "NOFULLBOOLEAN" produces an error when ydb_side_effects is on. For
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",33)
   more information on the ydb_side_effects environment variable, refer to
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",34)
   the Environment Variables section in the Basic Operations chapter of the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",35)
   Administration and Operations Guide.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","FULL_BOOLEANWARN",36)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT")
GDSCERT
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",1)
   GDSCERT
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",3)
   Enables (value=1) or disables (value=0) database block certification.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",5)
   Database block certification causes YottaDB to check the internal integrity
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",6)
   of every block as it writes the block. Block certification degrades
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",7)
   performance and exists primarily as a tool for use by YottaDB. The default is
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",8)
   GDSCERT:0.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GDSCERT",9)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP")
GVDUPSETNOOP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",1)
   GVDUPSETNOOP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",3)
   Enables (VIEW "GVDUPSETNOOP":1) or disables (VIEW "GVDUPSETNOOP":0)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",4)
   duplication set optimization.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",6)
   Duplicate set optimization prevents a SET that does not change the value
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",7)
   of an existing node from performing the update or executing any trigger
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",8)
   code specified for the node. By default, duplicate set optimization is
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",9)
   enabled.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVDUPSETNOOP",10)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET")
GVSRESET
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",1)
   GVSRESET
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",3)
   Resets the process-specific fields that are part of the ZSHOW "G" result
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",4)
   and database file header fields holding records reported by: GVSTAT, BG
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",5)
   trace, buffer pool accounting and the TP block modification details. Note
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",6)
   a VIEW "GVSRESET" performed by a process with read-only database access
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",7)
   changes only the process-specific information and has no effect on the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",8)
   database file header. DSE CHANGE -FILEHEADER -GVSTATSRESET clears the same
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",9)
   database file header fields as VIEW "GVRESET";
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","GVSRESET",10)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH")
JNLFLUSH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",1)
   JNLFLUSH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",3)
   Writes or flushes journaling buffers associated with the given region to
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",4)
   permanent storage, for example, to disk. If the VIEW "JNLFLUSH" does not
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",5)
   specify the optional region, YottaDB flushes all journaled regions of the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",6)
   current Global Directory.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",8)
   Normally YottaDB writes journal buffers when it completes a transaction
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",9)
   (unless TRANSACTIONID="BATCH"), fills the journal buffer or when some
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",10)
   period of time passes with no journal activity.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLFLUSH",11)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT")
JNLWAIT
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",1)
   JNLWAIT
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",3)
   Causes a process to pause until its journaling buffers have been written.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",4)
   JNLWAIT ensures that YottaDB successfully transfers all database updates
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",5)
   issued by the process to the journal file before the process continues.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",6)
   Normally, YottaDB performs journal buffer writes synchronously for TP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",7)
   updates, and asynchronously, while the process continues execution, for
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",8)
   non-TP updates or TP updates with TRANSACTIONID=BATCH.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JNLWAIT",9)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID")
JOBPID
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",1)
   JOBPID
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",3)
   Enables (value=1) or disables (value=0) the addition of the child process
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",4)
   ID to the output and error file names used (either implicitly generated or
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",5)
   explicitly defined) by the JOB command. The default is 0.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",6)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",7)
   Using the value=1 option prevents the JOB command from overwriting output
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",8)
   files each time the same JOB command executes.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","JOBPID",9)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS")
LABELS
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",1)
   LABELS
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",3)
   Enables (value="LOWER") or disables (value="UPPER") case sensitivity for
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",4)
   labels within routines.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",6)
   It is important to have the same case handling at compile-time and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",7)
   run-time.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",8)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",9)
   Because YottaDB stores routines as regular files and file names are case
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",10)
   sensitive on UNIX, YottaDB always treates routine names as case sensitive.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LABELS",11)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK")
LINK
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",1)
   LINK
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",3)
   Enables ("LINK":"RECURSIVE") or disables ("LINK":"RECURSIVE") the ZLINK
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",4)
   command to accept and relink routines on the YottaDB invocation stack. With
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",5)
   VIEW "LINK":"RECURSIVE" specified, the ZLINK command adds an executable
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",6)
   routine even when a routine with the same name is active and available in
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",7)
   the current stack. When a process links a routine with the same name as an
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",8)
   existing routine, future calls use the new routine. Prior versions of that
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",9)
   routine referenced by the stack remain tied to the stack until they QUIT,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",10)
   at which point they become inaccessible. This provides a mechanism to
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",11)
   patch long-running processes.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",12)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",13)
   The default is VIEW "LINK":"NORECURSIVE".
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LINK",14)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP")
LOGNONTP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",1)
   LOGNONTP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",3)
   Allows a process to dynamically change the logging of NONTPRESTART
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",4)
   messages to the operator log established at process startup by the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",5)
   environment variables ydb_nontprestart_log_delta and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",6)
   ydb_nontprestart_log_first.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",8)
   VIEW "NOLOGNONTP" turns off the logging of NONTPRESTART messages to the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",9)
   operator log.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",10)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",11)
   VIEW "LOGNONTP"[:intexpr] turns on logging of NONTPRESTART messages to the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",12)
   operator log. If no intexpr is specified, YottaDB uses the value of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",13)
   environment variable ydb_nontprestart_log_delta, if it is defined, and one
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",14)
   otherwise (that is, every transaction restart will be logged). A negative
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",15)
   value of intexpr turns off the logging of NONTPRESTART messages.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",16)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",17)
   Note that it is not possible to perform the operations of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",18)
   ydb_nontprestart_log_first with VIEW "LOGNONTP"[:intexpr].
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGNONTP",19)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART")
LOGTPRESTART
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",1)
   LOGTPRESTART
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",3)
   Allows a process to dynamically change the logging of TPRESTART messages
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",4)
   to the operator log established at process startup by the environment
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",5)
   variables ydb_tprestart_log_delta and ydb_tprestart_log_first.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",6)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",7)
   VIEW "NOLOGTPRESTART" turns off the logging of TPRESTART messages to the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",8)
   operator log.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",9)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",10)
   VIEW "LOGTPRESTART"[:intexpr] turns on logging of TPRESTART messages to
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",11)
   the operator log. If no intexpr is specified, YottaDB uses the value of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",12)
   environment variable ydb_tprestart_log_delta, if it is defined, and one
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",13)
   otherwise (that is, every transaction restart will be logged). A negative
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",14)
   value of intexpr turns off the logging of TPRESTART messages.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",15)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",16)
   Note that it is not possible to perform the operations of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",17)
   ydb_tprestart_log_first with VIEW "LOGTPRESTART"[:intexpr].
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LOGTPRESTART",18)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL")
LV_GCOL
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",1)
   LV_GCOL
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",3)
   Starts a data-space garbage collection, which normally happens
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",4)
   automatically at appropriate times.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",6)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",8)
   There are no visible effects from LV_GCOL, LV_REHASH, and STP_GCOL except
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",9)
   for the passage of time depending on the state of your process. YottaDB uses
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",10)
   these VIEW "LV_GCOL","LV_REHASH","STP_GCOL" facilities in testing. They
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",11)
   are documented to ensure completeness in product documentation. You may
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",12)
   (or may not) find them useful during application development for debugging
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",13)
   or performance testing implementation alternatives.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_GCOL",14)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH")
LV_REHASH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",1)
   LV_REHASH
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",3)
   Starts a reorganization of the local variable look-up table, which
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",4)
   normally happens automatically at appropriate times.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",6)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",8)
   There are no visible effects from LV_REHASH, LV_GCOL, and STP_GCOL except
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",9)
   for the passage of time depending on the state of your process. YottaDB uses
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",10)
   these VIEW "LV_GCOL","LV_REHASH","STP_GCOL" facilities in testing. They
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",11)
   are documented to ensure completeness in product documentation. You may
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",12)
   (or may not) find them useful during application development for debugging
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",13)
   or performance testing implementation alternatives.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","LV_REHASH",14)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB")
NEVERLVNULLSUB
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",1)
   NEVERLVNULLSUB
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",3)
   [NEVER]|[NO]LVNULLSUBS
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",5)
   Disallows, partially disallows, or allows local arrays to have empty
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",6)
   string subscripts. The default is LVNULLSUBS.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",8)
   NOLVNULLSUBS disallows any variant of SET to operate on a local array
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",9)
   having an empty string subscript.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",10)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",11)
   NEVERLVNULLSUBS disallows any variant of SET or KILL
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",12)
   ($DATA(),$GET(),$ORDER(), and $QUERY()) to operate on a local array having
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",13)
   an empty string subscript. An empty string as the last subscript in
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",14)
   $ORDER() and $QUERY() has the semantic significance of requesting the next
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",15)
   lexical item and is not subject to NULLSUBS errors.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",16)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",17)
   LVNULLSUBS allows local arrays to have empty string subscripts.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",18)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",19)
   At process startup, YottaDB initializes [NEVER][NO]LVNULLSUBS from
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",20)
   $ydb_lvnullsubs. Set the environment variable $ydb_lvnullsubsv to:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",21)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",22)
   **Important**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",23)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",24)
   Remember that for global variables, empty string subscript checking is
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",25)
   controlled by a database region characteristic. YottaDB recommends using
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",26)
   LVNULLSUBS, NOLVNULLSUBS, or NEVERLVNULLSUBS for local variables and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",27)
   NULLSUBS options ALWAYS or NEVER for global variables.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NEVERLVNULLSUB",28)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION")
NOISOLATION
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",1)
   NOISOLATION
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",3)
   where expr must evaluate to one of the following forms:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",5)
     o "", that is, the empty string : turn off the feature for all globals
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",6)
       for which it has previously been turned on
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",7)
     o "^gvn1,^gvn2,..." : turn on the feature for the globals in the list,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",8)
       turning it off for globals for which it has previously been turned on
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",9)
     o "+^gvn1,^gvn2,..." : add these globals to the list of globals that
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",10)
       have this feature turned on
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",11)
     o "-^gvn1,^gvn2,..." : turn off the feature for these globals leaving
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",12)
       the status for other globals unchanged
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","NOISOLATION",13)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE")
PATCODE
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",1)
   PATCODE
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",3)
   "PATCODE":"tablename"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",4)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",5)
   Identifies the alternative table of unique patterns for use with the "?"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",6)
   operator to be loaded from the pattern definition file. For additional
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",7)
   information, refer to the "Internationalization" chapter in the YottaDB
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",8)
   Programmer's Guide.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATCODE",9)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD")
PATLOAD
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD",1)
   PATLOAD
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD",3)
   Identifies the file containing definitions of unique patterns for use with
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD",4)
   the "?" operator. These pattern definitions can be used in place of, or in
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD",5)
   addition to, the standard C, N, U, L, and P.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","PATLOAD",6)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT")
POOLLIMIT
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",1)
   POOLLIMIT
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",3)
   VIEW "POOLLIMIT":<region>:expr, where expr is of the form n[%] provides a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",4)
   mechanism for a process that has the potential to "churn" global buffers
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",5)
   to limit the potential impact on other processes by restricting the number
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",6)
   of global buffers it uses. If the expression ends with a per-cent sign
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",7)
   (%), the number is taken as an as a percentage of the configured global
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",8)
   buffers and otherwise as an ordinal number of preferred buffers; standard
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",9)
   M parsing and integer conversions apply. Preferred buffer values are
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",10)
   limited to between 32 and one less than half the buffer pool inclusive;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",11)
   with the exception of zero (0) or 100 per cent, which turn off the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",12)
   limitation; specifications exceeding those limits provide the value of the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",13)
   nearer limit. If the argument specifies "*" for the region, the command
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",14)
   applies to all regions. $VIEW("POOLLIMIT",<region>) returns the current
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",15)
   value for the region as an ordinal number - zero (0) when there is no
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",16)
   limit in place. Note that this facility is designed for use by a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",17)
   relatively small subset of processes. In addition, MUPIP REORG uses this
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",18)
   facility to limit its buffers to a value established by the UNIX
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",19)
   environment variable (or OpenVMS logical name) ydb_poollimit using the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",20)
   syntax described for VIEW "POOLLIMIT" with a default of 64 if
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",21)
   ydb_poollimit is not specified. Note that this may slightly slow a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",22)
   standalone REORG but can be overridden by defining ydb_poollimit as 0 or
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",23)
   "100%".
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","POOLLIMIT",24)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP")
RCTLDUMP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",1)
   RCTLDUMP
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",3)
   Displays the created relinkctl files and the routines looked for in their
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",4)
   related directories. An entry in these files does not mean that a given
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",5)
   routine was found there. It merely means it was looked for there and shows
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",6)
   a cycle number (which ZRUPDATE bumps) whose change indicates a new
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",7)
   published version of the given object file. As it is a diagnostic tool for
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",8)
   the new feature, YottaDB may remove or modify this VIEW option in subsequent
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",9)
   releases.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",10)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",11)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",12)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",13)
   YottaDB no longer supports VIEW "RCTLDUMP" as it has been supplanted by ZSHOW
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",14)
   "A" and MUPIP RCTLDUMP.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RCTLDUMP",15)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS")
RESETGVSTATS
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS",1)
   RESETGVSTATS
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS",3)
   Resets all the process-private global access statistics to 0. This is
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS",4)
   particularly useful for long running processes which would periodically
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS",5)
   like to restart the counting without requiring a shut down and restart.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","RESETGVSTATS",6)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE")
STATSHARE
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",1)
   STATSHARE
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",3)
   VIEW "[NO]STATSHARE"[:<region-list>] enables or disables database
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",4)
   statistics sharing for listed regions which permit such sharing. Without
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",5)
   the region-list, the command acts on all regions enabled for sharing. When
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",6)
   a targeted region has sharing disabled, STATSHARE has no effect.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",8)
   This provides a fast and efficient mechanism for processes to share their
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",9)
   database access statistics for other processes to monitor. Processes opt
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",10)
   in or out with the VIEW "[NO]STATSHARE"[:<region-list>] command,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",11)
   defaulting to VIEW "NOSTATSHARE". At process startup, a value of 1, or any
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",12)
   case-independent string or leading substrings of "TRUE" or "YES" in the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",13)
   environment variable ydb_statshare provides an initial setting of VIEW
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",14)
   "STATSHARE". When a process changes whether it is opting in or out, there
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",15)
   is no change to the output of a ZSHOW "G" within that process. YottaDB does
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",16)
   not permit this form of the VIEW command within a TP transaction.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",17)
   Monitoring the statistics of other processes does not require opting-in.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",18)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",19)
   The processes which opt-in for STATSHARE place their statistics as binary
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",20)
   data in database files located in the directory specified by the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",21)
   ydb_statsdir environment variable. All processes that share statistics
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",22)
   MUST use the same value for $ydb_statsdir. The ^%YGBLSTAT utility program
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",23)
   gathers and reports statistics.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",24)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",25)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",26)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",27)
   A VIEW "[NO]STATSHARE" with no region sub-argument opens any unopened
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",28)
   mapped regions and any enabled associated statsDB regions; the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",29)
   $ydb_statshare environment variable applies to databases as the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",30)
   application first uses them. When the last VIEW "[NO]STATSHARE" had no
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",31)
   region sub-argument, regions implicitly share when the process first
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",32)
   references them, but after a VIEW specifies selective sharing, regions
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",33)
   don't implicitly share as they open.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STATSHARE",34)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL")
STP_GCOL
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",1)
   STP_GCOL
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",3)
   Starts a string-pool garbage collection, which normally happens
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",4)
   automatically at appropriate times.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",6)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",7)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",8)
   There are no visible effects from STP_GCOL, LV_GCOL and LV_REHASH except
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",9)
   for the passage of time depending on the state of your process. YottaDB uses
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",10)
   these VIEW "LV_GCOL","LV_REHASH","STP_GCOL" facilities in testing. They
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",11)
   are documented to ensure completeness in product documentation. You may
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",12)
   (or may not) find them useful during application development for debugging
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",13)
   or performance testing implementation alternatives.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","STP_GCOL",14)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE")
TRACE
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",1)
   TRACE
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",3)
   Traces YottaDB program execution and generates profiling information about
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",4)
   the lines and functions executed; with low impact on the run-time
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",5)
   performance.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",6)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",7)
   The feature turns on (value=1) or turns off (value=0) M-profiling. This
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",8)
   expression must evaluate to a string containing the name of a YottaDB global
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",9)
   variable. The global may also have subscripts; however the subscripts must
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",10)
   be literals or the special variable $JOB.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",11)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",12)
   The expression is optional when turning M-profiling off, if it exists, it
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",13)
   overrides the global variable set when M-profiling was turned on.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",14)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",15)
   ydb_trace_gbl_name enables YottaDB tracing at process startup. Setting
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",16)
   ydb_trace_gbl_name to a valid global variable name instructs YottaDB to
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",17)
   report the data in the specified global when a VIEW command disables the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",18)
   tracing, or implicitly at process termination. This setting behaves as if
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",19)
   the process issued a VIEW "TRACE" command at process startup. However,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",20)
   ydb_trace_gbl_name has a capability not available with the VIEW command,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",21)
   such that if the environment variable is defined but evaluates to zero (0)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",22)
   or, only on UNIX, to the empty string, YottaDB collects the M-profiling data
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",23)
   in memory and discards it when the process terminates (this feature is
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",24)
   mainly used for in-house testing). Note that having this feature activated
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",25)
   for process that otherwise do not open a database file (such as GDE) can
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",26)
   cause them to encounter an error.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",27)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",28)
   Example:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",29)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",30)
   YDB>zprint ^profiling
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",31)
   ; In this example, query^profiling, order^profiling, and merge^profling perform the same operation
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",32)
   ; -- store even-numbered subscripts of a global to a subscripted local variable.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",33)
   ; M-profiling results show which yields the fastest execution between the three.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",34)
   profiling
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",35)
     kill ^TMP,^trc
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",36)
     view "trace":1:"^trc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",37)
     set ulimit=1500
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",38)
     for i=1:1:ulimit set ^TMP(i)=i
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",39)
     do qom("^TMP")
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",40)
     view "trace":0:"^trc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",41)
     zwrite ^trc
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",42)
     quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",43)
   qom(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",44)
     do query(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",45)
     do order(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",46)
     do merge(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",47)
     quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",48)
   query(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",49)
     new i,qryval
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",50)
     set i=0,y=$query(@y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",51)
     for  quit:y=""   do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",52)
     .      set:i#2 qryval(i)=@y
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",53)
     .      set y=$query(@y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",54)
     .      set i=i+1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",55)
     quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",56)
   order(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",57)
     new i,ordval
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",58)
     set x="",i=0,y=y_"(x)",x=$order(@y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",59)
     for  quit:x=""  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",60)
     .      set:i#2 ordval(i)=x
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",61)
     .      set x=$order(@y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",62)
     .      set i=i+1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",63)
     quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",64)
   merge(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",65)
     new i,merval
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",66)
     set i=0,merval=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",67)
     merge merval=@y
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",68)
     for i=1:1:$order(merval(""),-1)  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",69)
     .      kill:i#2 merval(i)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",70)
     quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",71)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",72)
   This example would produce an output like the following:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",73)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",74)
   YDB>do ^profiling
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",75)
   ^trc("*CHILDREN")="0:0:0"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",76)
   ^trc("*RUN")="144009:76004:220013"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",77)
   ^trc("profiling","merge")="1:8001:12000:20001:16231"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",78)
   ^trc("profiling","merge",0)="1:0:0:0:5"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",79)
   ^trc("profiling","merge",1)="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",80)
   ^trc("profiling","merge",2)="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",81)
   ^trc("profiling","merge",3)="1:8001:0:8001:8044"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",82)
   ^trc("profiling","merge",4)="1:0:12000:12000:7992"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",83)
   ^trc("profiling","merge",4,"FOR_LOOP",1)=1500
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",84)
   ^trc("profiling","merge",5)="1500:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",85)
   ^trc("profiling","merge",6)="1:0:0:0:174"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",86)
   ^trc("profiling","order")="1:12001:8001:20002:25720"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",87)
   ^trc("profiling","order",0)="1:0:0:0:8"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",88)
   ^trc("profiling","order",1)="1:0:0:0:6"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",89)
   ^trc("profiling","order",2)="1:0:0:0:90"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",90)
   ^trc("profiling","order",3)="1:0:8001:8001:7160"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",91)
   ^trc("profiling","order",3,"FOR_LOOP",1)=1501
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",92)
   ^trc("profiling","order",4)="1500:0:0:0:6319"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",93)
   ^trc("profiling","order",5)="1500:12001:0:12001:12069"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",94)
   ^trc("profiling","order",6)="1500:0:0:0:0"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",95)
   ^trc("profiling","order",7)="1:0:0:0:63"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",96)
   ^trc("profiling","profiling",3)="1:0:0:0:9"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",97)
   ^trc("profiling","profiling",4)="1:52003:20001:72004:74499"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",98)
   ^trc("profiling","profiling",4,"FOR_LOOP",1)=1500
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",99)
   ^trc("profiling","profiling",5)="1:0:0:0:14"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",100)
   ^trc("profiling","profiling",6)="1:0:0:0:10"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",101)
   ^trc("profiling","qom")="1:0:0:0:78"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",102)
   ^trc("profiling","qom",0)="1:0:0:0:18"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",103)
   ^trc("profiling","qom",1)="1:0:0:0:11"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",104)
   ^trc("profiling","qom",2)="1:0:0:0:9"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",105)
   ^trc("profiling","qom",3)="1:0:0:0:11"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",106)
   ^trc("profiling","qom",4)="1:0:0:0:5"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",107)
   ^trc("profiling","query")="1:72004:20001:92005:88031"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",108)
   ^trc("profiling","query",0)="1:0:0:0:5"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",109)
   ^trc("profiling","query",1)="1:0:0:0:14"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",110)
   ^trc("profiling","query",2)="1:0:0:0:108"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",111)
   ^trc("profiling","query",3)="1:12000:0:12000:7625"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",112)
   ^trc("profiling","query",3,"FOR_LOOP",1)=1501
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",113)
   ^trc("profiling","query",4)="1500:8000:0:8000:28256"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",114)
   ^trc("profiling","query",5)="1500:52004:20001:72005:51919"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",115)
   ^trc("profiling","query",6)="1500:0:0:0:0"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",116)
   ^trc("profiling","query",7)="1:0:0:0:85"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",117)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",118)
     o CPU times are reported in microseconds. 1 second = 1,000,000
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",119)
       microseconds.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",120)
     o ^trc("*CHILDREN")="0:0:0" indicates that the main process did not
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",121)
       spawn any child process.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",122)
     o ^trc("*RUN")="144009:76004:220013" : the three pieces specify the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",123)
       aggregate User Time, System Time and Total Time values for the main
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",124)
       process.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",125)
     o ^trc("profiling","query",3,"FOR_LOOP",1)=1501 specifies the number of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",126)
       times the FOR loop was executed on line #3 of query^profiling.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",127)
     o ^trc("profiling","merge")="1:8001:12000:20001:16231",
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",128)
       ^trc("profiling","order")="1:12001:8001:20002:25720",
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",129)
       ^trc("profiling","query")="1:72004:20001:92005:88031": the five pieces
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",130)
       specify the aggregate Execution Count, User Time, System,Time, Total
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",131)
       Time and the Elapsed Time of the code execution for merge^profiling,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",132)
       order^profling, and query^profiling. merge^profiling has the fastest
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",133)
       execution time followed by order^profiling. query^profiling is the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",134)
       slowest amongst the three.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",135)
     o ^trc("profiling","merge",3)="1:8001:0:8001:8044" and others like it
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",136)
       specifies the cumulative Execution Count, User Time, System Time,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",137)
       Total Time and the Elapsed Time of the code execution of line 3 of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",138)
       merge^profiling.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",139)
     o The M-profiling results are subject to the granularity of the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",140)
       operating system provided time functions. CPU time entries having
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",141)
       0:0:0 values indicate lightweight M mode having 0 to less than 1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",142)
       microsecond.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",143)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",144)
   Consider the following program that presents the output of this
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",145)
   M-profiling result in a tabular report.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",146)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",147)
   YDB>zprint ^tracereport
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",148)
   tracereport(gbl,label,rtn)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",149)
     set gap=15
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",150)
     set $piece(x,".",gap*6)="" write x,!
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",151)
     write "Line #",?gap,"Count",?gap*2,"User Time",?gap*3,"System Time",?gap*4,"Total Time",?gap*5,"Elapsed Time",!
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",152)
     set $piece(x,".",gap*6)="" write x,!
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",153)
     for  set gbl=$query(@gbl) quit:gbl=""  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",154)
     .      if ($length(@gbl,":")=5)&($qsubscript(gbl,1)=rtn)&($qsubscript(gbl,2)=label) do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",155)
           ..      set gap=15 set lineno=$qsubscript(gbl,3)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",156)
           ..      if lineno="" write label," total",?gap set zp=""
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",157)
           ..      else  write lineno,?gap set zp=label_"+"_lineno_"^"_rtn
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",158)
           ..      for i=1:1:5 set gap=gap+15 write $piece(@gbl,":",i),?gap
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",159)
           ..      write !
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",160)
           ..      set maxlines=$qsubscript(gbl,3)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",161)
     for i=0:1:maxlines do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",162)
     .      set zp=label_"+"_i_"^"_rtn
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",163)
     .      write "Line #",i,": ",?9
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",164)
     .      zprint @zp
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",165)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",166)
   YDB>do ^tracereport("^trc","order","profiling")
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",167)
   .........................................................................................
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",168)
   Line #         Count          User Time      System Time    Total Time     Elapsed Time
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",169)
   .........................................................................................
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",170)
   order total    1              12001          8001           20002          25720
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",171)
   0              1              0              0              0              8
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",172)
   1              1              0              0              0              6
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",173)
   2              1              0              0              0              90
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",174)
   3              1              0              8001           8001           7160
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",175)
   4              1500           0              0              0              6319
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",176)
   5              1500           12001          0              12001          12069
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",177)
   6              1500           0              0              0              0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",178)
   7              1              0              0              0              63
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",179)
   Line #0: order(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",180)
   Line #1:   new i,ordval
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",181)
   Line #2:   set x="",i=0,y=y_"(x)",x=$order(@y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",182)
   Line #3:   for  quit:x=""  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",183)
   Line #4:   .      set:i#2 ordval(i)=x
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",184)
   Line #5:   .      set x=$order(@y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",185)
   Line #6:   .      set i=i+1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",186)
   Line #7:   quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",187)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",188)
   This shows that order^profiling has an elapsed time of 25720 and the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",189)
   maximum elapsed time was on line #5, which was executed 1500 times.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",190)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",191)
   YDB>do ^tracereport("^trc","merge","profiling")
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",192)
   .........................................................................................
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",193)
   Line #         Count          User Time      System Time    Total Time     Elapsed Time
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",194)
   .........................................................................................
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",195)
   merge total    1              8001           12000          20001          16231
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",196)
   0              1              0              0              0              5
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",197)
   1              1              0              0              0              4
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",198)
   2              1              0              0              0              4
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",199)
   3              1              8001           0              8001           8044
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",200)
   4              1              0              12000          12000          7992
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",201)
   5              1500           0              0              0              4
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",202)
   6              1              0              0              0              174
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",203)
   Line #0: merge(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",204)
   Line #1:   new i,merval
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",205)
   Line #2:   set i=0,merval=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",206)
   Line #3:   merge merval=@y
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",207)
   Line #4:   for i=1:1:$order(merval(""),-1)  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",208)
   Line #5:   . kill:i#2 merval(i)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",209)
   Line #6:   quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",210)
   YDB>
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",211)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",212)
   This shows that merge^profiling has an elapsed time of 16231 and the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",213)
   maximum elapsed time was on line #3, which was executed once.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",214)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",215)
   Note that M-profiling results are reported for each line. While reporting
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",216)
   time for a line containing an invocation of a label, M-profiling excludes
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",217)
   the execution time of that label.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",218)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",219)
   Here is an example:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",220)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",221)
   YDB>do ^tracereport("^trc","qom","profiling")
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",222)
   .........................................................................................
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",223)
   Line #         Count          User Time      System Time    Total Time     Elapsed Time
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",224)
   .........................................................................................
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",225)
   qom total      1              0              0              0              78
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",226)
   0              1              0              0              0              18
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",227)
   1              1              0              0              0              11
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",228)
   2              1              0              0              0              9
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",229)
   3              1              0              0              0              11
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",230)
   4              1              0              0              0              5
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",231)
   Line #0: qom(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",232)
   Line #1:   do query(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",233)
   Line #2:   do order(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",234)
   Line #3:   do merge(y)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",235)
   Line #4:   quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",236)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",237)
   Notice that the execution of do merge(y) reports an Elapsed Time of 9
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",238)
   whereas merge^profiling reported an Elapsed Time of 1149.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",239)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",240)
   You can write programs like tracereport.m to interpret the results of the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",241)
   M-profiling data and also use them to analyze your code execution path
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",242)
   based on your unique requirements.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",243)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",244)
   view "trace":1: "<gbl>" and view "trace":0: "<gbl>" commands enable and
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",245)
   disable M-profiling.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",246)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",247)
   To perform entryref-specific M-profiling without modifying the source
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",248)
   program, use ZBREAK. For example, to perform M-profiling of the entryref
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",249)
   merge^profiling, remove VIEW "TRACE" commands from profiling.m and then
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",250)
   execute the following commands:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",251)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",252)
   YDB>ZBREAK merge^profiling:"view ""TRACE"":1:""^mtrc"" write ""Trace"""
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",253)
   YDB>do ^profiling
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",254)
   Trace
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",255)
   YDB>view "TRACE":0:"^mtrc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",256)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",257)
   YDB>zwrite ^mtrc
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",258)
   ^mtrc("*CHILDREN")="0:0:0"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",259)
   ^mtrc("*RUN")="132008:52003:184011"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",260)
   ^mtrc("GTM$DMOD","^")="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",261)
   ^mtrc("profiling","merge")="1:8001:0:8001:13450"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",262)
   ^mtrc("profiling","merge",1)="1:0:0:0:6"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",263)
   ^mtrc("profiling","merge",2)="1:0:0:0:5"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",264)
   ^mtrc("profiling","merge",3)="1:8001:0:8001:6188"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",265)
   ^mtrc("profiling","merge",4)="1:0:0:0:7149"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",266)
   ^mtrc("profiling","merge",4,"FOR_LOOP",1)=1500
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",267)
   ^mtrc("profiling","merge",5)="1500:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",268)
   ^mtrc("profiling","merge",6)="1:0:0:0:63"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",269)
   ^mtrc("profiling","profiling")="1:0:0:0:9"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",270)
   ^mtrc("profiling","profiling",8)="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",271)
   ^mtrc("profiling","qom")="1:0:0:0:9"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",272)
   ^mtrc("profiling","qom",4)="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",273)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",274)
   Example:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",275)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",276)
   If prof.m is:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",277)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",278)
   prof;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",279)
       set start=1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",280)
       set finish=1000
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",281)
       view "TRACE":1:"^trc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",282)
       kill cycle S max=$$docycle(start,finish,"cycle")
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",283)
       view "TRACE":0:"^trc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",284)
       zwrite ^trc
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",285)
       quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",286)
       ;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",287)
   docycle(first,last,var)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",288)
       new i,currpath,current,maxcycle,n
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",289)
       set maxcycle=1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",290)
       for current=first:1:last do cyclehelper
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",291)
       quit maxcycle
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",292)
       ;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",293)
   cyclehelper
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",294)
       set n=current
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",295)
       kill currpath
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",296)
       for i=0:1 quit:$data(@var@(n))!(1=n)  D
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",297)
       .    set currpath(i)=n
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",298)
       .    do iterate
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",299)
       if 0<i do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",300)
       .    if 1=n set i=i+1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",301)
       .    else  set i=i+@var@(n)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",302)
       .    do updatemax
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",303)
       .    set n="" for  set n=$O(currpath(n)) Q:""=n  S @var@(currpath(n))=i-n
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",304)
       Q
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",305)
       ;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",306)
   iterate
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",307)
       if 0=(n#2) set n=n/2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",308)
       else  set n=3*n+1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",309)
       quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",310)
       ;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",311)
   updatemax
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",312)
       set:i>maxcycle maxcycle=i
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",313)
       quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",314)
       ;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",315)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",316)
   On executing prof, the output looks like the following (times in the
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",317)
   example were chosen for clarity of illustration and are not typical).
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",318)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",319)
   ^trc("*CHILDREN")="0:0:0"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",320)
   ^trc("*RUN")="224014:12000:236014"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",321)
   ^trc("prof","cyclehelper")="1000:200013:0:200013:206318"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",322)
   ^trc("prof","cyclehelper",1)="1000:12001:0:12001:3202"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",323)
   ^trc("prof","cyclehelper",2)="1000:0:0:0:3766"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",324)
   ^trc("prof","cyclehelper",3)="1000:64004:0:64004:94215"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",325)
   ^trc("prof","cyclehelper",3,"FOR_LOOP",1)=3227
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",326)
   ^trc("prof","cyclehelper",4)="2227:0:0:0:9864"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",327)
   ^trc("prof","cyclehelper",5)="2227:0:0:0:7672"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",328)
   ^trc("prof","cyclehelper",6)="1000:12000:0:12000:3758"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",329)
   ^trc("prof","cyclehelper",7)="432:0:0:0:1520"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",330)
   ^trc("prof","cyclehelper",8)="432:8000:0:8000:11003"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",331)
   ^trc("prof","cyclehelper",9)="432:0:0:0:3298"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",332)
   ^trc("prof","cyclehelper",10)="432:104008:0:104008:61564"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",333)
   ^trc("prof","cyclehelper",10,"FOR_LOOP",1)=2659
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",334)
   ^trc("prof","cyclehelper",11)="1000:0:0:0:3424"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",335)
   ^trc("prof","docycle")="1:12001:0:12001:4886"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",336)
   ^trc("prof","docycle",0)="1:0:0:0:83"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",337)
   ^trc("prof","docycle",1)="1:0:0:0:36"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",338)
   ^trc("prof","docycle",2)="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",339)
   ^trc("prof","docycle",3)="1:12001:0:12001:4706"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",340)
   ^trc("prof","docycle",3,"FOR_LOOP",1)=1000
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",341)
   ^trc("prof","docycle",4)="1:0:0:0:1718579845"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",342)
   ^trc("prof","iterate")="2227:12000:12000:24000:30240"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",343)
   ^trc("prof","iterate",1)="2227:0:0:0:8271"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",344)
   ^trc("prof","iterate",2)="2227:12000:0:12000:7727"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",345)
   ^trc("prof","iterate",3)="2227:0:0:0:7658"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",346)
   ^trc("prof","prof",4)="1:0:0:0:22"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",347)
   ^trc("prof","prof",5)="1:0:0:0:8"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",348)
   ^trc("prof","updatemax")="432:0:0:0:4276"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",349)
   ^trc("prof","updatemax",1)="432:0:0:0:1465"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",350)
   ^trc("prof","updatemax",2)="432:0:0:0:1496"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",351)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",352)
   Example:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",353)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",354)
   If fortypes.m is:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",355)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",356)
   fortypes;
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",357)
       new i,j,k,v
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",358)
       set k=1
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",359)
       view "TRACE":1:"^trc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",360)
       for i=1:1:3  set v=i
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",361)
       for i=1:1  set v=0  quit:i=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",362)
       for i=1,2:1:4,6  set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",363)
       for i=1:1,2  set v=0  quit:i=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",364)
       for i=1:1:2  for j=1:1:3  set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",365)
       for i=1:1:2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",366)
       .    for j=1:1:1  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",367)
       ..        set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",368)
       set j=5  for i=1:1:j  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",369)
       .    set j=(j-1)
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",370)
       for i=1:1:2  for j=1:1:3  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",371)
       .    set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",372)
       for i=1:1:2  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",373)
       .    for j=1:1:3  set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",374)
       for i=1:1:2  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",375)
       .    for j=1:1:3  do
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",376)
       ..        set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",377)
       for i="foo","bar",1:1  set v=0  quit:i=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",378)
       for  set k=k+1  quit:k=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",379)
       for i=1:1:3  for j=1:1:(3-i)  set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",380)
       for i=1:1:3  for j=1:1:(3-i)  for k=1:1:(j+1)  set v=0
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",381)
       set k=3  view "TRACE":0:"^trc"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",382)
       zwrite ^trc
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",383)
       quit
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",384)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",385)
   On executing fortypes, the output looks something like the following:
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",386)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",387)
   ^trc("*CHILDREN")="4000:0:4000"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",388)
   ^trc("*RUN")="468029:48003:516032"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",389)
   ^trc("fortypes","fortypes",5)="1:0:0:0:9"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",390)
   ^trc("fortypes","fortypes",5,"FOR_LOOP",1)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",391)
   ^trc("fortypes","fortypes",7)="1:0:0:0:6"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",392)
   ^trc("fortypes","fortypes",7,"FOR_LOOP",1)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",393)
   ^trc("fortypes","fortypes",9)="1:0:0:0:6"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",394)
   ^trc("fortypes","fortypes",9,"FOR_LOOP",1)=5
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",395)
   ^trc("fortypes","fortypes",11)="1:0:0:0:6"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",396)
   ^trc("fortypes","fortypes",11,"FOR_LOOP",1)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",397)
   ^trc("fortypes","fortypes",13)="1:0:0:0:8"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",398)
   ^trc("fortypes","fortypes",13,"FOR_LOOP",1)=2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",399)
   ^trc("fortypes","fortypes",13,"FOR_LOOP",2)=6
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",400)
   ^trc("fortypes","fortypes",15)="1:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",401)
   ^trc("fortypes","fortypes",15,"FOR_LOOP",1)=2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",402)
   ^trc("fortypes","fortypes",19)="1:0:0:0:26"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",403)
   ^trc("fortypes","fortypes",19,"FOR_LOOP",1)=5
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",404)
   ^trc("fortypes","fortypes",20)="5:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",405)
   ^trc("fortypes","fortypes",22)="1:0:0:0:27"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",406)
   ^trc("fortypes","fortypes",22,"FOR_LOOP",1)=2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",407)
   ^trc("fortypes","fortypes",22,"FOR_LOOP",2)=6
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",408)
   ^trc("fortypes","fortypes",23)="6:0:0:0:3"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",409)
   ^trc("fortypes","fortypes",25)="1:0:0:0:11"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",410)
   ^trc("fortypes","fortypes",25,"FOR_LOOP",1)=2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",411)
   ^trc("fortypes","fortypes",26)="2:0:0:0:6"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",412)
   ^trc("fortypes","fortypes",26,"FOR_LOOP",1)=6
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",413)
   ^trc("fortypes","fortypes",28)="1:0:0:0:8"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",414)
   ^trc("fortypes","fortypes",28,"FOR_LOOP",1)=2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",415)
   ^trc("fortypes","fortypes",29)="2:0:0:0:26"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",416)
   ^trc("fortypes","fortypes",29,"FOR_LOOP",1)=6
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",417)
   ^trc("fortypes","fortypes",30)="6:0:0:0:4"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",418)
   ^trc("fortypes","fortypes",32)="1:0:0:0:8"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",419)
   ^trc("fortypes","fortypes",32,"FOR_LOOP",1)=5
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",420)
   ^trc("fortypes","fortypes",34)="1:0:0:0:5"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",421)
   ^trc("fortypes","fortypes",34,"FOR_LOOP",1)=2
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",422)
   ^trc("fortypes","fortypes",36)="1:0:0:0:8"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",423)
   ^trc("fortypes","fortypes",36,"FOR_LOOP",1)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",424)
   ^trc("fortypes","fortypes",36,"FOR_LOOP",2)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",425)
   ^trc("fortypes","fortypes",38)="1:0:0:0:14"
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",426)
   ^trc("fortypes","fortypes",38,"FOR_LOOP",1)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",427)
   ^trc("fortypes","fortypes",38,"FOR_LOOP",2)=3
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",428)
   ^trc("fortypes","fortypes",38,"FOR_LOOP",3)=7
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","TRACE",429)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF")
UNDEF
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",1)
   UNDEF
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",3)
   Enables or disables handling of undefined variables as errors. With UNDEF,
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",4)
   YottaDB handles all references to undefined local or global variables as
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",5)
   errors. With NOUNDEF, YottaDB handles all references to undefined local or
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",6)
   global variables as if the variable had a value of the empty string. In
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",7)
   other words, YottaDB treats all variables appearing in expressions as if they
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",8)
   were the argument of an implicit $GET(). UNDEF is the default.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",9)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",10)
   The environment variable $ydb_noundef specifies the initial value value of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",11)
   [NO]UNDEF at process startup. If it is defined, and evaluates to a
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",12)
   non-zero integer or any case-independent string or leading substring of
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",13)
   "TRUE" or "YES", then YottaDB treats undefined variables as having an
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",14)
   implicit value of an empty string.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",15)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",16)
   **Note**
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",17)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",18)
   NOUNDEF does not apply to an undefined FOR control variable. This prevents
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",19)
   an increment (or decrement) of an undefined FOR control variable from
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",20)
   getting into an unintended infinite loop. For example, FOR A=1:1:10 KILL A
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",21)
   gives an UNDEF error on the increment from 1 to 2 even with VIEW
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",22)
   "NOUNDEF".
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","UNDEF",23)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM")
ZDATE_FORM
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",1)
   ZDATE_FORM
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",2)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",3)
   Determines whether four digit year code is active for $ZDATE() function.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",4)
   YottaDB defaults to zero (0), that is, two digit output.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",5)

^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",6)
   If no value is given with the VIEW command, it turns four digit code on.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",7)
   It is equivalent to the intrinsic special variable $ZDATEFORM. Use
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",8)
   $ZDATEFORM to set this VIEW keyword. Also, logical name environment
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",9)
   variable ydb_zdate_form may be used to set the initial value to this
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",10)
   factor.
^HELP("s","COMMANDS","s","VIEW","s","KEY_WORDS","s","ZDATE_FORM",11)

^HELP("s","COMMANDS","s","WRITE")
Write
^HELP("s","COMMANDS","s","WRITE",1)
   Write
^HELP("s","COMMANDS","s","WRITE",2)

^HELP("s","COMMANDS","s","WRITE",3)
   The WRITE command transfers a character stream specified by its arguments
^HELP("s","COMMANDS","s","WRITE",4)
   to the current device.
^HELP("s","COMMANDS","s","WRITE",5)

^HELP("s","COMMANDS","s","WRITE",6)
   The format of the WRITE command is:
^HELP("s","COMMANDS","s","WRITE",7)

^HELP("s","COMMANDS","s","WRITE",8)
   W[RITE][:tvexpr] expr|*intexpr|fcc[,...]
^HELP("s","COMMANDS","s","WRITE",9)

^HELP("s","COMMANDS","s","XECUTE")
Xecute
^HELP("s","COMMANDS","s","XECUTE",1)
   Xecute
^HELP("s","COMMANDS","s","XECUTE",2)

^HELP("s","COMMANDS","s","XECUTE",3)
   The XECUTE command makes an entry in the YottaDB invocation stack and
^HELP("s","COMMANDS","s","XECUTE",4)
   executes the argument as YottaDB code.
^HELP("s","COMMANDS","s","XECUTE",5)

^HELP("s","COMMANDS","s","XECUTE",6)
   The format of the XECUTE command is:
^HELP("s","COMMANDS","s","XECUTE",7)

^HELP("s","COMMANDS","s","XECUTE",8)
   X[ECUTE]:tvexpr expr[:tvexpr][,...]
^HELP("s","COMMANDS","s","XECUTE",9)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",5)
   YDB>Xecute "Write ""HELLO"""
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",6)
   HELLO
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",7)
   YDB>
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",9)
   This demonstrates a simple use of Xecute.
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",11)
   Example:
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",13)
   Set x="" For Set x=$Order(^%x(x)) Quit:x=""  Xecute x
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",15)
   This $ORDER() loop XECUTEs code out of the first level of the global array
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",16)
   ^%x. Note that, in most cases, having the code in a YottaDB source file, for
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",17)
   example TMPX.m, and using a Do ^TMPX improves efficiency.
^HELP("s","COMMANDS","s","XECUTE","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","ZALLOCATE")
ZAllocate
^HELP("s","COMMANDS","s","ZALLOCATE",1)
   ZAllocate
^HELP("s","COMMANDS","s","ZALLOCATE",2)

^HELP("s","COMMANDS","s","ZALLOCATE",3)
   The ZALLOCATE command reserves the specified name without releasing
^HELP("s","COMMANDS","s","ZALLOCATE",4)
   previously reserved names. Other YottaDB processes cannot reserve the
^HELP("s","COMMANDS","s","ZALLOCATE",5)
   ZALLOCATEd name with a ZALLOCATE or LOCK command.
^HELP("s","COMMANDS","s","ZALLOCATE",6)

^HELP("s","COMMANDS","s","ZALLOCATE",7)
   The ZALLOCATE command provides compatibility with some other YottaDB
^HELP("s","COMMANDS","s","ZALLOCATE",8)
   implementations. The M Development Committee chose to add the + and -
^HELP("s","COMMANDS","s","ZALLOCATE",9)
   delimiters to the LOCK command (incremental locking) rather than adopt the
^HELP("s","COMMANDS","s","ZALLOCATE",10)
   ZALLOCATE and ZDEALLOCATE approach. Therefore, when a design requires an
^HELP("s","COMMANDS","s","ZALLOCATE",11)
   incremental lock mechanism, LOCK +/- has the advantage over ZALLOCATE /
^HELP("s","COMMANDS","s","ZALLOCATE",12)
   ZDEALLOCATE of being part of the M standard. LOCK +/- also has the
^HELP("s","COMMANDS","s","ZALLOCATE",13)
   advantage of working symmetrically when routines using LOCKs are nested.
^HELP("s","COMMANDS","s","ZALLOCATE",14)
   That is, a ZALLOCATE command issued by a process for a named resource
^HELP("s","COMMANDS","s","ZALLOCATE",15)
   already ZALLOCATEd by that process results in no change of state. This
^HELP("s","COMMANDS","s","ZALLOCATE",16)
   means that routines that do ZALLOCATE followed by a ZDEALLOCATE on a named
^HELP("s","COMMANDS","s","ZALLOCATE",17)
   resource that is already ZALLOCATEd by the same process (at routine entry
^HELP("s","COMMANDS","s","ZALLOCATE",18)
   time), will end up ZDEALLOCATEing the named resource (which might not be
^HELP("s","COMMANDS","s","ZALLOCATE",19)
   desired). On the other hand, a LOCK + command issued by a process for a
^HELP("s","COMMANDS","s","ZALLOCATE",20)
   named resource already LOCKed by that process causes the LEVEL of the LOCK
^HELP("s","COMMANDS","s","ZALLOCATE",21)
   to be incremented (as seen in a ZSHOW "L" output). Every LOCK - command on
^HELP("s","COMMANDS","s","ZALLOCATE",22)
   that named resource causes the LEVEL to be decremented. When the LEVEL
^HELP("s","COMMANDS","s","ZALLOCATE",23)
   becomes 0, the named resource is no longer LOCKed.
^HELP("s","COMMANDS","s","ZALLOCATE",24)

^HELP("s","COMMANDS","s","ZALLOCATE",25)
   The format of the ZALLOCATE command is:
^HELP("s","COMMANDS","s","ZALLOCATE",26)

^HELP("s","COMMANDS","s","ZALLOCATE",27)
   ZA[LLOCATE][:tvexpr] [(]nref[,...][)][:intexpr][,...]
^HELP("s","COMMANDS","s","ZALLOCATE",28)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",3)
   Examples:
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",5)
   ZAllocate A
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",6)
   ZAllocate ^A
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",7)
   ZAllocate ^A(1)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",8)
   ZAllocate (^B("smith"),^C("jones"))
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",9)
   ZAllocate @A
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",11)
   The first command ZALLOCATEs A; the second, ^A; the third, ^A(1) and the
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",12)
   fourth, both ^B("smith") and ^C("jones") simultaneously. The last command
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",13)
   ZALLOCATEs the resources named by the value of the variable A.
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",15)
   Example:
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",17)
   ZAllocate A,^B,@C
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",18)
   ZALLOCATE (A,B,C)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",20)
   If ZALLOCATE arguments are enclosed in parentheses, the command waits
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",21)
   until all names in the argument list become available before reserving any
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",22)
   of the names. For example, in the statement ZA (A,B,C), if the resource
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",23)
   named C is not available, ZALLOCATE waits until C becomes available before
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",24)
   reserving A and B. Using the format illustrated in the first line above,
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",25)
   can cause deadlocks because the resource names are reserved as they come
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",26)
   available.
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",27)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",28)
   When a process attempts to ZALLOCATE a name currently ZALLOCATEd or LOCKed
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",29)
   (with the LOCK command) by another process, the ZALLOCATEing process hangs
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",30)
   until the other process releases the name. In the event that names remain
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",31)
   unavailable for significant periods of time, timeouts allow the process
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",32)
   issuing a ZALLOCATE to regain program control.
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",33)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",34)
   Example:
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",35)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",36)
   ZAllocate ^D:5
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",37)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",38)
   This example specifies a timeout of five seconds. If YottaDB reserves ^D
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",39)
   before the five seconds elapses, ZALLOCATE sets $TEST to TRUE. If YottaDB
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",40)
   cannot reserve ^D within the five second timeout, ZALLOCATE sets $TEST to
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",41)
   FALSE.
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",42)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",43)
   At the time of ZALLOCATEing a name, no names previously reserved with
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",44)
   ZALLOCATE or the LOCK command are released (similarly, LOCKing a name does
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",45)
   not release names that have been ZALLOCATEd). For example, after
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",46)
   ZALLOCATEing A and LOCKing B, LOCKing B does not release A, and
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",47)
   ZALLOCATEing C does not release A or B.
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",48)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",49)
   ZDEALLOCATE releases ZALLOCATED resource names. The ZDEALLOCATE command
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",50)
   can only release previously ZALLOCATEd (not LOCKed) names.
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",51)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",52)
   Resource name arguments for LOCKs and ZALLOCATEs intersect. That is, if
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",53)
   one process holds a LOCK or ZALLOCATE, another process can neither LOCK
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",54)
   nor ZALLOCATE any name falling in the hierarchy of the resource name held
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",55)
   by the first process. When a process holds a LOCK or ZALLOCATE, that same
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",56)
   process may also LOCK or ZALLOCATE resource names falling in the hierarchy
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",57)
   of the currently held resource name. When a single process holds both
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",58)
   LOCKs and ZALLOCATEs, a LOCK does not release the ZALLOCATEd resource(s)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",59)
   and a ZDEALLOCATE does not release the LOCKed resource(s).
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",60)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",61)
   Example:
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",62)

^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",63)
   Lock ^AR(PNT)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",64)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",65)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",66)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",67)
   ZAllocate ^AR(PNT,SUB)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",68)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",69)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",70)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",71)
   Lock ^TOT(TDT)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",72)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",73)
   .
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",74)
   ZDEALLOCATE ^AR(PNT,SUB)
^HELP("s","COMMANDS","s","ZALLOCATE","s","EXAMPLES",75)

^HELP("s","COMMANDS","s","ZBREAK")
ZBreak
^HELP("s","COMMANDS","s","ZBREAK",1)
   ZBreak
^HELP("s","COMMANDS","s","ZBREAK",2)

^HELP("s","COMMANDS","s","ZBREAK",3)
   The ZBREAK command sets or clears routine breakpoints during debugging.
^HELP("s","COMMANDS","s","ZBREAK",4)

^HELP("s","COMMANDS","s","ZBREAK",5)
   The format of the ZBREAK command is:
^HELP("s","COMMANDS","s","ZBREAK",6)

^HELP("s","COMMANDS","s","ZBREAK",7)
   ZB[REAK][:tvexpr] [-]entryref[:[expr][:intexpr]][,...]
^HELP("s","COMMANDS","s","ZBREAK",8)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",5)
   YDB>ZPRint ^ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",6)
   ZBTEST;
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",7)
        Do SUB
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",8)
        Quit
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",9)
   SUB  Write !,"This is ZBTEST"
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",10)
        Quit
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",11)
   YDB>ZBREAK SUB^ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",12)
   YDB>Do ^ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",13)
   %YDB-I-BREAKZBA, Break instruction encountered during ZBREAK action
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",14)
   At M source location SUB^ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",15)
   YDB>ZSHOW "B"
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",16)
   SUB^ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",18)
   This inserts a ZBREAK with a default action at SUB^ZBTEST. After YottaDB
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",19)
   encounters the BREAK, the ZSHOW "B" displays this as the only ZBREAK in
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",20)
   the image.
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",21)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",22)
   Example:
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",23)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",24)
   YDB>ZBREAK -*
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",25)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",26)
   YDB>ZGOTO
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",27)
   YDB>ZBREAK SUB^ZBTEST:"W !,""Trace"""
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",28)
   YDB>Do ^ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",29)
   Trace
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",30)
   This is ZBTEST
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",31)
   YDB>
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",32)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",33)
   This removes all existing ZBREAKs with a ZBREAK -*. Note that it is not
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",34)
   necessary to remove ZBREAKs before modifying them. It also clears the
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",35)
   process invocation stack with an argumentless ZGOTO. Then it uses a ZBREAK
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",36)
   to insert a trace-point. Every time YottaDB executes the line to where ZBREAK
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",37)
   has established a trace-point, it performs the specified action without
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",38)
   entering Direct Mode.
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",39)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",40)
   Example:
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",41)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",42)
   ZBreak PRINT^TIME::5
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",43)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",44)
   This BREAKs execution at line PRINT in routine just before the fifth time
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",45)
   the line is executed.
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",46)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",47)
   Example:
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",48)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",49)
   ZBREAK PRINT^TIME:"WRITE AVE BREAK":3
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",50)

^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",51)
   This inserts a ZBREAK action of WRITE AVE and BREAK before the third
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",52)
   execution of PRINT^TIME.
^HELP("s","COMMANDS","s","ZBREAK","s","EXAMPLES",53)

^HELP("s","COMMANDS","s","ZCOMPILE")
ZCOMpile
^HELP("s","COMMANDS","s","ZCOMPILE",1)
   ZCOMpile
^HELP("s","COMMANDS","s","ZCOMPILE",2)

^HELP("s","COMMANDS","s","ZCOMPILE",3)
   The ZCOMPILE command invokes the YottaDB compiler from within the YottaDB
^HELP("s","COMMANDS","s","ZCOMPILE",4)
   run-time environment.
^HELP("s","COMMANDS","s","ZCOMPILE",5)

^HELP("s","COMMANDS","s","ZCOMPILE",6)
   Within YottaDB itself, ZCOMPILE provides the functionality of the mumps
^HELP("s","COMMANDS","s","ZCOMPILE",7)
   command, except for mumps -direct.
^HELP("s","COMMANDS","s","ZCOMPILE",8)

^HELP("s","COMMANDS","s","ZCOMPILE",9)
   The format of the ZCOMPILE command is:
^HELP("s","COMMANDS","s","ZCOMPILE",10)

^HELP("s","COMMANDS","s","ZCOMPILE",11)
   ZCOM[PILE][:tvexpr] expr[,...]
^HELP("s","COMMANDS","s","ZCOMPILE",12)

^HELP("s","COMMANDS","s","ZCOMPILE",13)
   The $ZCSTATUS intrinsic special variable holds the value of the status
^HELP("s","COMMANDS","s","ZCOMPILE",14)
   code for the compilation performed by a ZCOMPILE command.
^HELP("s","COMMANDS","s","ZCOMPILE",15)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",3)
   Examples:
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",5)
   ZCOMPILE "EXAMPLE'.m"
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",7)
   This compiles EXAMPLE.m in the current working directory.
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",9)
   Example:
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",11)
   ZCOMPILE "-list A*.m"
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",13)
   This compiles all files starting with a [capital] A and an extension of .m
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",14)
   in the current working directory and produces corresponding listing files
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",15)
   for each source / object.
^HELP("s","COMMANDS","s","ZCOMPILE","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","ZCONTINUE")
ZContinue
^HELP("s","COMMANDS","s","ZCONTINUE",1)
   ZContinue
^HELP("s","COMMANDS","s","ZCONTINUE",2)

^HELP("s","COMMANDS","s","ZCONTINUE",3)
   The ZCONTINUE command continues routine execution after a BREAK command or
^HELP("s","COMMANDS","s","ZCONTINUE",4)
   a <CTRL-C>.
^HELP("s","COMMANDS","s","ZCONTINUE",5)

^HELP("s","COMMANDS","s","ZCONTINUE",6)
   The format of the ZCONTINUE command is:
^HELP("s","COMMANDS","s","ZCONTINUE",7)

^HELP("s","COMMANDS","s","ZCONTINUE",8)
   ZC[ONTINUE][:tvexpr]
^HELP("s","COMMANDS","s","ZCONTINUE",9)

^HELP("s","COMMANDS","s","ZDEALLOCATE")
ZDeallocate
^HELP("s","COMMANDS","s","ZDEALLOCATE",1)
   ZDeallocate
^HELP("s","COMMANDS","s","ZDEALLOCATE",2)

^HELP("s","COMMANDS","s","ZDEALLOCATE",3)
   The ZDEALLOCATE command releases a specified resource name or names
^HELP("s","COMMANDS","s","ZDEALLOCATE",4)
   previously reserved by the ZALLOCATE command. The ZDEALLOCATE command
^HELP("s","COMMANDS","s","ZDEALLOCATE",5)
   releases only the specified name(s) without releasing other names
^HELP("s","COMMANDS","s","ZDEALLOCATE",6)
   previously reserved with the ZALLOCATE or LOCK command.
^HELP("s","COMMANDS","s","ZDEALLOCATE",7)

^HELP("s","COMMANDS","s","ZDEALLOCATE",8)
   The ZDEALLOCATE command provides compatibility with some other YottaDB
^HELP("s","COMMANDS","s","ZDEALLOCATE",9)
   implementations. The M Development Committee choose to add the + and -
^HELP("s","COMMANDS","s","ZDEALLOCATE",10)
   delimiters to the LOCK command rather than adopt the ZALLOCATE and
^HELP("s","COMMANDS","s","ZDEALLOCATE",11)
   ZDEALLOCATE approach. Therefore, when a design requires an incremental
^HELP("s","COMMANDS","s","ZDEALLOCATE",12)
   lock mechanism, LOCK +/- has the advantage of being part of the M
^HELP("s","COMMANDS","s","ZDEALLOCATE",13)
   standard. LOCK +/- also has the advantage of working symmetrically when
^HELP("s","COMMANDS","s","ZDEALLOCATE",14)
   routines using LOCKs are nested.
^HELP("s","COMMANDS","s","ZDEALLOCATE",15)

^HELP("s","COMMANDS","s","ZDEALLOCATE",16)
   The format of the ZDEALLOCATE command is:
^HELP("s","COMMANDS","s","ZDEALLOCATE",17)

^HELP("s","COMMANDS","s","ZDEALLOCATE",18)
   ZD[EALLOCATE][:tvexpr] [nref[,...]]
^HELP("s","COMMANDS","s","ZDEALLOCATE",19)

^HELP("s","COMMANDS","s","ZDEALLOCATE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZDEALLOCATE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZDEALLOCATE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZDEALLOCATE","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZDEALLOCATE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZEDIT")
ZEDit
^HELP("s","COMMANDS","s","ZEDIT",1)
   ZEDit
^HELP("s","COMMANDS","s","ZEDIT",2)

^HELP("s","COMMANDS","s","ZEDIT",3)
   The ZEDIT command invokes the editor specified by the EDITOR environment
^HELP("s","COMMANDS","s","ZEDIT",4)
   variable for YottaDB and opens the specified file for editing. If the EDITOR
^HELP("s","COMMANDS","s","ZEDIT",5)
   environment variable is undefined, ZEDIT tries to invoke the UNIX vi
^HELP("s","COMMANDS","s","ZEDIT",6)
   editor.
^HELP("s","COMMANDS","s","ZEDIT",7)

^HELP("s","COMMANDS","s","ZEDIT",8)
   By default, ZEDIT puts a new file into the first source directory in
^HELP("s","COMMANDS","s","ZEDIT",9)
   $ZROUTINES. You can specify a file path explicitly in the argument to the
^HELP("s","COMMANDS","s","ZEDIT",10)
   ZEDIT command, for example: the current working directory:
^HELP("s","COMMANDS","s","ZEDIT",11)

^HELP("s","COMMANDS","s","ZEDIT",12)
   ZEDIT "./file"
^HELP("s","COMMANDS","s","ZEDIT",13)

^HELP("s","COMMANDS","s","ZEDIT",14)
   The format of the ZEDIT command is:
^HELP("s","COMMANDS","s","ZEDIT",15)

^HELP("s","COMMANDS","s","ZEDIT",16)
   ZED[IT][:tvexpr] [expr[,...]]
^HELP("s","COMMANDS","s","ZEDIT",17)

^HELP("s","COMMANDS","s","ZEDIT",18)
   When the argument to a ZEDIT includes a file or path name, $ZSOURCE
^HELP("s","COMMANDS","s","ZEDIT",19)
   maintains that as a default for ZEDIT and ZLINK.
^HELP("s","COMMANDS","s","ZEDIT",20)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",5)
   YDB>ZEDIT "BAL"
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",7)
   This invokes the editor for a file with a name of BAL and an extension of
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",8)
   .m. Notice that BAL is a string literal.
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",9)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",10)
   Example:
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",12)
   YDB>Set prog="BAL"
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",14)
   YDB>ZEDit prog
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",15)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",16)
   This is similar to the first example except that it uses a variable
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",17)
   argument rather than a string literal.
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",19)
   Example:
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",21)
   YDB>zedit ".login"
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",23)
   This invokes the editor for a file with the name .login. Notice that in
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",24)
   this case the file is not a YottaDB file, since .login starts with a period,
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",25)
   and therefore, cannot be a YottaDB file.
^HELP("s","COMMANDS","s","ZEDIT","s","EXAMPLES",26)

^HELP("s","COMMANDS","s","ZGOTO")
ZGoto
^HELP("s","COMMANDS","s","ZGOTO",1)
   ZGoto
^HELP("s","COMMANDS","s","ZGOTO",2)

^HELP("s","COMMANDS","s","ZGOTO",3)
   The ZGOTO command transfers control to various levels in the YottaDB
^HELP("s","COMMANDS","s","ZGOTO",4)
   invocation stack. It also can transfer control from one part of the
^HELP("s","COMMANDS","s","ZGOTO",5)
   routine to another or from one routine to another using the specified
^HELP("s","COMMANDS","s","ZGOTO",6)
   entryref.
^HELP("s","COMMANDS","s","ZGOTO",7)

^HELP("s","COMMANDS","s","ZGOTO",8)
   The format of the ZGOTO command is:
^HELP("s","COMMANDS","s","ZGOTO",9)

^HELP("s","COMMANDS","s","ZGOTO",10)
   ZG[OTO][:tvexpr] [[intexpr][:entryref[:tvexpr]],...]
^HELP("s","COMMANDS","s","ZGOTO",11)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",5)
   YDB>ZGOTO
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",6)
   YDB>ZSHow
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",7)
   +1^GTM$DMOD (Direct mode)
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",8)
   YDB>
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",9)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",10)
   This uses ZGOTO to clear all levels of the YottaDB invocation stack. ZSHOW
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",11)
   with no arguments displays the stack.
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",13)
   Example:
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",15)
   SET $ZTRAP="ZGOTO "_$ZLEVEL_":^ERROR"
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",17)
   This SETs $ZTRAP to contain a ZGOTO, so if an error causes YottaDB to XECUTE
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",18)
   $ZTRAP, the routine ERROR executes at the same level as the SET command
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",19)
   shown in the example.
^HELP("s","COMMANDS","s","ZGOTO","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","ZHALT")
ZHALT
^HELP("s","COMMANDS","s","ZHALT",1)
   ZHALT
^HELP("s","COMMANDS","s","ZHALT",2)

^HELP("s","COMMANDS","s","ZHALT",3)
   The ZHALT command stops program execution and causes YottaDB to return
^HELP("s","COMMANDS","s","ZHALT",4)
   control to the invoking environment/program with a return code.
^HELP("s","COMMANDS","s","ZHALT",5)

^HELP("s","COMMANDS","s","ZHALT",6)
   The format of the ZHALT command is:
^HELP("s","COMMANDS","s","ZHALT",7)

^HELP("s","COMMANDS","s","ZHALT",8)
   ZHALT[:tvexpr] [intexpr]
^HELP("s","COMMANDS","s","ZHALT",9)

^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",5)
   YDB>zhalt 230
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",6)
   $ echo $?
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",7)
   230
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",9)
   Example:
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",11)
   YDB>zhalt 257
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",12)
   $ echo $?
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",13)
   1
^HELP("s","COMMANDS","s","ZHALT","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZHELP")
ZHelp
^HELP("s","COMMANDS","s","ZHELP",1)
   ZHelp
^HELP("s","COMMANDS","s","ZHELP",2)

^HELP("s","COMMANDS","s","ZHELP",3)
   The ZHELP command accesses the help information from the YottaDB help library
^HELP("s","COMMANDS","s","ZHELP",4)
   or from any help library specified in the command argument.
^HELP("s","COMMANDS","s","ZHELP",5)

^HELP("s","COMMANDS","s","ZHELP",6)
   The format of the ZHELP command is:
^HELP("s","COMMANDS","s","ZHELP",7)

^HELP("s","COMMANDS","s","ZHELP",8)
   ZH[ELP][:tvexpr] [expr1[:expr2],...]
^HELP("s","COMMANDS","s","ZHELP",9)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",5)
   YDB>zhelp "func $data"
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",7)
   This lists the help for function $DATA, which is a subtopic of functions
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",8)
   topic.
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",9)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",10)
   Example:
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",12)
   YDB>zhelp
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",14)
   This uses ZHELP to list all the keywords in the help library.
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",15)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",16)
   Example:
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",18)
   YDB>zhelp "ZSHOW"
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",20)
   This lists the help for command ZSHOW.
^HELP("s","COMMANDS","s","ZHELP","s","EXAMPLES",21)

^HELP("s","COMMANDS","s","ZKILL")
ZKill
^HELP("s","COMMANDS","s","ZKILL",1)
   ZKill
^HELP("s","COMMANDS","s","ZKILL",2)

^HELP("s","COMMANDS","s","ZKILL",3)
   The ZKILL command KILLs the data value for a variable name without
^HELP("s","COMMANDS","s","ZKILL",4)
   affecting the nodes descended from that node.
^HELP("s","COMMANDS","s","ZKILL",5)

^HELP("s","COMMANDS","s","ZKILL",6)
   The format of the ZKILL command is:
^HELP("s","COMMANDS","s","ZKILL",7)

^HELP("s","COMMANDS","s","ZKILL",8)
   ZK[ILL][:tvexpr] glvn
^HELP("s","COMMANDS","s","ZKILL",9)

^HELP("s","COMMANDS","s","ZLINK")
ZLink
^HELP("s","COMMANDS","s","ZLINK",1)
   ZLink
^HELP("s","COMMANDS","s","ZLINK",2)

^HELP("s","COMMANDS","s","ZLINK",3)
   The ZLINK command adds an executable YottaDB routine to the current process
^HELP("s","COMMANDS","s","ZLINK",4)
   if the current process does not contain a copy of a routine. If the
^HELP("s","COMMANDS","s","ZLINK",5)
   current process contains a copy of a routine and the routine is not
^HELP("s","COMMANDS","s","ZLINK",6)
   active, the ZLINK command replaces the current routine process with a
^HELP("s","COMMANDS","s","ZLINK",7)
   "new" version. If necessary, the ZLINK command compiles the routine prior
^HELP("s","COMMANDS","s","ZLINK",8)
   to integrating it with the process.
^HELP("s","COMMANDS","s","ZLINK",9)

^HELP("s","COMMANDS","s","ZLINK",10)
   With VIEW "LINK":"RECURSIVE" specified or by starting the process with the
^HELP("s","COMMANDS","s","ZLINK",11)
   environment variable ydb_link set to "RECURSIVE", the ZLINK command adds
^HELP("s","COMMANDS","s","ZLINK",12)
   an executable routine even when a routine with the same name is active and
^HELP("s","COMMANDS","s","ZLINK",13)
   available in the current stack. When a process links a routine with the
^HELP("s","COMMANDS","s","ZLINK",14)
   same name as an existing routine, future calls use the new routine. Prior
^HELP("s","COMMANDS","s","ZLINK",15)
   versions of that routine referenced by the stack remain tied to the stack
^HELP("s","COMMANDS","s","ZLINK",16)
   until they QUIT, at which point they become inaccessible. This provides a
^HELP("s","COMMANDS","s","ZLINK",17)
   mechanism to patch long-running processes.
^HELP("s","COMMANDS","s","ZLINK",18)

^HELP("s","COMMANDS","s","ZLINK",19)
   **Important**
^HELP("s","COMMANDS","s","ZLINK",20)

^HELP("s","COMMANDS","s","ZLINK",21)
   An active routine is displayed with $STACK() or ZSHOW "S" of the M virtual
^HELP("s","COMMANDS","s","ZLINK",22)
   stack. By default, an attempt to replace an active routine results in a
^HELP("s","COMMANDS","s","ZLINK",23)
   run-time error . To replace an active routine with a new version, either
^HELP("s","COMMANDS","s","ZLINK",24)
   use VIEW "LINK":"RECURSIVE" or remove the active routine from the stack
^HELP("s","COMMANDS","s","ZLINK",25)
   using ZGOTO or the appropriate number of QUITs and then execute the ZLINK
^HELP("s","COMMANDS","s","ZLINK",26)
   command.
^HELP("s","COMMANDS","s","ZLINK",27)

^HELP("s","COMMANDS","s","ZLINK",28)
   The format of the ZLINK command is:
^HELP("s","COMMANDS","s","ZLINK",29)

^HELP("s","COMMANDS","s","ZLINK",30)
   ZL[INK][:tvexpr] [expr1[:expr2][,...]]
^HELP("s","COMMANDS","s","ZLINK",31)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK")
Auto-ZLINK
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",1)
   Auto-ZLINK
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",2)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",3)
   If a YottaDB routine refers to a routine that is not linked in the process
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",4)
   memory, YottaDB automatically attempts to ZLINK that routine. An auto-ZLINK
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",5)
   is functionally equivalent to an explicit ZLINK of a routine without a
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",6)
   specified directory or file extension.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",7)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",8)
   The following YottaDB commands and functions can initiate auto-ZLINKing:
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",9)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",10)
     * DO
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",11)
     * GOTO
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",12)
     * ZBREAK
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",13)
     * ZGOTO
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",14)
     * ZPRINT
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",15)
     * $TEXT()
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",16)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",17)
   YottaDB auto-ZLINKs the routine if the following conditions are met:
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",18)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",19)
     * ZLINK can locate and process the routine file, as indicated in the
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",20)
       previous ZLINK Operation Summary table
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",21)
     * The name of the routine is the same as the name of the source file;
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",22)
       the only exception is that YottaDB converts a leading percent sign (%) in
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",23)
       a file name to an underscore (_).
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK",24)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP")
Auto-ZLINK_setup
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",1)
   Auto-ZLINK setup
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",2)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",3)
   This section describes the procedure to setup the auto-relink
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",4)
   functionality. YottaDB loads an object file linked from an object directory
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",5)
   (in $ZROUTINES) with a *-suffix (i.e. auto-relink-enabled) into a shared
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",6)
   memory segment (referred to henceforth as a Rtnobj shared memory segment).
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",7)
   At the invocation of DO, GOTO, or ZGOTO, extrinsic functions, ZBREAK,
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",8)
   ZPRINT or $TEXT() that specify an entryref which includes a routine name
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",9)
   (in contrast to a label without a routine name), YottaDB processes (and MUPIP
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",10)
   processes executing trigger logic) automatically relink ("auto-relink")
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",11)
   and execute published new versions of routines.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",12)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",13)
   The ZRUPDATE command publishes of new versions of routines to subscribers.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",14)
   To remove routines, delete the object files and publish the names of the
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",15)
   deleted object files. Removal requires file names to be explicitly
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",16)
   specified, because patterns with wildcards cannot match deleted files.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",17)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",18)
   If the path to a file is non-existent, the request is ignored except in
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",19)
   the case where one desires a currently shared object file (one that was
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",20)
   accessed before it was deleted) to no longer be shared.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",21)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",22)
   For each auto-relink enabled directory which a YottaDB process accesses while
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",23)
   searching through $ZROUTINES, YottaDB creates a small control file
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",24)
   (Relinkctl) in the directory identified by $ydb_linktmpdir (defaulting to
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",25)
   $ydb_tmp, which in turn defaults to /tmp, if unspecified). The names of
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",26)
   these files are of the form ydb-relinkctl-<murmur> where <murmur> is a
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",27)
   hash of the realpath() to an auto-relink directory; for example:
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",28)
   /tmp/ydb-relinkctl-f0938d18ab001a7ef09c2bfba946f002). With each Relinkctl
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",29)
   file, YottaDB creates and associates a block of shared memory that contains
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",30)
   associated control structures. Among the structures is a cycle number
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",31)
   corresponding to each routine found in the routine directory; a change in
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",32)
   the cycle number informs a process that it may need to determine whether
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",33)
   there is a new version of a routine. Although YottaDB only creates relinkctl
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",34)
   records for routines that actually exist on disk, it may increment cycle
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",35)
   numbers for existing relinkctl records even if they no longer exist on
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",36)
   disk.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",37)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",38)
   YottaDB creates both the Relinkctl file and shared memory with permissions
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",39)
   based on the logic described in the "IPC Permissions" column of the
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",40)
   "Shared Resource Authorization Permissions" section in the Administration
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",41)
   and Operations Guide, except that the object directory, rather than the
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",42)
   database file, provides the base permissions.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",43)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",44)
   The MUPIP RCTLDUMP command reports information related to relinkctl files
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",45)
   and their associated shared memory segments.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",46)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",47)
   The environment variable ydb_autorelink_keeprtn if set to 1, t[rue], or
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",48)
   y[es] causes exiting processes to leave auto-relinked object code in the
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",49)
   shared memory repositories, while if undefined, 0, f[alse] or n[o] causes
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",50)
   exiting processes to purge any routines currently use by no processes. All
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",51)
   values are case-independent. When ydb_autorelink_keeprtn is defined and
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",52)
   TRUE:
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",53)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",54)
     o Process exit is simplified, with the performance gain - faster process
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",55)
       termination - likely to be observable only when a large number of
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",56)
       processes exit concurrently.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",57)
     o Where routines are likely to be repeatedly used by other processes,
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",58)
       such as in a production environment, leaving a routine in shared
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",59)
       memory even when no longer used by existing processes, results in
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",60)
       slightly faster linking of that routine by future processes, although
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",61)
       the effect may not be observable except when an application frequently
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",62)
       uses short-lived processes, such as YottaDB routines invoked by web
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",63)
       servers using a CGI interface.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",64)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",65)
   YottaDB recommends that a directory in the $zroutines of a process be either
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",66)
   auto-relink-enabled or auto-relink-disabled for the life of the process.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",67)
   Changing the auto-relink mode of the directory within a process is likely
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",68)
   to result in counter-intuitive results..
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",69)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",70)
   As arguments, ZRUPDATE takes object file names, including wild-cards of
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",71)
   the form accepted by $ZSEARCH(). If ZRUPDATE fails to find at least one
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",72)
   file to match an argument with a wild card, it issues an INFO message
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",73)
   (seen only if $PRINCIPAL has CENABLE). When the argument specifies an
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",74)
   explicit name without a wild card, but there is no file in the directory
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",75)
   or a corresponding entry in the Relinkctl, ZRUPDATE produces an error.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",76)
   ZRUPDATE issues most errors as FILEPARSE errors with a secondary error
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",77)
   describing the actual issue although some errors, depending on the reason
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",78)
   and path by which ZRUPDATE detects them, can be rather cryptic.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",79)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",80)
   In other cases YottaDB always performs the dynamic link.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",81)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",82)
   An explicit ZLINK from an auto-relink directory acts as an implicit
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",83)
   ZRUPDATE.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",84)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",85)
   Any ZBREAK in a routine disables that routine from auto-relinking by a
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",86)
   process until all ZBREAKs are removed.
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",87)

^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",88)
   If recursive relink is not enabled, routines currently active in the M
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",89)
   virtual machine stack are disabled from auto-relinking until they complete
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",90)
   (or are removed from the stack by a ZGOTO).
^HELP("s","COMMANDS","s","ZLINK","s","AUTO-ZLINK_SETUP",91)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",5)
   YDB>ZLINK "test"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",7)
   If ZLINK finds test.m or test.o, it adds the routine test to the current
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",8)
   image. If ZLINK does not find test.o, or finds that test.o is older than
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",9)
   test.m, YottaDB compiles test.m to produce a new test.o, and adds the
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",10)
   contents of the new object file to the image. This example assumes "test"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",11)
   is not on the current M stack - if it is on the stack, YottaDB gives an
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",12)
   error.
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",14)
   Example:
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",15)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",16)
   YDB>zlink "test.m":"-noobject -list"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",18)
   This compiles the routine "test" and produces a listing but no object
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",19)
   file. Because the example produces no object file, it must locate an
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",20)
   existing object file (which might be the same as any copy in the current
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",21)
   image); if there is noexisting object file, YottaDB produces an error. While
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",22)
   this example shows the use of compilation qualifiers with ZLINK, a
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",23)
   -noobject -list compilation might better be done with ZCOMPILE.
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",24)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",25)
   Example:
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",26)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",27)
   YDB>zlink "sockexamplemulti2"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",28)
   %YDB-E-LOADRUNNING, Cannot ZLINK an active routine sockexamplemulti2
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",29)
   YDB>zshow "S"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",30)
   sockexamplemulti2+12^sockexamplemulti2    (Direct mode)
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",31)
   YDB>view "LINK":"RECURSIVE"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",32)
   YDB>zlink "sockexamplemulti2"
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",33)
   YDB>
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",34)

^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",35)
   This example demonstrates how VIEW "LINK":"RECURSIVE" command ZLINKs a
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",36)
   routine when its prior version is already there in the active M virtual
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",37)
   stack.
^HELP("s","COMMANDS","s","ZLINK","s","EXAMPLES",38)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES")
ZLINK,_auto-ZLINK_and_Routine_Names
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",1)
   ZLINK, auto-ZLINK and Routine Names
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",2)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",3)
   In YottaDB, the name of the source file determines the name of the YottaDB
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",4)
   routine. The file name of the object file is not required to match the
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",5)
   name of the routine. Linking the object file makes the internal routine
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",6)
   name (derived from the source file) known to YottaDB. This can lead to
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",7)
   potential confusion, however, since both ZLINK and auto-ZLINK use the name
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",8)
   of the object file to find the routine. When the object file name differs
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",9)
   from the name of the routine, auto-ZLINK generates a run-time error.
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",10)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",11)
   **Note**
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",12)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",13)
   Auto-ZLINK and ZLINK commands without a .m or .o file extension in their
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",14)
   argument determine the need to recompile based on whether the object file
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",15)
   was more recently modified than the source file using time in nanoseconds,
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",16)
   as provided by the underlying system call. Note that, although the format
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",17)
   of the file modification timestamps provides a nanosecond granularity,
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",18)
   many supported OSs currently update the file timestamps with an accuracy
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",19)
   of one second.
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK,_AUTO-ZLINK_AND_ROUTINE_NAMES",20)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION")
ZLINK_Compilation
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",1)
   ZLINK Compilation
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",2)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",3)
   If ZLINK compiles a routine and the -OBJECT= qualifier does not redirect
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",4)
   the output, it places the resulting object file in the directory indicated
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",5)
   by the search criteria. ZLINK incorporates the new object file into the
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",6)
   image, regardless of its directory placement.
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",7)

^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",8)
   If the command does not specify compile qualifiers (with expr2) and
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",9)
   $ZCOMPILE is null, YottaDB uses the default M command qualifiers, -ignore,
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",10)
   -labels=lower, -nolist, and -object.
^HELP("s","COMMANDS","s","ZLINK","s","ZLINK_COMPILATION",11)

^HELP("s","COMMANDS","s","ZMESSAGE")
ZMessage
^HELP("s","COMMANDS","s","ZMESSAGE",1)
   ZMessage
^HELP("s","COMMANDS","s","ZMESSAGE",2)

^HELP("s","COMMANDS","s","ZMESSAGE",3)
   The ZMESSAGE command raises an exception condition based on the specified
^HELP("s","COMMANDS","s","ZMESSAGE",4)
   message code.
^HELP("s","COMMANDS","s","ZMESSAGE",5)

^HELP("s","COMMANDS","s","ZMESSAGE",6)
   The format of the ZMESSAGE command is:
^HELP("s","COMMANDS","s","ZMESSAGE",7)

^HELP("s","COMMANDS","s","ZMESSAGE",8)
   ZM[ESSAGE][:tvexpr] intexpr[:expr2][:...]
^HELP("s","COMMANDS","s","ZMESSAGE",9)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",3)
   All of the following examples issue ZMESSAGE from Direct Mode where
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",4)
   exception conditions do not invoke $ZTRAP.
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",5)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",6)
   Example:
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",7)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",8)
   YDB>ZMessage 2
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",9)
   %SYSTEM-E-ENO2, No such file or directory
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",11)
   This ZMESSAGE does not specify substitution text and the message does not
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",12)
   include any substitution directives.
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",14)
   Example:
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",15)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",16)
   YDB>ZMESSAGE 150372994
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",17)
   %YDB-E-GVUNDEF, Global Variable undefined:
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",19)
   The message specified by this ZMESSAGE command includes a substitution
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",20)
   directive but the command does not supply any text.
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",21)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",22)
   Example:
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",23)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",24)
   YDB>ZMESSAGE 150373850:"x"
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",25)
   %YDB-E-UNDEF, Undefined local variable: x
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",26)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",27)
   This ZMESSAGE command supplies the substitution text for the message.
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",28)

^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",29)
   YottaDB treats its own odd-numbered conditions as "successful." YottaDB handles
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",30)
   successful conditions by displaying the associated message and continuing
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",31)
   execution. YottaDB treats its own even-numbered conditions as failures. YottaDB
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",32)
   handles failure conditions by storing the error information in $ZSTATUS
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",33)
   and XECUTEing $ETRAP or $ZTRAP In Direct Mode, YottaDB only reports failure
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",34)
   conditions to the principal device and does not XECUTE $ETRAP or $ZTRAP or
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",35)
   set $ZSTATUS; if $PRINCIPAL is in CENABLE mode, YottaDB sends it
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",36)
   Informational messages which are not errors but a form of success. System
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",37)
   service errors do not follow the YottaDB odd/even pattern.
^HELP("s","COMMANDS","s","ZMESSAGE","s","EXAMPLES",38)

^HELP("s","COMMANDS","s","ZPRINT")
ZPrint
^HELP("s","COMMANDS","s","ZPRINT",1)
   ZPrint
^HELP("s","COMMANDS","s","ZPRINT",2)

^HELP("s","COMMANDS","s","ZPRINT",3)
   The ZPRINT command displays the source code lines selected by its
^HELP("s","COMMANDS","s","ZPRINT",4)
   argument.
^HELP("s","COMMANDS","s","ZPRINT",5)

^HELP("s","COMMANDS","s","ZPRINT",6)
   The format of the ZPRINT command is:
^HELP("s","COMMANDS","s","ZPRINT",7)

^HELP("s","COMMANDS","s","ZPRINT",8)
   ZP[RINT][:tvexpr][entryref[:label[+intexpr]][,...]
^HELP("s","COMMANDS","s","ZPRINT",9)

^HELP("s","COMMANDS","s","ZPRINT",10)
   Note that the routinename may only appear before the colon (:) delimiter.
^HELP("s","COMMANDS","s","ZPRINT",11)
   The integer expression offsets may be positive or negative, but they must
^HELP("s","COMMANDS","s","ZPRINT",12)
   always be delimited by a plus sign (+).
^HELP("s","COMMANDS","s","ZPRINT",13)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",5)
   YDB>ZPRINT X^RTN
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",7)
   This example displays the line beginning with the label X in the routine
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",8)
   RTN.
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",9)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",10)
   Example:
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",11)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",12)
   YDB>ZPRINT X^RTN:X+5
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",14)
   YDB>ZPRINT X+-5^RTN:X
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",15)
   YDB>ZPRINT X^RTN:X+-5^RTN
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",17)
   The first line displays the line beginning with the label X and the next 5
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",18)
   lines in routine RTN. The second line displays the 5 lines preceding label
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",19)
   X in the same routine and the line beginning with label X. The third line
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",20)
   generates a run-time error because the routine name must appear only
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",21)
   before the colon in the argument.
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",23)
   Example:
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",24)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",25)
   YDB>zprint ^A#1#
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",26)
    do ^test1
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",27)
    do stop^test2
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",28)
   YDB>
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",29)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",30)
   This command displays the trigger code for trigger name A#1#.
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",31)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",32)
   ZPRINT ^x#/BREG : Print trigger routine user-named "x" in region BREG
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",33)
   ZPRINT ^x#1#/BREG : Print trigger routine auto-named "x#1" in region BREG
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",34)
   ZPRINT ^x#1#A/BREG : Print trigger routine auto-named "x#1", runtime disambiguated by "#A", AND in region BREG
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",35)
   ZPRINT +1^x#1#A/BREG : Print line 1 of trigger routine auto-named "x#1", runtime disambiguated by "#A", AND in region BREG
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",36)

^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",37)
   These are some examples of disambiguator combinations.
^HELP("s","COMMANDS","s","ZPRINT","s","EXAMPLES",38)

^HELP("s","COMMANDS","s","ZRUPDATE")
ZRUPDATE
^HELP("s","COMMANDS","s","ZRUPDATE",1)
   ZRUPDATE
^HELP("s","COMMANDS","s","ZRUPDATE",2)

^HELP("s","COMMANDS","s","ZRUPDATE",3)
   Publishes the new versions of routines to subscribers. The format of the
^HELP("s","COMMANDS","s","ZRUPDATE",4)
   ZRUPDATE command is:
^HELP("s","COMMANDS","s","ZRUPDATE",5)

^HELP("s","COMMANDS","s","ZRUPDATE",6)
   ZRUP[DATE][:tvexpr] expr [,...]
^HELP("s","COMMANDS","s","ZRUPDATE",7)

^HELP("s","COMMANDS","s","ZRUPDATE",8)
     o The optional truth-valued expression immediately following the command
^HELP("s","COMMANDS","s","ZRUPDATE",9)
       is a command postconditional that controls whether or not YottaDB
^HELP("s","COMMANDS","s","ZRUPDATE",10)
       executes the command.
^HELP("s","COMMANDS","s","ZRUPDATE",11)
     o expr contains a list of object file names, with or without wildcards,
^HELP("s","COMMANDS","s","ZRUPDATE",12)
       which ZRUPDATE publishes new versions to subscribers.
^HELP("s","COMMANDS","s","ZRUPDATE",13)
     o To remove routines, delete the object files and publish the names of
^HELP("s","COMMANDS","s","ZRUPDATE",14)
       the deleted object files. Removal requires file names to be explicitly
^HELP("s","COMMANDS","s","ZRUPDATE",15)
       specified, because patterns with wildcards cannot match deleted files.
^HELP("s","COMMANDS","s","ZRUPDATE",16)
     o ZRUPDATE rejects file-name arguments that are symbolic links or start
^HELP("s","COMMANDS","s","ZRUPDATE",17)
       with a percent-sign (%)
^HELP("s","COMMANDS","s","ZRUPDATE",18)
     o ZRUPDATE recognizes question-mark (?) as a single character wild-card
^HELP("s","COMMANDS","s","ZRUPDATE",19)
     o If the path to a file is non-existent, the request is ignored except
^HELP("s","COMMANDS","s","ZRUPDATE",20)
       in the case where one desires a currently shared object file (one that
^HELP("s","COMMANDS","s","ZRUPDATE",21)
       was accessed before it was deleted) to no longer be shared.
^HELP("s","COMMANDS","s","ZRUPDATE",22)
     o To effect auto-relink, YottaDB creates small temporary files in the
^HELP("s","COMMANDS","s","ZRUPDATE",23)
       directory referred to by $ydb_linktmpdir (defaulting to $ydb_tmp,
^HELP("s","COMMANDS","s","ZRUPDATE",24)
       which in turn defaults to /tmp, if unspecified). The names of these
^HELP("s","COMMANDS","s","ZRUPDATE",25)
       files are of the form ydb-relinkctl<md5sum> where <md5sum> is a hash
^HELP("s","COMMANDS","s","ZRUPDATE",26)
       of the realpath() to an auto-relink directory. The group and
^HELP("s","COMMANDS","s","ZRUPDATE",27)
       permissions match those for the directory as described in the section
^HELP("s","COMMANDS","s","ZRUPDATE",28)
       Shared Resources Authorization Permissions in Appendix E (YottaDB
^HELP("s","COMMANDS","s","ZRUPDATE",29)
       Security Philosophy) of the UNIX Administration and Operations Guide.
^HELP("s","COMMANDS","s","ZRUPDATE",30)
       YottaDB recommends that all processes that share a directory whose
^HELP("s","COMMANDS","s","ZRUPDATE",31)
       contents are subject to ZRUPDATE use the same value for
^HELP("s","COMMANDS","s","ZRUPDATE",32)
       $ydb_linktmpdir so that all processes see update notifications - with
^HELP("s","COMMANDS","s","ZRUPDATE",33)
       different values of $ydb_linktmpdir, a ZRUPDATE by a process with one
^HELP("s","COMMANDS","s","ZRUPDATE",34)
       value of $ydb_linktmpdir would not be observed by a process with a
^HELP("s","COMMANDS","s","ZRUPDATE",35)
       different value of that environment variable.
^HELP("s","COMMANDS","s","ZRUPDATE",36)
     o ZRUPDATE always updates the existing shared memory relinkctl
^HELP("s","COMMANDS","s","ZRUPDATE",37)
       information for a file with an existing entry.
^HELP("s","COMMANDS","s","ZRUPDATE",38)

^HELP("s","COMMANDS","s","ZSHOW")
ZSHow
^HELP("s","COMMANDS","s","ZSHOW",1)
   ZSHow
^HELP("s","COMMANDS","s","ZSHOW",2)

^HELP("s","COMMANDS","s","ZSHOW",3)
   The ZSHOW command displays information about the current YottaDB environment.
^HELP("s","COMMANDS","s","ZSHOW",4)

^HELP("s","COMMANDS","s","ZSHOW",5)
   The format of the ZSHOW command is:
^HELP("s","COMMANDS","s","ZSHOW",6)

^HELP("s","COMMANDS","s","ZSHOW",7)
   ZSH[OW][:tvexpr][expr[:glvn][,...]]
^HELP("s","COMMANDS","s","ZSHOW",8)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",5)
   YDB>ZSHOW "db"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",7)
   This command displays all devices with deviceparameters reflecting their
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",8)
   current characteristics followed by any current ZBREAK locations with
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",9)
   their corresponding actions.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",11)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",13)
   YDB>ZSHOW "dbd"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",15)
   This command displays the same output as the previous example.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",17)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",19)
   YDB>ZSHOW "ax"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",21)
   This command generates a run-time error.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",22)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",23)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",24)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",25)
   LAB1  DO LAB2
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",26)
         Quit
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",27)
   LAB2  Do LAB3
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",28)
         Quit
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",29)
   LAB3  ZSHow
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",30)
         Quit
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",31)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",32)
   Produces the results:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",33)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",34)
   LAB3^RTN
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",35)
   LAB2^RTN
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",36)
   LAB1^RTN
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",37)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",38)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",39)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",40)
   YDB>ZSHOW "G"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",41)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",42)
   For process that has access to two database files produces results like
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",43)
   the following:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",44)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",45)
   GLD:*,REG:*,SET:205,KIL:0,GET:1,DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,LKF:0,CTN:0,DRD:9,DWT:15,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",46)
   NTW:203,NTR:4,NBW:212,NBR:414,NR0:0,NR1:0,NR2:0,NR3:0,TTW:1,TTR:0,TRB:0,TBW:2,TBR:6,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",47)
   TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,JFS:0,JBB:0,JFB:0,JFW:0,JRL:0,JRP:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",48)
   JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",49)
   GLD:/home/gtmuser1/.yottadb/r130_x86_64/g/mumps.gld,REG:DEFAULT,SET:205,KIL:0,GET:1,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",50)
   DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,LKF:0,CTN:411,DRD:9,DWT:15,NTW:2
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",51)
   03,NTR:4,NBW:212,NBR:414,NR0:0,NR1:0,NR2:0,NR3:0,TTW:1,TTR:0,TRB:0,TBW:2,TBR:6,TR0:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",52)
   TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",53)
   GLD:/tmp/tst/test.gld,REG:DEFAULT,SET:205,KIL:0,GET:1,DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,LKF:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",54)
   CTN:411,DRD:9,DWT:15,NTW:203,NTR:4,NBW:212,NBR:414,NR0:0,NR1:0,NR2:0,NR3:0,TTW:1,TTR:0,TRB:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",55)
   TBW:2,TBR:6,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,JFS:0,JBB:0,JFB:0,JFW:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",56)
   JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",57)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",58)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",59)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",60)
   YDB>ZSHOW "G"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",61)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",62)
   Assuming that a YottaDB process uses the global directory "/tmp/x1.gld" and
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",63)
   opens two regions REG1 and REG2 corresponding to two database files, the
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",64)
   above command produces results like the following:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",65)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",66)
   GLD:*,REG:*,SET:0,KIL:0,GET:0,DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,LKF:0,CTN:0,DRD:0,DWT:0,NTW:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",67)
   NTR:0,NBW:0,NBR:0,NR0:0,NR1:0,NR2:0,NR3:0,TTW:0,TTR:0,TRB:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",68)
   TBW:0,TBR:0,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",69)
   GLD:/tmp/x1.gld,REG:REG1,SET:0,KIL:0,GET:0,DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,LKF:0,CTN:0,DRD:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",70)
   DWT:0,NTW:0,NTR:0,NBW:0,NBR:0,NR0:0,NR1:0,NR2:0,NR3:0,TTW:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",71)
   TTR:0,TRB:0,TBW:0,TBR:0,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,JFS:0,JBB:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",72)
   JFB:0,JFW:0,JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",73)
   GLD:/tmp/x1.gld,REG:REG2,SET:0,KIL:0,GET:0,DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,LKF:0,CTN:0,DRD:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",74)
   DWT:0,NTW:0,NTR:0,NBW:0,NBR:0,NR0:0,NR1:0,NR2:0,NR3:0,TTW:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",75)
   TTR:0,TRB:0,TBW:0,TBR:0,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,JFS:0,JBB:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",76)
   JFB:0,JFW:0,JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",77)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",78)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",79)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",80)
   YDB>ZSHOW "G":zgbl
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",81)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",82)
   This example redirects the output of ZSHOW "G" into a local variable zgbl:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",83)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",84)
   zgbl("G",0)="GLD:*,REG:*,SET:0,KIL:0,GET:0,DTA:0,ORD:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",85)
   ZPR:0,QRY:0,LKS:0,LKF:0,CTN:0,DRD:0,DWT:0,NTW:0,NTR:0,NBW:0,NBR:0,NR0:0,NR1:0,NR2:0,NR3:0,TTW:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",86)
   TTR:0,TRB:0,TBW:0,TBR:0,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,JFS:0,JBB:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",87)
   JFB:0,JFW:0,JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",88)
   zgbl("G",1)="GLD:/tmp/x1.gld,REG:REG1,SET:0,KIL:0,GET:0,DTA:0,ORD:0,ZPR:0,QRY:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",89)
   LKS:0,LKF:0,CTN:0,DRD:0,DWT:0,NTW:0,NTR:0,NBW:0,NBR:0,NR0:0,NR1:0,NR2:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",90)
   NR3:0,TTW:0,TTR:0,TRB:0,TBW:0,TBR:0,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",91)
   JFS:0,JBB:0,JFB:0,JFW:0,JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",92)
   zgbl("G",2)="GLD:/tmp/x1.gld,REG:REG2,SET:0,KIL:0,GET:0,DTA:0,ORD:0,ZPR:0,QRY:0,LKS:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",93)
   LKF:0,CTN:0,DRD:0,DWT:0,NTW:0,NTR:0,NBW:0,NBR:0,NR0:0,NR1:0,NR2:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",94)
   NR3:0,TTW:0,TTR:0,TRB:0,TBW:0,TBR:0,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:0,DFL:0,DFS:0,JFL:0,
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",95)
   JFS:0,JBB:0,JFB:0,JFW:0,JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,CAT:4,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",96)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",97)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",98)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",99)
   YDB>LOCK ^FAIL:10
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",100)
   YDB>lock (^SUCCESS1,^SUCCESS2)
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",101)
   YDB>zshow "L"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",102)
   MLG:1,MLT:1
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",103)
   LOCK ^SUCCESS1 LEVEL=1
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",104)
   LOCK ^SUCCESS2 LEVEL=1
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",105)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",106)
   This output shows that a process locked ^SUCCESS1 and ^SUCCESS2 and
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",107)
   another the lock on ^FAIL failed due to time out.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",108)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",109)
   Note that even though two lock resources ^SUCCESS1 and ^SUCCESS2 were
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",110)
   specified in the LOCK command that succeeded, YottaDB increments the MLG
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",111)
   counter by only 1 because they are part of the same LOCK command. A ZSHOW
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",112)
   "L":var by the same process (redirecting the output of ZSHOW into a local
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",113)
   or global variable) would result in <var> holding the following contents.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",114)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",115)
   var("L",0)="MLG:1,MLT:1"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",116)
   var("L",1)="LOCK ^SUCCESS1 LEVEL=1"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",117)
   var("L",2)="LOCK ^SUCCESS2 LEVEL=1"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",118)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",119)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",120)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",121)
   YDB>ZSHOW "L":var
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",122)
   YDB>ZWRITE var
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",123)
   var("L",0)="MLG:1,MLT:1"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",124)
   var("L",1)="LOCK ^SUCCESS1 LEVEL=1"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",125)
   var("L",2)="LOCK ^SUCCESS2 LEVEL=1"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",126)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",127)
   This example shows how ZSHOW "L" redirects it output into a local variable
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",128)
   var.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",129)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",130)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",131)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",132)
   YDB>ZSHOW "I"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",133)
   $DEVICE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",134)
   $ECODE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",135)
   $ESTACK=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",136)
   $ETRAP=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",137)
   $HOROLOG="64813,13850"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",138)
   $IO="/dev/pts/0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",139)
   $JOB=20264
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",140)
   $KEY=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",141)
   $PRINCIPAL="/dev/pts/0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",142)
   $QUIT=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",143)
   $REFERENCE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",144)
   $STACK=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",145)
   $STORAGE=2147483647
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",146)
   $SYSTEM="47,gtm_sysid"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",147)
   $TEST=1
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",148)
   $TLEVEL=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",149)
   $TRESTART=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",150)
   $X=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",151)
   $Y=20
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",152)
   $ZA=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",153)
   $ZALLOCSTOR=671584
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",154)
   $ZAUDIT=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",155)
   $ZB=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",156)
   $ZCHSET="M"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",157)
   $ZCLOSE=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",158)
   $ZCMDLINE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",159)
   $ZCOMPILE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",160)
   $ZCSTATUS=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",161)
   $ZDATEFORM=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",162)
   $ZDIRECTORY="/path/to/the/current/directory"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",163)
   $ZEDITOR=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",164)
   $ZEOF=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",165)
   $ZERROR="Unprocessed $ZERROR, see $ZSTATUS"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",166)
   $ZGBLDIR="/path/to/the/global/directory/mumps.gld"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",167)
   $ZHOROLOG="64813,13850,790453,14400"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",168)
   $ZININTERRUPT=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",169)
   $ZINTERRUPT="IF $ZJOBEXAM()"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",170)
   $ZIO="/dev/pts/0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",171)
   $ZJOB=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",172)
   $ZKEY=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",173)
   $ZLEVEL=1
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",174)
   $ZMAXTPTIME=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",175)
   $ZMODE="INTERACTIVE"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",176)
   $ZONLNRLBK=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",177)
   $ZPATNUMERIC="M"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",178)
   $ZPIN="/dev/pts/0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",179)
   $ZPOSITION="+1^GTM$DMOD"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",180)
   $ZPOUT="/dev/pts/0"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",181)
   $ZPROMPT="YDB>"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",182)
   $ZQUIT=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",183)
   $ZREALSTOR=694280
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",184)
   $ZRELDATE="20200731 20:46 6996f60301958081b568fb2a804695d700f51c5e (dirty)"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",185)
   $ZROUTINES=". /home/user/.yottadb/r1.30_x86_64/o*(/home/user/.yottadb/r1.30_x86_64/r /home/user/.yottadb/r) /usr/local/lib/yottadb/r130/libyottadbutil.so"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",186)
   $ZSOURCE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",187)
   $ZSTATUS=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",188)
   $ZSTEP="B"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",189)
   $ZSTRPLLIM=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",190)
   $ZSYSTEM=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",191)
   $ZTIMEOUT=-1
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",192)
   $ZTDATA=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",193)
   $ZTDELIM=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",194)
   $ZTEXIT=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",195)
   $ZTLEVEL=0
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",196)
   $ZTNAME=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",197)
   $ZTOLDVAL=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",198)
   $ZTRAP="B"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",199)
   $ZTRIGGEROP=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",200)
   $ZTSLATE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",201)
   $ZTUPDATE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",202)
   $ZTVALUE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",203)
   $ZTWORMHOLE=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",204)
   $ZUSEDSTOR=666047
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",205)
   $ZUT=1528962650791332
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",206)
   $ZVERSION="GT.M V6.3-007 Linux x86_64"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",207)
   $ZYERROR=""
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",208)
   $ZYRELEASE="YottaDB r1.30 Linux x86_64"
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",209)

^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",210)
   This example displays the current value of all intrinsic special
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",211)
   variables.
^HELP("s","COMMANDS","s","ZSHOW","s","EXAMPLES",212)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES")
ZSHOW_Destination_Variables
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",1)
   ZSHOW Destination Variables
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",2)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",3)
   ZSHOW may specify an unsubscripted or subscripted global or local variable
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",4)
   name (glvn) into which ZSHOW places its output. If the argument does not
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",5)
   include a global or local variable name, ZSHOW directs its output to the
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",6)
   current device.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",7)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",8)
   When ZSHOW directs its output to a variable, it adds two levels of
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",9)
   descendants to that variable. The first level subscript contains a
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",10)
   one-character string from the set of upper-case ZSHOW action codes,
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",11)
   identifying the type of information. ZSHOW implicitly KILLs all
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",12)
   descendants of the first level nodes. ZSHOW stores information elements at
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",13)
   the second level using ascending integers, starting at 1.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",14)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",15)
   When a ZSHOW "V" directs its output to a local variable (lvn), the result
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",16)
   does not contain a copy of the descendants of the resulting "V" node.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",17)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",18)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",19)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",20)
   YDB>Kill  Set b(1,"two")="test" ZSHow "v":a ZWRite
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",21)
   a("V",1)="b(1,""two"")=""test"""
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",22)
   b(1,"two")="test"
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",23)
   YDB>
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",24)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",25)
   This ZSHow stores all local variables in the local variable a. Note that
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",26)
   ZSHOW does not replicate a("V") and a("V",1).
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",27)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",28)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",29)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",30)
   YDB>KILL  SET a(1,"D",3,5)="stuff",a(1,"X",2)="",a(1)=1
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",31)
   YDB>ZSHow "d":a(1)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",32)
   YDB>ZWRite
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",33)
   a(1)=1
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",34)
   a(1,"D",1)="/dev/pts/1 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",35)
                    EDIT "
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",36)
   a(1,"X",2)=""
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",37)
   YDB>
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",38)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",39)
   This ZSHOW stores the current open device information under a(1). Notice
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",40)
   how the ZSHOW overlays the prior value of a(1,"D",3,5).
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",41)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",42)
   Example:
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",43)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",44)
   YDB>KILL ^ZSHOW
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",45)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",46)
   YDB>ZB -*,lab^rout ZSH "B":^ZSHOW
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",47)
   YDB>ZWRite ^ZSHOW
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",48)
   ^ZSHOW("B",1)="LAB^ROUT"
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",49)
   YDB>
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",50)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",51)
   This ZSHOW stores the current ZBREAK information under the global variable
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",52)
   ^ZSHOW.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_DESTINATION_VARIABLES",53)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES")
ZSHOW_Information_Codes
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",1)
   ZSHOW Information Codes
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",2)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",3)
   A ZSHOW argument is an expression containing codes selecting one or more
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",4)
   types of information.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",5)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",6)
   A: A stands for Autorelink and provides output in the same format as MUPIP
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",7)
   RCTLDUMP, but restricted to the routines contained in the relinkctl areas
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",8)
   in use by the process issuing the command. ZSHOW "*" does not include
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",9)
   ZSHOW "A" because of an expectation that the typical volume of the
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",10)
   information does not provide a good return for its value. If you wish your
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",11)
   error handling or INTRPT routines to dump this information, ask for it
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",12)
   explicitly, possibly by doing a ZSHOW "A" into a local variable before
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",13)
   doing a ZSHOW "*".
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",14)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",15)
   B: displays active ZBREAK breakpoints
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",16)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",17)
   C: provides the list of loaded external call packages and their routines.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",18)
   ZSHOW "C" does not report packages that are accessible but have not been
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",19)
   accessed by the process.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",20)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",21)
   D: displays device information
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",22)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",23)
   G: displays the access statistics for global variables and access to
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",24)
   database file since process startup. When the process does not have access
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",25)
   to the current shared statistics, ZSHOW "G" return a question-mark (?) at
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",26)
   the end of the output strings.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",27)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",28)
   I: displays the current values of all intrinsic special variables
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",29)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",30)
   L: displays YottaDB LOCKs and ZALLOCATEs held by the process
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",31)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",32)
   R: displays the YottaDB invocation stack and a hash based on the MurmurHash3
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",33)
   algorithm of M source code for each routine on the stack.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",34)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",35)
   S: displays the YottaDB invocation stack
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",36)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",37)
   T: displays the cross-region summary (total) lines associated with G and L
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",38)
   codes. Lines associated with G end with a question-mark (?) when the
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",39)
   process does not have access to the current shared statistics.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",40)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",41)
   V: displays local and alias variables
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",42)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",43)
   * displays all possible types of ZSHOW information
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",44)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",45)
   Codes may be upper- or lower-case. Invalid codes produce a run-time error.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",46)
   Multiple occurrences of the same code in one ZSHOW argument only produce
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",47)
   one output instance of the corresponding information. The order of the
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",48)
   first appearance of the codes in the argument determines the order of the
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",49)
   corresponding output instances.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",50)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",51)
   If you are using a local variable destination and place another code ahead
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",52)
   of "V", the effect is to have the results of the earlier code also appear
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",53)
   in the results of the "V" code.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",54)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",55)
   If the wildcard (*) occurs in the list, ZSHOW uses the default order
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",56)
   (ZSHOW "IVBDLGR" ):
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",57)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",58)
   If G occurs in the list, the statistics are displayed in the following
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",59)
   order in a comma-separated list where each item has its mnemonic followed
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",60)
   by a colon and a counter. YottaDB maintains the counter in DECIMAL. Each
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",61)
   counter has 8-byte (can get as high as 2**64). If these counters exceed 18
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",62)
   decimal digits (somewhere between 2**59 and 2**60), which is the current
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",63)
   YottaDB numeric representation precision threshold, their use in arithmetic
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",64)
   expressions in YottaDB results in loss of precision. The mnemonics are:
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",65)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",66)
   BTD : # of database Block Transitions to Dirty
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",67)
   CAT : Critical section Total Acquisitions successes
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",68)
   CFE : Critical section Failed (blocked) acquisition total caused by Epochs
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",69)
   CFS : Duplicate of CFE
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",70)
   CFT : Critical section Failed (blocked) acquisition Total
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",71)
   CQS* : Critical section acquisition Queued sleeps sum of Squares
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",72)
   CQT* : Critical section acquisition Queued sleeps Total
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",73)
   CTN : Current Transaction Number of the database for the last committed read-write transaction (TP and non-TP)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",74)
   CYS* : Critical section acquisition processor Yields sum of Squares
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",75)
   CYT* : Critical section acquisition processor Yields Total
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",76)
   DEX : # of Database file EXtentions
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",77)
   DFL : # of Database FLushes of the entire set of dirty global buffers in shared memory to disk
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",78)
   DFS : # of times a process does an fsync of the database file. For example: a) after writing an epoch journal record, b) as part of database file extension c) during database rundown d) as part of mupip reorg -truncate etc.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",79)
   DRD : # of Disk ReaDs from the database file (TP and non-TP, committed and rolled-back).This does not include reads that are satisfied by buffered globals for databases that use the BG (Buffered Global) access method. YottaDB always reports 0 for databases that use the MM (memory-mapped) access method as this has no real meaning in that mode.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",80)
   DTA : # of DaTA operations (TP and non-TP)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",81)
   DWT : # of Disk WriTes to the database file (TP and non-TP, committed and rolled-back). This does not include writes that are satisfied by buffered globals for databases that use the BG (Buffered Global) access method. YottaDB always reports 0 for databases that use the MM (memory-mapped) access method as this has no real meaning in that mode.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",82)
   GET : # of GET operations (TP and non-TP)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",83)
   JBB : # of Journal Buffer Bytes updated in shared memory
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",84)
   JEX : # of Journal file EXtentions
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",85)
   JFB : # of Journal File Bytes written to the journal file on disk. For performance reasons, YottaDB always aligns the beginning of these writes to file system block size boundaries. JFB counts all bytes including those needed for alignment in order to reflect the actual IO load on the journal file. Since the bytes required to achieve alignment may have already been counted as part of the previous JFB, processes may write the same bytes more than once, causing the JFB counter to typically be higher than JBB.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",86)
   JFL : # of Journal FLushes of all dirty journal buffers in shared memory to disk. For example: when switching journal files etc.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",87)
   JFS : # of Journal FSync operations on the journal file. For example: when writing an epoch record, switching a journal file etc.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",88)
   JFW : # of Journal File Write system calls
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",89)
   JRE : # of Journal Regular Epoch records written to the journal file (only seen in a -detail journal extract); these are written every time an epoch-interval boundary is crossed while processing updates
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",90)
   JRI : # of JouRnal Idle epoch journal records written to the journal file (only seen in a -detail journal extract); these are written when a burst of updates is followed by an idle period, around 5 seconds of no updates after the database flush timer has flushed all dirty global buffers to the database file on disk
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",91)
   JRL : # of Journal Records with a Logical record type (e.g. SET, KILL etc.) written to the journal file
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",92)
   JRO : # of Journal Records with a type Other than logical written to the journal file (e.g. AIMG, EPOCH, PBLK, PFIN, PINI, and so on)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",93)
   JRP : # of Journal Records with a Physical record type (i.e. PBLK, AIMG) written to the journal file (these records are seen only in a -detail journal extract)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",94)
   KIL : # of KILl operations (kill as well as zwithdraw, TP and non-TP)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",95)
   LKF : # of LocK calls (mapped to this db) that Failed
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",96)
   LKS : # of LocK calls (mapped to this db) that Succeeded
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",97)
   NBR : # of Non-tp committed transaction induced Block Reads on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",98)
   NBW : # of Non-tp committed transaction induced Block Writes on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",99)
   NR0 : # of Non-tp transaction Restarts at try 0
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",100)
   NR1 : # of Non-tp transaction Restarts at try 1
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",101)
   NR2 : # of Non-tp transaction Restarts at try 2
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",102)
   NR3 : # of Non-tp transaction Restarts at try 3
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",103)
   NTR : # of Non-tp committed Transactions that were Read-only on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",104)
   NTW : # of Non-tp committed Transactions that were read-Write on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",105)
   ORD : # of $ORDer(,1) (forward) operations (TP and non-TP); the count of $Order(,-1) operations are reported under ZPR.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",106)
   QRY : # of $QueRY() operations (TP and non-TP)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",107)
   SET : # of SET operations (TP and non-TP)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",108)
   TBR : # of Tp transaction induced Block Reads on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",109)
   TBW : # of Tp transaction induced Block Writes on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",110)
   TC0 : # of Tp transaction Conflicts at try 0 (counted only for that region which caused the TP transaction restart)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",111)
   TC1 : # of Tp transaction Conflicts at try 1 (counted only for that region which caused the TP transaction restart)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",112)
   TC2 : # of Tp transaction Conflicts at try 2 (counted only for that region which caused the TP transaction restart)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",113)
   TC3 : # of Tp transaction Conflicts at try 3 (counted only for that region which caused the TP transaction restart)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",114)
   TC4 : # of Tp transaction Conflicts at try 4 and above (counted only for that region which caused the TP transaction restart)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",115)
   TR0 : # of Tp transaction Restarts at try 0 (counted for all regions participating in restarting TP transaction)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",116)
   TR1 : # of Tp transaction Restarts at try 1 (counted for all regions participating in restarting TP transaction)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",117)
   TR2 : # of Tp transaction Restarts at try 2 (counted for all regions participating in restarting TP transaction)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",118)
   TR3 : # of Tp transaction Restarts at try 3 (counted for all regions participating in restarting TP transaction)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",119)
   TR4 : # of Tp transaction Restarts at try 4 and above (restart counted for all regions participating in restarting TP transaction)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",120)
   TRB : # of Tp read-only or read-write transactions Rolled Back (excluding incremental rollbacks)
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",121)
   TTR : # of Tp committed Transactions that were Read-only on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",122)
   TTW : # of Tp committed Transactions that were read-Write on this database
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",123)
   ZPR : # of $order(,-1) or $ZPRevious() (reverse order) operations (TP and non-TP). The count of $Order(,1) operations are reported under ORD.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",124)
   ZTR : # of ZTRigger command operations
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",125)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",126)
   [NT]B[WR] mnemonics are satisfied by either disk access or, for databases that use the BG (buffered global) access method, global buffers in shared memory.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",127)
   GT.M maintains the counters of the mnemonics marked with a * on AIX. On Linux, GT.M does not currently increment the counters of these mnemonics but retains them in the ZSHOW output for backward compatibility.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",128)

^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",129)
   When $PRINCIPAL input and output are different devices, ZSHOW "D" shows
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",130)
   them as separate items identified as 0 for input and 0-out for output.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",131)
   ZSHOW "D" includes "TLS" in the second line of the output for an encrypted
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",132)
   socket. ZSHOW "D" reports available information on both the local and
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",133)
   remote sides of a TCP socket.
^HELP("s","COMMANDS","s","ZSHOW","s","ZSHOW_INFORMATION_CODES",134)

^HELP("s","COMMANDS","s","ZSTEP")
ZSTep
^HELP("s","COMMANDS","s","ZSTEP",1)
   ZSTep
^HELP("s","COMMANDS","s","ZSTEP",2)

^HELP("s","COMMANDS","s","ZSTEP",3)
   The ZSTEP command provides the ability to control YottaDB execution. When a
^HELP("s","COMMANDS","s","ZSTEP",4)
   ZSTEP is issued from Direct Mode, execution continues to the beginning of
^HELP("s","COMMANDS","s","ZSTEP",5)
   the next target line and then YottaDB XECUTEs the ZSTEP action. The keyword
^HELP("s","COMMANDS","s","ZSTEP",6)
   in the optional ZSTEP argument determines the class of eligible target
^HELP("s","COMMANDS","s","ZSTEP",7)
   lines.
^HELP("s","COMMANDS","s","ZSTEP",8)

^HELP("s","COMMANDS","s","ZSTEP",9)
   The format of the ZSTEP command is:
^HELP("s","COMMANDS","s","ZSTEP",10)

^HELP("s","COMMANDS","s","ZSTEP",11)
   ZST[EP][:tvexpr] [keyword[:expr]][,...]
^HELP("s","COMMANDS","s","ZSTEP",12)

^HELP("s","COMMANDS","s","ZSTEP",13)
   In Direct Mode, ZSTEP performs an implicit ZCONTINUE and therefore YottaDB
^HELP("s","COMMANDS","s","ZSTEP",14)
   ignores all commands on the Direct Mode command line after the ZSTEP.
^HELP("s","COMMANDS","s","ZSTEP",15)

^HELP("s","COMMANDS","s","ZSTEP",16)
   The keyword arguments define the class of lines where ZSTEP next pauses
^HELP("s","COMMANDS","s","ZSTEP",17)
   execution to XECUTE the ZSTEP action. When a ZSTEP command has multiple
^HELP("s","COMMANDS","s","ZSTEP",18)
   arguments, it ignores all arguments except the last.
^HELP("s","COMMANDS","s","ZSTEP",19)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",5)
   YDB>ZSTEP INTO:"W ! ZP @$ZPOS W !"
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",7)
   This ZSTEP resumes execution of the current routine. At the beginning of
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",8)
   the next line executed, the ZSTEP action ZPRINTs the source code for that
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",9)
   line. Because the specified action does not contain a BREAK command,
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",10)
   execution continues to the next line and all subsequent lines in the
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",11)
   program flow.
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",13)
   Example:
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",15)
   YDB>Set curx=$get(x),zact="ZSTEP:$get(curx)=$get(x) INTO:zact Break:$get(curx)'=$get(x)"
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",16)
   YDB>ZSTEP INTO:zact
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",18)
   This sequence uses ZSTEP to invoke Direct Mode at the beginning of the
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",19)
   first line after the line that alters the value of x.
^HELP("s","COMMANDS","s","ZSTEP","s","EXAMPLES",20)

^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP")
Use_of_ZSTEP
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",1)
   Use of ZSTEP
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",2)

^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",3)
   Use ZSTEP to incrementally execute a routine or series of routines.
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",4)
   Execute any YottaDB command from Direct Mode at any ZSTEP pause. To resume
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",5)
   normal execution, use ZCONTINUE.
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",6)

^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",7)
   Note that ZSTEP arguments are keywords rather than expressions. They do
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",8)
   not allow indirection, and argument lists have no utility.
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",9)

^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",10)
   ZSTEP actions that include commands followed by a BREAK perform some
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",11)
   action before entering Direct Mode. ZSTEP actions that do not include a
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",12)
   BREAK perform the command action and continue execution. Use ZSTEP actions
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",13)
   that issue conditional BREAKs and subsequent ZSTEPs to do such things as
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",14)
   test for changes in the value of a variable.
^HELP("s","COMMANDS","s","ZSTEP","s","USE_OF_ZSTEP",15)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS")
ZSTEP_Actions
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",1)
   ZSTEP Actions
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",2)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",3)
   The optional action parameter of a ZSTEP must contain an expression
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",4)
   evaluating to valid YottaDB code. By default, ZSTEP uses the value of $ZSTEP,
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",5)
   which defaults to "B" ("BREAK"), and enters Direct Mode. When a ZSTEP
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",6)
   command specifies an action, the process does not enter Direct Mode unless
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",7)
   the action explicitly includes a BREAK command.
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_ACTIONS",8)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTERACTIONS")
ZSTEP_Interactions
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTERACTIONS",1)
   ZSTEP Interactions
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTERACTIONS",2)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTERACTIONS",3)
   ZSTEP currently interacts with certain other elements in the YottaDB
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTERACTIONS",4)
   environment.
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTERACTIONS",5)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO")
ZSTEP_Into
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",1)
   ZSTEP Into
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",2)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",3)
   ZSTEP INTO pauses at the beginning of the next line, regardless of
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",4)
   transfers of control. When the ZSTEPed line invokes another routine or a
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",5)
   subroutine in the current routine, ZSTEP INTO pauses at the first line of
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",6)
   code associated with the new YottaDB stack level.
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_INTO",7)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF")
ZSTep_OUtof
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",1)
   ZSTep OUtof
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",2)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",3)
   ZSTEP OUTOF pauses at the beginning of the next line executed after an
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",4)
   explicit or implicit QUIT from the current YottaDB invocation stack level. A
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",5)
   ZSTEP OUTOF does not pause at lines associated with the current YottaDB stack
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",6)
   level or with levels invoked from the current level.
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OUTOF",7)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER")
ZSTep_OVer
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",1)
   ZSTep OVer
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",2)

^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",3)
   ZSTEP OVER pauses at the beginning of the next line in the code associated
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",4)
   with either the current YottaDB stack level or a previous YottaDB stack level if
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",5)
   the ZSTEPed line contains an explicit or implicit QUIT from the current
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",6)
   level. A ZSTEP OVER does not pause at lines invoked from the current line
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",7)
   by DOs, XECUTEs or extrinsics.
^HELP("s","COMMANDS","s","ZSTEP","s","ZSTEP_OVER",8)

^HELP("s","COMMANDS","s","ZSYSTEM")
ZSYstem
^HELP("s","COMMANDS","s","ZSYSTEM",1)
   ZSYstem
^HELP("s","COMMANDS","s","ZSYSTEM",2)

^HELP("s","COMMANDS","s","ZSYSTEM",3)
   The ZSYSTEM command creates a child of the current process.
^HELP("s","COMMANDS","s","ZSYSTEM",4)

^HELP("s","COMMANDS","s","ZSYSTEM",5)
   The format of the ZSYSTEM command is:
^HELP("s","COMMANDS","s","ZSYSTEM",6)

^HELP("s","COMMANDS","s","ZSYSTEM",7)
   ZSY[STEM][:tvexpr] [expr][,...]]
^HELP("s","COMMANDS","s","ZSYSTEM",8)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",5)
   YDB>zsystem "ls *.m"
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",7)
   This uses ZSYSTEM to fork a process that then performs the ls command with
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",8)
   *.m as an argument to ls. Once the command completes, the forked process
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",9)
   terminates.
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",11)
   YDB>zsystem "echo 'hello world'"
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",12)
   hello world
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",13)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",14)
   This examples show a possible use of quoting with ZSYSTEM to run the echo
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",15)
   command.
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",16)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",17)
   Example:
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",18)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",19)
   YDB>zsystem
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",20)
   $
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",21)

^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",22)
   This ZSYSTEM has no argument so the forked process prompts for input.
^HELP("s","COMMANDS","s","ZSYSTEM","s","EXAMPLES",23)

^HELP("s","COMMANDS","s","ZTCOMMIT")
ZTCommit
^HELP("s","COMMANDS","s","ZTCOMMIT",1)
   ZTCommit
^HELP("s","COMMANDS","s","ZTCOMMIT",2)

^HELP("s","COMMANDS","s","ZTCOMMIT",3)
   The ZTCOMMIT command marks the end of a logical transaction within a YottaDB
^HELP("s","COMMANDS","s","ZTCOMMIT",4)
   program. ZTCOMMIT used with ZTSTART "fences" transactions (that is, marks
^HELP("s","COMMANDS","s","ZTCOMMIT",5)
   the end and beginning). Fencing transactions allows the MUPIP JOURNAL
^HELP("s","COMMANDS","s","ZTCOMMIT",6)
   facility to prevent incomplete application transactions consisting of
^HELP("s","COMMANDS","s","ZTCOMMIT",7)
   multiple global updates from affecting the database during a database
^HELP("s","COMMANDS","s","ZTCOMMIT",8)
   recovery. YottaDB strongly recommends the use of the M transaction processing
^HELP("s","COMMANDS","s","ZTCOMMIT",9)
   commands such as TSTART and TCOMMIT rather than ZTSTART and ZTCOMMIT. YottaDB
^HELP("s","COMMANDS","s","ZTCOMMIT",10)
   no longer tests the deprecated ZTSTART / ZTCOMMIT functionally.
^HELP("s","COMMANDS","s","ZTCOMMIT",11)

^HELP("s","COMMANDS","s","ZTCOMMIT",12)
   The format of the ZTCOMMIT command is:
^HELP("s","COMMANDS","s","ZTCOMMIT",13)

^HELP("s","COMMANDS","s","ZTCOMMIT",14)
   ZTC[OMMIT][:tvexpr] [intexpr]
^HELP("s","COMMANDS","s","ZTCOMMIT",15)

^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",5)
   YDB>ZTCOMMIT 0
^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",7)
   This ZTCOMMIT issued from Direct Mode would close any open ZTSTARTs.
^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",8)

^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",9)
   Example:
^HELP("s","COMMANDS","s","ZTCOMMIT","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZTRIGGER")
ZTRigger
^HELP("s","COMMANDS","s","ZTRIGGER",1)
   ZTRigger
^HELP("s","COMMANDS","s","ZTRIGGER",2)

^HELP("s","COMMANDS","s","ZTRIGGER",3)
   Invokes all triggers with signatures matching the global variable name and
^HELP("s","COMMANDS","s","ZTRIGGER",4)
   the command type of ZTR[IGGER]. The format of the ZTRIGGER command is:
^HELP("s","COMMANDS","s","ZTRIGGER",5)

^HELP("s","COMMANDS","s","ZTRIGGER",6)
   ZTR[IGGER] gvn
^HELP("s","COMMANDS","s","ZTRIGGER",7)

^HELP("s","COMMANDS","s","ZTRIGGER",8)
   Example:
^HELP("s","COMMANDS","s","ZTRIGGER",9)

^HELP("s","COMMANDS","s","ZTRIGGER",10)
   YDB>write $ztrigger("S")
^HELP("s","COMMANDS","s","ZTRIGGER",11)
   ;trigger name: C#1#  cycle: 1
^HELP("s","COMMANDS","s","ZTRIGGER",12)
   +^C -commands=ZTR -xecute="write ""ZTR trigger invoked"""
^HELP("s","COMMANDS","s","ZTRIGGER",13)
   1
^HELP("s","COMMANDS","s","ZTRIGGER",14)
   YDB>ztrigger ^C
^HELP("s","COMMANDS","s","ZTRIGGER",15)
   ZTR trigger invoked
^HELP("s","COMMANDS","s","ZTRIGGER",16)
   YDB>
^HELP("s","COMMANDS","s","ZTRIGGER",17)

^HELP("s","COMMANDS","s","ZTSTART")
ZTStart
^HELP("s","COMMANDS","s","ZTSTART",1)
   ZTStart
^HELP("s","COMMANDS","s","ZTSTART",2)

^HELP("s","COMMANDS","s","ZTSTART",3)
   The ZTSTART command marks the beginning of a logical transaction within a
^HELP("s","COMMANDS","s","ZTSTART",4)
   YottaDB program. ZTSTART and ZTCOMMIT "fence" transactions (that is, mark the
^HELP("s","COMMANDS","s","ZTSTART",5)
   beginning and end). Fenced transactions prevent the MUPIP JOURNAL facility
^HELP("s","COMMANDS","s","ZTSTART",6)
   from recovering incomplete transactions. All ZTSTARTs must be matched with
^HELP("s","COMMANDS","s","ZTSTART",7)
   ZTCOMMITs before the journal processing facility recognizes the
^HELP("s","COMMANDS","s","ZTSTART",8)
   transaction as complete. YottaDB strongly recommends the use of the M
^HELP("s","COMMANDS","s","ZTSTART",9)
   transaction processing commands such as TSTART and TCOMMIT rather than
^HELP("s","COMMANDS","s","ZTSTART",10)
   ZTSTART and ZTCOMMIT. YottaDB no longer tests the deprecated ZTSTART /
^HELP("s","COMMANDS","s","ZTSTART",11)
   ZTCOMMIT functionally.
^HELP("s","COMMANDS","s","ZTSTART",12)

^HELP("s","COMMANDS","s","ZTSTART",13)
   The format of the ZTSTART command is:
^HELP("s","COMMANDS","s","ZTSTART",14)

^HELP("s","COMMANDS","s","ZTSTART",15)
   ZTS[TART][:tvexpr]
^HELP("s","COMMANDS","s","ZTSTART",16)

^HELP("s","COMMANDS","s","ZTSTART",17)
   For more information on Journaling and transaction fencing, refer to the
^HELP("s","COMMANDS","s","ZTSTART",18)
   "YottaDB Journaling" chapter in the YottaDB Administration and Operations Guide.
^HELP("s","COMMANDS","s","ZTSTART",19)

^HELP("s","COMMANDS","s","ZWITHDRAW")
ZWIthdraw
^HELP("s","COMMANDS","s","ZWITHDRAW",1)
   ZWIthdraw
^HELP("s","COMMANDS","s","ZWITHDRAW",2)

^HELP("s","COMMANDS","s","ZWITHDRAW",3)
   The ZWITHDRAW command KILLs the data value for a variable name without
^HELP("s","COMMANDS","s","ZWITHDRAW",4)
   affecting the nodes descended from that node.
^HELP("s","COMMANDS","s","ZWITHDRAW",5)

^HELP("s","COMMANDS","s","ZWITHDRAW",6)
   The format of the ZWITHDRAW command is:
^HELP("s","COMMANDS","s","ZWITHDRAW",7)

^HELP("s","COMMANDS","s","ZWITHDRAW",8)
   ZWI[THDRAW][:tvexpr] glvn
^HELP("s","COMMANDS","s","ZWITHDRAW",9)

^HELP("s","COMMANDS","s","ZWITHDRAW",10)
   ZWITHDRAW provides a tool to quickly restore a node to a state where it
^HELP("s","COMMANDS","s","ZWITHDRAW",11)
   has descendants and no value-- that is, where $DATA for that node will
^HELP("s","COMMANDS","s","ZWITHDRAW",12)
   have a value of 10 -- for the case where such a state has some control
^HELP("s","COMMANDS","s","ZWITHDRAW",13)
   meaning. YottaDB also provides the ZKILL command, with functionality
^HELP("s","COMMANDS","s","ZWITHDRAW",14)
   identical to ZWITHDRAW.
^HELP("s","COMMANDS","s","ZWITHDRAW",15)

^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",5)
   Kill A
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",6)
   Set A="A",A(1)=1,A(1,1)=1
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",7)
   WRite $Data(A(1)),!
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",8)
   ZWIthdraw A(1)
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",9)
   WRite $D(A(1)),!
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",10)
   ZWRite A
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",11)
   Quit
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",13)
   produces the result:
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",15)
   11
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",16)
   10
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",17)
   A="A"
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",18)
   A(1,1)=1
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",20)
   This sets up local variables A and A(1) and A(1,1). It then deletes the
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",21)
   data for A(1) with ZWITHDRAW. The ZWRITE command shows ZWITHDRAW KILLed
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",22)
   A(1) but left A and A(1,1).
^HELP("s","COMMANDS","s","ZWITHDRAW","s","EXAMPLES",23)

^HELP("s","COMMANDS","s","ZWRITE")
ZWRite
^HELP("s","COMMANDS","s","ZWRITE",1)
   ZWRite
^HELP("s","COMMANDS","s","ZWRITE",2)

^HELP("s","COMMANDS","s","ZWRITE",3)
   The ZWRITE command displays the current value of one or more local , alias
^HELP("s","COMMANDS","s","ZWRITE",4)
   variables, ISVs, or global variables. ZWRITE formats its output so that
^HELP("s","COMMANDS","s","ZWRITE",5)
   each item in the display forms a valid argument to a SET @ command. This
^HELP("s","COMMANDS","s","ZWRITE",6)
   means ZWRITE encloses string values in quotes and represents non-graphic
^HELP("s","COMMANDS","s","ZWRITE",7)
   (control) characters in $CHAR() syntax.
^HELP("s","COMMANDS","s","ZWRITE",8)

^HELP("s","COMMANDS","s","ZWRITE",9)
   The format of the ZWRITE command is:
^HELP("s","COMMANDS","s","ZWRITE",10)

^HELP("s","COMMANDS","s","ZWRITE",11)
   ZWR[ITE][:tvexpr] [zwrglvn[,...]]
^HELP("s","COMMANDS","s","ZWRITE",12)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES")
Examples
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",1)
   Examples
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",2)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",3)
   Example:
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",4)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",5)
   YDB>ZWRITE ^?1"%"2U(0:":",)
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",6)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",7)
   This command displays the descendants of all subscripts between 0 and ":"
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",8)
   of all global names starting with a "%" and having two upper case letters
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",9)
   -- for example, "%AB".
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",10)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",11)
   Example:
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",12)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",13)
   YDB>ZWRITE A(,:,3)
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",14)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",15)
   This command displays all of the third level nodes with a subscript of 3
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",16)
   for local variable A.
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",17)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",18)
   Example:
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",19)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",20)
   ZWRITE ?1"A".E(?1"X"3N)
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",21)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",22)
   This displays data for any local variables starting with "A", optionally
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",23)
   followed by any characters, and having any subscripts starting with "X"
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",24)
   followed by three numerics.
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",25)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",26)
   Example:
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",27)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",28)
   YDB>Set A=1,*B=A ; Create an array and an alias association
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",29)

^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",30)
   YDB>ZWRite ; Show that the array and association exist
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",31)
   A=1 ;*
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",32)
   *B=A
^HELP("s","COMMANDS","s","ZWRITE","s","EXAMPLES",33)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES")
ZWRITE_Format_for_Alias_Variables
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",1)
   ZWRITE Format for Alias Variables
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",2)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",3)
   ZWRITE and ZSHOW "V" dump the values of alias variables, alias container
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",4)
   variables, and the associated data as described below, in ZWRITE format.
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",5)
   In the ZWRITE format, the contents of an array are displayed with the name
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",6)
   associated with that array that appears first in the lexical ordering of
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",7)
   names. YottaDB displays both the unsubscripted and subscripted nodes and
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",8)
   values, appending a notational space-semicolon-asterisk (";*") sequence to
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",9)
   the unsubscripted value, if any. The ZWRITE format output can be read into
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",10)
   a YottaDB process with the commands Read x and Set @x (where x is any name)
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",11)
   executed in a loop. ";*" acts as a comment ignored by the SET command. In
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",12)
   the following example, since A and C are aliases associated with the same
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",13)
   array, the nodes of that array are output with A, which occurs lexically
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",14)
   before C, even though the values were assigned to C:
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",15)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",16)
   YDB>Set C=1,C("Malvern")="Wales",*A=C,*B(-3.14)=C
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",17)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",18)
   YDB>ZSHow "V" ; ZWRite would produce the same output
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",19)
   A=1 ;*
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",20)
   A("Malvern")="Wales"
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",21)
   *B(-3.14)=A
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",22)
   *C=A
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",23)
   YDB>ZWRite C ; Only one is name associated with the array on this ZWRite command
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",24)
   C=1 ;*
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",25)
   C("Malvern")="Wales"
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",26)
   YDB>
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",27)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",28)
   Continuing the example, if the variables selected for the ZWRITE command
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",29)
   do not include any of the the associated alias variables, the output shows
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",30)
   only the reference, not the data:
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",31)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",32)
   YDB>ZWRITE B ; B only has a container
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",33)
   *B(-3.14)=A
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",34)
   YDB>
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",35)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",36)
   When ZWRITE / ZSHOW "V" encounters an alias container for an array with no
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",37)
   current alias variable, it uses a name $ZWRTACn as the made-up name of an
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",38)
   alias variable for that array, where n is an arbitrary but unique integer.
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",39)
   The SET command recognizes this special name, thus enabling the output of
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",40)
   a ZWRITE / ZSHOW "V" to be used to recreate alias containers without
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",41)
   associated alias variables. Continuing the above example:
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",42)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",43)
   YDB>Kill *A,*C ; Delete alias variables and associations, leaving only the container
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",44)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",45)
   YDB>ZWRite
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",46)
   $ZWRTAC=""
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",47)
   *B(-3.14)=$ZWRTAC1
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",48)
   $ZWRTAC1=3 ;*
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",49)
   $ZWRTAC1("Malvern")="Wales"
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",50)
   $ZWRTAC=""
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",51)
   YDB>
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",52)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",53)
   ZWRITE produces $ZWRTACn names to serve as data cell anchors which SET @
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",54)
   accepts as valid set left targets. $ZWRTACn names are created and
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",55)
   destroyed when using ZWRITE output to drive restoration of a previously
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",56)
   captured variable state. Except for their appearance in ZWRITE output and
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",57)
   as left-hand side SET @ targets, they have no function. Other than SET, no
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",58)
   other commands can use $ZWRTAC* in their syntax. Although $ZWRTACn
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",59)
   superficially looks like an intrinsic special variable (ISV), they are not
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",60)
   ISVs. $ZWRTACn with no subscripts can serve as the target (left side of
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",61)
   the equals-sign) of a SET * command. SET $ZWRTAC (no trailing integer)
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",62)
   deletes all data cell associations with the $ZWRTAC prefixed aliases. YottaDB
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",63)
   only recognizes the upper-case unabbreviated name and prefix $ZWRTAC.
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",64)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",65)
   When ZWRITE displays values for an alias variable, it appends a " ;*" to
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",66)
   the name which visually tags the alias without interfering with use of
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",67)
   ZWRITE output as arguments to a SET @. ZWRITE can only identify alias
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",68)
   variables when at least two aliases for the same data match its argument.
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",69)
   When ZWRITE encounters an alias container variable with no current
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",70)
   associated alias, it uses the ZWRTAC mechanism to expose the data; SET @
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",71)
   can restore data exposed with the ZWRTAC mechanism.
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",72)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",73)
   **Caution**
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",74)

^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",75)
   YottaDB strongly recommends that you should not create or manipulate your own
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",76)
   $ZWRTACn "variables". They are not part of the supported functionality for
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",77)
   implementing alias variables and containers, but are rather a part of the
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",78)
   underlying implementation that is visible to you, the YottaDB user. YottaDB can
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",79)
   arbitrarily, for its own convenience change the use of $ZWRTAC in YottaDB at
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",80)
   any time. They are only documented here since you may see them in the
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",81)
   output of ZWRITE and ZSHOW "V".
^HELP("s","COMMANDS","s","ZWRITE","s","ZWRITE_FORMAT_FOR_ALIAS_VARIABLES",82)

^HELP("s","ERR_PROCESSING")
Err_Processing
^HELP("s","ERR_PROCESSING",1)
   Err Processing
^HELP("s","ERR_PROCESSING",2)

^HELP("s","ERR_PROCESSING",3)
   This chapter describes YottaDB features and techniques for handling errors.
^HELP("s","ERR_PROCESSING",4)
   Errors in programs may be classified as "predictable" meaning foreseen, or
^HELP("s","ERR_PROCESSING",5)
   "unpredictable" meaning unforeseen.
^HELP("s","ERR_PROCESSING",6)

^HELP("s","ERR_PROCESSING",7)
   M programs may attempt to recover from predictable errors. Device errors
^HELP("s","ERR_PROCESSING",8)
   that can be remedied by an operator are the most common class of errors
^HELP("s","ERR_PROCESSING",9)
   for which recovery provides a large benefit. Predictable errors from which
^HELP("s","ERR_PROCESSING",10)
   the program does not attempt to recover are generally treated the same as
^HELP("s","ERR_PROCESSING",11)
   unpredictable errors.
^HELP("s","ERR_PROCESSING",12)

^HELP("s","ERR_PROCESSING",13)
   A typical application handles unpredictable errors by logging as much
^HELP("s","ERR_PROCESSING",14)
   information about the error as the designer considers useful, then
^HELP("s","ERR_PROCESSING",15)
   terminating or restarting the application from a known point.
^HELP("s","ERR_PROCESSING",16)

^HELP("s","ERR_PROCESSING",17)
   Because YottaDB invokes error handling when things are not normal, careful
^HELP("s","ERR_PROCESSING",18)
   design and implementation of error handling are required to minimize the
^HELP("s","ERR_PROCESSING",19)
   impact of errors and the cost of subsequent prevention.
^HELP("s","ERR_PROCESSING",20)

^HELP("s","ERR_PROCESSING",21)
   The YottaDB compiler detects and reports syntax errors at:
^HELP("s","ERR_PROCESSING",22)

^HELP("s","ERR_PROCESSING",23)
     * Compile time while producing the object module from a source file.
^HELP("s","ERR_PROCESSING",24)
     * Run time while compiling code for M indirection and XECUTEs.
^HELP("s","ERR_PROCESSING",25)
     * Run time when the user is working in Direct Mode.
^HELP("s","ERR_PROCESSING",26)

^HELP("s","ERR_PROCESSING",27)
   The YottaDB run-time system:
^HELP("s","ERR_PROCESSING",28)

^HELP("s","ERR_PROCESSING",29)
     * Recognizes and reports execution errors when they occur.
^HELP("s","ERR_PROCESSING",30)
     * Reports errors flagged by the compiler when they fall in the execution
^HELP("s","ERR_PROCESSING",31)
       path.
^HELP("s","ERR_PROCESSING",32)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME")
Compile_Time
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",1)
   Compile Time
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",2)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",3)
   To understand the compile-time error message format, consider this
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",4)
   incorrect source line:
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",5)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",6)
   S=B+C
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",7)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",8)
   If this were line 7 of a source file ADD2.m, the compiler reports the
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",9)
   compile-time error with the message:
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",10)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",11)
   S=B+C
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",12)
       ^-----
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",13)
   At column 4, line 7, source module ADD2
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",14)
    Variable expected in this context
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",15)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",16)
   The compile-time error message format consists of three lines. The first
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",17)
   two lines tell you the line and location where the error occurred. The
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",18)
   last line describes the M syntax error. The positioning accuracy of the
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",19)
   carat pointing to the location of an issue in a source line depends on
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",20)
   your terminal settings, particularly in UTF-8 mode where character widths
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",21)
   are not uniform. If the line exceeds the terminal width as understood by
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",22)
   YottaDB, it replaces the carat line with an ARROWNTDSP error.
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",23)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",24)
   If you requested a listing file, it contains the same information and
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",25)
   looks as follows:
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",26)

^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",27)
   .
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",28)
   .
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",29)
   6 .  .  .
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",30)
   7 S=B+C
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",31)
       ^-----
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",32)
    Variable expected in this context
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",33)
   8 . . .
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",34)
   .
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",35)
   .
^HELP("s","ERR_PROCESSING","s","COMPILE_TIME",36)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME")
Processing_Run-time
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",1)
   Processing Run-time
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",2)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",3)
   YottaDB does not detect certain types of errors associated with indirection,
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",4)
   the functioning of I/O devices, and program logic until run-time. Also,
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",5)
   the compile-as-written feature may leave errors which YottaDB reports at
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",6)
   run-time when it encounters them in the execution path. At run-time, YottaDB
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",7)
   reports any error encountered to stderr. The run-time system suspends
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",8)
   normal execution of the routine as soon as it detects an error.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",9)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",10)
   YottaDB responds to errors differently depending on whether it encounters
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",11)
   them in Direct Mode (at the command line) or during normal program
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",12)
   execution.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",13)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",14)
   When an executing YottaDB image encounters an error:
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",15)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",16)
     * if Direct Mode is active at the top of the invocation stack, YottaDB
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",17)
       stays in Direct Mode.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",18)
     * otherwise, if the error comes from a device that has an EXCEPTION,
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",19)
       YottaDB executes the EXCEPTION string.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",20)
     * otherwise, if $ETRAP'="" YottaDB transfers control to the code defined by
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",21)
       $ETRAP as if it had been inserted at the point of the error, unless
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",22)
       $ECODE'="", in which case it executes a TROLLBACK:$TLEVEL followed by
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",23)
       a QUIT:$QUIT "" QUIT.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",24)
     * otherwise, if $ZTRAP'="" YottaDB executes $ZTRAP.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",25)
     * otherwise, YottaDB performs a QUIT:$QUIT "" QUIT and reissues the error
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",26)
       at the new stack level, if no other error traps ($ETRAP or $ZTRAP) are
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",27)
       uncovered by decending the stack, YottaDB reports the error on the
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",28)
       principal device and terminates the image.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",29)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",30)
   After the action, if any, invoked by $ETRAP, $ZTRAP or EXCEPTION:
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",31)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",32)
     * if the process ends in Direct Mode - as a result either of performing
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",33)
       a BREAK in the executed string or of starting in Direct Mode - YottaDB
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",34)
       reports the error on the principal device.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",35)
     * otherwise, if the executed string contains an unstacked transfer of
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",36)
       control, the only implicit behavior is that as long as $ECODE'="" and
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",37)
       $ZTRAP'="" an attempt to QUIT from the level of the current error
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",38)
       causes that error to be reissued at the new stack level.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",39)
     * otherwise, if $ETRAP'="" YottaDB performs a QUIT:$QUIT "" QUIT and
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",40)
       reissues the error at the new stack level.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",41)
     * otherwise, $ZTRAP must contain code and YottaDB retries the line of M on
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",42)
       which the error occurred.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",43)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",44)
   YottaDB checks the syntax of code assigned to $ETRAP, $ZSTEP, $ZTRAP, and
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",45)
   EXCEPTION at the time they are specified. Note that $ZTRAP and EXCEPTION
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",46)
   are subject to ydb_ztrap_form, and, if that specifies entryref or
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",47)
   adaptive, YottaDB does not check the syntax. Also, the environment variables
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",48)
   $ydb_etrap, $ydb_trigger_etrap, and $ydb_zstep provide ways of setting
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",49)
   some of the ISVs, so their values are verified at process initiation.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",50)
   Further, a SET $ETRAP uses a temporary default value of "IF $ZJOBEXAM"
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",51)
   when shifting from $ZTRAP to $ETRAP in case the specified value has
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",52)
   compilation errors.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME",53)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE")
Direct_Mode
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",1)
   Direct Mode
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",2)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",3)
   When YottaDB detects an error in Direct Mode, it reports the error with a
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",4)
   message and leaves the process at the YDB> prompt.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",5)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",6)
   Example:
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",7)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",8)
   YDB>ZW
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",9)
   ZW
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",10)
   ^_____
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",11)
   %YDB-E-INVCMD, Invalid command keyword encountered
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",12)
   YDB>
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",13)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",14)
   In Direct Mode, YottaDB provides access to the RECALL command. RECALL allows
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",15)
   you to retrieve a Direct Mode command line with a minimum of typing. The
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",16)
   YottaDB line editor allows you to make quick changes or corrections to the
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",17)
   command line.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","DIRECT_MODE",18)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE")
Run-time_Errors_Outside_of_Direct_Mode
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",1)
   Run-time Errors Outside of Direct Mode
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",2)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",3)
   If YottaDB encounters an error outside of code entered in Direct Mode, YottaDB
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",4)
   executes the $ETRAP or $ZTRAP special variable, if either of them have a
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",5)
   length greater than zero, which only one can have at a given point in
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",6)
   time.
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",7)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",8)
   The $ETRAP and $ZTRAP special variables specifiy an action that YottaDB
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",9)
   should perform when an error occurs during routine execution. $ETRAP and
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",10)
   $ZTRAP can establish one or more error handling "actions".
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",11)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",12)
   **Note**
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",13)

^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",14)
   The environment variable ydb_etrap specifies an initial value of $ETRAP to
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",15)
   override the default value of "B" for $ZTRAP as the base level error
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",16)
   handler. The ydbenv "percent" utility sets ydb_etrap to
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",17)
   "Write:(0=$STACK) ""Error occurred: "",$ZStatus,!" which you can customize
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",18)
   to suit your needs. For more information, refer to "Processing Errors".
^HELP("s","ERR_PROCESSING","s","PROCESSING_RUN-TIME","s","RUN-TIME_ERRORS_OUTSIDE_OF_DIRECT_MODE",19)

^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS")
Process_Compile_Errors
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",1)
   Process Compile Errors
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",2)

^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",3)
   At compile-time, the compiler stops processing a routine line as soon as
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",4)
   it detects the first error on that line. By default, the compiler displays
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",5)
   the line in error on stderr, and also in a listing file when the compiler
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",6)
   options include -list. By default, the compiler processes the remaining
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",7)
   source lines until it exceeds the maximum error count of 127.
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",8)

^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",9)
   The compile-time error message format displays the line containing the
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",10)
   error and the location of the error on the line. The error message also
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",11)
   indicates what was incorrect about the M statement. For more information
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",12)
   on the error message format, refer to the YottaDB Message and Recovery
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",13)
   Procedures Reference Manual.
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",14)

^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",15)
   You may correct compile-time errors immediately by activating an editor
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",16)
   and entering the correct syntax in the source program. Because several
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",17)
   errors may occur on a line, examine the line carefully to avoid compiling
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",18)
   the routine several times.
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",19)

^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",20)
   The MUMPS command qualifier -ignore, which is the default, instructs YottaDB
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",21)
   to produce an object file even if the compiler detects errors in the
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",22)
   source code. As long as the execution path does not encounter the
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",23)
   compile-time errors, the YottaDB run-time system executes the
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",24)
   compiled-as-written routine. You may take advantage of this feature to
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",25)
   exercise some parts of your program before correcting errors detected by
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",26)
   the compiler.
^HELP("s","ERR_PROCESSING","s","PROCESS_COMPILE_ERRORS",27)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS")
Program_Handling_of_Errors
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",1)
   Program Handling of Errors
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",3)
   YottaDB provides the error handling facilities described in the M standard.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",4)
   In addition, YottaDB provides a number of extensions for error handling. Both
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",5)
   are discussed in the following sections. The following table summarizes
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",6)
   some of the tools, which are then described in more detail within the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",7)
   context of various techniques and examples.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",8)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",9)
   +------------------------------------------------------------------------+
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",10)
   |               Summary of YottaDB Error-Handling Facilities             |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",11)
   |------------------------------------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",12)
   |        EXTENSION         |                 EXPLANATION                 |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",13)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",14)
   |                          | Provides a deviceparameter specifying an    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",15)
   | OPEN/USE/CLOSE EXCEPTION | XECUTE string or entryref that YottaDB      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",16)
   |                          | invokes upon encountering a device-related  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",17)
   |                          | exception condition.                        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",18)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",19)
   |                          | Creates a listing file of all the errors    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",20)
   | MUMPS -list ZLINK        | detected by the compiler and detects syntax |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",21)
   | :"-list"                 | errors. Useful in the process of re-editing |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",22)
   |                          | program to correct errors.                  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",23)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",24)
   | ZGoto                    | Provides for removing multiple levels from  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",25)
   |                          | the M invocation stack.                     |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",26)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",27)
   | ZMESSAGE                 | Creates or emulates arbitrary errors.       |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",28)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",29)
   | $STACK                   | Contains the current level of M execution   |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",30)
   |                          | stack depth.                                |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",31)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",32)
   | $STACK()                 | Returns values describing aspects of the    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",33)
   |                          | execution environment.                      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",34)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",35)
   |                          | Contains a list of error codes for "active" |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",36)
   | $ECODE                   | errors; these are the errors that have      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",37)
   |                          | occurred, but have not yet been cleared.    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",38)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",39)
   |                          | Contains an integer count of M virtual      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",40)
   | $ESTACK                  | machine stack levels that have been         |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",41)
   |                          | activated and not removed, since the last   |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",42)
   |                          | time $ESTACK was NEW'd.                     |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",43)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",44)
   |                          | Contains a string value that YottaDB        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",45)
   | $ETRAP                   | invokes when an error occurs during routine |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",46)
   |                          | execution.                                  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",47)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",48)
   |                          | Indicates whether the current block of code |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",49)
   | $QUIT                    | was called as an extrinsic function or a    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",50)
   |                          | subroutine.                                 |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",51)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",52)
   |                          | Holds the value of the status code for the  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",53)
   | $ZCSTATUS                | last compilation performed by a ZCOMPILE    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",54)
   |                          | command.                                    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",55)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",56)
   |                          | Holds the value of the status code for the  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",57)
   | $ZEDIT                   | last edit session invoked by a ZEDIT        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",58)
   |                          | command.                                    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",59)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",60)
   |                          | Holds the value '1' (TRUE) if the last READ |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",61)
   | $ZEOF                    | on the current device reached end-of-file,  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",62)
   |                          | otherwise holds a '0' (FALSE).              |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",63)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",64)
   |                          | Contains a string supplied by the           |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",65)
   | $ZERROR                  | application, typically one generated by the |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",66)
   |                          | code specified in $ZYERROR.                 |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",67)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",68)
   | $ZLEVEL                  | Contains current level of DO/EXECUTE        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",69)
   |                          | nesting ($STACK+1).                         |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",70)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",71)
   | $ZMESSAGE()              | Translates a UNIX/YottaDB condition code    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",72)
   |                          | into text form.                             |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",73)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",74)
   |                          | Contains the error condition code and       |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",75)
   | $ZSTATUS                 | location of last exception condition        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",76)
   |                          | occurring during routine execution.         |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",77)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",78)
   |                          | Contains an XECUTE string or entryref that  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",79)
   | $ZTRAP                   | YottaDB invokes upon encountering an        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",80)
   |                          | exception condition.                        |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",81)
   |--------------------------+---------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",82)
   |                          | Contains an entryref to invoke when an      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",83)
   | $ZYERROR                 | error occurs; typically used to maintain    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",84)
   |                          | $ZERROR.                                    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",85)
   +------------------------------------------------------------------------+
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS",86)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE")
$ECODE
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",1)
   $ECODE
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",3)
   The value of $ECODE is a string that may reflect multiple error
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",4)
   conditions. As long as no error has occured, the value of $ECODE is equal
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",5)
   to the empty string.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",6)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",7)
   $ECODE contains a list of errors codes for "active" errors - the error
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",8)
   conditions which are not yet resolved. If there are no active errors,
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",9)
   $ECODE contains the empty string. The value of $ECODE can be SET.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",10)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",11)
   The most recent error in $ECODE appears first, the oldest last. If the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",12)
   error is defined by the M standard, the code starts with an "M", YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",13)
   error codes including those provided by OS services start with "Z", and
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",14)
   application defined codes must start with "U". Every code is separated by
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",15)
   a coma (,) and there is always a coma at the beginning and at the end of a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",16)
   list. YottaDB provided codes are those reported in $ZSTATUS, interpreted by
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",17)
   $ZMESSAGE() and recognized as arguments to ZMESSAGE command. When YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",18)
   supplies a standard error code in $ECODE, it also supplies a corresponding
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",19)
   'Z' code.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",20)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",21)
   Example (setting $ECODE):
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",22)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",23)
   SET $ECODE="" ;sets $ECODE to the empty string
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",24)
   SET $ECODE=",M20," ;an ANSI M standardized error code
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",25)
   SET $ECODE=",U14," ;user defined error code
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",26)
   SET $PIECE($ECODE,",",2)="Z3," ;insert a non-ANSI error code
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",27)
   SET $PIECE($ECODE,",",$LENGTH($ECODE,",")+1)="An..," ;append
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",28)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",29)
   Standard Error processing affects the flow of control in the following
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",30)
   manner. Detection of an error causes GOTO implicit sub-routine. When
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",31)
   $ECODE="", the implicit subroutine is $ETRAP and QUIT:$QUIT "" QUIT.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",32)
   Otherwise the implicit subroutine is $ETRAP followed by TROLLBACK:$TLEVEL
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",33)
   and then QUIT:$QUIT "" QUIT.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",34)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",35)
   The QUIT command behaves in a special fashion while the value of $ECODE is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",36)
   non-empty. If a QUIT command is executed that returns control to a less
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",37)
   nested level than the one where the error occurred, and the value of
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",38)
   $ECODE is still non-empty, first all normal activity related to the QUIT
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",39)
   command occurs (especially the unstacking of NEWed variables) and then the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",40)
   current value of $ETRAP is executed. Note that, if $ETRAP had been NEWed
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",41)
   at the current or intervening level, the unstacked value of $ETRAP is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",42)
   executed.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",43)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",44)
   SETting $ECODE to an invalid value is an error. SETting $ECODE to a valid
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",45)
   error behaves like detection of error. SETting $ECODE="" does not cause a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",46)
   change in the flow, but effects $STACK(), subsequent $QUITs and errors.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",47)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",48)
   **Note**
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",49)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",50)
   To force execution of an error trap or to flag a user-defined error ("U"
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",51)
   errors), make the value of $ECODE non-empty:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",52)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",53)
   SET $ECODE=",U13-User defined error trap,"
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",54)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",55)
   **Note**
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",56)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",57)
   The value of $ECODE provides information about errors that have occurred
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",58)
   since the last time it was reset to an empty string. In addition to the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",59)
   information in this variable, more detailed information can be obtained
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",60)
   from the intrinsic function $STACK. .
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ECODE",61)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP")
$ETRAP_and_$ZTRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",1)
   $ETRAP and $ZTRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",3)
   The activation of $ETRAP and $ZTRAP are the same, however there are a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",4)
   number of differences in their subsequent behavior.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",5)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",6)
   For subsequent errors the then current $ZTRAP is invoked, while with
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",7)
   $ETRAP, behavior is controlled by the state of $ECODE. This means that
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",8)
   when using $ZTRAP, it is important to change $ZTRAP, possibly to the empty
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",9)
   string, at the beginning of the action in order to protect against
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",10)
   recursion caused by any errors in $ZTRAP itself or in the code it invokes.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",11)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",12)
   If there is no explicit or implicit GOTO or ZGOTO in the action, once a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",13)
   $ZTRAP action completes, execution resumes at the beginning of the line
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",14)
   where the error occurred, while once a $ETRAP action completes, there is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",15)
   an implicit QUIT. This means that $ZTRAP actions that are not intended to
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",16)
   permit a successful retry of the failing code should contain a GOTO, or
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",17)
   more typically a ZGOTO. In contrast, $ETRAP actions that are intended to
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",18)
   cause a retry must explicitly reinvoke the code where the error occurred.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",19)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",20)
   For QUITs from the level at which an error occurred, $ZTRAP has no effect,
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",21)
   where $ETRAP behavior is controlled by the state of $ECODE. This means
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",22)
   that to invoke an error handler nested at the lower level, $ZTRAP actions
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",23)
   need to use an explicit ZMESSAGE command, while $ETRAP does such
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",24)
   invocations implicitly unless $ECODE is SET to the empty string.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_AND_$ZTRAP",25)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR")
$ETRAP_Behavior
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",1)
   $ETRAP Behavior
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",3)
   If, at the time of any error, the value of $ETRAP is non-empty, YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",4)
   proceeds as if the next instruction to be excuted were the first one on
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",5)
   "the next line" and the code on that next line would be the same as the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",6)
   text in the value of $ETRAP. Furthermore, YottaDB behaves as if the line
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",7)
   following "the next line" looks like:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",8)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",9)
   QUIT:$QUIT "" QUIT
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",10)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",11)
   When SET assigns a value to $ETRAP, the new value replaces the previous
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",12)
   value, and if $ZTRAP was not empty (in control), the value of $ZTRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",13)
   becomes equal to the empty string without being stacked.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_BEHAVIOR",14)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP")
$ETRAP_or_$ZTRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",1)
   $ETRAP or $ZTRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",3)
   Making a choice between the two mechanisms for error handling is mostly a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",4)
   matter of compatibility. If compatibility with existing YottaDB code is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",5)
   important, and that code happens to use $ZTRAP, then $ZTRAP is the best
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",6)
   effort choice. If compatibility with code written in MUMPS dialects from
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",7)
   other vendors is important, then $ETRAP or a non-default form of $ZTRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",8)
   probably is the better choice.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",9)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",10)
   When no pre-existing code exists that favors one mechanism, the features
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",11)
   of the mechanisms themselves should be examined.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",12)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",13)
   Almost any effect that can be achieved using one mechanism can also be
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",14)
   achieved using the other. However, some effects are easier to achieve
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",15)
   using one method, and some are easier using with the other.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",16)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",17)
   If the mechanisms are mixed, or there is a desire to refer to $ECODE in an
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",18)
   environment using $ZTRAP, it is recommended to have $ZTRAP error code SET
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",19)
   $ECODE="" at some appropriate time, so that $ECODE does not become
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",20)
   cluttered with errors that have been successfully handled.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",21)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",22)
   **Note**
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",23)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",24)
   A device EXCEPTION gets control after a non-fatal device error and
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",25)
   $ETRAP/$ZTRAP get control after other non-fatal errors.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ETRAP_OR_$ZTRAP",26)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR")
$ZERROR_and_$ZYERROR
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",1)
   $ZERROR and $ZYERROR
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",3)
   After an error occurs, if $ZYERROR is set to a valid entryref that exists
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",4)
   in the current environment, YottaDB invokes the routine at that entryref with
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",5)
   an implicit DO before returning control to M code specified by a device
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",6)
   EXCEPTION, $ETRAP or $ZTRAP. It is intended that the code invoked by
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",7)
   $ZYERROR use the value of $ZSTATUS to select or construct a value to which
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",8)
   it SETs $ZERROR.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",9)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",10)
   If $ZYERROR is empty, $ZYERROR="unprocessed $ZERROR, see $ZSTATUS".
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",11)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",12)
   If there is a problem with the content of $ZYERROR or if the execution of
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",13)
   the code it invokes, YottaDB sets $ZERROR=$ZSTATUS for the secondary error
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",14)
   and terminates the attempt to use $ZYERROR. During code evoked by
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",15)
   $ZYERROR, the value of $ZERROR is the empty string.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZERROR_AND_$ZYERROR",16)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT")
$ZSTATUS_Content
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT",1)
   $ZSTATUS Content
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT",3)
   $ZSTATUS contains a string value specifying the error condition code and
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT",4)
   location of the last exception condition that occurred during routine
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT",5)
   execution.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZSTATUS_CONTENT",6)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP")
$ZTRAP_With_$ETRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",1)
   $ZTRAP With $ETRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",3)
   It is important to be aware of which of the trap mechanisms is in place to
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",4)
   avoid unintended interactions, and aware of which conditions may cause a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",5)
   switch-over from one mode of error handling to the other.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",6)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",7)
   When a SET command assigns a value to either $ZTRAP or $ETRAP, YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",8)
   examines the value of the other error handling variable. If the other
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",9)
   value is non-empty, YottaDB executes an implicit NEW command that saves the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",10)
   current value of that variable, and then assigns that variable to the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",11)
   empty string, then makes the requested assignment effective.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",12)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",13)
   For example, re-setting $ETRAP is internally processed as:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",14)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",15)
   NEW:$LENGTH($ZTRAP) $ZTRAP $ETRAP SET $ETRAP=code
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",16)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",17)
   Whereas, SET $ZTRAP=value is internally processed as:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",18)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",19)
   NEW:$LENGTH($ETRAP) $ETRAP SET:$LENGTH($ETRAP)="" SET $ZTRAP=value
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",20)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",21)
   Note that, after saving the prior value, YottaDB ensures the superseded
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",22)
   $ETRAP or $ZTRAP implicitly gets the value of the empty string. As a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",23)
   result, at most one of the two error handling mechanisms can be effective
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",24)
   at any given point in time.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",25)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",26)
   If an error handling procedure was invoked through the $ETRAP method, and
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",27)
   the value of $ECODE is non-empty when QUITing from the level of which the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",28)
   error occurred, the behavior is to transfer control to the error handler
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",29)
   associated with the newly unstacked level. However, if the QUIT command at
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",30)
   the end of error level happens to unstack a saved value of $ZTRAP (and
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",31)
   thus cause the value of $ETRAP to become empty), the error handling
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",32)
   mechanism switches from $ETRAP-based to $ZTRAP-based.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",33)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",34)
   **Note**
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",35)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",36)
   At the end of an error handling procedure invoked through $ZTRAP, the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",37)
   value of $ECODE is not examined, and this value (if any) does not cause
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",38)
   any transfer to another error handling procedure. However, if not cleared
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",39)
   it may later trigger a $ETRAP unstacked by a QUIT.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","$ZTRAP_WITH_$ETRAP",40)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR")
Behavior
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",1)
   Behavior
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",3)
   If, at the time of any error, the value of $ZTRAP is non-empty, YottaDB uses
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",4)
   the $ZTRAP contents to direct execution of the next action.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",5)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",6)
   By default, execution proceeds as if the next instruction to be executed
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",7)
   were the first one on "the next line", and the code on that next line
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",8)
   would be the same as the text in the value of $ZTRAP. Unless $ZTRAP or any
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",9)
   code it invokes issues a GOTO or ZGOTO, after YottaDB has executed the code
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",10)
   in $ZTRAP, YottaDB attempts to execute the line with the error again. When a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",11)
   value is assigned to $ZTRAP, the new value replaces the previous value. If
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",12)
   the value of $ETRAP is a non-empty one, $ETRAP is implicitly NEWed, and
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",13)
   the value of $ETRAP becomes equal to the empty string; this ensures that
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",14)
   at most one of $ETRAP and $ZTRAP is not the empty string. If the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",15)
   environment variable ydb_ztrap_new evaluates to Boolean TRUE (case
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",16)
   insensitive string "TRUE", or case insensitive string "YES", or a non-zero
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",17)
   number), $ZTRAP is NEWed when $ZTRAP is SET; otherwise $ZTRAP is not
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",18)
   stacked when it is SET.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",19)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",20)
   Other than the default behavior, $ZTRAP settings are controlled by the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",21)
   environment variable ydb_ztrap_form as described in the following table.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",22)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",23)
   +------------------------------------------------------------------------+
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",24)
   | ydb_ztrap_form |             $ZTRAP and EXCEPTION Behavior             |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",25)
   |----------------+-------------------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",26)
   |                | Content is code executed after the error; in the      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",27)
   |                | absence of GOTO, ZGOTO, or QUIT, execution resumes at |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",28)
   | code           | the beginning of the line containing the error - note |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",29)
   |                | that the default behavior tends to create an          |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",30)
   |                | indefinite loop.                                      |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",31)
   |----------------+-------------------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",32)
   | entryref       | Content is an entryref to which control is            |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",33)
   |                | transferred by an implicit GOTO                       |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",34)
   |----------------+-------------------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",35)
   | adaptive       | If content is valid code treat it as described for    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",36)
   |                | "code", otherwise attempt to treat it as an entryref  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",37)
   |----------------+-------------------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",38)
   |                | Content is entryref - remove M virtual stack levels   |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",39)
   | popentryref    | until the level at which $ZTRAP was SET, then GOTO    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",40)
   |                | the entryref; the stack manipulation occurs only for  |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",41)
   |                | $ZTRAP and not for EXCEPTION                          |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",42)
   |----------------+-------------------------------------------------------|
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",43)
   |                | If content is valid code treat it as described for    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",44)
   | popadaptive    | code, otherwise attempt to treat it as an entryref    |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",45)
   |                | used as described for popentryref                     |
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",46)
   +------------------------------------------------------------------------+
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",47)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",48)
   Although the "adaptive" and "popadaptive" behaviors permit mixing of two
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",49)
   behaviors based on the current value of $ZTRAP, the $ZTRAP behavior type
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",50)
   is selected at process startup from ydb_ztrap_form and cannot be modified
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",51)
   during the life of the process.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",52)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",53)
  Note
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",54)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",55)
   Like $ZTRAP values, invocation of device EXCEPTION values, with the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",56)
   exception noted, follow the pattern specified by the current
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",57)
   ydb_ztrap_form setting.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","BEHAVIOR",58)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS")
IO_Errors
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",1)
   IO Errors
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",3)
   When YottaDB encounters an error in the operation of an I/O device, YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",4)
   executes the EXCEPTION deviceparameter for the OPEN/USE/CLOSE commands. An
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",5)
   EXCEPTION deviceparameter specifies an action to take when an error occurs
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",6)
   in the operation of an I/O device. The form of the EXCEPTION action is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",7)
   subject to the ydb_ztrap_form setting described for $ZTRAP, except that
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",8)
   there is never any implicit popping with EXCEPTION actions. If a device
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",9)
   has no current EXCEPTION, YottaDB uses $ETRAP or $ZTRAP to handle an error
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",10)
   from that device.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",11)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",12)
   YottaDB provides the option to:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",13)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",14)
     * Trap or process an exception based on device error.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",15)
     * Trap or process an exception based on terminal input.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",16)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",17)
   An EXCEPTION based on an error for the device applies only to that device,
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",18)
   and provides a specific error handler for a specific I/O device.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",19)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",20)
   The CTRAP deviceparameter for USE establishes a set of trap characters for
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",21)
   terminal input. When YottaDB encounters an input character in that set, YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",22)
   executes the EXCEPTION deviceparamenter, or, $ETRAP or $ZTRAP if the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",23)
   device has no current EXCEPTION.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",24)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",25)
   Example:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",26)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",27)
   YDB>ZPRINT ^EP12
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",28)
   EP12    WRITE !,"THIS IS ",$TEXT(+0)
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",29)
           SET $ECODE="";this only affects $ETRAP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",30)
           SET $ETRAP="GOTO ET"
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",31)
           ;N $ZT S $ZT="W !,"CAN'T TAKE RECIPROCAL OF 0"",*7"
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",32)
           USE $P:(EXCEPTION="D BYE":CTRAP=$C(3))
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",33)
           WRITE !,"TYPE <CTRL-C> TO STOP"
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",34)
   LOOP    FOR DO
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",35)
           . READ !,"TYPE A NUMBER: ",X
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",36)
           . WRITE ?20,"HAS RECIPROCAL OF: ",1/X
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",37)
           . QUIT
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",38)
   ET      . WRITE !,"CAN'T TAKE RECIRPOCAL OF 0",*7
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",39)
           . SET $ECODE=""
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",40)
           QUIT
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",41)
   BYE     WRITE !,"YOU TYPED <CTRL-C> YOU MUST BE DONE!"
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",42)
           USE $P:(EXCEPTION="":CTRAP="")
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",43)
           WRITE !,"$ZSTATUS=",$ZSTATUS
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",44)
           ZGOTO 1
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",45)
   YDB>DO ^EP12
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",46)
   THIS IS EP12
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",47)
   TYPE <CTRL-C> TO STOP
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",48)
   TYPE A NUMBER: 1 HAS RECIPROCAL OF: 1
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",49)
   TYPE A NUMBER: 2 HAS RECIRPOCAL OF: .5
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",50)
   TYPE A NUMBER: 3 HAS RECIPROCAL OF: .33333333333333
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",51)
   TYPE A NUMBER: 4 HAS RECIPROCAL OF: .25
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",52)
   TYPE A NUMBER: HAS RECIPROCAL OF:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",53)
   CAN'T TAKE RECIPROCAL OF 0
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",54)
   TYPE A NUMBER:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",55)
   YOU TYPED <CTRL-C> YOU MUST BE DONE!
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",56)
   $ZSTATUS=150372498,LOOP+1^EP12,%YDB-E-CTRAP,Character trap $C(3) encountered
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",57)
   YDB>
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",58)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",59)
   This routine prompts the user to enter a number at the terminal. If the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",60)
   user enters a zero, YottaDB encounters an error and executes $ETRAP (or
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",61)
   $ZTRAP). The action specified reports the error and returns to prompt the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",62)
   user to enter a number. With $ZTRAP, this is very straightforward. With
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",63)
   $ETRAP, some care is required to get the code to resume at the proper
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",64)
   place. The CTRAP deviceparameter establishes <CTRL-C> as a trap character.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",65)
   When YottaDB encounters a <CTRL-C>, YottaDB executes the EXCEPTION string whcih
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",66)
   transfers control to the label BYE. At the label BYE, the routine
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",67)
   terminates execution with an error message. Using the EXCEPTION
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",68)
   deviceparameter with CTRAP generally simplifies $ETRAP or $ZTRAP handling.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",69)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",70)
   $ZSTATUS allows the routine to find out which trap character YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",71)
   encountered. When a routine has several character traps set, $ZSTATUS
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",72)
   provides useful information for identifying which character triggered the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",73)
   trap, and thereby allows a custom response to a specific input.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","IO_ERRORS",74)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK")
Nesting_$ETRAP_and_using_$ESTACK
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",1)
   Nesting $ETRAP and using $ESTACK
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",2)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",3)
   When you need to set up a stratified scheme where one level of subroutines
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",4)
   use one error trap setting and another more nested subroutine uses a
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",5)
   different one; the more nested subroutine must NEW $ETRAP. When $ETRAP is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",6)
   NEWed, its old value is saved and copied to the current value. A
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",7)
   subsequent SET $ETRAP=<new-value> then establishes the error trapping code
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",8)
   for the current execution level.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",9)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",10)
   The QUIT command that reverts to the calling routine causes the NEWed
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",11)
   values to be unstacked, including the one for $ETRAP.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",12)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",13)
   If an error occurs while executing at the current execution level (or at
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",14)
   an execution level farther from the initial base stack frame), YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",15)
   executes the code from the current $ETRAP. Unless a GOTO or ZGOTO in
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",16)
   $ETRAP or any code it invokes redirects the flow of execution, when the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",17)
   execution of the $ETRAP code completes, control reverts to the implicit
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",18)
   QUIT command, which returns to the routine that invoked the code that
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",19)
   encountered the error. At this time, the QUIT reinstates any prior value
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",20)
   of $ETRAP.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",21)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",22)
   While at the more nested execution level(s), if an error occurs, YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",23)
   executes the code from the current $ETRAP. After the QUIT to a less nested
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",24)
   level, YottaDB invokes the code from the now current $ETRAP. The current
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",25)
   $ETRAP may be different from the $ETRAP at the time of the error due to
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",26)
   unstacking. This behavior continues until one of the following possible
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",27)
   situations occur:
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",28)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",29)
     * $ECODE is empty. When the value of $ECODE is equal to the empty
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",30)
       string, error processing is no longer active, and normal processing
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",31)
       resumes.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",32)
     * A QUIT reaches an execution level where the value of $ETRAP is empty
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",33)
       ($ZTRAP might be non-empty at that level). When the values of both
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",34)
       $ZTRAP and $ETRAP are equal to the empty string, no error trapping is
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",35)
       active and the QUIT repeats until it unstacks a $ETRAP or $ZTRAP.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",36)
     * The stack is reduced to an empty state. When there is no previous
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",37)
       level left to QUIT into, YottaDB returns to the operating system level
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",38)
       shell. A frame that is in direct mode stops the process by putting the
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",39)
       user back into the Direct Mode shell.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",40)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",41)
   When dealing with stratified error trapping, it is important to be aware
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",42)
   of two additional intrinsic variables: $STACK and $ESTACK. The values of
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",43)
   both of these variables indicate the current execution level. The value of
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",44)
   $STACK is an "absolute" value that counts from the start of the YottaDB
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",45)
   process, whereas the value of $ESTACK restarts at zero (0) each time
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",46)
   $ESTACK is NEWed.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",47)

^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",48)
   It is often beneficial to NEW both $ETRAP and $ESTACK a the same time.
^HELP("s","ERR_PROCESSING","s","PROGRAM_HANDLING_OF_ERRORS","s","NESTING_$ETRAP_AND_USING_$ESTACK",49)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR")
Run-time_Error
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",1)
   Run-time Error
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",2)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",3)
   To understand the run-time error message format, consider this short
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",4)
   program printsum.m:
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",5)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",6)
        SET A=17
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",7)
   GO   SET B=21
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",8)
        WRITE A+C
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",9)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",10)
   When you try to execute this program, the last statement causes an error
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",11)
   since the variable C is undefined. If $ETRAP="B", YottaDB displays the
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",12)
   run-time error message:
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",13)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",14)
   $ mumps -run printsum
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",15)
   %YDB-E-UNDEF, Undefined local variable: C
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",16)
   At MUMPS source location GO+1^printsum
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",17)
   YDB>
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",18)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",19)
   YottaDB informs you of the error (Undefined local variable) and where in the
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",20)
   routine the error occurred (GO+1). Note that the run-time system displays
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",21)
   the YDB> prompt, indicating that the process has entered Direct Mode. YottaDB
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",22)
   places run time error information in the intrinsic special variables
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",23)
   $ECODE and $ZSTATUS.
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",24)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",25)
   Compile-time error messages may appear at run time. This is because errors
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",26)
   in indirection and the compile-as-written feature leave errors that are
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",27)
   subsequently reported at run time.
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",28)

^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",29)
   The YottaDB utilities use portions of the run-time system and therefore may
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",30)
   issue run-time errors as well as their own unique errors.
^HELP("s","ERR_PROCESSING","s","RUN-TIME_ERROR",31)

^HELP("s","FUNCTIONS")
Functions
^HELP("s","FUNCTIONS",1)
   Functions
^HELP("s","FUNCTIONS",2)

^HELP("s","FUNCTIONS",3)
   This chapter describes M language Intrinsic Functions implemented in YottaDB.
^HELP("s","FUNCTIONS",4)
   Traditional string processing functions have parallel functions that start
^HELP("s","FUNCTIONS",5)
   with the letter "z". The parallel functions extend the byte-oriented
^HELP("s","FUNCTIONS",6)
   functionality of their counterparts to UTF-8 mode. They are helpful when
^HELP("s","FUNCTIONS",7)
   applications need to process binary data including blobs, binary byte
^HELP("s","FUNCTIONS",8)
   streams, bit-masks, and so on.
^HELP("s","FUNCTIONS",9)

^HELP("s","FUNCTIONS",10)
   Other functions that start with the letter "z" and do not have
^HELP("s","FUNCTIONS",11)
   counterparts implement new functionality and are YottaDB additions to the
^HELP("s","FUNCTIONS",12)
   ANSI standard Intrinsic Functions. The M standard specifies standard
^HELP("s","FUNCTIONS",13)
   abbreviations for Intrinsic Functions and rejects any non-standard
^HELP("s","FUNCTIONS",14)
   abbreviations.
^HELP("s","FUNCTIONS",15)

^HELP("s","FUNCTIONS",16)
   M Intrinsic Functions start with a single dollar sign ($) and have one or
^HELP("s","FUNCTIONS",17)
   more arguments enclosed in parentheses () and separated by commas (,).
^HELP("s","FUNCTIONS",18)
   These functions provide expression results by performing actions that are
^HELP("s","FUNCTIONS",19)
   impossible or difficult to perform using M commands.
^HELP("s","FUNCTIONS",20)

^HELP("s","FUNCTIONS","s","$ASCII()")
$ASCII()
^HELP("s","FUNCTIONS","s","$ASCII()",1)
   $ASCII()
^HELP("s","FUNCTIONS","s","$ASCII()",2)

^HELP("s","FUNCTIONS","s","$ASCII()",3)
   Returns the integer ASCII code for a character in the given string. For a
^HELP("s","FUNCTIONS","s","$ASCII()",4)
   mumps process started in UTF-8 mode, $ASCII() returns the integer
^HELP("s","FUNCTIONS","s","$ASCII()",5)
   Unicode(R) UTF-8 code-point value of a character in the given string.
^HELP("s","FUNCTIONS","s","$ASCII()",6)

^HELP("s","FUNCTIONS","s","$ASCII()",7)
   The format for the $ASCII function is:
^HELP("s","FUNCTIONS","s","$ASCII()",8)

^HELP("s","FUNCTIONS","s","$ASCII()",9)
   $A[SCII](expr[,intexpr])
^HELP("s","FUNCTIONS","s","$ASCII()",10)

^HELP("s","FUNCTIONS","s","$ASCII()",11)
   $ASCII() provides a means of examining non-graphic characters in a string.
^HELP("s","FUNCTIONS","s","$ASCII()",12)
   When used with $CHAR(), $ASCII() also provides a means to perform
^HELP("s","FUNCTIONS","s","$ASCII()",13)
   arithmetic operations on the codes associated with characters.
^HELP("s","FUNCTIONS","s","$ASCII()",14)

^HELP("s","FUNCTIONS","s","$ASCII()",15)
   $ZASCII() is the parallel function of $ASCII(). $ZASCII() interprets the
^HELP("s","FUNCTIONS","s","$ASCII()",16)
   string argument as a sequence of bytes (rather than a sequence of
^HELP("s","FUNCTIONS","s","$ASCII()",17)
   characters) and can perform all byte-oriented $ASCII() operations. For
^HELP("s","FUNCTIONS","s","$ASCII()",18)
   more information, refer to "$ZAscii()".
^HELP("s","FUNCTIONS","s","$ASCII()",19)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",5)
   YDB>For i=0:1:3 Write !,$Ascii("Hi",i)
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",6)
   -1
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",7)
   72
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",8)
   73
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",9)
   -1
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",12)
   This loop displays the result of $ASCII() specifying a character position
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",13)
   before, first and second positions, and after the string.
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",15)
   Example:
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",17)
   YDB>Write $ZCHSET
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",18)
   UTF-8
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",19)
   YDB>Write $Ascii("*")
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",20)
   20027
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",21)
   YDB>Write $$FUNC^%DH("20027")
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",22)
   00004E3B
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",24)
   In this example, 20027 is the integer equivalent of the hexadecimal value
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",25)
   4E3B. U+4E3B is a character in the CJK Ideograph block of the Unicode(R)
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",26)
   standard.
^HELP("s","FUNCTIONS","s","$ASCII()","s","EXAMPLES",27)

^HELP("s","FUNCTIONS","s","$CHAR()")
$Char()
^HELP("s","FUNCTIONS","s","$CHAR()",1)
   $Char()
^HELP("s","FUNCTIONS","s","$CHAR()",2)

^HELP("s","FUNCTIONS","s","$CHAR()",3)
   Returns a string of one or more characters corresponding to integer ASCII
^HELP("s","FUNCTIONS","s","$CHAR()",4)
   codes specified in its argument(s). For a process started in UTF-8 mode,
^HELP("s","FUNCTIONS","s","$CHAR()",5)
   $CHAR() returns a string composed of characters represented by the integer
^HELP("s","FUNCTIONS","s","$CHAR()",6)
   equivalents of the Unicode(R) code-points specified in its argument(s).
^HELP("s","FUNCTIONS","s","$CHAR()",7)

^HELP("s","FUNCTIONS","s","$CHAR()",8)
   The format for the $CHAR function is:
^HELP("s","FUNCTIONS","s","$CHAR()",9)

^HELP("s","FUNCTIONS","s","$CHAR()",10)
   $C[HAR](intexpr[,...])
^HELP("s","FUNCTIONS","s","$CHAR()",11)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",5)
   YDB>write $char(77,85,77,80,83,7)
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",6)
   MUMPS
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",9)
   This example uses $CHAR() to WRITE the word MUMPS and signal the terminal
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",10)
   bell.
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",12)
   Example:
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",14)
   set nam=$extract(nam,1,$length(nam)-1)_$char($ascii(nam,$length(nam))-1)
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",16)
   This example uses $CHAR() and $ASCII() to set the variable nam to a value
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",17)
   that immediately precedes its previous value in the set of strings of the
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",18)
   same length as nam.
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",20)
   Example:
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",22)
   YDB>write $zchset
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",23)
   UTF-8
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",24)
   YDB>write $char(20027)
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",25)
   *
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",26)
   YDB>write $char(65)
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",27)
   A
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",29)
   In the above example, the integer value 20027 is the Unicode(R) character
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",30)
   "*" in the CJK Ideograph block. Note that the output of the $CHAR()
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",31)
   function for values of integer expression(s) from 0 through 127 does not
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",32)
   vary with choice of the character encoding scheme. This is because 7-bit
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",33)
   ASCII is a proper subset of UTF-8 character encoding scheme. The
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",34)
   representation of characters returned by the $CHAR() function for values
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",35)
   128 through 255 differ for each character encoding scheme.
^HELP("s","FUNCTIONS","s","$CHAR()","s","EXAMPLES",36)

^HELP("s","FUNCTIONS","s","$DATA()")
$Data()
^HELP("s","FUNCTIONS","s","$DATA()",1)
   $Data()
^HELP("s","FUNCTIONS","s","$DATA()",2)

^HELP("s","FUNCTIONS","s","$DATA()",3)
   Returns an integer code describing the value and descendent status of a
^HELP("s","FUNCTIONS","s","$DATA()",4)
   local or global variable.
^HELP("s","FUNCTIONS","s","$DATA()",5)

^HELP("s","FUNCTIONS","s","$DATA()",6)
   The format for the $DATA function is:
^HELP("s","FUNCTIONS","s","$DATA()",7)

^HELP("s","FUNCTIONS","s","$DATA()",8)
   $D[ATA](glvn)
^HELP("s","FUNCTIONS","s","$DATA()",9)

^HELP("s","FUNCTIONS","s","$DATA()",10)
   The following table summarizes $DATA() return values.
^HELP("s","FUNCTIONS","s","$DATA()",11)

^HELP("s","FUNCTIONS","s","$DATA()",12)
   +--------------------------------------------+
^HELP("s","FUNCTIONS","s","$DATA()",13)
   |              $DATA() Results               |
^HELP("s","FUNCTIONS","s","$DATA()",14)
   |--------------------------------------------|
^HELP("s","FUNCTIONS","s","$DATA()",15)
   |                   VALUE                    |
^HELP("s","FUNCTIONS","s","$DATA()",16)
   |--------------------------------------------|
^HELP("s","FUNCTIONS","s","$DATA()",17)
   |     | DESCENDANTS (NO) | DESCENDANTS (YES) |
^HELP("s","FUNCTIONS","s","$DATA()",18)
   |-----+------------------+-------------------|
^HELP("s","FUNCTIONS","s","$DATA()",19)
   | NO  | 0                | 10                |
^HELP("s","FUNCTIONS","s","$DATA()",20)
   |-----+------------------+-------------------|
^HELP("s","FUNCTIONS","s","$DATA()",21)
   | YES | 1                | 11                |
^HELP("s","FUNCTIONS","s","$DATA()",22)
   +--------------------------------------------+
^HELP("s","FUNCTIONS","s","$DATA()",23)

^HELP("s","FUNCTIONS","s","$DATA()",24)
   $DATA() return values can also be understood as a pair of truth-values
^HELP("s","FUNCTIONS","s","$DATA()",25)
   where the left describes descendants and the right describes data 1 and
^HELP("s","FUNCTIONS","s","$DATA()",26)
   where M suppresses any leading zero (representing no descendants).
^HELP("s","FUNCTIONS","s","$DATA()",27)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",5)
   YDB>Kill  Write $Data(a)
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",6)
   0
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",7)
   YDB>Set a(1)=1 Write $Data(a(1))
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",8)
   1
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",9)
   YDB>Write $Data(a)
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",10)
   10
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",11)
   YDB>Set a=0 Write $Data(a)
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",12)
   11
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",13)
   YDB>
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",15)
   This uses $DATA to display all possible $DATA() results.
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",17)
   Example:
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",19)
   lock ^ACCT(0)
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",20)
   if '$data(^ACCT(0)) set ^ACCT(0)=0
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",21)
   set (ACCT,^ACCT(0))=^ACCT(0)+1
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",22)
   lock
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",24)
   This uses $DATA() to determine whether a global node requires
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",25)
   initialization.
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",26)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",27)
   Example:
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",29)
   for  set cus=$O(^cus(cus)) quit:cus=""  if $data(^(cus))>1 do WORK
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",31)
   This uses $DATA() to determine whether a global node has descendants and
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",32)
   requires additional processing.
^HELP("s","FUNCTIONS","s","$DATA()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$EXTRACT()")
$Extract()
^HELP("s","FUNCTIONS","s","$EXTRACT()",1)
   $Extract()
^HELP("s","FUNCTIONS","s","$EXTRACT()",2)

^HELP("s","FUNCTIONS","s","$EXTRACT()",3)
   Returns a substring of a given string.
^HELP("s","FUNCTIONS","s","$EXTRACT()",4)

^HELP("s","FUNCTIONS","s","$EXTRACT()",5)
   The format for the $EXTRACT function is:
^HELP("s","FUNCTIONS","s","$EXTRACT()",6)

^HELP("s","FUNCTIONS","s","$EXTRACT()",7)
   $E[XTRACT](expr[,intexpr1[,intexpr2]])
^HELP("s","FUNCTIONS","s","$EXTRACT()",8)

^HELP("s","FUNCTIONS","s","$EXTRACT()",9)
   $EXTRACT() provides a tool for manipulating strings based on character
^HELP("s","FUNCTIONS","s","$EXTRACT()",10)
   positions.
^HELP("s","FUNCTIONS","s","$EXTRACT()",11)

^HELP("s","FUNCTIONS","s","$EXTRACT()",12)
   For a mumps process started in UTF-mode, $EXTRACT interprets the string
^HELP("s","FUNCTIONS","s","$EXTRACT()",13)
   arguments as UTF-8 encoded. With VIEW "BADCHAR" enabled, $EXTRACT()
^HELP("s","FUNCTIONS","s","$EXTRACT()",14)
   produces a run-time error when it encounters a character in the reserved
^HELP("s","FUNCTIONS","s","$EXTRACT()",15)
   range of the Unicode(R) standard, but it does not process the characters
^HELP("s","FUNCTIONS","s","$EXTRACT()",16)
   that fall after the span specified by the arguments. The parallel function
^HELP("s","FUNCTIONS","s","$EXTRACT()",17)
   of $EXTRACT() is $ZEXTRACT(). Use $ZEXTRACT() for byte-oriented
^HELP("s","FUNCTIONS","s","$EXTRACT()",18)
   operations.
^HELP("s","FUNCTIONS","s","$EXTRACT()",19)

^HELP("s","FUNCTIONS","s","$EXTRACT()",20)
   $EXTRACT() can be used on the left-hand side of the equal sign (=) of a
^HELP("s","FUNCTIONS","s","$EXTRACT()",21)
   SET command to set a substring of a string. This construct permits easy
^HELP("s","FUNCTIONS","s","$EXTRACT()",22)
   maintenance of individual pieces within a string. It can also be used to
^HELP("s","FUNCTIONS","s","$EXTRACT()",23)
   right justify a value padded with blank characters.
^HELP("s","FUNCTIONS","s","$EXTRACT()",24)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",5)
   YDB>for i=0:1:3 write !,$extract("HI",i),"<"
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",6)
   <
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",7)
   H<
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",8)
   I<
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",9)
   <
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",12)
   This loop displays the result of $EXTRACT(), specifying no ending
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",13)
   character position and a beginning character position "before" first and
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",14)
   second positions, and "after" the string.
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",16)
   Example:
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",18)
   YDB>For i=0:1:3 write !,$extract("HI",1,i),"<"
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",19)
   <
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",20)
   H<
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",21)
   HI<
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",22)
   HI<
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",23)
   YDB>
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",24)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",25)
   This loop displays the result of $EXTRACT() specifying a beginning
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",26)
   character position of 1 and an ending character position "before, " first
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",27)
   and second positions, and "after" the string.
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",29)
   Example:
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",31)
   YDB>zprint ^trim
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",32)
   trim(x)
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",33)
       new i,j
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",34)
       for i=1:1:$length(x) quit:" "'=$extract(x,i)
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",35)
       for j=$length(x):-1:1 quit:" "'=$extract(x,j)
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",36)
       quit $extract(x,i,j)
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",37)
   YDB>set str=" MUMPS "
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",38)
   YDB>write $length(str)
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",39)
   7
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",40)
   YDB>write $length($$^trim(str))
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",41)
   5
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",42)
   YDB>
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",43)

^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",44)
   This extrinsic function uses $EXTRACT() to remove extra leading and
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",45)
   trailing spaces from its argument.
^HELP("s","FUNCTIONS","s","$EXTRACT()","s","EXAMPLES",46)

^HELP("s","FUNCTIONS","s","$FIND()")
$Find()
^HELP("s","FUNCTIONS","s","$FIND()",1)
   $Find()
^HELP("s","FUNCTIONS","s","$FIND()",2)

^HELP("s","FUNCTIONS","s","$FIND()",3)
   Returns an integer character position that locates the occurrence of a
^HELP("s","FUNCTIONS","s","$FIND()",4)
   substring within a string.
^HELP("s","FUNCTIONS","s","$FIND()",5)

^HELP("s","FUNCTIONS","s","$FIND()",6)
   The format for the $FIND function is:
^HELP("s","FUNCTIONS","s","$FIND()",7)

^HELP("s","FUNCTIONS","s","$FIND()",8)
   $F[IND](expr1,expr2[,intexpr])
^HELP("s","FUNCTIONS","s","$FIND()",9)

^HELP("s","FUNCTIONS","s","$FIND()",10)
   $FIND() provides a tool to locate substrings. The ([) operator and the
^HELP("s","FUNCTIONS","s","$FIND()",11)
   two-argument $LENGTH() are other tools that provide related functionality.
^HELP("s","FUNCTIONS","s","$FIND()",12)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",5)
   YDB>write $find("HIFI","I")
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",6)
   3
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",9)
   This example uses $FIND() to WRITE the position of the first occurrence of
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",10)
   the character "I." The return of 3 gives the position after the "found"
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",11)
   substring.
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",13)
   Example:
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",15)
   YDB>write $find("HIFI","I",3)
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",16)
   5
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",17)
   YDB>
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",19)
   This example uses $FIND() to WRITE the position of the next occurrence of
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",20)
   the character "I" starting in character position three.
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",22)
   Example:
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",24)
   YDB>set t=1 for  set t=$find("BANANA","AN",t) quit:'t  write !,t
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",25)
   4
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",26)
   6
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",27)
   YDB>
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",29)
   This example uses a loop with $FIND() to locate all occurrences of "AN" in
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",30)
   "BANANA". $FIND() returns 4 and 6 giving the positions after the two
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",31)
   occurrences of "AN".
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",32)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",33)
   Example:
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",34)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",35)
   YDB>set str="MUMPS databases are hierarchical"
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",36)
   YDB>Write $find(str," ")
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",37)
   7
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",38)
   YDB>Write $find(str,"Z")
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",39)
   0
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",40)
   YDB>Write $find(str,"d",1)
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",41)
   8
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",42)
   YDB>Write $find(str,"d",10)
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",43)
   0
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",44)

^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",45)
   The above example searches a string for a sub string, and returns an
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",46)
   integer value which corresponds to the next character position after
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",47)
   locating the sub string.
^HELP("s","FUNCTIONS","s","$FIND()","s","EXAMPLES",48)

^HELP("s","FUNCTIONS","s","$FNUMBER()")
$FNumber()
^HELP("s","FUNCTIONS","s","$FNUMBER()",1)
   $FNumber()
^HELP("s","FUNCTIONS","s","$FNUMBER()",2)

^HELP("s","FUNCTIONS","s","$FNUMBER()",3)
   Returns a string containing a formatted number.
^HELP("s","FUNCTIONS","s","$FNUMBER()",4)

^HELP("s","FUNCTIONS","s","$FNUMBER()",5)
   The format for the $FNUMBER function is:
^HELP("s","FUNCTIONS","s","$FNUMBER()",6)

^HELP("s","FUNCTIONS","s","$FNUMBER()",7)
   $FN[UMBER](numexpr,expr[,intexpr])
^HELP("s","FUNCTIONS","s","$FNUMBER()",8)

^HELP("s","FUNCTIONS","s","$FNUMBER()",9)
   $FNUMBER() formats or edits numbers, usually for reporting.
^HELP("s","FUNCTIONS","s","$FNUMBER()",10)

^HELP("s","FUNCTIONS","s","$FNUMBER()",11)
   The formatting codes are:
^HELP("s","FUNCTIONS","s","$FNUMBER()",12)

^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",5)
   YDB>do ^fnum
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",6)
   fnum;
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",7)
     zprint ^fnum
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",8)
     set X=-100000,Y=2000
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",9)
     write "SUPPRESS NEGATIVE SIGN:",?35,$FNumber(X,"-"),!
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",10)
     write "TRAILING SIGN:",?35,$FNumber(X,"T"),!
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",11)
     write "NEGATIVE NUMBERS IN ():",?35,$FNumber(X,"P"),!
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",12)
     write "COMMAS IN NUMBER:",?35,$FNumber(X,","),!
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",13)
     write "NUMBER WITH FRACTION:",?35,$FNumber(X,"",2),!
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",14)
     write "FORCE + SIGN IF POSITIVE:",?35,$FNumber(Y,"+"),!
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",15)
   SUPPRESS NEGATIVE SIGN:            100000
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",16)
   TRAILING SIGN:                     100000-
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",17)
   NEGATIVE NUMBERS IN ():            (100000)
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",18)
   COMMAS IN NUMBER:                  -100,000
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",19)
   NUMBER WITH FRACTION:              -100000.00
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",20)
   FORCE + SIGN IF POSITIVE:          +2000
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",22)
   Example:
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",24)
   set x=$fnumber(x,"-")
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",25)

^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",26)
   This example uses $FNUMBER() to SET x equal to its absolute value.
^HELP("s","FUNCTIONS","s","$FNUMBER()","s","EXAMPLES",27)

^HELP("s","FUNCTIONS","s","$GET()")
$Get()
^HELP("s","FUNCTIONS","s","$GET()",1)
   $Get()
^HELP("s","FUNCTIONS","s","$GET()",2)

^HELP("s","FUNCTIONS","s","$GET()",3)
   Returns the value of a local or global variable if the variable has a
^HELP("s","FUNCTIONS","s","$GET()",4)
   value. If the variable has no value, the function returns a value
^HELP("s","FUNCTIONS","s","$GET()",5)
   specified by an optional second argument, and otherwise returns an empty
^HELP("s","FUNCTIONS","s","$GET()",6)
   string.
^HELP("s","FUNCTIONS","s","$GET()",7)

^HELP("s","FUNCTIONS","s","$GET()",8)
   The format for the $GET function is:
^HELP("s","FUNCTIONS","s","$GET()",9)

^HELP("s","FUNCTIONS","s","$GET()",10)
   $G[ET](glvn[,expr])
^HELP("s","FUNCTIONS","s","$GET()",11)

^HELP("s","FUNCTIONS","s","$GET()",12)
   M defines $GET(x,y) as equivalent to:
^HELP("s","FUNCTIONS","s","$GET()",13)

^HELP("s","FUNCTIONS","s","$GET()",14)
   $Select($Data(x)[0:y,1:x)
^HELP("s","FUNCTIONS","s","$GET()",15)

^HELP("s","FUNCTIONS","s","$GET()",16)
   and $GET(x) as equivalent to:
^HELP("s","FUNCTIONS","s","$GET()",17)

^HELP("s","FUNCTIONS","s","$GET()",18)
   $GET(x,"")
^HELP("s","FUNCTIONS","s","$GET()",19)

^HELP("s","FUNCTIONS","s","$GET()",20)
   $GET() provides a tool to eliminate separate initialization of variables.
^HELP("s","FUNCTIONS","s","$GET()",21)
   This technique may provide performance benefits when used to increase the
^HELP("s","FUNCTIONS","s","$GET()",22)
   density of a sparse global array by eliminating nodes that would otherwise
^HELP("s","FUNCTIONS","s","$GET()",23)
   hold absent optional information. On the other hand, some uses of one
^HELP("s","FUNCTIONS","s","$GET()",24)
   argument $GET() can mask logic problems.
^HELP("s","FUNCTIONS","s","$GET()",25)

^HELP("s","FUNCTIONS","s","$GET()",26)
   YottaDB has a "NOUNDEF" mode of operation, which treats all variable
^HELP("s","FUNCTIONS","s","$GET()",27)
   references as if they were arguments to a one argument $GET(). The VIEW
^HELP("s","FUNCTIONS","s","$GET()",28)
   command controls "NOUNDEF" mode.
^HELP("s","FUNCTIONS","s","$GET()",29)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",5)
   setstatus;
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",6)
            if '$data(^PNT(NAME,TSTR)) set STATUS="NEW TEST"
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",7)
            else  if ^PNT(NAME,TSTR)="" set STATUS="WAITING FOR RESULT"
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",8)
            else  set STATUS=^PNT(NAME,TSTR)
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",10)
   This example can be reduced to two lines of code by using $GET(), shown in
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",11)
   the following example. However, by using $GET() in its one-argument form,
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",12)
   the distinction between an undefined variable and one with a null value is
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",13)
   lost:
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",15)
   set STATUS=$get(^PNT(NAME,TSTR))
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",16)
   if STATUS="" set STATUS="WAITING FOR RESULT"
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",18)
   This is solved by using the two-argument form of $GET():
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",20)
   set STATUS=$get(^PNT(NAME,TSTR),"NEW TEST")
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",21)
   if STATUS="" set STATUS="WAITING FOR RESULT"
^HELP("s","FUNCTIONS","s","$GET()","s","EXAMPLES",22)

^HELP("s","FUNCTIONS","s","$INCREMENT()")
$Increment()
^HELP("s","FUNCTIONS","s","$INCREMENT()",1)
   $Increment()
^HELP("s","FUNCTIONS","s","$INCREMENT()",2)

^HELP("s","FUNCTIONS","s","$INCREMENT()",3)
   Atomically adds (increments) a global variable by a numeric value. Note
^HELP("s","FUNCTIONS","s","$INCREMENT()",4)
   that increment is atomic, but the evaluation of the expression is not,
^HELP("s","FUNCTIONS","s","$INCREMENT()",5)
   unless inside a transaction (TStart/TCommit). The function also works on
^HELP("s","FUNCTIONS","s","$INCREMENT()",6)
   local variables, but has less benefit for locals as it does not (need to)
^HELP("s","FUNCTIONS","s","$INCREMENT()",7)
   provide ACID behavior.
^HELP("s","FUNCTIONS","s","$INCREMENT()",8)

^HELP("s","FUNCTIONS","s","$INCREMENT()",9)
   The format of the $INCREMENT function is:
^HELP("s","FUNCTIONS","s","$INCREMENT()",10)

^HELP("s","FUNCTIONS","s","$INCREMENT()",11)
   $INCREMENT(glvn[,numexpr])
^HELP("s","FUNCTIONS","s","$INCREMENT()",12)

^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",5)
   YDB>set i=1
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",6)
   YDB>write $increment(i)
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",7)
   2
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",8)
   YDB>write $increment(i)
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",9)
   3
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",10)
   YDB>write $increment(i)
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",11)
   4
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",12)
   YDB>write $increment(i)
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",13)
   5
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",14)
   YDB>write i
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",15)
   5
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",16)
   YDB>write $increment(i,-2)
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",17)
   3
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",18)
   YDB>write I
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",19)
   3
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",20)
   YDB>
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",22)
   This example increments the value of i by 1 and at the end decrements it
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",23)
   by 2. Note that the default value for incrementing a variable is 1.
^HELP("s","FUNCTIONS","s","$INCREMENT()","s","EXAMPLES",24)

^HELP("s","FUNCTIONS","s","$JUSTIFY()")
$Justify()
^HELP("s","FUNCTIONS","s","$JUSTIFY()",1)
   $Justify()
^HELP("s","FUNCTIONS","s","$JUSTIFY()",2)

^HELP("s","FUNCTIONS","s","$JUSTIFY()",3)
   Returns a formatted string.
^HELP("s","FUNCTIONS","s","$JUSTIFY()",4)

^HELP("s","FUNCTIONS","s","$JUSTIFY()",5)
   The format for the $JUSTIFY function is:
^HELP("s","FUNCTIONS","s","$JUSTIFY()",6)

^HELP("s","FUNCTIONS","s","$JUSTIFY()",7)
   $J[USTIFY](expr,intexpr1[,intexpr2])
^HELP("s","FUNCTIONS","s","$JUSTIFY()",8)

^HELP("s","FUNCTIONS","s","$JUSTIFY()",9)
   $JUSTIFY() fills expressions to create fixed length values. However, if
^HELP("s","FUNCTIONS","s","$JUSTIFY()",10)
   the length of the specified expression exceeds the specified field size,
^HELP("s","FUNCTIONS","s","$JUSTIFY()",11)
   $JUSTIFY() does not truncate the result (although it may still round based
^HELP("s","FUNCTIONS","s","$JUSTIFY()",12)
   on the third argument). When required, use $EXTRACT() to perform
^HELP("s","FUNCTIONS","s","$JUSTIFY()",13)
   truncation.
^HELP("s","FUNCTIONS","s","$JUSTIFY()",14)

^HELP("s","FUNCTIONS","s","$JUSTIFY()",15)
   $JUSTIFY() optionally rounds the portion of the result after the decimal
^HELP("s","FUNCTIONS","s","$JUSTIFY()",16)
   point. In the absence of the third argument, $JUSTIFY() does not restrict
^HELP("s","FUNCTIONS","s","$JUSTIFY()",17)
   the evaluation of the expression. In the presence of the third (rounding)
^HELP("s","FUNCTIONS","s","$JUSTIFY()",18)
   argument, $JUSTIFY() evaluates the expression as a numeric value. The
^HELP("s","FUNCTIONS","s","$JUSTIFY()",19)
   rounding algorithm can be understood as follows:
^HELP("s","FUNCTIONS","s","$JUSTIFY()",20)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",5)
   YDB>write ":",$justify("HELLO",10),":",!,":",$justify("GOODBYE",5),":"
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",6)
   :     HELLO:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",7)
   :GOODBYE:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",8)
   YDB>
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",10)
   This uses $JUSTIFY() to display "HELLO" in a field of 10 spaces and
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",11)
   "GOODBYE" in a field of 5 spaces. Because the length of "GOODBYE" exceeds
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",12)
   five spaces, the result overflows the specification.
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",14)
   Example:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",16)
   YDB>write "1234567890",!,$justify(10.545,10,2)
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",17)
   1234567890
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",18)
        10.55
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",19)
   YDB>
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",20)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",21)
   This uses $JUSTIFY() to WRITE a rounded value right justified in a field
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",22)
   of 10 spaces. Notice that the result has been rounded up.
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",24)
   Example:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",25)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",26)
   YDB>write "1234567890",!,$justify(10.544,10,2)
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",27)
   1234567890
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",28)
        10.54
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",29)
   YDB>
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",31)
   Again, this uses $JUSTIFY() to WRITE a rounded value right justified in a
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",32)
   field of 10 spaces. Notice that the result has been rounded down.
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",34)
   Example:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",35)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",36)
   YDB>write "1234567890",!,$justify(10.5,10,2)
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",37)
   1234567890
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",38)
        10.50
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",39)
   YDB>
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",40)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",41)
   Once again, this uses $JUSTIFY() to WRITE a rounded value right justified
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",42)
   in a field of 10 spaces. Notice that the result has been zero-filled to 2
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",43)
   places.
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",44)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",45)
   Example:
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",46)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",47)
   YDB>write $justify(.34,0,2)
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",48)
   0.34
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",49)
   YDB>
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",50)

^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",51)
   This example uses $JUSTIFY to ensure that the fraction has a leading zero.
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",52)
   Note the use of a second argument of zero in the case that rounding is the
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",53)
   only function that $JUSTIFY is to perform.
^HELP("s","FUNCTIONS","s","$JUSTIFY()","s","EXAMPLES",54)

^HELP("s","FUNCTIONS","s","$LENGTH()")
$Length()
^HELP("s","FUNCTIONS","s","$LENGTH()",1)
   $Length()
^HELP("s","FUNCTIONS","s","$LENGTH()",2)

^HELP("s","FUNCTIONS","s","$LENGTH()",3)
   Returns the length of a string measured in characters, or in "pieces"
^HELP("s","FUNCTIONS","s","$LENGTH()",4)
   separated by a delimiter specified by one of its arguments.
^HELP("s","FUNCTIONS","s","$LENGTH()",5)

^HELP("s","FUNCTIONS","s","$LENGTH()",6)
   The format for the $LENGTH function is:
^HELP("s","FUNCTIONS","s","$LENGTH()",7)

^HELP("s","FUNCTIONS","s","$LENGTH()",8)
   $L[ENGTH](expr1[,expr2])
^HELP("s","FUNCTIONS","s","$LENGTH()",9)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",5)
   YDB>Write $length("KINGSTON")
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",6)
   8
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",9)
   This uses $LENGTH() to WRITE the length in characters of the string
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",10)
   "KINGSTON".
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",12)
   Example:
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",14)
   YDB>set x="Smith/John/M/124 Main Street/Ourtown/KA/USA"
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",15)
   YDB>write $length(x,"/")
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",16)
   7
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",17)
   YDB>
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",19)
   This uses $LENGTH() to WRITE the number of pieces in a string, as
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",20)
   delimited by /.
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",22)
   Example:
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",24)
   YDB>write $length("/2/3/","/")
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",25)
   4
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",26)
   YDB>
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",27)

^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",28)
   This also uses $LENGTH() to WRITE the number of pieces in a string, as
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",29)
   delimited by /. Notice that YottaDB. adds one count to the count of
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",30)
   delimiters (in this case 3), to get the number of pieces in the string
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",31)
   (displays 4).
^HELP("s","FUNCTIONS","s","$LENGTH()","s","EXAMPLES",32)

^HELP("s","FUNCTIONS","s","$NAME()")
$NAme()
^HELP("s","FUNCTIONS","s","$NAME()",1)
   $NAme()
^HELP("s","FUNCTIONS","s","$NAME()",2)

^HELP("s","FUNCTIONS","s","$NAME()",3)
   Returns an evaluated representation of some or all of a local or global
^HELP("s","FUNCTIONS","s","$NAME()",4)
   variable name.
^HELP("s","FUNCTIONS","s","$NAME()",5)

^HELP("s","FUNCTIONS","s","$NAME()",6)
   The format for the $NAME function is:
^HELP("s","FUNCTIONS","s","$NAME()",7)

^HELP("s","FUNCTIONS","s","$NAME()",8)
   $NA[ME](glvn[,intexpr])
^HELP("s","FUNCTIONS","s","$NAME()",9)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",5)
   YDB>set X="A""B",^Y(1,X,"B",4)=""
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",6)
   YDB>write $name(^(3),3)
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",7)
   ^Y(1,"A""B","B")
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",8)
   YDB>
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",10)
   This example sets up a naked reference and then uses $NAME() to display
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",11)
   the first three levels of that four-level reference.
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",13)
   Example:
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",15)
   YDB>write $name(^(3),0)
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",16)
   ^Y
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",17)
   YDB>
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",19)
   This example shows the name level for the same naked reference.
^HELP("s","FUNCTIONS","s","$NAME()","s","EXAMPLES",20)

^HELP("s","FUNCTIONS","s","$NEXT()")
$Next()
^HELP("s","FUNCTIONS","s","$NEXT()",1)
   $Next()
^HELP("s","FUNCTIONS","s","$NEXT()",2)

^HELP("s","FUNCTIONS","s","$NEXT()",3)
   Returns the next subscripted local or global variable name in collation
^HELP("s","FUNCTIONS","s","$NEXT()",4)
   sequence within the array level specified by its argument.
^HELP("s","FUNCTIONS","s","$NEXT()",5)

^HELP("s","FUNCTIONS","s","$NEXT()",6)
   $NEXT() has been replaced by $ORDER(). $NEXT has been retained in the
^HELP("s","FUNCTIONS","s","$NEXT()",7)
   current standard only for compatibility with earlier versions of the
^HELP("s","FUNCTIONS","s","$NEXT()",8)
   standard. $NEXT() is similar to $ORDER(). However, $NEXT() has the
^HELP("s","FUNCTIONS","s","$NEXT()",9)
   deficiency that when it encounters negative one (-1) as a subscript, it
^HELP("s","FUNCTIONS","s","$NEXT()",10)
   returns the same result as when it finds no other data at the level. This
^HELP("s","FUNCTIONS","s","$NEXT()",11)
   deficiency is particularly disruptive because it occurs in the middle of
^HELP("s","FUNCTIONS","s","$NEXT()",12)
   the M collating sequence.
^HELP("s","FUNCTIONS","s","$NEXT()",13)

^HELP("s","FUNCTIONS","s","$NEXT()",14)
   **Caution**
^HELP("s","FUNCTIONS","s","$NEXT()",15)

^HELP("s","FUNCTIONS","s","$NEXT()",16)
   As $NEXT() has been removed from the standard in the MDC, you should use
^HELP("s","FUNCTIONS","s","$NEXT()",17)
   $ORDER.
^HELP("s","FUNCTIONS","s","$NEXT()",18)

^HELP("s","FUNCTIONS","s","$NEXT()",19)
   The format for the $NEXT function is:
^HELP("s","FUNCTIONS","s","$NEXT()",20)

^HELP("s","FUNCTIONS","s","$NEXT()",21)
   $N[EXT](glvn)
^HELP("s","FUNCTIONS","s","$NEXT()",22)

^HELP("s","FUNCTIONS","s","$ORDER()")
$Order()
^HELP("s","FUNCTIONS","s","$ORDER()",1)
   $Order()
^HELP("s","FUNCTIONS","s","$ORDER()",2)

^HELP("s","FUNCTIONS","s","$ORDER()",3)
   Returns the subscript of the next or prior local or global variable name
^HELP("s","FUNCTIONS","s","$ORDER()",4)
   in collation sequence within the array level specified by its first
^HELP("s","FUNCTIONS","s","$ORDER()",5)
   argument. In doing so, it moves in the direction specified by the second
^HELP("s","FUNCTIONS","s","$ORDER()",6)
   argument. In YottaDB, when $ORDER() has an unsubscripted argument, it returns
^HELP("s","FUNCTIONS","s","$ORDER()",7)
   the next or previous unsubscripted local or global variable name in
^HELP("s","FUNCTIONS","s","$ORDER()",8)
   collating sequence.
^HELP("s","FUNCTIONS","s","$ORDER()",9)

^HELP("s","FUNCTIONS","s","$ORDER()",10)
   The format for the $ORDER function is:
^HELP("s","FUNCTIONS","s","$ORDER()",11)

^HELP("s","FUNCTIONS","s","$ORDER()",12)
   $O[RDER](glvn[,expr])
^HELP("s","FUNCTIONS","s","$ORDER()",13)

^HELP("s","FUNCTIONS","s","$ORDER()",14)
   **Note**
^HELP("s","FUNCTIONS","s","$ORDER()",15)

^HELP("s","FUNCTIONS","s","$ORDER()",16)
   Name-level $ORDER() always returns an empty string when used with extended
^HELP("s","FUNCTIONS","s","$ORDER()",17)
   references.
^HELP("s","FUNCTIONS","s","$ORDER()",18)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",5)
   YDB>zwrite
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",6)
   lcl(1)=3
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",7)
   lcl("x")=4
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",8)
   YDB>write $order(lcl(""))
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",9)
   1
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",11)
   This example returns the first node, that is 1, because the specified last
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",12)
   subscript of the argument is null and lcl has no null subscript.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",14)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",16)
   YDB>write $order(lcl(1))
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",17)
   x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",19)
   This example returns the first node after lcl(1) that is x because lcl has
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",20)
   no null subscript.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",22)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",24)
   YDB>write $order(lcl(""),-1)
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",25)
   x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",26)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",27)
   This example returns the last node that is, x, because the last subscript
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",28)
   of the first argument is null and second argument is -1.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",29)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",30)
   YDB>set lcl("")=2
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",31)
   YDB>zwrite
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",32)
   lcl("")=2
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",33)
   lcl(1)=3
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",34)
   lcl("x")=4
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",35)
   YDB>write $order(lcl(""))
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",36)
   1
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",37)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",38)
   This example returns the second node at the specified level because the
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",39)
   null subscript at the end of the argument is ambiguous (does it specify
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",40)
   starting at the beginning or starting at the real node with the null
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",41)
   subscript?) and returning the subscript of the first node (an empty
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",42)
   string) would tend to create an endless loop.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",43)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",44)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",45)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",46)
   YDB>write $order(lcl(""),-1)
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",47)
   x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",48)
   YDB>write $order(lcl("x"),-1)
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",49)
   1
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",50)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",51)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",52)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",53)
   YDB>kill  set (a(1),a(2000),a("CAT"),a("cat"),a("ALF"),a(12))=1
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",54)
   YDB>set x="" for  set x=$order(a(x)) quit:x=""  write !,x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",55)
   1
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",56)
   12
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",57)
   2000
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",58)
   ALF
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",59)
   CAT
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",60)
   cat
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",61)
   YDB>kill a("CAT") set a(5,10)="woolworths",a("cat")="last"
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",62)
   YDB>set x="" for  set x=$order(a(x),-1) quit:x=""  write !,x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",63)
   cat
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",64)
   ALF
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",65)
   2000
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",66)
   12
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",67)
   5
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",68)
   1
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",69)
   YDB>
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",70)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",71)
   This example uses a $ORDER() loop to display all the subscripts at the
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",72)
   first level of local variable a, make some changes in a, and then display
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",73)
   all the subscripts in reverse order. Notice that $ORDER() returns only the
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",74)
   existing subscripts in the sparse array and returns them in M collation
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",75)
   sequence, regardless of the order in which they were entered. Also,
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",76)
   $ORDER() does not differentiate between node A(5), which has only
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",77)
   descendants (no data value), and the other nodes, which have data values.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",78)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",79)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",80)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",81)
   YDB>kill set (%(1),tiva(2),A(3),tiv(4),Q(5),%a(6))=""
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",82)
   YDB>set x="%"
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",83)
   YDB>write:$data(@x) !,x for  set x=$order(@x) quit:x=""  write !,x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",84)
   %
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",85)
   %a
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",86)
   A
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",87)
   Q
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",88)
   tiv
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",89)
   tiva
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",90)
   x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",91)
   YDB>set $piece(x,"z",32)=""
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",92)
   YDB>write:$data(@x) !,x for  set x=$order(@x,-1) quit:x=""  write !,x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",93)
   x
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",94)
   tiva
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",95)
   tiv
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",96)
   Q
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",97)
   A
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",98)
   %a
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",99)
   %
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",100)
   YDB>
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",101)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",102)
   This example uses $ORDER() to display the current local variable names in
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",103)
   both forward and reverse order. Notice that the first ([^]%) and last
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",104)
   ([^]zzzzzzzz) names require handling as special cases and require a
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",105)
   $DATA() function.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",106)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",107)
   Example:
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",108)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",109)
     set acct="",cntt=""
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",110)
     for  fet acct=$order(^acct(acct)) quit:acct=""  do
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",111)
     . for  set cntt=$order(^acct(acct,cntt)) do WORK
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",112)
     quit
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",113)

^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",114)
   This uses two nested $ORDER() loops to cycle through the ^acct global
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",115)
   array and perform some action for each second level node.
^HELP("s","FUNCTIONS","s","$ORDER()","s","EXAMPLES",116)

^HELP("s","FUNCTIONS","s","$PIECE()")
$Piece()
^HELP("s","FUNCTIONS","s","$PIECE()",1)
   $Piece()
^HELP("s","FUNCTIONS","s","$PIECE()",2)

^HELP("s","FUNCTIONS","s","$PIECE()",3)
   Returns a substring delimited by a specified string delimiter made up of
^HELP("s","FUNCTIONS","s","$PIECE()",4)
   one or more characters. In M, $PIECE() returns a logical field from a
^HELP("s","FUNCTIONS","s","$PIECE()",5)
   logical record.
^HELP("s","FUNCTIONS","s","$PIECE()",6)

^HELP("s","FUNCTIONS","s","$PIECE()",7)
   The format for the $PIECE function is:
^HELP("s","FUNCTIONS","s","$PIECE()",8)

^HELP("s","FUNCTIONS","s","$PIECE()",9)
   $P[IECE](expr1,expr2[,intexpr1[,intexpr2]])
^HELP("s","FUNCTIONS","s","$PIECE()",10)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",5)
   YDB>for i=0:1:3 write !,$piece("1 2"," ",i),"<"
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",6)
   <
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",7)
   1<
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",8)
   2<
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",9)
   <
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",12)
   This loop displays the result of $PIECE(), specifying a space as a
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",13)
   delimiter, a piece position "before," first and second, and "after" the
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",14)
   string.
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",16)
   Example:
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",18)
   YDB>for i=-1:1:3 write !,$piece("1 2"," ",i,i+1),"<"
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",19)
   <
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",20)
   1<
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",21)
   1 2<
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",22)
   2<
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",23)
   <
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",24)
   YDB>
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",25)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",26)
   This example is similar to the previous example except that it displays
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",27)
   two pieces on each iteration. Notice the delimiter (a space) in the middle
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",28)
   of the output for the third iteration, which displays both pieces.
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",29)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",30)
   Example:
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",31)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",32)
   for p=1:1:$length(x,"/") write ?p-1*10,$piece(x,"/",p)
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",34)
   This example uses $LENGTH() and $PIECE() to display all the pieces of x in
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",35)
   columnar format.
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",36)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",37)
   Example:
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",38)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",39)
   YDB>set $piece(x,".",25)="" write x
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",40)
   ........................
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",41)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",42)
   This SETs the 25th piece of the variable x to null, with a delimiter of a
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",43)
   period. This produces a string of 24 periods preceding the null.
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",44)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",45)
   Example:
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",46)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",47)
   YDB>set ^x=1,$piece(^a,";",3,2)=^b
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",48)

^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",49)
   This example leaves the naked indicator to pointing to the global ^b.
^HELP("s","FUNCTIONS","s","$PIECE()","s","EXAMPLES",50)

^HELP("s","FUNCTIONS","s","$QLENGTH()")
$Qlength()
^HELP("s","FUNCTIONS","s","$QLENGTH()",1)
   $Qlength()
^HELP("s","FUNCTIONS","s","$QLENGTH()",2)

^HELP("s","FUNCTIONS","s","$QLENGTH()",3)
   Returns the number of subscripts in a variable name. The format is:
^HELP("s","FUNCTIONS","s","$QLENGTH()",4)

^HELP("s","FUNCTIONS","s","$QLENGTH()",5)
   $QL[ENGTH] (namevalue)
^HELP("s","FUNCTIONS","s","$QLENGTH()",6)

^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",5)
   YDB>write $data(^|"XXX"|ABC(1,2,3,4))
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",6)
   0
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",7)
   YDB>set X=$name(^(5,6))
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",8)
   YDB>write $qlength(X)
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",9)
   5
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",11)
   The number of subscripts in x is 5. Notice that the name and the
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",12)
   environment preceding it do not contribute to the count. Refer to $NAme()
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",13)
   section earlier in this chapter for an understanding of the $NAME
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",14)
   function.
^HELP("s","FUNCTIONS","s","$QLENGTH()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()")
$QSubscript()
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",1)
   $QSubscript()
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",2)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",3)
   Returns a component of a variable name.
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",4)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",5)
   The format of the $QSUBSCRIPT function is:
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",6)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",7)
   $QS[UBSCRIPT](namevalue, intexpr)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()",8)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",5)
   Assume that X is defined as in the "Examples of $Qlength()" earlier in
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",6)
   this chapter;
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",7)

^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",8)
   write X
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",9)
   X="^|""XXX""|ABC(1,2,3,5,6)"
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",10)
   YDB>write $qsubscript(X,-2)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",11)
   error
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",12)
   YDB>WRITE $qsubscript(X,-1)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",13)
   XXX
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",14)
   YDB>WRITE $qsubscript(X,0)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",15)
   ^ABC
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",16)
   YDB>WRITE $qsubscript(X,1)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",17)
   1
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",18)
   YDB>WRITE $qsubscript(X,4)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",19)
   5
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",20)
   YDB>WRITE $qsubscript(X,7)
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",21)
   ""
^HELP("s","FUNCTIONS","s","$QSUBSCRIPT()","s","EXAMPLES",22)

^HELP("s","FUNCTIONS","s","$QUERY()")
$Query()
^HELP("s","FUNCTIONS","s","$QUERY()",1)
   $Query()
^HELP("s","FUNCTIONS","s","$QUERY()",2)

^HELP("s","FUNCTIONS","s","$QUERY()",3)
   Returns the next subscripted local or global variable node name,
^HELP("s","FUNCTIONS","s","$QUERY()",4)
   independent of level, which follows the node specified by its argument in
^HELP("s","FUNCTIONS","s","$QUERY()",5)
   M collating sequence and has a data value.
^HELP("s","FUNCTIONS","s","$QUERY()",6)

^HELP("s","FUNCTIONS","s","$QUERY()",7)
   The format for the $QUERY function is:
^HELP("s","FUNCTIONS","s","$QUERY()",8)

^HELP("s","FUNCTIONS","s","$QUERY()",9)
   $Q[UERY](glvn)
^HELP("s","FUNCTIONS","s","$QUERY()",10)

^HELP("s","FUNCTIONS","s","$QUERY()",11)
   $QUERY() can be used as a tool for scanning an entire array for nodes that
^HELP("s","FUNCTIONS","s","$QUERY()",12)
   have data values. Because $QUERY() can return a result specifying a
^HELP("s","FUNCTIONS","s","$QUERY()",13)
   different level than its argument, the result provides a full variable
^HELP("s","FUNCTIONS","s","$QUERY()",14)
   name. This contrasts with $ORDER(), which returns a subscript value. To
^HELP("s","FUNCTIONS","s","$QUERY()",15)
   access the data value at a node, a $ORDER() return can be used as a
^HELP("s","FUNCTIONS","s","$QUERY()",16)
   subscript; however, a $QUERY() return must be used with indirection.
^HELP("s","FUNCTIONS","s","$QUERY()",17)
   Because arrays tend to have homogeneous values within a level but not
^HELP("s","FUNCTIONS","s","$QUERY()",18)
   between levels, $QUERY() is more useful as a tool in utility programs than
^HELP("s","FUNCTIONS","s","$QUERY()",19)
   in application programs. The $QUERY() can be useful in avoiding nested
^HELP("s","FUNCTIONS","s","$QUERY()",20)
   $ORDER loops.
^HELP("s","FUNCTIONS","s","$QUERY()",21)

^HELP("s","FUNCTIONS","s","$QUERY()",22)
   Note that the standard does not unambiguously define the state of the
^HELP("s","FUNCTIONS","s","$QUERY()",23)
   naked reference indicator after a $QUERY(). While in YottaDB after $QUERY(),
^HELP("s","FUNCTIONS","s","$QUERY()",24)
   the naked reference indicator reflects the $QUERY() argument, NOT its
^HELP("s","FUNCTIONS","s","$QUERY()",25)
   result.
^HELP("s","FUNCTIONS","s","$QUERY()",26)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",5)
   The following routine:
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",6)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",7)
   set y="^X"
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",8)
   for  set y=$query(@y) quit:y=""  write !,y,"=",@y
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",10)
   produces the results:
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",12)
   ^X(1,2,3)=123
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",13)
   ^X(1,2,3,7)=1237
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",14)
   ^X(1,2,4)=124
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",15)
   ^X(1,2,5,9)=1259
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",16)
   ^X(1,6)=16
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",17)
   ^X("B",1)=AB
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",19)
   Example:
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",20)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",21)
   YDB>zwrite lcl
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",22)
   lcl("")=1
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",23)
   lcl(1)=1
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",24)
   lcl(1,2)=2
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",25)
   lcl(1,2,"")=3
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",26)
   lcl(1,2,"","")=4
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",27)
   lcl(1,2,"","",4)=5
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",28)
   lcl(1,2,0)=6
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",29)
   lcl(1,2,"abc",5)=7
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",30)
   lcl("x")=1
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",31)
   YDB>set y="lcl"
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",32)
   YDB>for  set y=$query(@y) quit:y=""  write !,y,"=",@y
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",34)
   This example produces the results:
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",35)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",36)
   lcl("")=1
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",37)
   lcl(1)=1
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",38)
   lcl(1,2)=2
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",39)
   lcl(1,2,"")=3
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",40)
   lcl(1,2,"","")=4
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",41)
   lcl(1,2,"","",4)=5
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",42)
   lcl(1,2,0)=6
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",43)
   lcl(1,2,"abc",5)=7
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",44)
   lcl("x")=1
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",45)

^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",46)
   Note that the result is the same as the ZWRITE output.
^HELP("s","FUNCTIONS","s","$QUERY()","s","EXAMPLES",47)

^HELP("s","FUNCTIONS","s","$RANDOM()")
$Random()
^HELP("s","FUNCTIONS","s","$RANDOM()",1)
   $Random()
^HELP("s","FUNCTIONS","s","$RANDOM()",2)

^HELP("s","FUNCTIONS","s","$RANDOM()",3)
   Returns a random integer from a range specified by its argument.
^HELP("s","FUNCTIONS","s","$RANDOM()",4)

^HELP("s","FUNCTIONS","s","$RANDOM()",5)
   The format for the $RANDOM function is:
^HELP("s","FUNCTIONS","s","$RANDOM()",6)

^HELP("s","FUNCTIONS","s","$RANDOM()",7)
   $R[ANDOM](intexpr)
^HELP("s","FUNCTIONS","s","$RANDOM()",8)

^HELP("s","FUNCTIONS","s","$RANDOM()",9)
   $RANDOM() provides a tool for generating pseudo-random patterns useful in
^HELP("s","FUNCTIONS","s","$RANDOM()",10)
   testing or statistical calculations. $RANDOM() results fall between zero
^HELP("s","FUNCTIONS","s","$RANDOM()",11)
   (0) and one less than the argument.
^HELP("s","FUNCTIONS","s","$RANDOM()",12)

^HELP("s","FUNCTIONS","s","$RANDOM()",13)
   Random number generators use factors from the environment to create
^HELP("s","FUNCTIONS","s","$RANDOM()",14)
   sequences of numbers. True random number generation requires a source of
^HELP("s","FUNCTIONS","s","$RANDOM()",15)
   what is known as "noise". Pseudo-random numbers appear to have no pattern,
^HELP("s","FUNCTIONS","s","$RANDOM()",16)
   but are developed using interactions between factors that vary in ways not
^HELP("s","FUNCTIONS","s","$RANDOM()",17)
   guaranteed to be entirely random. In accordance with the M standard, the
^HELP("s","FUNCTIONS","s","$RANDOM()",18)
   YottaDB implementation of $RANDOM() produces pseudo-random numbers.
^HELP("s","FUNCTIONS","s","$RANDOM()",19)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",5)
   YDB>for i=1:1:10 write $random(1)
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",6)
   0000000000
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",9)
   This shows that when $RANDOM() has an argument of one (1), the result is
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",10)
   too confined to be random.
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",12)
   Example:
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",14)
   set x=$random(100)+1*.01
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",16)
   This $RANDOM() example produces a number between 0 and 99. The example
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",17)
   then shifts with addition, and scales with multiplication to create a
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",18)
   value between .01 and 1.
^HELP("s","FUNCTIONS","s","$RANDOM()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$REVERSE()")
$REverse()
^HELP("s","FUNCTIONS","s","$REVERSE()",1)
   $REverse()
^HELP("s","FUNCTIONS","s","$REVERSE()",2)

^HELP("s","FUNCTIONS","s","$REVERSE()",3)
   Returns a string with the characters in the reverse order from that of its
^HELP("s","FUNCTIONS","s","$REVERSE()",4)
   argument.
^HELP("s","FUNCTIONS","s","$REVERSE()",5)

^HELP("s","FUNCTIONS","s","$REVERSE()",6)
   The format for the $REVERSE function is:
^HELP("s","FUNCTIONS","s","$REVERSE()",7)

^HELP("s","FUNCTIONS","s","$REVERSE()",8)
   $RE[VERSE](expr)
^HELP("s","FUNCTIONS","s","$REVERSE()",9)

^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",5)
   YDB>write $reverse(123)
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",6)
   321
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",7)
   YDB>write $reverse("AbCDe")
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",8)
   "eDCbA"
^HELP("s","FUNCTIONS","s","$REVERSE()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$SELECT()")
$Select()
^HELP("s","FUNCTIONS","s","$SELECT()",1)
   $Select()
^HELP("s","FUNCTIONS","s","$SELECT()",2)

^HELP("s","FUNCTIONS","s","$SELECT()",3)
   Returns a value associated with the first true truth-valued expression in
^HELP("s","FUNCTIONS","s","$SELECT()",4)
   a list of paired expression arguments.
^HELP("s","FUNCTIONS","s","$SELECT()",5)

^HELP("s","FUNCTIONS","s","$SELECT()",6)
   The format for the $SELECT function is:
^HELP("s","FUNCTIONS","s","$SELECT()",7)

^HELP("s","FUNCTIONS","s","$SELECT()",8)
   $S[ELECT](tvexpr:expr[,...])
^HELP("s","FUNCTIONS","s","$SELECT()",9)

^HELP("s","FUNCTIONS","s","$SELECT()",10)
   $SELECT() is one of a limited set of functions that permit an indefinite
^HELP("s","FUNCTIONS","s","$SELECT()",11)
   number of arguments. $SELECT() provides a means of selecting from a list
^HELP("s","FUNCTIONS","s","$SELECT()",12)
   of alternatives.
^HELP("s","FUNCTIONS","s","$SELECT()",13)

^HELP("s","FUNCTIONS","s","$SELECT()",14)
   Generally, the last $SELECT() argument has numeric literal one (1) for a
^HELP("s","FUNCTIONS","s","$SELECT()",15)
   truth-value to prevent run-time errors, and to provide a "default" value.
^HELP("s","FUNCTIONS","s","$SELECT()",16)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",5)
   YDB>for i=3:-1:0 write !,$select(i=1:"here",i=2:"come",i=3:"Watson")
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",6)
   Watson
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",7)
   come
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",8)
   here
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",9)
   %YDB-E-SELECTFALSE, No argument to $SELECT was true
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",12)
   This loop uses $SELECT() to WRITE a series of strings. Because there is no
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",13)
   true argument on the fourth iteration, when i=0, $SELECT() produces an
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",14)
   error.
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",16)
   Example:
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",18)
   set name=$select(sex="M":"Mr. ",sex="F":"Ms. ",1:"")_name
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",20)
   This example uses $SELECT() to add a prefix to the name based on a sex
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",21)
   code held in the variable sex. Notice that the default handles the case of
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",22)
   a missing or incorrect code.
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",24)
   Example:
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",25)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",26)
   if $select(x=+x:x,x="":0,"JANAPRJULOCT"[x:1,1:0) do THING
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",27)

^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",28)
   This uses $SELECT() to perform complex logic as the truth-valued
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",29)
   expression argument to an IF command.
^HELP("s","FUNCTIONS","s","$SELECT()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$STACK()")
$STack()
^HELP("s","FUNCTIONS","s","$STACK()",1)
   $STack()
^HELP("s","FUNCTIONS","s","$STACK()",2)

^HELP("s","FUNCTIONS","s","$STACK()",3)
   Returns strings describing aspects of the execution environment.
^HELP("s","FUNCTIONS","s","$STACK()",4)

^HELP("s","FUNCTIONS","s","$STACK()",5)
   The format for the $STACK function is:
^HELP("s","FUNCTIONS","s","$STACK()",6)

^HELP("s","FUNCTIONS","s","$STACK()",7)
   $ST[ACK](intexpr[,expr])
^HELP("s","FUNCTIONS","s","$STACK()",8)

^HELP("s","FUNCTIONS","s","$STACK()",9)
   **Note**
^HELP("s","FUNCTIONS","s","$STACK()",10)

^HELP("s","FUNCTIONS","s","$STACK()",11)
   $STACK() returns similar information to ZSHOW "S" when ""=$ECODE, but when
^HELP("s","FUNCTIONS","s","$STACK()",12)
   $ECODE contains error information, $STACK() returns information as of the
^HELP("s","FUNCTIONS","s","$STACK()",13)
   time of a prior error, generally the first entry in $ECODE. For $STACK()
^HELP("s","FUNCTIONS","s","$STACK()",14)
   to return current information, be sure that error handing code does a SET
^HELP("s","FUNCTIONS","s","$STACK()",15)
   $ECODE="" before restoring the normal flow of control.
^HELP("s","FUNCTIONS","s","$STACK()",16)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",5)
   /usr/local/lib/yottadb/r130/ydb -run ^dstackex
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",6)
   dstackex;
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",7)
     zprint ^dstackex
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",8)
     write !,$STACK
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",9)
     xecute "WRITE !,$STACK"
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",10)
     do Label
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",11)
     write !,$$ELabel
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",12)
     write !,$STACK
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",13)
     quit
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",15)
   Label
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",16)
     write !,$STACK
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",17)
     do DLabel
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",18)
     quit
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",20)
   ELabel()
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",21)
     quit $STACK
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",22)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",23)
   DLabel
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",24)
     write !,$STACK
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",25)
     quit
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",26)
   0
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",27)
   1
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",28)
   1
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",29)
   2
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",30)
   1
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",31)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",32)
   Example for error processing:
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",34)
   YDB>zprint ^debugerr
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",35)
   debugerr;
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",36)
    set dsm1=$stack(-1)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",37)
    write !,"$stack(-1):",dsm1
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",38)
    for l=dsm1:-1:0 do
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",39)
    . write !,l
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",40)
    . for i="ecode","place","mcode" write ?5,i,?15,$stack(l,i),!
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",41)
   YDB>
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",42)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",43)
   The above example can be used to display a trace of the code path that led
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",44)
   to an error.
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",45)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",46)
   Example:
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",47)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",48)
   YDB>zprint ^dstacktst
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",49)
   dstacktst(x)       ; check $stack() returns with and without clearing $ecode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",50)
    set $etrap="do ^debugerr"
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",51)
   label
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",52)
    if x>0 set $ecode=",U1," ; if condition
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",53)
    else  set $ecode=",U2," ;  else condition
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",54)
    quit
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",55)
   YDB>do ^dstacktst(0)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",56)
   $stack(-1):2
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",57)
   2    ecode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",58)
        place     debugerr+3^debugerr
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",59)
        mcode      for l=dsm1:-1:0 do
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",60)
   1    ecode     ,U2,
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",61)
        place     label+2^dstacktst
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",62)
        mcode      else  set $ecode=",U2," ;  else condition
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",63)
   0    ecode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",64)
        place     +1^GTM$DMOD
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",65)
        mcode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",66)
   %YDB-E-SETECODE, Non-empty value assigned to $ECODE (user-defined error trap)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",67)
   YDB>do ^dstacktst(1)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",68)
   $stack(-1):1
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",69)
   1    ecode     ,U2,
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",70)
        place     label+2^dstacktst
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",71)
        mcode      else  set $ecode=",U2," ;  else condition
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",72)
   0    ecode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",73)
        place     +1^GTM$DMOD
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",74)
        mcode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",75)
   %YDB-E-SETECODE, Non-empty value assigned to $ECODE (user-defined error trap)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",76)
   YDB>set $ecode=""
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",77)
   YDB>do ^dstacktst(1)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",78)
   $stack(-1):2
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",79)
   2    ecode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",80)
        place     debugerr+3^debugerr
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",81)
        mcode      for l=dsm1:-1:0 do
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",82)
   1    ecode     ,U1,
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",83)
        place     label+1^dstacktst
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",84)
        mcode      if x>0 set $ecode=",U1," ; if condition
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",85)
   0    ecode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",86)
        place     +1^GTM$DMOD
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",87)
        mcode
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",88)
   %YDB-E-SETECODE, Non-empty value assigned to $ECODE (user-defined error trap)
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",89)
   YDB>
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",90)

^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",91)
   This example shows how SETing $ECODE=.. makes $STACK() reports current
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",92)
   information. Notice how ^do dstacktst(0) and ^dostacktst(1) without
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",93)
   clearing $ECODE in between displays information frozen at the time of the
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",94)
   first error (else condition).
^HELP("s","FUNCTIONS","s","$STACK()","s","EXAMPLES",95)

^HELP("s","FUNCTIONS","s","$TEXT()")
$Text()
^HELP("s","FUNCTIONS","s","$TEXT()",1)
   $Text()
^HELP("s","FUNCTIONS","s","$TEXT()",2)

^HELP("s","FUNCTIONS","s","$TEXT()",3)
   Returns source text for the line specified by its argument.
^HELP("s","FUNCTIONS","s","$TEXT()",4)

^HELP("s","FUNCTIONS","s","$TEXT()",5)
   The format for the $TEXT function is:
^HELP("s","FUNCTIONS","s","$TEXT()",6)

^HELP("s","FUNCTIONS","s","$TEXT()",7)
   $T[EXT](entryref)
^HELP("s","FUNCTIONS","s","$TEXT()",8)

^HELP("s","FUNCTIONS","s","$TEXT()",9)
   $TEXT() provides a tool for examining routine source code and the name of
^HELP("s","FUNCTIONS","s","$TEXT()",10)
   the current routine or trigger. $TEXT() assists, along with the ZPRINT
^HELP("s","FUNCTIONS","s","$TEXT()",11)
   command, in debugging programs. $TEXT() also allows the insertion of small
^HELP("s","FUNCTIONS","s","$TEXT()",12)
   tables of driver information into a routine. Because $TEXT() is not very
^HELP("s","FUNCTIONS","s","$TEXT()",13)
   efficient and the table-driven technique is generally best suited to
^HELP("s","FUNCTIONS","s","$TEXT()",14)
   minimal program changes, this approach is best used for prototyping and
^HELP("s","FUNCTIONS","s","$TEXT()",15)
   the tables should reside in global variables for production.
^HELP("s","FUNCTIONS","s","$TEXT()",16)

^HELP("s","FUNCTIONS","s","$TEXT()",17)
   If $TEXT() cannot access the source file for the current object, either
^HELP("s","FUNCTIONS","s","$TEXT()",18)
   because it is not in the location from which it was compiled or because
^HELP("s","FUNCTIONS","s","$TEXT()",19)
   the process does not have access to some piece of the path to the source,
^HELP("s","FUNCTIONS","s","$TEXT()",20)
   or if the located source does not match the object currently in use by the
^HELP("s","FUNCTIONS","s","$TEXT()",21)
   process, $TEXT() returns an empty string.
^HELP("s","FUNCTIONS","s","$TEXT()",22)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",5)
   for i=1:1 set x=$text(+i) quit:x=""  write !,x
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",6)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",7)
   This loop uses $TEXT() to write out the entire source for the current
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",8)
   routine.
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",10)
   Example:
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",12)
   YDB>write $text(+0)
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",13)
   GTM$DMOD
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",14)
   YDB>write $text(+1)
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",15)
   YDB>
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",17)
   This uses $TEXT() to WRITE the name of the current routine, then it tries
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",18)
   to access the source and returns an empty string. This occurs because the
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",19)
   default Direct Mode image is compiled by YottaDB and delivered without source.
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",20)
   The exact failure message may vary.
^HELP("s","FUNCTIONS","s","$TEXT()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$TRANSLATE()")
$TRanslate()
^HELP("s","FUNCTIONS","s","$TRANSLATE()",1)
   $TRanslate()
^HELP("s","FUNCTIONS","s","$TRANSLATE()",2)

^HELP("s","FUNCTIONS","s","$TRANSLATE()",3)
   Returns a string that results from replacing or dropping characters in the
^HELP("s","FUNCTIONS","s","$TRANSLATE()",4)
   first of its arguments as specified by the patterns of its other
^HELP("s","FUNCTIONS","s","$TRANSLATE()",5)
   arguments.
^HELP("s","FUNCTIONS","s","$TRANSLATE()",6)

^HELP("s","FUNCTIONS","s","$TRANSLATE()",7)
   The format for the $TRANSLATE function is:
^HELP("s","FUNCTIONS","s","$TRANSLATE()",8)

^HELP("s","FUNCTIONS","s","$TRANSLATE()",9)
   $TR[ANSLATE](expr1[,expr2[,expr3]])
^HELP("s","FUNCTIONS","s","$TRANSLATE()",10)

^HELP("s","FUNCTIONS","s","$TRANSLATE()",11)
   The $TRANSLATE() algorithm can be understood as follows:
^HELP("s","FUNCTIONS","s","$TRANSLATE()",12)

^HELP("s","FUNCTIONS","s","$TRANSLATE()",13)
     * $TRANSLATE() evaluates each character in the first expression,
^HELP("s","FUNCTIONS","s","$TRANSLATE()",14)
       comparing it character by character to the second expression looking
^HELP("s","FUNCTIONS","s","$TRANSLATE()",15)
       for a match. If there is no match in the second expression, the
^HELP("s","FUNCTIONS","s","$TRANSLATE()",16)
       resulting expression contains the character without modification.
^HELP("s","FUNCTIONS","s","$TRANSLATE()",17)
     * When it locates a character match, $TRANSLATE() uses the position of
^HELP("s","FUNCTIONS","s","$TRANSLATE()",18)
       the match in the second expression to identify the appropriate
^HELP("s","FUNCTIONS","s","$TRANSLATE()",19)
       replacement for the original expression. If the second expression has
^HELP("s","FUNCTIONS","s","$TRANSLATE()",20)
       more characters than the third expression, $TRANSLATE() replaces the
^HELP("s","FUNCTIONS","s","$TRANSLATE()",21)
       original character with a null, thereby deleting it from the result.
^HELP("s","FUNCTIONS","s","$TRANSLATE()",22)
       By extension of this principle, if the third expression is missing,
^HELP("s","FUNCTIONS","s","$TRANSLATE()",23)
       $TRANSLATE() deletes all characters from the first expression that
^HELP("s","FUNCTIONS","s","$TRANSLATE()",24)
       occur in the second expression.
^HELP("s","FUNCTIONS","s","$TRANSLATE()",25)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",5)
   YDB>write $translate("ABC","CB","1")
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",6)
   A1
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",9)
   **Note**
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",11)
   While this example provides an explanation for the work done by
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",12)
   $TRANSLATE(), it does not necessarily correspond to how YottaDB implements
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",13)
   $TRANSLATE().
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",15)
   Example:
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",17)
   YDB>write $translate("A","AA","BC")
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",18)
   B
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",19)
   YDB>
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",20)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",21)
   This $TRANSLATE() example finds the first occurrence of "A" in the second
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",22)
   expression, which holds the first character position, and substitutes the
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",23)
   character in the first position of the third expression.
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",24)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",25)
   Example:
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",26)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",27)
   YDB>write $translate("BACKUP","AEIOU")
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",28)
   BCKP
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",29)
   YDB>
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",31)
   Because the $TRANSLATE() has only two parameters in this example, it finds
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",32)
   the characters in the first expression that also exist in the second
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",33)
   expression and deletes them from the result.
^HELP("s","FUNCTIONS","s","$TRANSLATE()","s","EXAMPLES",34)

^HELP("s","FUNCTIONS","s","$VIEW()")
$View()
^HELP("s","FUNCTIONS","s","$VIEW()",1)
   $View()
^HELP("s","FUNCTIONS","s","$VIEW()",2)

^HELP("s","FUNCTIONS","s","$VIEW()",3)
   Returns information about an environmental factor selected by the
^HELP("s","FUNCTIONS","s","$VIEW()",4)
   arguments. In YottaDB, the first argument contains a keyword identifying the
^HELP("s","FUNCTIONS","s","$VIEW()",5)
   environmental factor and, where appropriate, subsequent arguments select
^HELP("s","FUNCTIONS","s","$VIEW()",6)
   among multiple possible occurrences of that factor.
^HELP("s","FUNCTIONS","s","$VIEW()",7)

^HELP("s","FUNCTIONS","s","$VIEW()",8)
   The format for the $VIEW() function is:
^HELP("s","FUNCTIONS","s","$VIEW()",9)

^HELP("s","FUNCTIONS","s","$VIEW()",10)
   $V[IEW](expr1[,expr2])
^HELP("s","FUNCTIONS","s","$VIEW()",11)

^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()")
Argument_Keywords_of_$VIEW()
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",1)
   Argument Keywords of $VIEW()
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",2)

^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",3)
   $VIEW() provides a means to access YottaDB environmental information. When
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",4)
   YottaDB permits modification of the factors accessible with $VIEW(), the VIEW
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",5)
   command generally provides the means for effecting the change.
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",6)

^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",7)
   +------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",8)
   |                       $VIEW() Argument Keywords                        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",9)
   |------------------------------------------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",10)
   |       ARG 1       |    ARG 2     |            RETURN VALUE             |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",11)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",12)
   |                   |              | In UTF-8 mode processes, enables or |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",13)
   |                   |              | disable the generation of an error  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",14)
   | "BADCHAR"         | none         | when character-oriented functions   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",15)
   |                   |              | encounter malformed byte sequences  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",16)
   |                   |              | (illegal characters). The default   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",17)
   |                   |              | is 1.                               |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",18)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",19)
   | "BREAKMSG"        | none         | Value of the break message mask;    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",20)
   |                   |              | YottaDB defaults this to 31.        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",21)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",22)
   | "FREEBLOCKS"      | region       | Number of free database blocks in a |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",23)
   |                   |              | given region.                       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",24)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",25)
   |                   |              | Process-id of a process that has    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",26)
   |                   |              | frozen the database associated with |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",27)
   |                   |              | the region specified (using DSE or  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",28)
   | "FREEZE"          | region       | MUPIP).                             |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",29)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",30)
   |                   |              | If the region is currently not      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",31)
   |                   |              | frozen, returns zero.               |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",32)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",33)
   |                   |              | Returns a string describing the     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",34)
   |                   |              | current compiler setting. The       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",35)
   |                   |              | default is "YottaDB Boolean         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",36)
   |                   |              | short-circuit".                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",37)
   |                   |              | $VIEW("FULL_BOOLEAN") reports       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",38)
   | "FULL_BOOLEAN"    | none         | "Standard Boolean evaluation side   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",39)
   |                   |              | effects" when it is not explicitly  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",40)
   |                   |              | set, but that mode of operation is  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",41)
   |                   |              | required by the setting of          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",42)
   |                   |              | ydb_side_effects, and "Standard     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",43)
   |                   |              | Boolean side-effect warning" when   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",44)
   |                   |              | warnings have been specified.       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",45)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",46)
   |                   |              | Truth Value indicating whether      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",47)
   |                   |              | Database block certification is     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",48)
   |                   |              | currently enabled or disabled.      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",49)
   | "GDSCERT"         | none         |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",50)
   |                   |              | To enable or disable Database block |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",51)
   |                   |              | certification, use the VIEW         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",52)
   |                   |              | "GDSCERT" command.                  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",53)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",54)
   | "GVACCESS_METHOD" | region       | Access method of the region.        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",55)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",56)
   | "GVFILE"          | region       | Name of the database associated     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",57)
   |                   |              | with the region.                    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",58)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",59)
   |                   |              | Name of the first database region   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",60)
   | "GVFIRST"         | none         | in the current global directory;    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",61)
   |                   |              | functionally equivalent to          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",62)
   |                   |              | $VIEW("GVNEXT","").                 |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",63)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",64)
   |                   |              | Name of the next database region    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",65)
   |                   |              | after the given one in alphabetical |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",66)
   |                   |              | order (or M collation sequence); "" |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",67)
   | "GVNEXT"          | region       | for region starts with the first    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",68)
   |                   |              | region. A return value of "" means  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",69)
   |                   |              | that the global directory defines   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",70)
   |                   |              | no additional regions.              |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",71)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",72)
   |                   |              | A read-only process cannot update   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",73)
   |                   |              | the database including the database |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",74)
   |                   |              | file header where GVSTATS are       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",75)
   | "GVSTAT"          | region       | stored. Another process with write  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",76)
   |                   |              | access to a database, such as MUPIP |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",77)
   |                   |              | RUNDOWN, can flush its read         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",78)
   |                   |              | statistics from the associated      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",79)
   |                   |              | shared memory to GVSTATS.           |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",80)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",81)
   |                   |              | Number of indirection cache hits    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",82)
   |                   |              | since YottaDB process startup.      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",83)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",84)
   | "ICHITS"          | none         | Indirection cache is a pool of      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",85)
   |                   |              | compiled expressions that YottaDB   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",86)
   |                   |              | maintains for indirection and       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",87)
   |                   |              | XECUTE.                             |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",88)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",89)
   | "ICMISS"          | none         | Number of indirection cache misses  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",90)
   |                   |              | since YottaDB process startup.      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",91)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",92)
   |                   |              | can return the following values:    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",93)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",94)
   |                   |              |   o -1 (internal error)             |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",95)
   | "JNLACTIVE"       | region       |   o 0 journaling is disabled        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",96)
   |                   |              |   o 1 journaling is enabled but     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",97)
   |                   |              |     closed (OFF)                    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",98)
   |                   |              |   o 2 journaling is enabled and     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",99)
   |                   |              |     open (ON)                       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",100)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",101)
   | "JNLFILE"         | region       | Journal file name associated with   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",102)
   |                   |              | the region.                         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",103)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",104)
   |                   |              | Index showing how many ZTSTART      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",105)
   | "JNLTRANSACTION"  | none         | transaction fences have been opened |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",106)
   |                   |              | (and not closed).                   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",107)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",108)
   |                   |              | Truth value showing whether label   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",109)
   | "LABELS"          | none         | case sensitivity is ON (1 for       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",110)
   |                   |              | "LOWER") or OFF (0 for "UPPER");    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",111)
   |                   |              | YottaDB defaults to 1.              |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",112)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",113)
   | "LINK"            | none         | Returns the current relink          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",114)
   |                   |              | recursive setting of ZLINK.         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",115)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",116)
   |                   |              | returns the number of references by |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",117)
   |                   |              | alias containers to the array       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",118)
   |                   | local        | associated with an unsubscripted    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",119)
   | "LV_CREF"         | variable     | local variable name specified as a  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",120)
   |                   | name (lvn)   | second expr (for example a quoted   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",121)
   |                   |              | string); it returns a zero for a    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",122)
   |                   |              | variable without any associated     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",123)
   |                   |              | alias container.                    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",124)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",125)
   |                   |              | returns the number of data-spaces   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",126)
   |                   |              | recovered during a local variable   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",127)
   | "LV_GCOL"         | none         | data-space garbage collection it    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",128)
   |                   |              | triggers; such collections normally |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",129)
   |                   |              | happen automatically at appropriate |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",130)
   |                   |              | times.                              |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",131)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",132)
   |                   |              | returns the total number of         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",133)
   |                   | local        | references to the data-space        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",134)
   | "LV_REF"          | variable     | associated with an unsubscripted    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",135)
   |                   | name (lvn)   | local variable name specified as a  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",136)
   |                   |              | second expr (for example a quoted   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",137)
   |                   |              | string).                            |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",138)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",139)
   |                   |              | Truth value showing whether null    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",140)
   |                   |              | subscripts are permitted in local   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",141)
   | "LVNULLSUBS"      | none         | arrays (1 for "LVNULLSUBS") or not  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",142)
   |                   |              | (0 for "NOLVNULLSUBS"); YottaDB     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",143)
   |                   |              | defaults to 1.                      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",144)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",145)
   |                   |              | The current isolation-status of the |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",146)
   |                   |              | specified global variable which     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",147)
   |                   |              | must have a leading "^" in its      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",148)
   |                   |              | specification.                      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",149)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",150)
   |                   |              | This function returns 1 if YottaDB  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",151)
   |                   |              | has been instructed to not enforce  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",152)
   |                   |              | the ACID property of Isolation      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",153)
   | "NOISOLATION"     | global       | (that is, "NOISOLATION" has been    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",154)
   |                   |              | specified) and 0 otherwise.         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",155)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",156)
   |                   |              | By default, YottaDB ensures         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",157)
   |                   |              | Isolation, that is, a $VIEW command |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",158)
   |                   |              | will return 0. The isolation-status |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",159)
   |                   |              | of a global variable can be turned  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",160)
   |                   |              | on and off by the VIEW "NOISOLATION"|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",161)
   |                   |              | command.                            |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",162)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",163)
   | "PATCODE"         | none         | Name of the active patcode table;   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",164)
   |                   |              | YottaDB defaults this to "M".       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",165)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",166)
   | "POOLLIMIT"       | region       | The current limit on global buffers |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",167)
   |                   |              | for the region .                    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",168)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",169)
   |                   |              | Acquires and releases a critical    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",170)
   |                   |              | section for the region (the         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",171)
   |                   |              | "probe"), returning a string        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",172)
   | "PROBECRIT"       | region       | containing following fields, some   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",173)
   |                   |              | of of which always have zero (0)    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",174)
   |                   |              | values because they are no longer   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",175)
   |                   |              | used:                               |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",176)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",177)
   |                   |              | Name of the region(s) holding the   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",178)
   |                   |              | specified gvn.                      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",179)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",180)
   |                   |              | If gvn spans more than one region,  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",181)
   |                   |              | this function returns region name   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",182)
   |                   |              | in an order where the first region  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",183)
   |                   |              | is the region to which the          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",184)
   |                   |              | unsubscripted global variable name  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",185)
   |                   |              | maps; and other regions are in the  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",186)
   |                   |              | order in which they would be        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",187)
   |                   |              | encountered by traversing the       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",188)
   | "REGION"          | gvn          | subscripts of gvn in order (with    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",189)
   |                   |              | duplicates removed).                |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",190)
   |                   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",191)
   |                   |              | gvn is a subscripted or             |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",192)
   |                   |              | unsubscripted global variable name  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",193)
   |                   |              | in the same form as that generated  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",194)
   |                   |              | by $NAME(). You can use $NAME()     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",195)
   |                   |              | inside $VIEW() to ensure that       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",196)
   |                   |              | subscripts are in a correct form,   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",197)
   |                   |              | for example,                        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",198)
   |                   |              | $VIEW("REGION",$NAME(^abcd(1,2E4))) |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",199)
   |                   |              | instead of                          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",200)
   |                   |              | $VIEW("REGION","^abcd(1,20000)").   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",201)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",202)
   |                   |              | Source code check-sum for the most  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",203)
   |                   |              | recently ZLINK'd version of the     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",204)
   | "RTNCHECKSUM"     | routine name | specified routine name (these       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",205)
   |                   |              | check-sums use a 128 bit hash based |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",206)
   |                   |              | on the MurmurHash3 algorithm).      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",207)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",208)
   |                   |              | Name of the next routine in the     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",209)
   |                   |              | image after the given one; ""       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",210)
   |                   |              | (empty string) for routinename      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",211)
   | "RTNNEXT"         | routine name | starts with the first routine in    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",212)
   |                   |              | ASCII collating sequence and a      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",213)
   |                   |              | return value of the empty string    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",214)
   |                   |              | indicates the end of the list.      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",215)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",216)
   |                   |              | Returns a string with three comma   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",217)
   |                   |              | separated values: Number of bytes   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",218)
   |                   |              | currently allocated as process      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",219)
   |                   |              | working storage: YottaDB manages    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",220)
   |                   |              | this space as what is commonly      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",221)
   |                   |              | called a heap, and uses the term    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",222)
   |                   |              | stringpool to refer to it. The      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",223)
   |                   |              | YottaDB garbage collector reclaims  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",224)
   |                   |              | unused space from the stringpool    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",225)
   | "SPSIZE"          | none         | from time to time, and YottaDB      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",226)
   |                   |              | automatically expands the           |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",227)
   |                   |              | stringpoolas needed by the          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",228)
   |                   |              | application program; Number of      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",229)
   |                   |              | bytes currently used by the process;|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",230)
   |                   |              | Number of bytes reserved: The       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",231)
   |                   |              | reserved space is used to reduce    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",232)
   |                   |              | the active memory usage, for        |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",233)
   |                   |              | example, when a process uses a      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",234)
   |                   |              | large amount of memory then         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",235)
   |                   |              | subsequently uses a significantly   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",236)
   |                   |              | reduced amount.                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",237)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",238)
   |                   |              | Returns 0 when the process has      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",239)
   |                   |              | sharing disabled, 1 when it has     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",240)
   |                   |              | sharing enabled, and 2 when sharing |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",241)
   |                   |              | is enabled selectively for regions. |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",242)
   |                   |              | For a process to store statistics   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",243)
   |                   |              | in the stats db, the database must  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",244)
   |                   |              | be enabled for sharing and the      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",245)
   | "STATSHARE"       | region       | process must have opted in to       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",246)
   |                   |              | share. VIEW "STATSHARE" with no     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",247)
   |                   |              | region argument enables sharing for |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",248)
   |                   |              | all regions and VIEW                |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",249)
   |                   |              | "STATSHARE":"REGION_NAME" enables   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",250)
   |                   |              | sharing selectively for a region.   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",251)
   |                   |              | $VIEW("STATSHARE","REGION_NAME")    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",252)
   |                   |              | returns whether a process has opted |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",253)
   |                   |              | to share statistics for a region.   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",254)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",255)
   | "STKSIZ"          | none         | Returns the YottaDB stack size in   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",256)
   |                   |              | bytes.                              |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",257)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",258)
   | "TOTALBLOCKS"     | region       | Total number of database blocks in  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",259)
   |                   |              | a given region.                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",260)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",261)
   |                   |              | Transaction ID specified in the     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",262)
   |                   |              | particular level (when the          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",263)
   |                   |              | transaction level is specified).    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",264)
   |                   | NULL         | The first level TSTART is returned  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",265)
   |                   |              | if the level is not specified as    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",266)
   |                   | or           | second argument.                    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",267)
   | "TRANSACTIONID"   |              |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",268)
   |                   | transaction  |   **Note**                          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",269)
   |                   | level        |                                     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",270)
   |                   |              | A NULL string is returned if the    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",271)
   |                   |              | specified level (explicitly or      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",272)
   |                   |              | implicitly) is greater than the     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",273)
   |                   |              | current value of $TLEVEL.           |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",274)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",275)
   |                   |              | Truth value showing whether         |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",276)
   |                   |              | undefined variables should be       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",277)
   | "UNDEF"           | none         | treated as having a null value (1   |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",278)
   |                   |              | for "UNDEF"; 0 for "NOUNDEF");      |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",279)
   |                   |              | YottaDB defaults to 0.              |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",280)
   |-------------------+--------------+-------------------------------------|
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",281)
   |                   |              | Integer value showing whether four  |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",282)
   |                   |              | digit year code is active for       |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",283)
   | "ZDATE_FORM"      | none         | $ZDATE(); YottaDB defaults to 0     |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",284)
   |                   |              | (for "YY" format). Use the          |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",285)
   |                   |              | environment variable ydb_zdate_form |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",286)
   |                   |              | to set the initial value of this    |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",287)
   |                   |              | factor.                             |
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",288)
   +------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",289)

^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",290)
   **Important**
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",291)

^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",292)
   YottaDB uses the LC_CREF, LV_GCOL, LV_REF keywords in testing and is
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",293)
   documenting them to ensure completeness in product documentation. They may
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",294)
   (or may not) be useful during application development for debugging or
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",295)
   performance testing implementation alternatives.
^HELP("s","FUNCTIONS","s","$VIEW()","s","ARGUMENT_KEYWORDS_OF_$VIEW()",296)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",5)
   YDB>Set a=1,*b(1)=a
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",6)
   YDB>write $view("LV_CREF","a")," ",$view("LV_CREF","b")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",7)
   1 0
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",8)
   YDB>write $view("LV_REF","a")," ",$view("LV_REF","b")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",9)
   2 1
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",12)
   This example creates an alias variable and an alias container variable and
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",13)
   checks the number of both container references and total references to the
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",14)
   cells associated with both a and b.
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",16)
   Example:
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",18)
   YDB>Set *a(1)=b,*b(1)=a
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",19)
   YDB>kill *a,*b
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",20)
   YDB>write $view("LV_GCOL")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",21)
   2
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",22)
   YDB>
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",24)
   This example creates two cross associated alias containers, destroys their
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",25)
   ancestor nodes with KILL * and uses $VIEW("LV_GCOL") to force a clean-up
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",26)
   of the abandoned data-spaces. In the absence of the $VIEW("LV_GCOL"), YottaDB
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",27)
   would do this automatically at some subsequent convenient time.
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",29)
   Example:
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",31)
   YDB>write $view("GVSTAT","DEFAULT")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",32)
   SET:203,KIL:12,GET:203,DTA:2,ORD:23,ZPR:21,QRY:0,LKS:0,LKF:0,CTN:44,DRD:103,DWT:59,
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",33)
   NTW:24,NTR:55,NBW:27,NBR:138,NR0:0,NR1:0,NR2:0,NR3:0,TTW:17,TTR:5,TRB:0,TBW:32,
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",34)
   TBR:80,TR0:0,TR1:0,TR2:0,TR3:0,TR4:0,TC0:0,TC1:0,TC2:0,TC3:0,TC4:0,ZTR:7,DFL:9,
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",35)
   DFS:0,JFL:0,JFS:0,JBB:0,JFB:0,JFW:0,JRL:0,JRP:0,JRE:0,JRI:0,JRO:0,JEX:0,DEX:0,
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",36)
   CAT:35,CFE:0,CFS:0,CFT:0,CQS:0,CQT:0,CYS:0,CYT:0,BTD:13
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",37)
   YDB>
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",38)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",39)
   Example:
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",40)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",41)
   Given the following global directory configuration:
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",42)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",43)
   GDE>add -name a(1:10)      -region=a1
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",44)
   GDE>add -name a(10,1)      -region=a2
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",45)
   GDE>add -name a(10,2)      -region=a3
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",46)
   GDE>add -name a(120:300)   -region=a4
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",47)
   GDE>add -name a(60:325)    -region=a5
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",48)
   GDE> show -name
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",49)
     *** NAMES ***
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",50)
    Global        Region
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",51)
    ------------------------------------------------------------------------------
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",52)
    *             DEFAULT
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",53)
    a(1:10)       A1
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",54)
    a(10,1)       A2
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",55)
    a(10,2)       A3
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",56)
    a(60:120)     A5
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",57)
    a(120:300)    A4
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",58)
    a(300:325)    A5
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",59)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",60)
   Here are some $VIEW("REGION",gvn) outputs:
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",61)

^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",62)
   YDB>write $view("REGION","^a(1)")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",63)
   A1
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",64)
   YDB>write $view("REGION","^a(10)")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",65)
   DEFAULT,A2,A3
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",66)
   YDB>w $view("REGION","^a(60)")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",67)
   A5
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",68)
   YDB>w $view("REGION","^a")
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",69)
   DEFAULT,A1,A2,A3,A5,A4
^HELP("s","FUNCTIONS","s","$VIEW()","s","EXAMPLES",70)

^HELP("s","FUNCTIONS","s","$ZAHANDLE()")
$ZAHandle()
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",1)
   $ZAHandle()
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",2)

^HELP("s","FUNCTIONS","s","$ZAHANDLE()",3)
   $ZAHANDLE() returns a unique identifier (handle) for the array associated
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",4)
   with a name or an alias container; for an subscripted lvn, it returns an
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",5)
   empty string. To facilitate debugging, the handle is a printable string
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",6)
   representation of a hexadecimal number. The only meaningful operation on
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",7)
   the value returned by a call to $ZAHANDLE() is to compare it for equality
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",8)
   with the value returned by another call. Changing nodes within the array
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",9)
   doesn't change its handle. $ZAHANDLE() returns different results for
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",10)
   copies of an array.
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",11)

^HELP("s","FUNCTIONS","s","$ZAHANDLE()",12)
   Example:
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",13)

^HELP("s","FUNCTIONS","s","$ZAHANDLE()",14)
   YDB>set A=1,*B(1)=A
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",15)
   YDB>write "$zahandle(A)=""",$zahandle(A),""" $zahandle(B(1))=""",$zahandle(B(1)),""""
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",16)
   $zahandle(A)="17B8810" $zahandle(B(1))="17B8810"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",17)
   YDB>set A("Subscript")="Value" ; Change array - but $ZAHandle() doesn't change
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",18)
   YDB>write "$zahandle(A)=""",$zahandle(A),""" $zahandle(B(1))=""",$zahandle(B(1)),""""
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",19)
   $zahandle(A)="17B8810" $zahandle(B(1))="17B8810"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",20)
   YDB>merge D=A ; A copy of the data has a different $zahandle()
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",21)
   YDB>Write "$ZAHandle(A)=""",$ZAHandle(A),""" $ZAHandle(D)=""",$ZAHandle(D),""""
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",22)
   $zahandle(A)="17B8810" $zahandle(D)="17B8C10"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",23)
   YDB>
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",24)

^HELP("s","FUNCTIONS","s","$ZAHANDLE()",25)
   Since YottaDB does not provide a way for a function to return an array or
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",26)
   alias variable as its result, the uniqueness of $ZAHandle() can be
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",27)
   exploited to effect this capability, by placing the result in a local
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",28)
   variable with an agreed prefix (e.g., "%") and its $ZAHANDLE() as a
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",29)
   suffix. The handle can be returned as the value.
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",30)

^HELP("s","FUNCTIONS","s","$ZAHANDLE()",31)
   $ /usr/local/lib/yottadb/r130/ydb -run retval
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",32)
   retval        ; Return an array / object from a function
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",33)
       ;;Data for the object array
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",34)
       ;;Albert Einstein,14-March-1879
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",35)
       ;;Arthur Eddington,28-December-1882
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",36)
       ;;
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",37)
       zprint    ; Print this program
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",38)
       new tmp1,tmp2,tmp3
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",39)
       for i=3:1 set tmp1=$text(+i),tmp2=$piece(tmp1,";;",2) quit:'$length(tmp2)  do
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",40)
       .set tmp3="%"_$$NewPerson($piece(tmp2,",",1),$piece(tmp2,",",2))
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",41)
       .set @("*Relativists("_(i-2)_")="_tmp3)
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",42)
       .kill @("*"_tmp3)
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",43)
       kill tmp1,tmp2,tmp3
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",44)
       write "------------",!
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",45)
       write "Array of objects of relativists:",!
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",46)
       zwrite
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",47)
       quit
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",48)
       ;
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",49)
   NewPerson(name,birthdate)    ; Create new person object
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",50)
       new lname,fname,dob,tmp1,tmp2 ; New variables used by this function
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",51)
       set lname=$Piece(name," ",2),fname=$Piece(name," ",1)
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",52)
       set dob=$$FUNC^%DATE(birthdate)
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",53)
       set tmp1("fname")=fname,tmp1("lname")=lname,tmp1("dob")=dob
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",54)
       set tmp2=$ZAHandle(tmp1)
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",55)
       set @("*%"_tmp2_"=tmp1")
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",56)
       quit tmp2
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",57)
   ------------
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",58)
   Array of objects of relativists:
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",59)
   $ZWRTAC=""
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",60)
   *Relativists(1)=$ZWRTAC1
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",61)
   $ZWRTAC1("dob")=13952
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",62)
   $ZWRTAC1("fname")="Albert"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",63)
   $ZWRTAC1("lname")="Einstein"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",64)
   *Relativists(2)=$ZWRTAC2
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",65)
   $ZWRTAC2("dob")=15337
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",66)
   $ZWRTAC2("fname")="Arthur"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",67)
   $ZWRTAC2("lname")="Eddington"
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",68)
   i=5
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",69)
   $ZWRTAC=""
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",70)
   $
^HELP("s","FUNCTIONS","s","$ZAHANDLE()",71)

^HELP("s","FUNCTIONS","s","$ZASCII()")
$ZAscii()
^HELP("s","FUNCTIONS","s","$ZASCII()",1)
   $ZAscii()
^HELP("s","FUNCTIONS","s","$ZASCII()",2)

^HELP("s","FUNCTIONS","s","$ZASCII()",3)
   Returns the numeric byte value (0 through 255) of a given sequence of
^HELP("s","FUNCTIONS","s","$ZASCII()",4)
   octets (8-bit bytes).
^HELP("s","FUNCTIONS","s","$ZASCII()",5)

^HELP("s","FUNCTIONS","s","$ZASCII()",6)
   The format for the $ASCII function is:
^HELP("s","FUNCTIONS","s","$ZASCII()",7)

^HELP("s","FUNCTIONS","s","$ZASCII()",8)
   $ZA[SCII](expr[,intexpr])
^HELP("s","FUNCTIONS","s","$ZASCII()",9)

^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",5)
   YDB>for i=0:1:4 write !,$zascii("*",i)
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",6)

^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",7)
   -1
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",8)
   228
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",9)
   184
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",10)
   187
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",11)
   -1
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",12)
   YDB>
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",14)
   This UTF-8 mode example displays the result of $ZASCII() specifying a byte
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",15)
   position before, first, second and third positions, and after the sequence
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",16)
   of octets (8-bit bytes) represented by *. In the above example, 228, 184,
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",17)
   and 187 represents the numeric byte value of the three-byte in the
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",18)
   sequence of octets (8-bit bytes) represented by *.
^HELP("s","FUNCTIONS","s","$ZASCII()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM")
$ZATRansform
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",1)
   $ZATRansform
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",2)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM",3)
   Returns the transformed representation of the first argument expr in a
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",4)
   normalized form using the alternative transform specified by the second
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",5)
   argument intexpr; the return can be used as an operand to the follows (])
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",6)
   or sorts-after (]]) operator such that, if both operands are in the
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",7)
   normalized form, the result is independent of alternative collation. The
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",8)
   format for the $ZATRANSFORM() function is:
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",9)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM",10)
   $ZTRANSFORM(expr,intexpr[,{0|1}][,{0|1}])
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",11)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM",12)
   Please see the section on $ZCOLLATE() for a similar alternative.
^HELP("s","FUNCTIONS","s","$ZATRANSFORM",13)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",5)
   YDB>write $ztransform("John Smythe",1)]$zatransform("Jane Smith",2)
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",6)
   0
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",9)
   This example uses $ZATRANSFORM() and two (here unspecified) collation
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",10)
   definitions to compare the ordering of two (literal) expressions as YottaDB
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",11)
   would collate them if there was a way to collate them together. The result
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",12)
   indicates that the first would collate before the second.
^HELP("s","FUNCTIONS","s","$ZATRANSFORM","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS")
$ZBIT_Functions
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",1)
   $ZBIT Functions
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",3)
   A series of functions beginning with $ZBIT lets you manipulate a bit
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",4)
   stream. Internally, YottaDB stores a bit stream in the form of a bit string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",5)
   A bit string embeds a bit stream in such a way that the first byte
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",6)
   specifies the number of trailing bits in the last byte that are not part
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",7)
   of the bit-stream. In this way, YottaDB is able to store bit-streams of
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",8)
   lengths other than multiples of 8 bits in byte format. So for example, a
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",9)
   first byte of value of zero (0) indicates that all of the bits in the last
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",10)
   byte belong to the bit-stream, while a one (1) indicates the last bit is
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",11)
   excluded and a seven (7) indicates that only the first bit in the last
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",12)
   byte belongs to the bit-stream.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",13)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",14)
   If you have to convert a character string into a bit string then add a
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",15)
   leading byte to that character string so that all $ZBIT functions can
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",16)
   recognize it. The most common and straightforward way of doing this is to
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",17)
   concatenate a $CHAR(n) on the front of the character string, where the
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",18)
   value of n is zero through seven (0-7) - most commonly zero (0). If you
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",19)
   pass a bit string as an argument to a routine that is expecting a
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",20)
   character string, then that caller routine must strip off the first (and
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",21)
   possibly the last) byte so that it can recognize the character string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",22)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",23)
   This section contains the description of all $ZBIT function and an example
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",24)
   of using $ZBIT functions to turn a character into a bit stream and return
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",25)
   a coded value. However, the most appropriate use of these functions may
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",26)
   include the formation of checksums, handling of bit-data (say pixels from
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",27)
   a scan), or interfacing with a routine that requires bit-oriented
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",28)
   arguments.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS",29)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()")
$ZBITAND()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",1)
   $ZBITAND()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",3)
   Performs a logical AND function on two bit strings and returns a bit
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",4)
   string equal in length to the shorter of the two arguments (containing set
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",5)
   bits in those positions where both of the input strings have set bits).
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",6)
   Positions corresponding to positions where either of the input strings
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",7)
   have a cleared bit, also have cleared bits in the resulting string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",9)
   The format for the $ZBITAND() function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",11)
   $ZBITAND(expr1,expr2)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()",12)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()")
Example_of_$ZBITAND()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",1)
   Example of $ZBITAND()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",3)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",4)
   ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",5)
   YDB>Set BITSTRINGB=$zbitset($zbitset($zbitstr(8,0),2,1),7,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",6)
   ; The binary representation of B is 01000010
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",7)
   YDB>set BITSTRINGAB=$zbitand(BITSTRINGA,BITSTRINGB)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",8)
   YDB>for i=1:1:8 write $zbitget(BITSTRINGAB,I)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",9)
   01000000
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",11)
   This examples uses $ZBITAND to perform a bitwise AND operation on A and B.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",12)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",13)
   A= 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",14)
   B= 01000010
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",15)
   A bitwise AND B=0100000
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITAND()","s","EXAMPLE_OF_$ZBITAND()",16)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()")
$ZBITCOUNT()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",1)
   $ZBITCOUNT()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",3)
   Returns the number of ON bits in a bit string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",5)
   The format for the $ZBITCOUNT function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",6)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",7)
   $ZBITCOUNT(expr)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()")
Example_of_$ZBITCOUNT()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",1)
   Example of $ZBITCOUNT()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",5)
   YDB>set BITSTRINGA=$ZBITSET($ZBITSET($ZBITSTR(8,0),2,1),8,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",6)
   ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",7)
   YDB>set BITSTRINGB=$zbitset($zbitset($zbitstr(8,0),2,1),7,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",8)
   ; The binary representation of B is 01000010
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",9)
   YDB>Set BITSTRINGC=$zbitor(BITSTRINGA,BITSTRINGB)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",10)
   ; A OR B=01000011
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",11)
   YDB>write $zbitcount(BITSTRINGA)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",12)
   2
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",13)
   YDB>write $zbitcount(BITSTRINGB)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",14)
   2
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",15)
   YDB>write $zbitcount(BITSTRINGC)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",16)
   3
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",17)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",18)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",19)
   This example displays the number of ON bits in BITSTRINGA, BITSTRINGB, and
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",20)
   BITSTRINGC.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITCOUNT()","s","EXAMPLE_OF_$ZBITCOUNT()",21)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()")
$ZBITFIND()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",1)
   $ZBITFIND()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",3)
   Performs the analog of $FIND() on a bit string. It returns an integer that
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",4)
   identifies the position after the first position equal to a truth-valued
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",5)
   expression that occurs at, or after, the specified starting position.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",6)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",7)
   The format for the $ZBITFIND function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",9)
   $ZBITFIND(expr,tvexpr[,intexpr])
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",11)
   If the optional integer argument exceeds the length of the string, or if
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",12)
   the function finds no further bits, $ZBITFIND() returns a zero value.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()",13)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",5)
   YDB>Set BITSTRINGA=$ZBITSET($ZBITSET($ZBITSTR(8,0),2,1),8,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",6)
   ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",7)
   YDB>write $zbitfind(BITSTRINGA,1,3)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",8)
   9
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",9)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",11)
   This example searches for bit value 1 starting from the 3rd bit of
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",12)
   BITSTRINGA.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITFIND()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()")
$ZBITGET()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",1)
   $ZBITGET()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",3)
   Returns the value of a specified position in the bit string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",5)
   The format for the $ZBITGET function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",6)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",7)
   $ZBITGET(expr,intexpr)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",5)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",6)
   YDB>set BITSTRINGA=$zbitset($zbitset($zbitstr(8,0),2,1),8,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",7)
   ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",8)
   YDB>for i=1:1:8 write $zbitget(BITSTRINGA,I)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",9)
   01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",12)
   This examples uses $ZBITGET() to display the binary representation of A.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITGET()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()")
$ZBITLEN()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",1)
   $ZBITLEN()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",3)
   Returns the length of a bit string, in bits.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",5)
   The format for the $ZBITLEN function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",6)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",7)
   $ZBITLEN(expr)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",3)
   YDB>set BITSTR=$zbitstr(6,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",5)
   YDB>write $zbitlen(BITSTR)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",6)
   6
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",9)
   This example displays the length of a bit string of 6 bits.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITLEN()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()")
$ZBITNOT()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",1)
   $ZBITNOT()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",3)
   Returns a copy of the bit string with each input bit position inverted.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",5)
   The format for the $ZBITNOT function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",6)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",7)
   $ZBITNOT(expr)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",3)
   YDB>set BITSTRINGA=$zbitset($zbitset($zbitstr(8,0),2,1),8,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",4)
   ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",5)
   YDB>for i=1:1:8 write $zbitget($zbitnot(BITSTRINGA),I)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",6)
   10111110
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",9)
   This example displays inverted bits for all the bits in BITSTRINGA.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITNOT()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()")
$ZBITOR()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",1)
   $ZBITOR()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",3)
   Performs a bitwise logical OR on two bit strings, and returns a bit string
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",4)
   equal in length to the longer of the two arguments (containing set bits in
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",5)
   those positions where either or both of the input strings have set bits).
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",6)
   Positions that correspond to positions where neither input string has a
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",7)
   set bit have cleared bits in the resulting string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",9)
   The format for the $ZBITOR function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",11)
   $ZBITOR(expr1,expr2)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()",12)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",3)
   YDB>set BITSTRINGA=$zbitset($zbitset($zbitstr(8,0),2,1),8,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",4)
   ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",5)
   YDB>set BITSTRINGB=$zbitset($zbitset($zbitstr(8,0),2,1),7,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",6)
   ; The binary representation of B is 01000010
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",7)
   YDB>set BITSTRINGC=$zbitor(BITSTRINGA,BITSTRINGB)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",8)
   ; A OR B=01000011
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",9)
   YDB>write BITSTRINGC
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",10)
   C
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",11)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",13)
   This example displays the result of BITSTRINGA bitwise ORed with
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",14)
   BITSTRINGB.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITOR()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()")
$ZBITSET()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",1)
   $ZBITSET()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",3)
   Returns an edited copy of the input bit string with a specified bit set to
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",4)
   the value of the truth-valued expression.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",5)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",6)
   The format for the $ZBITSET function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",7)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",8)
   $ZBITSET(expr,intexpr,tvexpr)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()",9)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",3)
   YDB>set X="A",Y=$extract($zbitset($char(0)_X,3,1),2) zwrite
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",4)
   X="A"
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",5)
   Y="a"
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",6)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",7)
   This example changes the case of the ASCII letter A to the corresponding
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",8)
   lowercase version.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSET()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()")
$ZBITSTR()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",1)
   $ZBITSTR()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",3)
   Returns a bit string of a specified length with all bit positions
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",4)
   initially set to either zero or one.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",5)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",6)
   The format for the $ZBITSTR function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",7)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",8)
   $ZBITSTR(intexpr[,tvexpr])
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()",9)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",3)
   YDB>set BITSTR=$zbitstr(6,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",5)
   This example sets the value of expression BITSTR to 6 bit with all bits
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",6)
   set to 1.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITSTR()","s","EXAMPLES",7)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()")
$ZBITXOR()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",1)
   $ZBITXOR()
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",3)
   Performs a bitwise exclusive OR on two bit strings, and returns a bit
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",4)
   string equal in length to the shorter of the two arguments (containing set
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",5)
   bits in those position where either but not both of the input strings have
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",6)
   set bits). Positions that correspond to positions where neither or both
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",7)
   input string has a set bit have cleared bits in the resulting string.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",8)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",9)
   The format for the $ZBITXOR function is:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",11)
   $ZBITXOR(expr1,expr2)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()",12)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",3)
   YDB>set BITSTRINGA=$zbitset($zbitset($zbitstr(8,0),2,1),8,1) ; The binary representation of A is 01000001
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",4)
   YDB>set BITSTRINGB=$zbitset($zbitset($zbitstr(8,0),2,1),7,1); The binary representation of B is 01000010
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",5)
   YDB>set BITSTRINGC=$zbitor(BITSTRINGA,BITSTRINGB) ; A XOR B=00000011
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",6)
   YDB>for I=1:1:8 write $zbitget(BITSTRINGC,I)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",7)
   00000011
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",8)
   YDB>
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",10)
   This example displays the result of the bitwise XOR of A and B.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","$ZBITXOR()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",5)
   ZCRC(X)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",6)
       new R,I,J,B,X1,K
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",7)
       set R=$zbitstr(8,0)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",8)
       for I=1:1:$length(X) Set R=$zbitxor(R,$$bitin($A(X,I)))
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",9)
       quit $$bitout(R)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",11)
   bitin(X) ;CONVERT A BYTE TO A BIT STRING
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",12)
       set X1=$zbitstr(8,0)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",13)
       for J=1:1:8 set B=X#2,X=X\2 if B set X1=$zbitset(X1,J,1)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",14)
       quit X1
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",16)
   bitout(X) ; CONVERT A BITSTRING TO A NUMBER
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",17)
       set X1=0
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",18)
       for K=1:1:8 I $zbitget(X,K) set X1=X1+(2**(K-1))
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",19)
       quit X1
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",20)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",21)
   This uses several $ZBIT functions to turn a character into a bit stream
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",22)
   and return a coded value.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",24)
   While this example illustrates the use of several of the $ZBIT functions,
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",25)
   the following example produces identical results if you need to code the
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",26)
   function illustrated above for production.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",27)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",28)
   ZCRC(X)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",29)
       new R,I,J,B,X1,K
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",30)
       set R=$zbitstr(8,0)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",31)
       for I=1:1:$length(X) Set R=$zbitxor(R,$char(0)_$extract(X,I))
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",32)
       quit $ascii(R,2)
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",34)
   This example illustrates the use of $Char() to specify the number of
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",35)
   invalid bits that exist at the end of the character string. In this case
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",36)
   there are zero invalid bits.
^HELP("s","FUNCTIONS","s","$ZBIT_FUNCTIONS","s","EXAMPLES",37)

^HELP("s","FUNCTIONS","s","$ZCHAR()")
$ZCHar()
^HELP("s","FUNCTIONS","s","$ZCHAR()",1)
   $ZCHar()
^HELP("s","FUNCTIONS","s","$ZCHAR()",2)

^HELP("s","FUNCTIONS","s","$ZCHAR()",3)
   Returns a string composed of bytes represented by the integer octet values
^HELP("s","FUNCTIONS","s","$ZCHAR()",4)
   specified in its argument(s).
^HELP("s","FUNCTIONS","s","$ZCHAR()",5)

^HELP("s","FUNCTIONS","s","$ZCHAR()",6)
   The format for the $ZCHAR() function is:
^HELP("s","FUNCTIONS","s","$ZCHAR()",7)

^HELP("s","FUNCTIONS","s","$ZCHAR()",8)
   $ZCH[AR](intexpr[,...])
^HELP("s","FUNCTIONS","s","$ZCHAR()",9)

^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()")
Example_of_$ZCHAR()
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",1)
   Example of $ZCHAR()
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",2)

^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",4)

^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",5)
   YDB>write $zchar(228,184,187,7)
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",6)
   *
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",8)

^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",9)
   This example WRITEs the byte sequence represented by * and signals the
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",10)
   terminal bell.
^HELP("s","FUNCTIONS","s","$ZCHAR()","s","EXAMPLE_OF_$ZCHAR()",11)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()")
$ZCOllate()
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",1)
   $ZCOllate()
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",2)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()",3)
   Returns the transformed representation of the first argument glvn in a
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",4)
   normalized form using the alternative transform specified by the second
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",5)
   argument intexpr; the return can be used as an operand to the follows (])
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",6)
   or sorts-after (]]) operator such that, if both operands are in the
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",7)
   normalized form, the result is independent of alternative collation.
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",8)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()",9)
   The format for the $ZCOLLATE() function is:
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",10)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()",11)
   $ZCO[llate](glvn,intexpr[,{0|1}])
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",12)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()",13)
   Note that because the forward transform is to the GDS global storage
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",14)
   format, the reverse transform always shows a global form. This is not
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",15)
   material when the result is used for most comparisons, but for some uses
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",16)
   the applcation might need to remove the leading up-arrow (^).
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",17)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()",18)
   Please see the section on $ZATRANSFORM() for a similar alternative.
^HELP("s","FUNCTIONS","s","$ZCOLLATE()",19)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()")
Example_of_$ZCOllate()
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",1)
   Example of $ZCOllate()
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",2)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",4)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",5)
   YDB>write $zwrite($zcollate("A(""foo"")",0))
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",6)
   "A"_$C(0,255)_"foo"_$C(0,0)
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",7)
   YDB>write $zcollate($zcollate("A(""foo"")",0),0,1)
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",8)
   ^A("foo")
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",9)
   YDB>
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",10)

^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",11)
   The first WRITE in this example shows the readable form or the value
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",12)
   produced by the $ZCOLLATE() revealing the details of how YottaDB internally
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",13)
   represents this key using default (M) collation. The second WRITE shows
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",14)
   how the combination of the transform and reverse transform restores the
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",15)
   value to the original representation.
^HELP("s","FUNCTIONS","s","$ZCOLLATE()","s","EXAMPLE_OF_$ZCOLLATE()",16)

^HELP("s","FUNCTIONS","s","$ZCONVERT()")
$ZCOnvert()
^HELP("s","FUNCTIONS","s","$ZCONVERT()",1)
   $ZCOnvert()
^HELP("s","FUNCTIONS","s","$ZCONVERT()",2)

^HELP("s","FUNCTIONS","s","$ZCONVERT()",3)
   Returns its first argument as a string converted to a different encoding.
^HELP("s","FUNCTIONS","s","$ZCONVERT()",4)
   The two argument form changes the encoding for case within a character
^HELP("s","FUNCTIONS","s","$ZCONVERT()",5)
   set. The three argument form changes the encoding scheme.
^HELP("s","FUNCTIONS","s","$ZCONVERT()",6)

^HELP("s","FUNCTIONS","s","$ZCONVERT()",7)
   The format for the $ZCONVERT() function is:
^HELP("s","FUNCTIONS","s","$ZCONVERT()",8)

^HELP("s","FUNCTIONS","s","$ZCONVERT()",9)
   $ZCO[NVERT](expr1, expr2,[expr3])
^HELP("s","FUNCTIONS","s","$ZCONVERT()",10)

^HELP("s","FUNCTIONS","s","$ZCONVERT()",11)
   **Note**
^HELP("s","FUNCTIONS","s","$ZCONVERT()",12)

^HELP("s","FUNCTIONS","s","$ZCONVERT()",13)
   When UTF-8 mode is enabled, YottaDB uses the ICU Library to perform case
^HELP("s","FUNCTIONS","s","$ZCONVERT()",14)
   conversion. As mentioned in the Theory of Operation section, the case
^HELP("s","FUNCTIONS","s","$ZCONVERT()",15)
   conversion of the strings occurs according to UTF-8 code-point values.
^HELP("s","FUNCTIONS","s","$ZCONVERT()",16)
   This may not be the linguistically or culturally correct case conversion,
^HELP("s","FUNCTIONS","s","$ZCONVERT()",17)
   for example, of the names in the telephone directories. Therefore,
^HELP("s","FUNCTIONS","s","$ZCONVERT()",18)
   application developers must ensure that the actual case conversion is
^HELP("s","FUNCTIONS","s","$ZCONVERT()",19)
   linguistically and culturally correct for their specific needs. The
^HELP("s","FUNCTIONS","s","$ZCONVERT()",20)
   two-argument form of the $ZCONVERT() function in M mode does not use the
^HELP("s","FUNCTIONS","s","$ZCONVERT()",21)
   ICU Library to perform operation related to the case conversion of the
^HELP("s","FUNCTIONS","s","$ZCONVERT()",22)
   strings.
^HELP("s","FUNCTIONS","s","$ZCONVERT()",23)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",5)
   YDB>write $zconvert("Happy New Year","U")
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",6)
   HAPPY NEW YEAR
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",7)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",8)
   Example:
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",10)
   YDB>write $ZCHSET
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",11)
   M
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",12)
   YDB>Write $zconvert("HAPPY NEW YEAR","T")
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",13)
   %YDB-E-BADCASECODE, T is not a valid case conversion code
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",15)
   Example:
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",17)
   YDB>Set T8="************"
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",18)
   YDB>Write $Length(T8)
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",19)
   12
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",20)
   YDB>Set T16=$zconvert(T8,"UTF-8","UTF-16LE")
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",21)
   YDB>Write $length(T16)
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",22)
   %YDB-E-BADCHAR, $ZCHAR(129,137,232,150) is not a valid character in the UTF-8 encoding form
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",23)
   YDB>Set T16=$ZCOnvert(T16,"UTF-16LE","UTF-8")
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",24)
   YDB>Write $length(T16)
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",25)
   9
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",26)

^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",27)
   In the above example, $LENGTH() function triggers an error because it
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",28)
   takes only UTF-8 encoding strings as the argument.
^HELP("s","FUNCTIONS","s","$ZCONVERT()","s","EXAMPLES",29)

^HELP("s","FUNCTIONS","s","$ZDATA()")
$ZDATA()
^HELP("s","FUNCTIONS","s","$ZDATA()",1)
   $ZDATA()
^HELP("s","FUNCTIONS","s","$ZDATA()",2)

^HELP("s","FUNCTIONS","s","$ZDATA()",3)
   Extends $DATA() to reflect the current alias state of the lvn or name
^HELP("s","FUNCTIONS","s","$ZDATA()",4)
   argument to identify alias and alias container variables. It treats
^HELP("s","FUNCTIONS","s","$ZDATA()",5)
   variables joined through pass-by-reference as well as TP RESTART variables
^HELP("s","FUNCTIONS","s","$ZDATA()",6)
   within a transaction as alias variables. However, it does not distinguish
^HELP("s","FUNCTIONS","s","$ZDATA()",7)
   nodes having alias containers among their descendants.
^HELP("s","FUNCTIONS","s","$ZDATA()",8)

^HELP("s","FUNCTIONS","s","$ZDATA()",9)
   In addition to the four standard M results from $DATA(), $ZDATA() returns:
^HELP("s","FUNCTIONS","s","$ZDATA()",10)

^HELP("s","FUNCTIONS","s","$ZDATA()",11)
   Existing $DATA() tests for data and descendants report on alias and alias
^HELP("s","FUNCTIONS","s","$ZDATA()",12)
   container variables, as well as other variables in the standard fashion.
^HELP("s","FUNCTIONS","s","$ZDATA()",13)
   When an application uses alias and alias container variables $ZDATA()
^HELP("s","FUNCTIONS","s","$ZDATA()",14)
   supplies additional information when needed.
^HELP("s","FUNCTIONS","s","$ZDATA()",15)

^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",5)
   YDB>set a=1,*b(1)=a,*c=d
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",6)
   YDB>write $data(a)," ",$zdata(a)
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",7)
   1 101
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",8)
   YDB>write $data(b)," ",$zdata(b)
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",9)
   10 10
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",10)
   YDB>write $data(c)," ",$zdata(c)
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",11)
   0 100
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",12)
   YDB>write $data(d)," ",$zdata(d)
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",13)
   0 100
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",14)
   YDB>write $data(b(1))," ",$zdata(b(1))
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",15)
   1 101
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",16)
   YDB>set b(1,2)=2
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",17)
   YDB>write $data(b(1))," ",$zdata(b(1))
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",18)
   11 111
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",19)
   YDB>write $data(b(1,2))," ",$zdata(b(1,2))
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",20)
   1 1
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",21)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATA()","s","EXAMPLES",22)

^HELP("s","FUNCTIONS","s","$ZDATE()")
$ZDate()
^HELP("s","FUNCTIONS","s","$ZDATE()",1)
   $ZDate()
^HELP("s","FUNCTIONS","s","$ZDATE()",2)

^HELP("s","FUNCTIONS","s","$ZDATE()",3)
   Returns a date and/or time formatted as text based on an argument
^HELP("s","FUNCTIONS","s","$ZDATE()",4)
   formatted in the manner of $HOROLOG.
^HELP("s","FUNCTIONS","s","$ZDATE()",5)

^HELP("s","FUNCTIONS","s","$ZDATE()",6)
   The format for the $ZDATE function is:
^HELP("s","FUNCTIONS","s","$ZDATE()",7)

^HELP("s","FUNCTIONS","s","$ZDATE()",8)
   $ZD[ATE](expr1[,expr2[,expr3[,expr4]]]])
^HELP("s","FUNCTIONS","s","$ZDATE()",9)

^HELP("s","FUNCTIONS","s","$ZDATE()",10)
   $ZDATE() provides an easy and flexible tool for putting M internal
^HELP("s","FUNCTIONS","s","$ZDATE()",11)
   date/time ($HOROLOG) formats into more user-friendly formats.
^HELP("s","FUNCTIONS","s","$ZDATE()",12)

^HELP("s","FUNCTIONS","s","$ZDATE()",13)
   **Warning**
^HELP("s","FUNCTIONS","s","$ZDATE()",14)

^HELP("s","FUNCTIONS","s","$ZDATE()",15)
   $ZDATE() generates an error for input date values greater than
^HELP("s","FUNCTIONS","s","$ZDATE()",16)
   31-Dec-999999 (364570088) or less than 01-JAN-1840 (-365) and for time
^HELP("s","FUNCTIONS","s","$ZDATE()",17)
   values greater than a second before midnight (86399) or less than 0
^HELP("s","FUNCTIONS","s","$ZDATE()",18)
   (zero).
^HELP("s","FUNCTIONS","s","$ZDATE()",19)

^HELP("s","FUNCTIONS","s","$ZDATE()",20)
   The Intrinsic Special Variable $ZDATEFORM determines the output format for
^HELP("s","FUNCTIONS","s","$ZDATE()",21)
   years. The default value is zero (0), in which case $ZDATE() with one
^HELP("s","FUNCTIONS","s","$ZDATE()",22)
   argument (no format specification) uses a "YY" (two digit) format for all
^HELP("s","FUNCTIONS","s","$ZDATE()",23)
   years. If $ZDATEFORM is one (1), a "YYYY" (four digit) format is used for
^HELP("s","FUNCTIONS","s","$ZDATE()",24)
   years later than 1999. For all other values of $ZDATEFORM, "YYYY" (four
^HELP("s","FUNCTIONS","s","$ZDATE()",25)
   digit) format is used for all years. $ZDATEFORM does not affect $ZDATE()
^HELP("s","FUNCTIONS","s","$ZDATE()",26)
   when the format argument is specified.
^HELP("s","FUNCTIONS","s","$ZDATE()",27)

^HELP("s","FUNCTIONS","s","$ZDATE()",28)
   The following table summarizes the usage of $ZDATE() when only first
^HELP("s","FUNCTIONS","s","$ZDATE()",29)
   argument is specified.
^HELP("s","FUNCTIONS","s","$ZDATE()",30)

^HELP("s","FUNCTIONS","s","$ZDATE()",31)
   +------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZDATE()",32)
   | Value of $ZDATEFORM |              $ZDATE() Output Format              |
^HELP("s","FUNCTIONS","s","$ZDATE()",33)
   |---------------------+--------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZDATE()",34)
   | 0                   | 2 digits                                         |
^HELP("s","FUNCTIONS","s","$ZDATE()",35)
   |---------------------+--------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZDATE()",36)
   |                     | 4 digits for years 2000 and after                |
^HELP("s","FUNCTIONS","s","$ZDATE()",37)
   | 1                   |                                                  |
^HELP("s","FUNCTIONS","s","$ZDATE()",38)
   |                     | 2 digits otherwise (for years ranging between    |
^HELP("s","FUNCTIONS","s","$ZDATE()",39)
   |                     | 1840, 1999)                                      |
^HELP("s","FUNCTIONS","s","$ZDATE()",40)
   |---------------------+--------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZDATE()",41)
   | other               | 4 digits                                         |
^HELP("s","FUNCTIONS","s","$ZDATE()",42)
   +------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZDATE()",43)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS")
$ZDATE_Format_Specification_Elements
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",1)
   $ZDATE Format Specification Elements
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",2)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",3)
   This section lists the $ZDATE format specification elements. $ZDATE()
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",4)
   format specifications must appear in upper case. When any alphabetic
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",5)
   characters in format specifications are in lower case, $ZDATE() generates
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",6)
   a run-time error.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",7)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",8)
   YY: Outputs the rightmost two digits of the year.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",9)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",10)
   YEAR: Outputs the year as a four-digit number.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",11)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",12)
   YYYYYY: Outputs the year as a six-digit number.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",13)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",14)
   MM: Outputs the month as a two-digit zero-filled number between 01 and 12.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",15)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",16)
   MON: Outputs the month as a three-letter abbreviation. (You can modify the
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",17)
   output further using expr3).
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",18)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",19)
   DD: Outputs the day of the month as a two-digit zero-filled number between
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",20)
   01 and 31.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",21)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",22)
   DAY: Outputs the day of the week as a three-letter abbreviation. (You can
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",23)
   modify the output further using expr4).
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",24)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",25)
   24: Outputs the hour of the day as a zero-filled number between 00 and 23.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",26)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",27)
   12: Outputs the hour of the day as a zero-filled number between 01 and 12.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",28)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",29)
   60: Outputs the minute of the hour as a zero-filled number between 00 and
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",30)
   59.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",31)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",32)
   SS: Outputs the second of the minute as a zero-filled number between 00
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",33)
   and 59.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",34)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",35)
   AM: Outputs the letters AM and PM depending on the time.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",36)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",37)
   +: Inserts a plus sign (+) in the output string
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",38)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",39)
   -: Inserts a minus sign (-) in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",40)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",41)
   .: Inserts a period (.) in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",42)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",43)
   ,: Inserts a comma (,)in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",44)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",45)
   /: Inserts a slash (/) in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",46)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",47)
   :: Inserts a colon (:) in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",48)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",49)
   ;: Inserts a semi-colon (;) in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",50)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",51)
   *: Inserts an asterisk (*) in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",52)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",53)
   **Note**
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",54)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",55)
   A blank space inserts a blank space in the output string.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","$ZDATE_FORMAT_SPECIFICATION_ELEMENTS",56)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",5)
   YDB>write $horolog,!,$zdate($H)
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",6)
   62109,60946
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",7)
   01/18/11
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",8)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",9)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",10)
   This displays $HOROLOG and then uses $ZDATE() to display today's date. The
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",11)
   output shown would appear if today were the eighteenth day of January,
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",12)
   2011.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",14)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",16)
   YDB>write $zdate($H,"DD-MON-YEAR")
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",17)
   18-JAN-2011
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",18)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",20)
   This uses the second argument to specify a text format different from the
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",21)
   default.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",22)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",23)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",24)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",25)
   YDB>set m="Januar,Februar,Marz,April,Mai,Juni,Juli,August,"
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",26)
   YDB>set m=m_"September,October,November,Dezember"
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",27)
   YDB>write $zdate($horolog,"DD-MON-YEAR",m)
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",28)
   18-Januar-2011
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",29)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",30)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",31)
   This is similar to the prior example, however it uses the third argument
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",32)
   to specify the months in German.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",34)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",35)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",36)
   YDB>set d="Dimanche,Lundi,Mardi,Mercredi,Jeudi,Vendredi,Samedi"
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",37)
   YDB>write $zdate($H,"DAY, DD/MM/YY","",d)
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",38)
   Mardi, 18/01/2011
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",39)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",40)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",41)
   This example displays the eighteenth of January, however it uses the
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",42)
   fourth argument to specify the days of the week in French.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",43)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",44)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",45)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",46)
   YDB>write !,$zdate($H,"12:60:SS AM")
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",47)
   10:35:51 PM
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",48)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",49)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",50)
   This example shows hours, minutes, and seconds in a 12 hour clock with an
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",51)
   AM/PM indicator.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",52)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",53)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",54)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",55)
   YDB>write !,$zdate(",36524","24-60")
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",56)
   10-08
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",57)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",58)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",59)
   This example shows hours and minutes on a 24 hour clock. Notice that the
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",60)
   first argument must provide the time in the second comma delimiter piece
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",61)
   to match $HOROLOG format.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",62)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",63)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",64)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",65)
   YDB>write $zdateform
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",66)
   0
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",67)
   YDB>write $zdate($H)
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",68)
   01/18/11
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",69)
   YDB>set $zdateform=1
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",70)
   YDB>write $zdate($horolog)
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",71)
   01/18/2011
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",72)
   YDB>write $zdate($horolog,"MM/DD/YY")
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",73)
   01/18/11
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",74)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",75)
   This example converts the output format for years from the default ("YY")
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",76)
   format to the four digit format ("YYYY") using the Intrinsic Special
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",77)
   Variable $ZDATEFORM.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",78)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",79)
   Example:
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",80)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",81)
   YDB>write $zdate(123456789,"DAY MON DD, YYYYYY")
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",82)
   FRI MAR 17, 339854
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",83)
   YDB>
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",84)

^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",85)
   This example displays year as a six-digit number.
^HELP("s","FUNCTIONS","s","$ZDATE()","s","EXAMPLES",86)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()")
$ZExtract()
^HELP("s","FUNCTIONS","s","$ZEXTRACT()",1)
   $ZExtract()
^HELP("s","FUNCTIONS","s","$ZEXTRACT()",2)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()",3)
   Returns a byte sequence from a given sequence of octets (8-bit bytes).
^HELP("s","FUNCTIONS","s","$ZEXTRACT()",4)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()",5)
   The format for the $ZEXTRACT function is:
^HELP("s","FUNCTIONS","s","$ZEXTRACT()",6)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()",7)
   $ZE[XTRACT](expr[,intexpr1[,intexpr2]])
^HELP("s","FUNCTIONS","s","$ZEXTRACT()",8)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",5)
   YDB>Set A="************"
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",6)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",7)
   YDB>For i=0:1:$zlength(A)
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",8)
   YDB>write !,$zascii($zextract(A,i)),"|"
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",9)
   YDB>
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",11)
   This example displays the numeric byte sequence of the sequence of octets
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",12)
   ("************").
^HELP("s","FUNCTIONS","s","$ZEXTRACT()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZFIND()")
$ZFind()
^HELP("s","FUNCTIONS","s","$ZFIND()",1)
   $ZFind()
^HELP("s","FUNCTIONS","s","$ZFIND()",2)

^HELP("s","FUNCTIONS","s","$ZFIND()",3)
   Returns an integer byte position that locates the occurrence of a byte
^HELP("s","FUNCTIONS","s","$ZFIND()",4)
   sequence within a sequence of octets(8-bit bytes).
^HELP("s","FUNCTIONS","s","$ZFIND()",5)

^HELP("s","FUNCTIONS","s","$ZFIND()",6)
   The format of the $ZFIND function is:
^HELP("s","FUNCTIONS","s","$ZFIND()",7)

^HELP("s","FUNCTIONS","s","$ZFIND()",8)
   $ZF[IND](expr1,expr2[,intexpr])
^HELP("s","FUNCTIONS","s","$ZFIND()",9)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()")
Examples_of_$ZFind()
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",1)
   Examples of $ZFind()
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",2)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",4)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",5)
   YDB>write $zfind("***",$zchar(187))
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",6)
   4
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",8)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",9)
   This example uses $ZFIND() to WRITE the position of the first occurrence
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",10)
   of the numeric byte code 150. The return of 3 gives the position after the
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",11)
   "found" byte.
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",12)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",13)
   Example:
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",14)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",15)
   YDB>write $zfind("***",$zchar(229),5)
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",16)
   8
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",17)
   YDB>
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",18)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",19)
   This example uses $ZFIND() to WRITE the position of the next occurrence of
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",20)
   the byte code 229 starting in byte position five.
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",21)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",22)
   Example:
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",23)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",24)
   YDB>set t=1 for  set t=$zfind("***",$zchar(230,150,176),t) quit:'t  write !,t
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",25)
   4
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",26)
   YDB>
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",27)

^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",28)
   This example uses a loop with $ZFIND() to locate all the occurrences of
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",29)
   the byte sequence $ZCHAR(230,150,176) in the sequence of octets ("***").
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",30)
   The $ZFIND() returns 4 giving the position after the occurrence of byte
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",31)
   sequence $ZCHAR(230,150,176).
^HELP("s","FUNCTIONS","s","$ZFIND()","s","EXAMPLES_OF_$ZFIND()",32)

^HELP("s","FUNCTIONS","s","$ZGETJPI()")
$ZGetjpi()
^HELP("s","FUNCTIONS","s","$ZGETJPI()",1)
   $ZGetjpi()
^HELP("s","FUNCTIONS","s","$ZGETJPI()",2)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",3)
   Returns job or process information of the specified process. The format
^HELP("s","FUNCTIONS","s","$ZGETJPI()",4)
   for the $ZGETJPI function is:
^HELP("s","FUNCTIONS","s","$ZGETJPI()",5)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",6)
   $ZGETJPI(expr1,expr2)
^HELP("s","FUNCTIONS","s","$ZGETJPI()",7)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",8)
   Example:
^HELP("s","FUNCTIONS","s","$ZGETJPI()",9)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",10)
   YDB>write $zgetjpi(1975,"isprocalive")
^HELP("s","FUNCTIONS","s","$ZGETJPI()",11)
   1
^HELP("s","FUNCTIONS","s","$ZGETJPI()",12)
   YDB>
^HELP("s","FUNCTIONS","s","$ZGETJPI()",13)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",14)
   This uses $ZGETJPI() to determine whether process 1975 is alive.
^HELP("s","FUNCTIONS","s","$ZGETJPI()",15)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",16)
   Example:
^HELP("s","FUNCTIONS","s","$ZGETJPI()",17)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",18)
   YDB>set t=$zgetjpi("","cputim")
^HELP("s","FUNCTIONS","s","$ZGETJPI()",19)
   YDB>do ^bench write $zgetjpi("","cputim")-t
^HELP("s","FUNCTIONS","s","$ZGETJPI()",20)
   1738
^HELP("s","FUNCTIONS","s","$ZGETJPI()",21)
   YDB>
^HELP("s","FUNCTIONS","s","$ZGETJPI()",22)

^HELP("s","FUNCTIONS","s","$ZGETJPI()",23)
   This uses $ZGETJPI() to measure the actual CPU time, measured in
^HELP("s","FUNCTIONS","s","$ZGETJPI()",24)
   hundredths of a second, consumed by performing the BENCH routine.
^HELP("s","FUNCTIONS","s","$ZGETJPI()",25)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()")
$ZJOBEXAM()
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",1)
   $ZJOBEXAM()
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",2)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",3)
   Returns the full specification of the file into which the function places
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",4)
   a ZSHOW "*". The return value serves as a way to save, to notify others of
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",5)
   the exact location of the output, or to open the file for further
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",6)
   processing. YottaDB reports each $ZJOBEXAM() to the operator log facility
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",7)
   with its file specification.
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",8)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",9)
   The optional expression argument is a template output device
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",10)
   specification. It can be a device, a file directory, or a file name. The
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",11)
   template is an expression that is pre-processed to create a file
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",12)
   specification as the target for the ZSHOW. The preprocessing is equivalent
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",13)
   to $ZPARSE(), as illustrated by the following M code:
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",14)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",15)
   set deffn="YDB_JOBEXAMINE.ZSHOW_DMP_"_$JOB_"_"_<cntr>
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",16)
   set filespec=$zparse(expr1,"",deffn)
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",17)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",18)
   The $ZJOBEXAM()does not trigger error processing except when there is a
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",19)
   problem storing its return value, so no error is reported to the process
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",20)
   until after any dump is complete. In the event of any error encountered
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",21)
   during the $ZJOBEXAM(), YottaDB sends an appropriate message to operator log
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",22)
   facility and returns control to the caller. Note that this special error
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",23)
   handling applies only to the $ZJOBEXAM(), and is not a property of the
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",24)
   $ZINTERRUPT interrupt handler, which uses $ZJOBEXAM() by default.
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",25)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",26)
   $ZJOBEXAM() dump files contain the context of a process at the time the
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",27)
   function executes. Placement and management of these files should consider
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",28)
   their potential size and security implications.
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()",29)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",5)
   YDB>set x=$zjobexam()
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",6)
   YDB>write x
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",7)
   /home/gtmuser1/.yottadb/r130_x86_64/r/YDB_JOBEXAM.ZSHOW_DMP_28760_1
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",8)
   YDB>set x=$zjobexam("test.file")
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",9)
   YDB>write x
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",10)
   /home/gtmuser1/.yottadb/r130_x86_64/r/test.file
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",11)
   YDB>
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",13)
   Shows default file name and type of the files created containing the zshow
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",14)
   dump information and the difference when the name and type are specified.
^HELP("s","FUNCTIONS","s","$ZJOBEXAM()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()")
$ZJustify()
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",1)
   $ZJustify()
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",2)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",3)
   Returns a formatted and fixed length byte sequence.
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",4)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",5)
   The format for the $ZJUSTIFY() function is:
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",6)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",7)
   $ZJ[USTIFY](expr,intexpr1[,intexpr2])
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()",8)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",5)
   YDB>write "123456789012345",! write $zjustify("***",15),!,$zjustify("***",5)
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",6)
   123456789012345
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",7)
        ***
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",8)
   ***
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",9)
   YDB>
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",11)
   This example uses $ZJUSTIFY() to display the sequence of octets
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",12)
   represented by "***" in fields of 15 space octets and 5 space octets.
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",13)
   Because the byte length of "***" is 9, it exceeds 5 spaces, the result
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",14)
   overflows the specification.
^HELP("s","FUNCTIONS","s","$ZJUSTIFY()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZLENGTH()")
$ZLength()
^HELP("s","FUNCTIONS","s","$ZLENGTH()",1)
   $ZLength()
^HELP("s","FUNCTIONS","s","$ZLENGTH()",2)

^HELP("s","FUNCTIONS","s","$ZLENGTH()",3)
   Returns the length of a sequence of octets measured in bytes, or in
^HELP("s","FUNCTIONS","s","$ZLENGTH()",4)
   "pieces" separated by a delimiter specified by one of its arguments.
^HELP("s","FUNCTIONS","s","$ZLENGTH()",5)

^HELP("s","FUNCTIONS","s","$ZLENGTH()",6)
   The format for the $ZLENGTH() function is:
^HELP("s","FUNCTIONS","s","$ZLENGTH()",7)

^HELP("s","FUNCTIONS","s","$ZLENGTH()",8)
   $ZL[ENGTH](expr1[,expr2])
^HELP("s","FUNCTIONS","s","$ZLENGTH()",9)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",5)
   YDB>write $zlength("************")
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",6)
   36
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",9)
   This uses $ZLENGTH() to WRITE the length in bytes of the sequence of
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",10)
   octets "************".
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",12)
   Example:
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",14)
   YDB>set x="*"_$zchar(63)_"*"_$zchar(63)_"*"
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",15)
   YDB>write $zlength(x,$zchar(63))
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",16)
   3
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",17)
   YDB>
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",18)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",19)
   This uses $ZLENGTH() to WRITE the number of pieces in a sequence of
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",20)
   octets, as delimited by the byte code $ZCHAR(63).
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",22)
   Example:
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",23)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",24)
   YDB>set x=$zchar(63)_"*"_$zchar(63)_"*"_$zchar(63)_"*"_$zchar(63)"
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",25)
   YDB>write $zlength(x,$zchar(63))
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",26)
   5
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",27)
   YDB>
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",29)
   This also uses $ZLENGTH() to WRITE the number of pieces in a sequence of
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",30)
   octets, as delimited by byte code $ZCHAR(63). Notice that YottaDB counts both
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",31)
   the empty beginning and ending pieces in the string because they are both
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",32)
   delimited.
^HELP("s","FUNCTIONS","s","$ZLENGTH()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()")
$ZMessage()
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",1)
   $ZMessage()
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",2)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()",3)
   Returns a message string associated with a specified status code .
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",4)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()",5)
   The format for the $ZMESSAGE function is:
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",6)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()",7)
   $ZM[ESSAGE](intexpr)
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",8)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()",9)
   $ZMESSAGE() provides a tool for examining the message and/or mnemonic
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",10)
   associated with a particular message code as reported in $ZSTATUS.
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",11)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()",12)
   The $ZSTATUS Intrinsic Special Variable holds the message code and the
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",13)
   message of the last non-Direct Mode YottaDB error. For more information on
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",14)
   $ZSTATUS, refer "Intrinsic Special Variables".
^HELP("s","FUNCTIONS","s","$ZMESSAGE()",15)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",5)
   YDB>write $zmessage(150373210)
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",6)
   %YDB-E-DIVZERO, Attempt to divide by zero
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",9)
   This uses $ZMESSAGE() to display the message string corresponding to code
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",10)
   150373210.
^HELP("s","FUNCTIONS","s","$ZMESSAGE()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ZPARSE()")
$ZPARSE()
^HELP("s","FUNCTIONS","s","$ZPARSE()",1)
   $ZPARSE()
^HELP("s","FUNCTIONS","s","$ZPARSE()",2)

^HELP("s","FUNCTIONS","s","$ZPARSE()",3)
   Expands a file name to a full pathname and then returns the full pathname
^HELP("s","FUNCTIONS","s","$ZPARSE()",4)
   or one of its fields (directory, name, or extension).
^HELP("s","FUNCTIONS","s","$ZPARSE()",5)

^HELP("s","FUNCTIONS","s","$ZPARSE()",6)
   The format for the $ZPARSE function is:
^HELP("s","FUNCTIONS","s","$ZPARSE()",7)

^HELP("s","FUNCTIONS","s","$ZPARSE()",8)
   $ZPARSE(expr1[,expr2[,expr3[,expr4[,expr5]]]])
^HELP("s","FUNCTIONS","s","$ZPARSE()",9)

^HELP("s","FUNCTIONS","s","$ZPARSE()",10)
   $ZPARSE() provides a tool for verifying that a file name is syntactically
^HELP("s","FUNCTIONS","s","$ZPARSE()",11)
   correct, for examining specific fields of a file name, and for filling in
^HELP("s","FUNCTIONS","s","$ZPARSE()",12)
   missing pieces in a partial specification based on a hierarchy of
^HELP("s","FUNCTIONS","s","$ZPARSE()",13)
   defaults. For information about determining whether a file exists, see
^HELP("s","FUNCTIONS","s","$ZPARSE()",14)
   "$ZSEARCH()".
^HELP("s","FUNCTIONS","s","$ZPARSE()",15)

^HELP("s","FUNCTIONS","s","$ZPARSE()",16)
   $ZPARSE() arguments, after the first, are optional. If you use no other
^HELP("s","FUNCTIONS","s","$ZPARSE()",17)
   arguments, a single argument is sufficient. However, if you use selected
^HELP("s","FUNCTIONS","s","$ZPARSE()",18)
   arguments $ZPARSE() requires that null strings ("") be filled in for the
^HELP("s","FUNCTIONS","s","$ZPARSE()",19)
   unspecified arguments.
^HELP("s","FUNCTIONS","s","$ZPARSE()",20)

^HELP("s","FUNCTIONS","s","$ZPARSE()",21)
   The acceptable keywords for the second argument are:
^HELP("s","FUNCTIONS","s","$ZPARSE()",22)

^HELP("s","FUNCTIONS","s","$ZPARSE()",23)
   "DIRECTORY": Directory name
^HELP("s","FUNCTIONS","s","$ZPARSE()",24)

^HELP("s","FUNCTIONS","s","$ZPARSE()",25)
   "NAME": File name (excluding file extension)
^HELP("s","FUNCTIONS","s","$ZPARSE()",26)

^HELP("s","FUNCTIONS","s","$ZPARSE()",27)
   "TYPE": File type extension
^HELP("s","FUNCTIONS","s","$ZPARSE()",28)

^HELP("s","FUNCTIONS","s","$ZPARSE()",29)
   The keywords may be entered in either upper or lower case. Variables that
^HELP("s","FUNCTIONS","s","$ZPARSE()",30)
   evaluate to these strings and indirection are acceptable for argument two.
^HELP("s","FUNCTIONS","s","$ZPARSE()",31)
   When the keywords themselves appear as string literals, they must be
^HELP("s","FUNCTIONS","s","$ZPARSE()",32)
   enclosed in quotation marks (" ").
^HELP("s","FUNCTIONS","s","$ZPARSE()",33)

^HELP("s","FUNCTIONS","s","$ZPARSE()",34)
   The following guidelines must be followed in constructing arguments one,
^HELP("s","FUNCTIONS","s","$ZPARSE()",35)
   three and four:
^HELP("s","FUNCTIONS","s","$ZPARSE()",36)

^HELP("s","FUNCTIONS","s","$ZPARSE()",37)
     o Directory specifications must end in a slash; anything after the final
^HELP("s","FUNCTIONS","s","$ZPARSE()",38)
       slash in the directory specification is assumed to be part of the name
^HELP("s","FUNCTIONS","s","$ZPARSE()",39)
       specification.
^HELP("s","FUNCTIONS","s","$ZPARSE()",40)
     o A file name with an extension must include at least one character to
^HELP("s","FUNCTIONS","s","$ZPARSE()",41)
       the left of the period (.). Thus, "/user/.login" refers to the file
^HELP("s","FUNCTIONS","s","$ZPARSE()",42)
       named ".login", while "/usr/taxes.c" refers to a file named "taxes"
^HELP("s","FUNCTIONS","s","$ZPARSE()",43)
       with the extension "c". If a file name includes more than one period,
^HELP("s","FUNCTIONS","s","$ZPARSE()",44)
       the extension includes all letters to the right of the rightmost
^HELP("s","FUNCTIONS","s","$ZPARSE()",45)
       period.
^HELP("s","FUNCTIONS","s","$ZPARSE()",46)

^HELP("s","FUNCTIONS","s","$ZPARSE()",47)
   The keywords for the fifth argument $ZPARSE() are:
^HELP("s","FUNCTIONS","s","$ZPARSE()",48)

^HELP("s","FUNCTIONS","s","$ZPARSE()",49)
   NULL (""): Returns a full file-specification or device
^HELP("s","FUNCTIONS","s","$ZPARSE()",50)

^HELP("s","FUNCTIONS","s","$ZPARSE()",51)
   "SYNTAX_ONLY": Disables checking for the existence of the directory or
^HELP("s","FUNCTIONS","s","$ZPARSE()",52)
   device.
^HELP("s","FUNCTIONS","s","$ZPARSE()",53)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",5)
   YDB>write $zparse("test","","/usr/work/","dust.lis")
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",6)
   /usr/work/test.lis
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",9)
   This uses $ZPARSE() to demonstrate defaulting using the third and fourth
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",10)
   arguments. The result gets the directory field from the third expression,
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",11)
   the name from the first expression, and the type from the fourth
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",12)
   expression.
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",14)
   Example:
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",16)
   YDB>r!,"file :",f w ?20,$zparse(f,"directory")
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",17)
   file: test.list /usr/work/
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",18)
   YDB>
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",20)
   This uses $ZPARSE() to display the directory for the file name entered as
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",21)
   input at the prompt file: , in this case, the current working directory.
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",22)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",23)
   Example:
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",24)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",25)
   $ cd /usr/work/me
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",26)
   $ $gtm
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",27)
   YDB>write $zparse("test","","x.list","y.c")/usr/work/me/test.lis
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",28)
   YDB>write $zparse("test","","/usr/work/","/dev/y.c")/usr/work/test.c
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",29)
   YDB>write $zparse("test","","/usr/work","/dev/y.c")/usr/test.c
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",30)
   YDB>
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",31)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",32)
   This example illustratest the use of the third and fourth arguments to
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",33)
   $ZPARSE(). In the first statement, the first argument has no directory or
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",34)
   extension field, so $ZPARSE() substitutes the extension field from the
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",35)
   third argument. Since neither the third nor fourth argument specifies a
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",36)
   directory, and because the fourth argument does not contain any fields
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",37)
   that are not present in the third argument, the fourth argument is not
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",38)
   used.
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",39)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",40)
   In the second statement, the first argument to $ZPARSE() is again missing
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",41)
   both the directory and extension. In this instance, $ZPARSE() uses the
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",42)
   directory specified in the third argument and, becuase neither the first
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",43)
   nor third argument specifies a file extension, $ZPARSE() uses the file
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",44)
   extension from the fourth argument.
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",45)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",46)
   In the third statement, because "/usr/work" does not end with a backward
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",47)
   slash (/), $ZPARSE() interprets the substring "work" as a file name. Then,
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",48)
   $ZPARSE() substitutes "/usr/" for the directory missing in the first
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",49)
   argument and substitutes ".c" from the fourth argument for the extension
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",50)
   missing from both the first and third arguments.
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",51)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",52)
   Example:
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",53)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",54)
   $ cd /usr/work/me
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",55)
   $ /usr/local/lib/yottadb/r130/ydb
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",56)
   YDB>For i="DIRECTORY","NAME","TYPE","" Write $ZPARSE("test.m",i),!
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",57)
   /usr/work/me/
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",58)
   test
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",59)
   .m
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",60)
   /usr/work/me/test.m
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",61)
   YDB>
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",62)

^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",63)
   This example illustrates the output produced for each of the possible
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",64)
   values for the second argument.
^HELP("s","FUNCTIONS","s","$ZPARSE()","s","EXAMPLES",65)

^HELP("s","FUNCTIONS","s","$ZPEEK()")
$ZPEEK()
^HELP("s","FUNCTIONS","s","$ZPEEK()",1)
   $ZPEEK()
^HELP("s","FUNCTIONS","s","$ZPEEK()",2)

^HELP("s","FUNCTIONS","s","$ZPEEK()",3)
   Provides a way to examine memory in the current process address space. Use
^HELP("s","FUNCTIONS","s","$ZPEEK()",4)
   of this function requires information about YottaDB internals, which may
^HELP("s","FUNCTIONS","s","$ZPEEK()",5)
   change from release to release. Contact YottaDB support for information on
^HELP("s","FUNCTIONS","s","$ZPEEK()",6)
   techniques for using $ZPEEK() in largely release independent ways.
^HELP("s","FUNCTIONS","s","$ZPEEK()",7)

^HELP("s","FUNCTIONS","s","$ZPEEK()",8)
   The $ZPEEK() function returns the contents of the memory requested as a
^HELP("s","FUNCTIONS","s","$ZPEEK()",9)
   string depending on the requested (or defaulted) formatting.
^HELP("s","FUNCTIONS","s","$ZPEEK()",10)

^HELP("s","FUNCTIONS","s","$ZPEEK()",11)
   The format of the $ZPEEK() function is:
^HELP("s","FUNCTIONS","s","$ZPEEK()",12)

^HELP("s","FUNCTIONS","s","$ZPEEK()",13)
   $ZPEEK("mnemonic[:argument]",offset,length[,format])
^HELP("s","FUNCTIONS","s","$ZPEEK()",14)

^HELP("s","FUNCTIONS","s","$ZPEEK()",15)
     o mnemonic specifies the memory area $ZPEEK() is to access. Some
^HELP("s","FUNCTIONS","s","$ZPEEK()",16)
       mnemonics have arguments separated from the mnemonic by a colon (":").
^HELP("s","FUNCTIONS","s","$ZPEEK()",17)
       The mnemonics are case independent. Possible mnemonics, their possible
^HELP("s","FUNCTIONS","s","$ZPEEK()",18)
       abbreviations and their arguments are:
^HELP("s","FUNCTIONS","s","$ZPEEK()",19)

^HELP("s","FUNCTIONS","s","$ZPEEK()",20)
          o CSA[REG] - returns a value from the sgmnt_addrs (process private)
^HELP("s","FUNCTIONS","s","$ZPEEK()",21)
            control block. Takes a case independent region name as an
^HELP("s","FUNCTIONS","s","$ZPEEK()",22)
            argument.
^HELP("s","FUNCTIONS","s","$ZPEEK()",23)
          o FH[REG] - returns a value from the sgmnt_data (shared file
^HELP("s","FUNCTIONS","s","$ZPEEK()",24)
            header) control block. Takes a case independent region name as an
^HELP("s","FUNCTIONS","s","$ZPEEK()",25)
            argument..
^HELP("s","FUNCTIONS","s","$ZPEEK()",26)
          o GDR[REG] - returns a value from the gd_region (process private)
^HELP("s","FUNCTIONS","s","$ZPEEK()",27)
            control block. Takes a case independent region name as an
^HELP("s","FUNCTIONS","s","$ZPEEK()",28)
            argument.
^HELP("s","FUNCTIONS","s","$ZPEEK()",29)
          o GLF[REPL] - returns a value from the jnlpool.gtmsrc_lcl_array[n]
^HELP("s","FUNCTIONS","s","$ZPEEK()",30)
            control block. Takes a numeric index (n) as an argument.
^HELP("s","FUNCTIONS","s","$ZPEEK()",31)
          o GRL[REPL] - returns a value from the recvpool.gtmrecv_local
^HELP("s","FUNCTIONS","s","$ZPEEK()",32)
            control block. No argument allowed. Only available when run on a
^HELP("s","FUNCTIONS","s","$ZPEEK()",33)
            non-primary instance.
^HELP("s","FUNCTIONS","s","$ZPEEK()",34)
          o GSL[REPL] - returns a value from the
^HELP("s","FUNCTIONS","s","$ZPEEK()",35)
            jnlpool.gtmsource_local_array[n] control block. Takes a numeric
^HELP("s","FUNCTIONS","s","$ZPEEK()",36)
            index (n) as an argument.
^HELP("s","FUNCTIONS","s","$ZPEEK()",37)
          o JBF[REG]:region[ -obtains fields in shared jnl_buffer structure.
^HELP("s","FUNCTIONS","s","$ZPEEK()",38)
          o JNL[REG]:region[ - obtains fields in the jnl_private_control
^HELP("s","FUNCTIONS","s","$ZPEEK()",39)
            structure.
^HELP("s","FUNCTIONS","s","$ZPEEK()",40)
          o JPC[REPL] - returns a value from the jnlpool.jnlpool_ctl control
^HELP("s","FUNCTIONS","s","$ZPEEK()",41)
            block. No argument allowed.
^HELP("s","FUNCTIONS","s","$ZPEEK()",42)
          o NL[REG] - returns a value from the node_local (shared) control
^HELP("s","FUNCTIONS","s","$ZPEEK()",43)
            block. Takes a case independent region name as an argument.
^HELP("s","FUNCTIONS","s","$ZPEEK()",44)
          o NLREPL - returns a value from the node_local (shared) control
^HELP("s","FUNCTIONS","s","$ZPEEK()",45)
            block associated with replication. No argument allowed.
^HELP("s","FUNCTIONS","s","$ZPEEK()",46)
          o PEEK - returns a value based on the supplied argument. Argument
^HELP("s","FUNCTIONS","s","$ZPEEK()",47)
            is the base address of the value to obtain in 0xhhhhhhh format
^HELP("s","FUNCTIONS","s","$ZPEEK()",48)
            where the h's are hex digits.
^HELP("s","FUNCTIONS","s","$ZPEEK()",49)
          o RIH[REPL] - returns a value from the jnlpool.repl_inst_filehdr
^HELP("s","FUNCTIONS","s","$ZPEEK()",50)
            control block. No argument allowed.
^HELP("s","FUNCTIONS","s","$ZPEEK()",51)
          o RPC[REPL] - returns a value from the recvpool.recvpool_ctl
^HELP("s","FUNCTIONS","s","$ZPEEK()",52)
            control block. No argument allowed. Only available when run on a
^HELP("s","FUNCTIONS","s","$ZPEEK()",53)
            non-primary instance.
^HELP("s","FUNCTIONS","s","$ZPEEK()",54)
          o UHC[REPL] - returns a value from the recvpool.upd_helper_ctl
^HELP("s","FUNCTIONS","s","$ZPEEK()",55)
            control block. No argument allowed. Only available when run on a
^HELP("s","FUNCTIONS","s","$ZPEEK()",56)
            non-primary instance.
^HELP("s","FUNCTIONS","s","$ZPEEK()",57)
          o UPL[REPL] - returns a value from the recvpool.upd_proc_local
^HELP("s","FUNCTIONS","s","$ZPEEK()",58)
            control block. No argument allowed. Only available when run on a
^HELP("s","FUNCTIONS","s","$ZPEEK()",59)
            non-primary instance.
^HELP("s","FUNCTIONS","s","$ZPEEK()",60)

^HELP("s","FUNCTIONS","s","$ZPEEK()",61)
     o offset (first integer expression) is a numeric value that specifies
^HELP("s","FUNCTIONS","s","$ZPEEK()",62)
       the offset from the address supplied or implied by the the mnemonic
^HELP("s","FUNCTIONS","s","$ZPEEK()",63)
       and argument. Specifying a negative offset results in a BADZPEEKARG
^HELP("s","FUNCTIONS","s","$ZPEEK()",64)
       error. Specifying too large an offset such that unavailable memory is
^HELP("s","FUNCTIONS","s","$ZPEEK()",65)
       specified results in a BADZPEEKRANGE error.
^HELP("s","FUNCTIONS","s","$ZPEEK()",66)
     o length (second integer expression) is a numeric value that specifies
^HELP("s","FUNCTIONS","s","$ZPEEK()",67)
       the length of the field to obtain. Specifying a negative legnth
^HELP("s","FUNCTIONS","s","$ZPEEK()",68)
       results in a BADZPEEKARG error. Specifying a length that exceeds the
^HELP("s","FUNCTIONS","s","$ZPEEK()",69)
       maximum string length results in a MAXSTRLEN error. Specifying too
^HELP("s","FUNCTIONS","s","$ZPEEK()",70)
       large a length such that unavailable memory is specified results in a
^HELP("s","FUNCTIONS","s","$ZPEEK()",71)
       BADZPEEKRANGE error.
^HELP("s","FUNCTIONS","s","$ZPEEK()",72)
     o format is an optional single case independent character formatting
^HELP("s","FUNCTIONS","s","$ZPEEK()",73)
       code for the retrieved data. The formatting codes are:
^HELP("s","FUNCTIONS","s","$ZPEEK()",74)

^HELP("s","FUNCTIONS","s","$ZPEEK()",75)
          o C : returns a character representations of the memory locations;
^HELP("s","FUNCTIONS","s","$ZPEEK()",76)
            this is the DEFAULT if the fourth argument is not specified.
^HELP("s","FUNCTIONS","s","$ZPEEK()",77)
          o I : returns a signed integer value - negative values have a
^HELP("s","FUNCTIONS","s","$ZPEEK()",78)
            preceding minus sign (-); the length can be 1, 2, 4, or 8 bytes.
^HELP("s","FUNCTIONS","s","$ZPEEK()",79)
          o U : returns an unsigned integer value - all bits are part of the
^HELP("s","FUNCTIONS","s","$ZPEEK()",80)
            numeric value; the length can be 1, 2, 4, or 8 bytes.
^HELP("s","FUNCTIONS","s","$ZPEEK()",81)
          o S : returns a character representation of the memory locations
^HELP("s","FUNCTIONS","s","$ZPEEK()",82)
            and the first NULL character found terminates the returned
^HELP("s","FUNCTIONS","s","$ZPEEK()",83)
            string; that is: the specified length is a maximum.
^HELP("s","FUNCTIONS","s","$ZPEEK()",84)
          o T: Selects a $HOROLOG format for a field of 4 or 8 bytes which is
^HELP("s","FUNCTIONS","s","$ZPEEK()",85)
            intended for use on fields in UNIX time format (seconds since
^HELP("s","FUNCTIONS","s","$ZPEEK()",86)
            01/01/1970)
^HELP("s","FUNCTIONS","s","$ZPEEK()",87)
          o X : returns a hexadecimal value as 0xXXXXXX where XXXXXX is twice
^HELP("s","FUNCTIONS","s","$ZPEEK()",88)
            the specified length in bytes, so requested length 1 returns 0xXX
^HELP("s","FUNCTIONS","s","$ZPEEK()",89)
            and length 4 returns 0xXXXXXXXX; the length can be 1, 2, 4, or 8
^HELP("s","FUNCTIONS","s","$ZPEEK()",90)
            bytes.
^HELP("s","FUNCTIONS","s","$ZPEEK()",91)
          o Z : returns a hexadecimal representation of the memory locations
^HELP("s","FUNCTIONS","s","$ZPEEK()",92)
            as 'X' does, without regard to endianness, and with no length
^HELP("s","FUNCTIONS","s","$ZPEEK()",93)
            restriction other than max string length.
^HELP("s","FUNCTIONS","s","$ZPEEK()",94)

^HELP("s","FUNCTIONS","s","$ZPIECE()")
$ZPIece()
^HELP("s","FUNCTIONS","s","$ZPIECE()",1)
   $ZPIece()
^HELP("s","FUNCTIONS","s","$ZPIECE()",2)

^HELP("s","FUNCTIONS","s","$ZPIECE()",3)
   Return a sequence of bytes delimited by a specified byte sequence made up
^HELP("s","FUNCTIONS","s","$ZPIECE()",4)
   of one or more bytes.
^HELP("s","FUNCTIONS","s","$ZPIECE()",5)

^HELP("s","FUNCTIONS","s","$ZPIECE()",6)
   The format for the $ZPIECE function is:
^HELP("s","FUNCTIONS","s","$ZPIECE()",7)

^HELP("s","FUNCTIONS","s","$ZPIECE()",8)
   $ZPI[ECE](expr1,expr2[,intexpr1[,intexpr2]])
^HELP("s","FUNCTIONS","s","$ZPIECE()",9)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",5)
   YDB>for i=0:1:3 write !,$zpiece("*"_$zchar(64)_"*",$zchar(64),i),"|"
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",6)
   |
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",7)
   *|
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",8)
   *|
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",9)
   |
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",10)
   YDB>
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",12)
   This loop displays the result of $ZPIECE(), specifying $ZCHAR(64) as a
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",13)
   delimiter, a piece position "before," first and second, and "after" the
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",14)
   sequence of octets.
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",15)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",16)
   Example:
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",18)
   YDB>for i=-1:1:3 write !,$zpiece("*"_$zchar(64)_"*",$zchar(64),i,i+1),"|"
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",19)
   |
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",20)
   *|
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",21)
   *@*|
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",22)
   *|
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",23)
   |
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",24)
   YDB>
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",25)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",26)
   This example is similar to the previous example except that it displays
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",27)
   two pieces on each iteration. Notice the delimiter () in the middle of the
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",28)
   output for the third iteration, which displays both pieces.
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",29)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",30)
   Example:
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",31)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",32)
   For p=1:1:$ZLength(x,"/") Write ?p-1*10,$ZPIece(x,"/",p)
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",33)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",34)
   This loop uses $ZLENGTH() and $ZPIECE() to display all the pieces of x in
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",35)
   columnar format.
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",36)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",37)
   Example:
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",38)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",39)
   YDB>Set $piece(x,$zchar(64),25)="" write x
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",40)
   @@@@@@@@@@@@@@@@@@@@@@@@
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",41)

^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",42)
   This SETs the 25th piece of the variable x to null, with delimiter
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",43)
   $ZCHAR(64). This produces a byte sequence of 24 at-signs (@) preceding the
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",44)
   null.
^HELP("s","FUNCTIONS","s","$ZPIECE()","s","EXAMPLES",45)

^HELP("s","FUNCTIONS","s","$ZPREVIOUS()")
$ZPrevious()
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",1)
   $ZPrevious()
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",2)

^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",3)
   The $ZPREVIOUS function returns the subscript of the previous local or
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",4)
   global variable name in collation sequence within the array level
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",5)
   specified by its argument. When $ZPREVIOUS() has an unsubscripted
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",6)
   argument, it returns the previous unsubscripted local or global variable
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",7)
   name in collating sequence.
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",8)

^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",9)
   The $ZPREVIOUS function provides compatibility with some other M
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",10)
   implementations. The M Development Committee chose to implement this
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",11)
   functionality with the optional second -1 argument of $ORDER(). Therefore,
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",12)
   when a design requires this functionality $ORDER() has the advantage over
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",13)
   $ZPREVIOUS of being part of the M standard.
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",14)

^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",15)
   The format for the $ZPREVIOUS function is:
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",16)

^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",17)
   $ZP[REVIOUS](glvn)
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",18)

^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",19)
   $ZPREVIOUS() is equivalent to $ORDER() with a second argument of -1.
^HELP("s","FUNCTIONS","s","$ZPREVIOUS()",20)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()")
$ZQGBLMOD()
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",1)
   $ZQGBLMOD()
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",2)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",3)
   The $ZQGBLMOD function enables an application to determine whether it can
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",4)
   safely apply a lost transaction to the database. A lost transaction is a
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",5)
   transaction that must be rolled off a database to maintain logical
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",6)
   multisite consistency. $ZQGBLMOD() always applies to data-level (level-0)
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",7)
   nodes.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",8)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",9)
   The format for the $ZQGBLMOD function is:
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",10)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",11)
   $ZQGBLMOD(gvn)
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",12)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",13)
   $ZQGBLMOD function produces an error if you submit an argument that is not
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",14)
   a global variable name.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",15)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",16)
   Internally, $ZQGBLMOD (gvn) compares the YottaDB transaction number in the
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",17)
   database block in which the global variable name is (or would be) stored
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",18)
   with the value in the Zqgblmod_Trans field stored in the database file
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",19)
   header.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",20)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",21)
   For example, if x is the transaction number of the level-0 database block
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",22)
   in which gvn resides, and y is the value of Zqgblmod_Trans of region reg
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",23)
   containing gvn, then the following is true:
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",24)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",25)
   If a transaction is a lost transaction that has been rolled back and it is
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",26)
   determined that for all the M globals set and killed in the transaction
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",27)
   $ZQGBLMOD() is zero (0), it is probably safe to apply the updates
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",28)
   automatically. However, this determination of safety can only be made by
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",29)
   the application designer and not by YottaDB. If the $ZQGBLMOD() is one (1)
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",30)
   for any set or kill in the transaction, it is not safe to apply the
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",31)
   update.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",32)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",33)
   **Note**
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",34)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",35)
   The test of $ZQGBLMOD() and applying the updates must be encapsulated
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",36)
   inside a YottaDB transaction.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",37)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",38)
   Another approach to handling lost transactions would be to store in the
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",39)
   database the initial message sent by a client, as well as the outcome and
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",40)
   the response, and to reprocess the message with normal business logic. If
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",41)
   the outcome is the same, the transaction can be safely applied.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",42)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",43)
   **Note**
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",44)

^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",45)
   If restartable batch operations are implemented, lost batch transactions
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",46)
   can be ignored since a subsequent batch restart will process them
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",47)
   correctly.
^HELP("s","FUNCTIONS","s","$ZQGBLMOD()",48)

^HELP("s","FUNCTIONS","s","$ZSEARCH()")
$ZSEARCH()
^HELP("s","FUNCTIONS","s","$ZSEARCH()",1)
   $ZSEARCH()
^HELP("s","FUNCTIONS","s","$ZSEARCH()",2)

^HELP("s","FUNCTIONS","s","$ZSEARCH()",3)
   The $ZSEARCH function attempts to locate a file matching the specified
^HELP("s","FUNCTIONS","s","$ZSEARCH()",4)
   file name. If the file exists, it returns the file name; if the file does
^HELP("s","FUNCTIONS","s","$ZSEARCH()",5)
   not exist, it returns the null string.
^HELP("s","FUNCTIONS","s","$ZSEARCH()",6)

^HELP("s","FUNCTIONS","s","$ZSEARCH()",7)
   The format for the $ZSEARCH function is:
^HELP("s","FUNCTIONS","s","$ZSEARCH()",8)

^HELP("s","FUNCTIONS","s","$ZSEARCH()",9)
   $ZSEARCH(expr[,intexpr])
^HELP("s","FUNCTIONS","s","$ZSEARCH()",10)

^HELP("s","FUNCTIONS","s","$ZSEARCH()",11)
   $ZSEARCH() provides a tool for verifying that a file exists.
^HELP("s","FUNCTIONS","s","$ZSEARCH()",12)

^HELP("s","FUNCTIONS","s","$ZSEARCH()",13)
   **Note**
^HELP("s","FUNCTIONS","s","$ZSEARCH()",14)

^HELP("s","FUNCTIONS","s","$ZSEARCH()",15)
   You can call the POSIX stat() function to access metadata. The optional
^HELP("s","FUNCTIONS","s","$ZSEARCH()",16)
   YottaDB POSIX plug-in packages the stat() function for easy access from M
^HELP("s","FUNCTIONS","s","$ZSEARCH()",17)
   application code.
^HELP("s","FUNCTIONS","s","$ZSEARCH()",18)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",5)
   YDB>write $zsearch("data.dat")
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",6)
   /usr/staff/ccc/data.dat
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",7)
   YDB>
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",8)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",9)
   This uses $ZSEARCH() to display the full file path name of "data.dat" in
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",10)
   the process current default directory.
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",11)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",12)
   Example:
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",14)
   YDB>set x=$zsearch("*.c")
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",15)
   YDB>for  set x=$zsearch("*.m") quit:x=""  write !,$zparse(x,"NAME")
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",17)
   This FOR loop uses $ZSEARCH() and $ZPARSE() to display M source file names
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",18)
   in the process current working directory. To ensure that the search starts
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",19)
   at the beginning, the example resets the context by first searching with a
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",20)
   different argument.
^HELP("s","FUNCTIONS","s","$ZSEARCH()","s","EXAMPLES",21)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()")
$ZSIGPROC()
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",1)
   $ZSIGPROC()
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",2)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()",3)
   Sends a signal to a process. The format for the $ZSIGPROC function is:
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",4)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()",5)
   $ZSIGPROC(expr1,expr2)
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",6)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()",7)
   **Caution**
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",8)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()",9)
   Although $ZSIGPROC() may work today as a way to invoke the asynchronous
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",10)
   interrupt mechanism of YottaDB processes to XECUTE $ZINTERRUPT because the
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",11)
   underlying mechanism uses the POSIX USR1 signal, YottaDB reserves the right to
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",12)
   change the underlying mechanism to suit its convenience and sending a
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",13)
   POSIX USR1 may cease to work as a way to invoke the asynchronous interrupt
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",14)
   mechanism. Use MUPIP INTRPT as the supported and stable API to invoke the
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",15)
   asynchronous interrupt mechanism.
^HELP("s","FUNCTIONS","s","$ZSIGPROC()",16)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",5)
   YDB>job ^Somejob
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",6)
   YDB>set ret=$&ydbposix.signalval("SIGUSR1",.sigusr1) zwrite
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",7)
   ret=0
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",8)
   sigusr1=10
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",9)
   YDB>write $zsigproc($zjob,sigusr1)
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",10)
   0
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",11)
   YDB>
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",13)
   This example sends the SIGUSR1 signal to the pid specified by $zjob.
^HELP("s","FUNCTIONS","s","$ZSIGPROC()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$ZSOCKET()")
$ZSOCKET()
^HELP("s","FUNCTIONS","s","$ZSOCKET()",1)
   $ZSOCKET()
^HELP("s","FUNCTIONS","s","$ZSOCKET()",2)

^HELP("s","FUNCTIONS","s","$ZSOCKET()",3)
   Returns information about a SOCKET device and its attached sockets. The
^HELP("s","FUNCTIONS","s","$ZSOCKET()",4)
   format of the $ZSOCKET() function is:
^HELP("s","FUNCTIONS","s","$ZSOCKET()",5)

^HELP("s","FUNCTIONS","s","$ZSOCKET()",6)
   $ZSOCKET(expr1,expr2[,[expr3][,expr4]])
^HELP("s","FUNCTIONS","s","$ZSOCKET()",7)

^HELP("s","FUNCTIONS","s","$ZSOCKET()",8)
     o The first expression specifies the SOCKET device name; an empty string
^HELP("s","FUNCTIONS","s","$ZSOCKET()",9)
       returns the same result as the current device ($IO).
^HELP("s","FUNCTIONS","s","$ZSOCKET()",10)
     o The second expression specifies a keyword identifying the type of
^HELP("s","FUNCTIONS","s","$ZSOCKET()",11)
       information returned and the optional third expression usually
^HELP("s","FUNCTIONS","s","$ZSOCKET()",12)
       specifies the index (starting at zero) of a socket attached to the
^HELP("s","FUNCTIONS","s","$ZSOCKET()",13)
       device; if the index is outside the range of attached sockets,
^HELP("s","FUNCTIONS","s","$ZSOCKET()",14)
       $ZSOCKET() returns an empty string. If the third expression is not
^HELP("s","FUNCTIONS","s","$ZSOCKET()",15)
       specified, $ZSOCKET() returns information about the current socket.
^HELP("s","FUNCTIONS","s","$ZSOCKET()",16)
       Using an invalid keyword produces a ZSOCKETATTR error. The fourth
^HELP("s","FUNCTIONS","s","$ZSOCKET()",17)
       expression specifies an individual delimiter when the second
^HELP("s","FUNCTIONS","s","$ZSOCKET()",18)
       expression specifies DELIMITER. For more information, see the
^HELP("s","FUNCTIONS","s","$ZSOCKET()",19)
       following table. Note that changes to the socket collection for a
^HELP("s","FUNCTIONS","s","$ZSOCKET()",20)
       SOCKET device using OPEN, CLOSE, USE :ATTACH, or USE :DETACH may
^HELP("s","FUNCTIONS","s","$ZSOCKET()",21)
       change the index for a socket.
^HELP("s","FUNCTIONS","s","$ZSOCKET()",22)

^HELP("s","FUNCTIONS","s","$ZSOCKET()",23)
   +------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZSOCKET()",24)
   |    Keyword    |   Arguments   |                Returns                 |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",25)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",26)
   | CURRENTINDEX  |               | The index (starting at zero) of the    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",27)
   |               |               | current socket for the SOCKET device.  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",28)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",29)
   |               |               | If only index is specified, the number |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",30)
   |               |               | of delimiters.                         |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",31)
   | DELIMITER     | index[,       |                                        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",32)
   |               | delimiter]    | If delimiter is also specified,        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",33)
   |               |               | selects which delimiter to return. The |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",34)
   |               |               | first delimiter is zero.               |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",35)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",36)
   | DESCRIPTOR    | index         | The OS socket descriptor for the       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",37)
   |               |               | socket.                                |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",38)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",39)
   |               |               | LISTEN, CONNECT, ACCEPTED, PRINCIPAL,  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",40)
   |               |               | or PASSED                              |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",41)
   |               |               |                                        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",42)
   |               |               | ACCEPTED indicates a connection        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",43)
   |               |               | created from a LISTENing socket.       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",44)
   | HOWCREATED    | index         |                                        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",45)
   |               |               | PRINCIPAL indicates that the socket is |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",46)
   |               |               | the $PRINCIPAL of the process.         |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",47)
   |               |               |                                        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",48)
   |               |               | PASSED indicates a socket passed by    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",49)
   |               |               | WRITE /ACCEPT.                         |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",50)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",51)
   | INDEX         | handle        | The current index of the socket named  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",52)
   |               |               | by handle.                             |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",53)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",54)
   | IOERROR       | index         | 1 (TRUE) if IOERROR=TRAP otherwise 0   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",55)
   |               |               | (FALSE).                               |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",56)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",57)
   |               |               | The address of the local side of the   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",58)
   | LOCALADDRESS  | index         | socket. For TCP sockets: the IPv6 or   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",59)
   |               |               | IPv4 numeric address. For LOCAL        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",60)
   |               |               | sockets: the path.                     |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",61)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",62)
   | LOCALPORT     | index         | The numeric port of the local side of  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",63)
   |               |               | a TCP socket.                          |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",64)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",65)
   |               |               | The value of the MOREREADTIME device   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",66)
   | MOREREADTIME  | index         | parameter if it was specified,         |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",67)
   |               |               | otherwise an empty string.             |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",68)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",69)
   | NUMBER        |               | The number of sockets in the SOCKET    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",70)
   |               |               | device.                                |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",71)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",72)
   |               |               | If the socket was created from a       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",73)
   | PARENT        | index         | LISTENing socket: the handle of the    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",74)
   |               |               | LISTENing socket.                      |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",75)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",76)
   | PROTOCOL      | index         | TCP, TCP6, or LOCAL                    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",77)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",78)
   |               |               | The address of the remote side of the  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",79)
   | REMOTEADDRESS | index         | socket. For TCP sockets: the IPv6 or   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",80)
   |               |               | IPv4 numeric address. For LOCAL        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",81)
   |               |               | sockets: the path.                     |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",82)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",83)
   | REMOTEPORT    | index         | The numeric port of the remote side of |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",84)
   |               |               | a TCP socket.                          |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",85)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",86)
   | SOCKETHANDLE  | index         | The handle for the selected socket.    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",87)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",88)
   | STATE         | index         | One of LISTENING, CONNECTED, BOUND, or |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",89)
   |               |               | CONNECTINPROGRESS                      |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",90)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",91)
   |               |               | If the selected socket is using TLS, a |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",92)
   |               |               | string of the form:                    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",93)
   |               |               | 1,{SERVER|CLIENT}[,tlsid], where the   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",94)
   |               |               | optional tlsid comes from the WRITE    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",95)
   | TLS           | index[,expr4] | /TLS which enabled TLS on the socket;  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",96)
   |               |               | otherwise an empty string. See the     |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",97)
   |               |               | following table for a description of   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",98)
   |               |               | all options for the fourth expression  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",99)
   |               |               | for the TLS keyword.                   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",100)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",101)
   | ZBFSIZE       | index         | Size of the YottaDB buffer in bytes.   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",102)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",103)
   | ZFF           | index         | The value of the ZFF device parameter. |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",104)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",105)
   | ZIBFSIZE      | index         | Size of the OS buffer in bytes         |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",106)
   |               |               | (SO_RCVBUF).                           |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",107)
   |---------------+---------------+----------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",108)
   | ZDELAY        | index         | 1 if Nagle algorithm enabled,          |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",109)
   |               |               | otherwise 0.                           |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",110)
   +------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZSOCKET()",111)

^HELP("s","FUNCTIONS","s","$ZSOCKET()",112)
   The following table describes the values for the fourth expression for the
^HELP("s","FUNCTIONS","s","$ZSOCKET()",113)
   TLS keyword.
^HELP("s","FUNCTIONS","s","$ZSOCKET()",114)

^HELP("s","FUNCTIONS","s","$ZSOCKET()",115)
   +-----------------------------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZSOCKET()",116)
   | expr4 |                                      Description                                      |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",117)
   | (TLS) |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",118)
   |-------+---------------------------------------------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",119)
   |       |Returns information related to SSL sessions including information about renegotiations.|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",120)
   |       |Here is an example:                                                                    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",121)
   |       |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",122)
   |       ||S:RENSEC:1,RENTOT:1,SESSID:<SESSID>, SESEXP:Thu Jun 4 21:07:11 2015                   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",123)
   |SESSION|                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",124)
   |       |"|S:" denotes this piece contains session information, "RENSEC:" indicates whether     |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",125)
   |       |secure renegotiation is available (1) or not (0), "RENTOT:" gives the current total    |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",126)
   |       |number of renegotiations done on this socket, "SESSID:" shows the session id in        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",127)
   |       |hexadecimal, and "SESEXP:" indicates when the session expires respresented as time in  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",128)
   |       |the local time zone.                                                                   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",129)
   |-------+---------------------------------------------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",130)
   |       |the hexadecimal representation of the ssl-options selected by the combination of the   |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",131)
   |       |OpenSSL defaults, options set by the YottaDB TLS plugin, and options specified in the  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",132)
   |       |ydb_crypt_config configuration file prefixed by "O:", a comma, and the verify mode as  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",133)
   |       |two hexadecimal digits. Here is an example:                                            |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",134)
   |       |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",135)
   |OPTIONS||O:0000000001520004,01                                                                 |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",136)
   |       |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",137)
   |       |The values for the SSL_OP options and verify modes are defined in the                  |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",138)
   |       |include/openssl/ssl.h file provided by the OpenSSL development package.                |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",139)
   |       |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",140)
   |       |Note: the TLS reference implementation plug-in disables SSLv3 by default.              |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",141)
   |-------+---------------------------------------------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",142)
   |       |The SSL protocol version prefixed by "P:" and the algorithm negotiated between the     |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",143)
   |CIPHER |server and client prefixed by "C:". Here is an example:                                |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",144)
   |       |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",145)
   |       ||P:TLSv1.2|C:DHE-RSA-AES256-SHA                                                        |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",146)
   |-------+---------------------------------------------------------------------------------------|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",147)
   |       |returns all available information. Here is an example:                                 |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",148)
   |ALL    |                                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",149)
   |       ||P:TLSv1.2|C:AES256-GCM-SHA384|O:0000000001020004,01|S:RENSEC:1,RENTOT:0,SESEXP:Mon Jun|
^HELP("s","FUNCTIONS","s","$ZSOCKET()",150)
   |       |22 23:58:09 2015                                                                       |
^HELP("s","FUNCTIONS","s","$ZSOCKET()",151)
   +-----------------------------------------------------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZSOCKET()",152)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()")
$ZSUBstr()
^HELP("s","FUNCTIONS","s","$ZSUBSTR()",1)
   $ZSUBstr()
^HELP("s","FUNCTIONS","s","$ZSUBSTR()",2)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()",3)
   Returns a properly encoded string from a sequence of bytes.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()",4)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()",5)
   $ZSUB[STR] (expr ,intexpr1 [,intexpr2])
^HELP("s","FUNCTIONS","s","$ZSUBSTR()",6)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",5)
   YDB>write $ZCHSET
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",6)
   M
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",7)
   YDB>set char1="a" ; one byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",8)
   YDB>set char2="c,"; two-byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",9)
   YDB>set char3="*"; three-byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",10)
   YDB>set y=char1_char2_char3
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",11)
   YDB>write $zsubstr(y,1,3)=$zsubstr(y,1,5)
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",12)
   0
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",13)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",14)
   With character set M specified, the expression
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",15)
   $ZSUBSTR(y,1,3)=$ZSUBSTR(y,1,5) evaluates to 0 or "false" because the
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",16)
   expression $ZSUBSTR(y,1,5) returns more characters than $ZSUBSTR(y,1,3).
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",17)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",18)
   Example:
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",19)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",20)
   YDB>write $zchset
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",21)
   UTF-8
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",22)
   YDB>set char1="a" ; one byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",23)
   YDB>set char2="c,"; two-byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",24)
   YDB>set char3="*"; three-byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",25)
   YDB>set y=char1_char2_char3
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",26)
   YDB>write $zsubstr(y,1,3)=$zsubstr(y,1,5)
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",27)
   1
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",29)
   For a process started in UTF-8 mode, the expression
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",30)
   $ZSUBSTR(y,1,3)=$ZSUBSTR(y,1,5) evaluates to 1 or "true" because the
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",31)
   expression $ZSUBSTR(y,1,5) returns a string made up of char1 and char2
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",32)
   excluding the three-byte char3 because it was not completely included in
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",33)
   the specified byte-length.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",34)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",35)
   In many ways, the $ZSUBSTR() function is similar to the $ZEXTRACT()
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",36)
   function. For example, $ZSUBSTR(expr,intexpr1) is equivalent to
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",37)
   $ZEXTRACT(expr,intexpr1,$L(expr)). Note that this means when using the M
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",38)
   character set, $ZSUBSTR() behaves identically to $EXTRACT() and
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",39)
   $ZEXTRACT(). The differences are as follows:
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",40)

^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",41)
     * $ZSUBSTR() cannot appear on the left of the equal sign in the SET
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",42)
       command where as $ZEXTRACT() can.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",43)
     * In both the modes, the third expression of $ZSUBSTR() is a byte,
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",44)
       rather than character, position within the first expression.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",45)
     * $EXTRACT() operates on characters, irrespective of byte length.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",46)
     * $ZEXTRACT() operates on bytes, irrespective of multi-byte character
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",47)
       boundaries.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",48)
     * $ZSUBSTR() is the only way to extract as valid UTF-8 encoded
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",49)
       characters from a byte string containing mixed UTF-8 and non UTF-8
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",50)
       data. It operates on Unicode(R) characters so that its result does not
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",51)
       exceed the given byte length.
^HELP("s","FUNCTIONS","s","$ZSUBSTR()","s","EXAMPLES",52)

^HELP("s","FUNCTIONS","s","$ZSYSLOG()")
$ZSYSLOG()
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",1)
   $ZSYSLOG()
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",2)

^HELP("s","FUNCTIONS","s","$ZSYSLOG()",3)
   Sends its string parameter to the system log and always returns TRUE (1).
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",4)
   The text appears in the syslog with the same format as any other YottaDB
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",5)
   syslog message (that is, in the user.info log with YDB-MUMPS[pid]" or
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",6)
   "YDB-MUPIP[pid]" prefix along with instance information where
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",7)
   appropriate). The format of the $ZSYSLOG function is:
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",8)

^HELP("s","FUNCTIONS","s","$ZSYSLOG()",9)
   $ZSYSLOG(expr)
^HELP("s","FUNCTIONS","s","$ZSYSLOG()",10)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()")
$ZTRanslate()
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",1)
   $ZTRanslate()
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",2)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",3)
   Returns a byte sequence that results from replacing or dropping bytes in
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",4)
   the first of its arguments as specified by the patterns of its other
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",5)
   arguments.
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",6)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",7)
   The format for the $ZTRANSLATE() function is:
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",8)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",9)
   $ZTR[ANSLATE](expr1[,expr2[,expr3]])
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",10)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",11)
   The $ZTRANSLATE() algorithm can be understood as follows:
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()",12)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",5)
   YDB>set hiraganaA=$char(12354) ; $zchar(227,129,130)
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",6)
   YDB>set temp1=$zchar(130)
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",7)
   YDB>set temp2=$zchar(140)
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",8)
   YDB>set tr=$ztranslate(hiraganaA,temp1,temp2)
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",9)
   YDB>w $ascii(tr)
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",10)
   12364
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",11)
   YDB>
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",13)
   In the above example, $ZTRANSLATE() replaces byte $ZCHAR(130) in first
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",14)
   expression and matching the first (and only) byte in the second expression
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",15)
   with byte $ZCHAR(140) - the corresponding byte in the third expression.
^HELP("s","FUNCTIONS","s","$ZTRANSLATE()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()")
$ZTRIgger()
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",1)
   $ZTRIgger()
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",2)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()",3)
   Examine or load trigger definition. The format of the $ZTRIGGER() function
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",4)
   is:
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",5)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()",6)
   $ZTRIgger(expr1[,expr2])
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",7)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()",8)
   **Note**
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",9)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()",10)
   A $ZTRIGGER() action (delete or select) applies to all triggers in all
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",11)
   regions matching the specified signature. If the argument specifies an
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",12)
   incomplete trigger signature, for example, only the name, the
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",13)
   specification may match multiple triggers and apply the delete or select
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",14)
   to all of them. YottaDB recommends you run a select and analyze the scope of
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",15)
   the signature before any signature limited delete.
^HELP("s","FUNCTIONS","s","$ZTRIGGER()",16)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()")
Examples_of_$ZTRIGGER()
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",1)
   Examples of $ZTRIGGER()
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",2)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",4)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",5)
   YDB>set X=$ztrigger("S")
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",6)
   YDB>
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",7)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",8)
   This example displays the current trigger definitions stored in the
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",9)
   database.
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",10)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",11)
   YDB>set X=$ztrigger("i","+^Acct(sub=:) -command=set -xecute=""set ^X($ztvalue)=sub""")
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",12)
   YDB>
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",13)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",14)
   This example adds a trigger definition for the first level node of ^Acct.
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",15)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",16)
   Example:
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",17)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",18)
   YDB>set trigstr="+^a -commands=S -xecute=<<"_$c(10)_" do ^twork1"_$c(10)_" do ^twork2"_$c(10) write $ztrigger("item",trigstr)
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",19)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",20)
   This example demonstrates the usage of the
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",21)
   $ztrigger("ITEM",<multi-line-trigger-definition>> where <<denotes the
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",22)
   definition of a multi-line -XECUTE string and $c(10) to denote the newline
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",23)
   separator. Unlike the $ztrigger("FILE") form,
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",24)
   $ztrigger("ITEM",<multi-line-trigger-definition>> does not require the
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",25)
   trigger definition to terminate with >>.
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",26)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",27)
   Example:
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",28)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",29)
   YDB>write $ztrigger("file","agbl.trg")
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",30)
   1
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",31)
   YDB>
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",32)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",33)
   This example is equivalent to the previous $ztrigger("ITEM") example. In
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",34)
   this example, agbl.trg contains the following multi-line trigger
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",35)
   definition:
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",36)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",37)
   +^a -commands=S -xecute=<<
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",38)
    do ^twork1
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",39)
    do ^twork2
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",40)
   >>
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",41)

^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",42)
   Unlike $ztrigger("ITEM"), $ztrigger("FILE") usages require the trigger
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",43)
   definition to terminate with >>
^HELP("s","FUNCTIONS","s","$ZTRIGGER()","s","EXAMPLES_OF_$ZTRIGGER()",44)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()")
$ZTRNLNM()
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",1)
   $ZTRNLNM()
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",2)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",3)
   The $ZTRNLNM function returns the value of an environment variable.The
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",4)
   $ZTRNLNM function is analogous to the DCL Lexical function F$TRNLNM on
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",5)
   OpenVMS.
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",6)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",7)
   **Note**
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",8)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",9)
   $ZTRNLNM() does not perform iterative translation.
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",10)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",11)
   The format for the $ZTRNLNM function is:
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",12)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",13)
   $ZTRNLNM(expr1[,expr2[,expr3[,expr4[,expr5[,expr6]]]]])
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",14)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",15)
   expr1 specifies the environment variable whose value needs to be returned.
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",16)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",17)
   expr2 to expr5 are OpenVMS-related expressions that specify logical name
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",18)
   table(s), index (numbered from 0), initial mode of the look-up, and a
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",19)
   value indicating whether the look-up is case sensitive. To ensure
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",20)
   interoperability between UNIX and OpenVMS versions, $ZTRNLNM() on UNIX
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",21)
   accepts these expressions and ignores them.
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",22)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",23)
   The optional expr6 specifies any one of the following keywords:
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",24)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()",25)
   +-----------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",26)
   | ITEM KEYWORD |            DATA RETURNED             |
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",27)
   |--------------+--------------------------------------|
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",28)
   | FULL         | Returns the translation.             |
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",29)
   |--------------+--------------------------------------|
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",30)
   | LENGTH       | Length of the return value in bytes. |
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",31)
   |--------------+--------------------------------------|
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",32)
   | VALUE        | Returns the translation.             |
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",33)
   +-----------------------------------------------------+
^HELP("s","FUNCTIONS","s","$ZTRNLNM()",34)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",5)
   YDB>write $ztrnlnm("ydb_dist")
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",6)
   /usr/local/lib/yottadb/r130/utf8
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",7)
   YDB>write $ztrnlnm("ydb_dist","","","","","VALUE")
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",8)
   /usr/local/lib/yottadb/r130/utf8
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",9)
   YDB>
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",11)
   This uses $ZTRNLNM() to display the translation value for ydb_dist.
^HELP("s","FUNCTIONS","s","$ZTRNLNM()","s","EXAMPLES",12)

^HELP("s","FUNCTIONS","s","$ZWIDTH()")
$ZWidth()
^HELP("s","FUNCTIONS","s","$ZWIDTH()",1)
   $ZWidth()
^HELP("s","FUNCTIONS","s","$ZWIDTH()",2)

^HELP("s","FUNCTIONS","s","$ZWIDTH()",3)
   Returns the numbers of columns required to display a given string on the
^HELP("s","FUNCTIONS","s","$ZWIDTH()",4)
   screen or printer. The format of the $ZWIDTH() function is:
^HELP("s","FUNCTIONS","s","$ZWIDTH()",5)

^HELP("s","FUNCTIONS","s","$ZWIDTH()",6)
   $ZW[IDTH] (expr)
^HELP("s","FUNCTIONS","s","$ZWIDTH()",7)

^HELP("s","FUNCTIONS","s","$ZWIDTH()",8)
   With character set UTF-8 specified, the $ZWIDTH() function uses the ICU's
^HELP("s","FUNCTIONS","s","$ZWIDTH()",9)
   glyph-related conventions to calculate the number of columns required to
^HELP("s","FUNCTIONS","s","$ZWIDTH()",10)
   represent the expression.
^HELP("s","FUNCTIONS","s","$ZWIDTH()",11)

^HELP("s","FUNCTIONS","s","$ZWIDTH()",12)
   **Note**
^HELP("s","FUNCTIONS","s","$ZWIDTH()",13)

^HELP("s","FUNCTIONS","s","$ZWIDTH()",14)
   When in "NOBADCHAR" mode, $ZWIDTH() returns give any bad characters a
^HELP("s","FUNCTIONS","s","$ZWIDTH()",15)
   length of zero (0), which may or may not match the behavior of any device
^HELP("s","FUNCTIONS","s","$ZWIDTH()",16)
   used to display the string.
^HELP("s","FUNCTIONS","s","$ZWIDTH()",17)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES")
Examples
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",1)
   Examples
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",2)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",3)
   Example:
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",4)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",5)
   YDB>set NG=$char($$FUNC^%HD("200B"))
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",6)
   YDB>set S=$char(26032)_NG_$CHAR(26033)
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",7)
   YDB>W $ZWidth(S)
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",8)
   4
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",9)
   YDB>
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",10)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",11)
   In the above example, the local variable NG contains a non-graphic
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",12)
   character which does not display between two double-width UTF-8
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",13)
   characters.
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",14)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",15)
   Example:
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",16)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",17)
   YDB>write $zwidth("The rain in Spain stays mainly in the plain.")
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",18)
   44
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",19)
   YDB>set A="************"
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",20)
   YDB>write $length(A)
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",21)
   12
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",22)
   YDB>write $zwidth(A)
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",23)
   24
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",24)

^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",25)
   In the above example, the $ZWIDTH() function returns 24 because each
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",26)
   character in local variable A occupies 2 columns when they are displayed
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",27)
   on the screen or printer.
^HELP("s","FUNCTIONS","s","$ZWIDTH()","s","EXAMPLES",28)

^HELP("s","FUNCTIONS","s","$ZWRITE()")
$ZWRite()
^HELP("s","FUNCTIONS","s","$ZWRITE()",1)
   $ZWRite()
^HELP("s","FUNCTIONS","s","$ZWRITE()",2)

^HELP("s","FUNCTIONS","s","$ZWRITE()",3)
   Converts its first string argument to or from ZWRITE format (quoted
^HELP("s","FUNCTIONS","s","$ZWRITE()",4)
   graphics characters concatenated with $CHAR() representations of any
^HELP("s","FUNCTIONS","s","$ZWRITE()",5)
   non-graphic characters). The second integer expression controls the
^HELP("s","FUNCTIONS","s","$ZWRITE()",6)
   direction of conversion. The format of the $ZWRITE() function is:
^HELP("s","FUNCTIONS","s","$ZWRITE()",7)

^HELP("s","FUNCTIONS","s","$ZWRITE()",8)
   $ZWRITE(expr[,intexpr])
^HELP("s","FUNCTIONS","s","$ZWRITE()",9)

^HELP("s","FUNCTIONS","s","$ZWRITE()",10)
     o The first argument specifies the string to convert to or from the
^HELP("s","FUNCTIONS","s","$ZWRITE()",11)
       ZWRITE format.
^HELP("s","FUNCTIONS","s","$ZWRITE()",12)
     o The second argument specifies the direction of conversion. When
^HELP("s","FUNCTIONS","s","$ZWRITE()",13)
       intexpr is not specified or evaluates to zero, $zwrite() converts the
^HELP("s","FUNCTIONS","s","$ZWRITE()",14)
       first argument to the ZWRITE format. When intexpr evaluates to a
^HELP("s","FUNCTIONS","s","$ZWRITE()",15)
       non-zero value, $ZWRITE() treats the first argument as being in ZWRITE
^HELP("s","FUNCTIONS","s","$ZWRITE()",16)
       format and attempts to convert it to a string with embedded
^HELP("s","FUNCTIONS","s","$ZWRITE()",17)
       non-graphic characters; if it is not in ZWRITE format, it returns an
^HELP("s","FUNCTIONS","s","$ZWRITE()",18)
       empty string.
^HELP("s","FUNCTIONS","s","$ZWRITE()",19)
     o Converting to zwrite format tends to produce a string that is longer
^HELP("s","FUNCTIONS","s","$ZWRITE()",20)
       than the input and therefore a $ZWRITE() result may exceed the maximum
^HELP("s","FUNCTIONS","s","$ZWRITE()",21)
       string length - the maximum input length that is guaranteed not to do
^HELP("s","FUNCTIONS","s","$ZWRITE()",22)
       so is a 116,510 byte string.
^HELP("s","FUNCTIONS","s","$ZWRITE()",23)
     o If all its arguments are literals, $ZWRITE() evaluates to a literal
^HELP("s","FUNCTIONS","s","$ZWRITE()",24)
       constant at compile time.
^HELP("s","FUNCTIONS","s","$ZWRITE()",25)
     o Note that non-graphic characters differ between M mode and UTF-8 mode.
^HELP("s","FUNCTIONS","s","$ZWRITE()",26)

^HELP("s","FUNCTIONS","s","$ZWRITE()",27)
   Example:
^HELP("s","FUNCTIONS","s","$ZWRITE()",28)

^HELP("s","FUNCTIONS","s","$ZWRITE()",29)
   YDB>set temp="X"_$char(10)_"X" ; $CHAR(10) is the linefeed character
^HELP("s","FUNCTIONS","s","$ZWRITE()",30)
   YDB>write temp
^HELP("s","FUNCTIONS","s","$ZWRITE()",31)
   X
^HELP("s","FUNCTIONS","s","$ZWRITE()",32)
   X
^HELP("s","FUNCTIONS","s","$ZWRITE()",33)
   YDB>write $zwrite(temp)
^HELP("s","FUNCTIONS","s","$ZWRITE()",34)
   "X"_$C(10)_"X"
^HELP("s","FUNCTIONS","s","$ZWRITE()",35)
   YDB>write $zwrite($zwrite(temp),1)
^HELP("s","FUNCTIONS","s","$ZWRITE()",36)
   X
^HELP("s","FUNCTIONS","s","$ZWRITE()",37)
   X
^HELP("s","FUNCTIONS","s","$ZWRITE()",38)
   YDB>
^HELP("s","FUNCTIONS","s","$ZWRITE()",39)

^HELP("s","INTEGRATE_EXTERNAL")
Integrate_External
^HELP("s","INTEGRATE_EXTERNAL",1)
   Integrate External
^HELP("s","INTEGRATE_EXTERNAL",2)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES")
Access_Non-M_Routines
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",1)
   Access Non-M Routines
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",2)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",3)
   In YottaDB, calls to C language routines may be made with the following
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",4)
   syntax:
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",5)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",6)
   DO &[packagename.]name[^name][parameter-list]
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",7)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",8)
   or as an expression element,
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",9)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",10)
   $&[packagename.]name[^name][parameter-list]
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",11)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",12)
   Where packagename, like the name elements is a valid M name. Because of
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",13)
   the parsing conventions of M, the identifier between the ampersand (&) and
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",14)
   the optional parameter-list has precisely constrained punctuation - a
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",15)
   later section describes how to transform this into a more richly
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",16)
   punctuated name should that be appropriate for the called function. While
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",17)
   the intent of the syntax is to permit the name^name to match an M
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",18)
   labelref, there is no semantic implication to any use of the up-arrow (^).
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",19)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",20)
   Example:
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",21)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",22)
   ;Call external routine rtn1
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",23)
   DO &rtn1
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",24)
   ;Call int^exp in package "mathpak" with one parameter: the expression val/2
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",25)
   DO &mathpak.int^exp(val/2)
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",26)
   ;Call the routine sqrt with the value "2"
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",27)
   WRITE $&sqrt(2)
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",28)
   ;Call the routine get parms, with the parameter "INPUT" and the variable "inval", passed by reference.
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",29)
   DO &getparms("INPUT",.inval)
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",30)
   ;Call program increment in package "mathpak" without specifying a value for the first argument and the variable "outval" passed by reference as the second argument. All arguments which do not specify a value translate to default values in the increment program.
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",31)
   Do &mathpak.increment(,.outval)
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",32)

^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",33)
   The called routines follow the C calling conventions. They must be
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",34)
   compiled as position independent code and linked as a shareable library.
^HELP("s","INTEGRATE_EXTERNAL","s","ACCESS_NON-M_ROUTINES",35)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS")
Call-Ins
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",1)
   Call-Ins
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",3)
   Call-In is a framework supported by YottaDB that allows a C/C++ program to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",4)
   invoke an M routine within the same process context. YottaDB provides a
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",5)
   well-defined Call-In interface packaged as a run-time shared library that
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",6)
   can be linked into an external C/C++ program.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS",7)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE")
Interface
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE",1)
   Interface
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE",3)
   This section is further broken down into 6 subsections for an easy
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE",4)
   understanding of the Call-In interface. The section is concluded with an
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE",5)
   elaborate example.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE",6)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C")
Call_from_C
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",1)
   Call from C
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",3)
   YottaDB provides 2 interfaces for calling a M routine from C. These are:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",4)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",5)
     * ydb_cip
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",6)
     * ydb_ci
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",7)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",8)
   ydb_cip offers better performance on calls after the first one.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C",9)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI")
ydb_ci
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",1)
   ydb_ci
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",3)
   ydb_status_t ydb_ci(const ydb_char_t* c_call_name, ...);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",4)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",5)
   The variable argument function ydb_ci() is the interface that actually
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",6)
   invokes the specified M routine and returns the results via parameters.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",7)
   The ydb_ci() call must be in the following format:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",8)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",9)
   status = ydb_ci(<c_call_name> [, ret_val] [, arg1] ...);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",10)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",11)
   First argument: c_call_name, a null-terminated C character string
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",12)
   indicating the alias name for the corresponding <lab-ref> entry in the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",13)
   Call-In table.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",14)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",15)
   Optional second argument: ret_val, a pre-allocated pointer through which
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",16)
   YottaDB returns the value of QUIT argument from the (extrinsic) M routine.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",17)
   ret_val must be the same type as specified for <ret-type> in the Call-In
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",18)
   table entry. The ret_val argument is needed if and only if <ret-type> is
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",19)
   not void.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",20)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",21)
   Optional list of arguments to be passed to the M routine's formallist: the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",22)
   number of arguments and the type of each argument must match the number of
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",23)
   parameters, and parameter types specified in the corresponding Call-In
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",24)
   table entry. All pointer arguments must be pre-allocated. YottaDB assumes
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",25)
   that any pointer, which is passed for O/IO-parameter points to valid
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",26)
   write-able memory.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",27)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",28)
   The status value returned by ydb_ci() indicates the YottaDB status code; zero
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",29)
   (0), if successful, or a non-zero; $ZSTATUS error code on failure. The
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",30)
   $ZSTATUS message of the failure can be read into a buffer by immediately
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",31)
   calling ydb_zstatus().
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CI",32)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP")
ydb_cip
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",1)
   ydb_cip
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",3)
   ydb_status_t ydb_cip(ci_name_descriptor *ci_info, ...);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",4)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",5)
   The variable argument function ydb_cip() is the interface that invokes the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",6)
   specified M routine and returns the results via parameters.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",7)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",8)
   ci_name_descriptor has the following structure:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",9)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",10)
   typedef struct
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",11)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",12)
     ydb_string_t rtn_name;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",13)
     void* handle;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",14)
   } ci_name_descriptor;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",15)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",16)
   rtn_name is a C character string indicating the corresponding <lab-ref>
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",17)
   entry in the Call-In table.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",18)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",19)
   The handle is YottaDB private information initialized by YottaDB on the first
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",20)
   call-in and to be provided unmodified to YottaDB on subsequent calls. If
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",21)
   application code modifies it, it will corrupt the address space of the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",22)
   process, and potentially cause just about any bad behavior that it is
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",23)
   possible for the process to cause, including but not limited to process
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",24)
   death, database damage and security violations.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",25)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",26)
   The ydb_cip() call must follow the following format:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",27)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",28)
   status = ydb_cip(<ci_name_descriptor> [, ret_val] [, arg1] ...);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",29)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",30)
   First argument: ci_name_descriptor, a null-terminated C character string
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",31)
   indicating the alias name for the corresponding <lab-ref> entry in the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",32)
   Call-In table.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",33)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",34)
   Optional second argument: ret_val, a pre-allocated pointer through which
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",35)
   YottaDB returns the value of QUIT argument from the (extrinsic) M routine.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",36)
   ret_val must be the same type as specified for <ret-type> in the Call-In
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",37)
   table entry. The ret_val argument is needed if and only if <ret-type> is
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",38)
   not void.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",39)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",40)
   Optional list of arguments to be passed to the M routine's formallist: the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",41)
   number of arguments and the type of each argument must match the number of
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",42)
   parameters, and parameter types specified in the corresponding Call-In
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",43)
   table entry. All pointer arguments must be pre-allocated. YottaDB assumes
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",44)
   that any pointer, which is passed for O/IO-parameter points to valid
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",45)
   write-able memory.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",46)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",47)
   The status value returned by ydb_cip() indicates the YottaDB status code;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",48)
   zero (0), if successful, or a non-zero; $ZSTATUS error code on failure.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",49)
   The $ZSTATUS message of the failure can be read into a buffer by
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",50)
   immediately calling ydb_zstatus().
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","CALL_FROM_C","s","YDB_CIP",51)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES")
Error_Messages
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",1)
   Error Messages
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",3)
   void ydb_zstatus (ydb_char_t* msg_buffer, ydb_long_t buf_len);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",4)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",5)
   This function returns the null-terminated $ZSTATUS message of the last
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",6)
   failure via the buffer pointed by msg_buffer of size buf_len. The message
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",7)
   is truncated to size buf_len if it does not fit into the buffer.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",8)
   ydb_zstatus() is useful if the external application needs the text message
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",9)
   corresponding to the last YottaDB failure. A buffer of 2048 is sufficient to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",10)
   fit in any YottaDB message.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","ERROR_MESSAGES",11)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT")
Exit
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",1)
   Exit
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",3)
   ydb_status_t  ydb_exit (void);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",4)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",5)
   ydb_exit() can be used to shut down all databases and exit from the YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",6)
   environment that was created by a previous ydb_init().
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",7)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",8)
   Note that ydb_init() creates various YottaDB resources and keeps them open
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",9)
   across multiple invocations of ydb_ci() until ydb_exit() is called to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",10)
   close all such resources. On successful exit, ydb_exit() returns zero (0),
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",11)
   else it returns the $ZSTATUS error code.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",12)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",13)
   ydb_exit() cannot be called from an external call function. YottaDB reports
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",14)
   the error YDB-E-INVYDBEXIT if an external call function invokes
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",15)
   ydb_exit(). Since the YottaDB run-time system must be operational even after
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",16)
   the external call function returns, ydb_exit() is meant to be called only
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",17)
   once during a process lifetime, and only from the base C/C++ program when
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",18)
   YottaDB functions are no longer required by the program.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","EXIT",19)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB")
Initialize_YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",1)
   Initialize YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",3)
   ydb_status_t ydb_init(void);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",4)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",5)
   If the base program is not an M routine but a standalone C program,
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",6)
   ydb_init() must be called (before calling any YottaDB functions), to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",7)
   initialize the YottaDB run-time system.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",8)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",9)
   ydb_init() returns zero (0) on success. On failure, it returns the YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",10)
   error status code whose message can be read into a buffer by immediately
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",11)
   calling ydb_zstatus(). Duplicate invocations of ydb_init() are ignored by
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",12)
   YottaDB.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",13)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",14)
   If Call-Ins are used from an external call function (that is, a C function
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",15)
   that has itself been called from M code), ydb_init() is not needed,
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",16)
   because YottaDB is initialized before the External Call. All ydb_init() calls
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",17)
   from External Calls functions are ignored by YottaDB.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","INTERFACE","s","INITIALIZE_YOTTADB",18)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS")
Nested_Call-Ins
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",1)
   Nested Call-Ins
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",3)
   Call-ins can be nested by making an external call function in-turn call
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",4)
   back into YottaDB. Each ydb_ci() called from an External Call library creates
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",5)
   a call-in base frame at $ZLEVEL 0 and executes the M routine at $ZLEVEL 1.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",6)
   The nested call-in stack unwinds automatically when the External Call
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",7)
   function returns to YottaDB.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",8)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",9)
   YottaDB currently allows up to 10 levels of nesting, if TP is not used, and
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",10)
   less than 10 if YottaDB supports call-ins from a transaction. YottaDB reports
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",11)
   the error YDB-E-CIMAXLEVELS when the nesting reaches its limit.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",12)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",13)
   Following are the YottaDB commands, Intrinsic Special Variables, and
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",14)
   functions whose behavior changes in the context of every new nested
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",15)
   call-in environment.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",16)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",17)
   ZGOTO 0 (zero) returns to the processing of the invoking non-M routine as
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",18)
   does ZGOTO 1 (one) with no entryref, while ZGOTO 1:entryref replaces the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",19)
   originally invoked M routine and continues M execution.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",20)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",21)
   $ZTRAP/$ETRAP NEW'd at level 1 (in call-in base frame).
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",22)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",23)
   $ZLEVEL initializes to zero (0) in the call-in base frame, and increments for
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",24)
   every new stack level.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",25)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",26)
   $STACK initializes to zero (0) in first M frame, and increments for every
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",27)
   new stack level.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",28)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",29)
   $ESTACK NEW'd at level zero (0) in the call-in base frame.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",30)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",31)
   $ECODE/$STACK() initialized to null at level one (1) in first M frame.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",32)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",33)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",34)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",35)
   After a nested call-in environment exits and the external call C function
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",36)
   returns to M, the above ISVs and Functions restore their old values.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","NESTED_CALL-INS",37)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES")
Relevant_files
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",1)
   Relevant files
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",3)
   To facilitate Call-Ins to M routines, the YottaDB distribution directory
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",4)
   ($ydb_dist) contains the following files:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",5)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",6)
    1. libyottadb.so - A shared library that implements the YottaDB run-time
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",7)
       system, including the Call-In API. If Call-Ins are used from a
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",8)
       standalone C/C++ program, this library needs to be explicitly linked
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",9)
       into the program.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",10)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",11)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",12)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",13)
       .so is the recognized shared library file extension on most UNIX
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",14)
       platforms.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",15)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",16)
    2. mumps - The YottaDB startup program that dynamically links with
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",17)
       libyottadb.so.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",18)
    3. gtmxc_types.h - A C-header file containing the declarations of Call-In
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",19)
       API.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",20)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",21)
   The following sections describe the files relevant to using Call-Ins.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES",22)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE")
Call-In_Table
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",1)
   Call-In Table
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",3)
   The Call-In table file is a text file that contains the signatures of all
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",4)
   M label references that get called from C. In order to pass the typed C
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",5)
   arguments to the type-less M formallist, the enviroment variable ydb_ci
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",6)
   must be defined to point to the Call-In table file path. Each signature
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",7)
   must be specified separately in a single line. YottaDB reads this file and
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",8)
   interprets each line according to the following convention (specifications
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",9)
   withint box brackets "[]", are optional):
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",10)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",11)
   <c-call-name> : <ret-type> <label-ref> ([<direction>:<param-type>,...])
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",12)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",13)
   where,
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",14)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",15)
   <label-ref>: is the entry point (that is a valid label reference) at which
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",16)
   YottaDB starts executing the M routine being called-in
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",17)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",18)
   <c-call-name>: is a unique C identifier that is actually used within C to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",19)
   refer to <label-ref>
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",20)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",21)
   <direction>: is either I (input-only), O (output-only), or IO
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",22)
   (input-output)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",23)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",24)
   <ret-type>: is the return type of <label-ref>
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",25)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",26)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",27)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",28)
   Since the return type is considered as an output-only (O) parameter, the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",29)
   only types allowed are pointer types and void. Void cannot be specified as
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",30)
   parameter.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",31)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",32)
   <param-type>: is a valid parameter type. Empty parentheses must be
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",33)
   specified if no argument is passed to <label-ref>
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",34)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",35)
   The <direction> indicates the type of operation that YottaDB performs on the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",36)
   parameter read-only (I), write-only (O), or read-write (IO). All O and IO
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",37)
   parameters must be passed by reference, that is as pointers since YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",38)
   writes to these locations. All pointers that are being passed to YottaDB must
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",39)
   be pre-allocated. The following table details valid type specifications
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",40)
   for each direction.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",41)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",42)
   +------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",43)
   | Directions |                  Allowed Parameter types                  |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",44)
   |------------+-----------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",45)
   |            | ydb_long_t, ydb_ulong_t, ydb_float_t,                     |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",46)
   | I          | ydb_double_t,_ydb_long_t*, ydb_ulong_t*, ydb_float_t*,    |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",47)
   |            | ydb_double_t*,_ydb_char_t*, ydb_string_t*                 |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",48)
   |------------+-----------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",49)
   | O/IO       | ydb_long_t*, ydb_ulong_t*, ydb_float_t*,                  |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",50)
   |            | ydb_double_t*,_ydb_char_t*, ydb_string_t*                 |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",51)
   +------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",52)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",53)
   Here is an example of Call-In table (calltab.ci) for piece.m:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",54)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",55)
   print     :void            display^piece()
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",56)
   getpiece  :ydb_char_t*     get^piece(I:ydb_char_t*, I:ydb_char_t*, I:ydb_long_t)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",57)
   setpiece  :void            set^piece(IO:ydb_char_t*, I:ydb_char_t*, I:ydb_long_t, I:ydb_char_t*)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",58)
   pow       :ydb_double_t*   pow^piece(I:ydb_double_t, I:ydb_long_t)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",59)
   powequal  :void            powequal^piece(IO:ydb_double_t*, I:ydb_long_t)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",60)
   piece     :ydb_double_t*   pow^piece(I:ydb_double_t, I:ydb_long_t)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",61)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",62)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",63)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",64)
   The same entryref can be called by different C call names (for example,
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",65)
   pow, and piece). However, if there are multiple lines with the same call
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",66)
   name, only the first entry will be used by YottaDB. YottaDB ignores all
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",67)
   subsequent entries using a call name. Also, note that the second and third
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",68)
   entries, although shown here as wrapped across lines, must be specified as
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",69)
   a single line in the file.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","CALL-IN_TABLE",70)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H")
libyottadb.h
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",1)
   libyottadb.h
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",3)
   The header file provides signatures of all Call-In interface functions and
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",4)
   definitions of those valid data types that can be passed from C to M. YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",5)
   strongly recommends that these types be used instead of native types (int,
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",6)
   char, float, and so on), to avoid possible mismatch problems during
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",7)
   parameter passing.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",8)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",9)
   libyottadb.h defines the following types that can be used in Call-Ins.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",10)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",11)
   +------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",12)
   |     Type     |                          Usage                          |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",13)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",14)
   | void         | Used to express that there is no function return value  |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",15)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",16)
   | ydb_int_t    | ydb_int_t has 32-bit length on all platforms.           |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",17)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",18)
   | ydb_uint_t   | ydb_uint_t has 32-bit length on all platforms           |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",19)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",20)
   |              | ydb_long_t has 32-bit length on 32-bit platforms and    |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",21)
   | ydb_long_t   | 64-bit length on 64-bit platforms. It is much the same  |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",22)
   |              | as the C language long type.                            |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",23)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",24)
   | ydb_ulong_t  | ydb_ulong_t is much the same as the C language unsigned |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",25)
   |              | long type.                                              |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",26)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",27)
   | ydb_float_t  | floating point number                                   |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",28)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",29)
   | ydb_double_t | Same as above but double precision.                     |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",30)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",31)
   |              | type int. If it returns zero then the call was          |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",32)
   | ydb_status_t | successful. If it is non-zero, when control returns to  |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",33)
   |              | YottaDB, it issues a trappable error.                   |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",34)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",35)
   | ydb_long_t*  | Pointer to ydb_long_t. Good for returning integers.     |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",36)
   |--------------+---------------------------------------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",37)
   | ydb_ulong_t* | Pointer to ydb_ulong_t. Good for returning unsigned     |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",38)
   |              | integers.                                               |
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",39)
   +------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",40)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",41)
   typedef struct {
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",42)
       ydb_long_t length;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",43)
       ydb_char_t* address;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",44)
   } ydb_string_t;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",45)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",46)
   The pointer types defined above are 32-bit addresses on all 32-bit
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",47)
   platforms. For 64-bit platforms, ydb_string_t* is a 64-bit address.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",48)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",49)
   gtmxc_types.h also provides an input-only parameter type
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",50)
   ydb_pointertofunc_t that can be used to obtain call-back function pointers
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",51)
   via parameters in the external routine. If a parameter is specified as
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",52)
   I:ydb_pointertofunc_t and if a numeric value (between 0-5) is passed for
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",53)
   this parameter in M, YottaDB interprets this value as the index into the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",54)
   callback table and passes the appropriate callback function pointer to the
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",55)
   external routine.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",56)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",57)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",58)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",59)
   YottaDB represents values that fit in 18 digits as numeric values, and values
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",60)
   that require more than 18 digits as strings.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",61)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",62)
   libyottadb.h also includes definitions for the following entry points
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",63)
   exported from libyottadb:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",64)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",65)
   void gtm_hiber_start(ydb_uint_t mssleep);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",66)
   void gtm_hiber_start_wait_any(ydb_uint_t mssleep)
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",67)
   void gtm_start_timer(ydb_tid_t tid, ydb_int_t time_to_expir, void (*handler)(), ydb_int_t hdata_len, void \
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",68)
   *hdata);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",69)
   void gtm_cancel_timer(ydb_tid_t tid);
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",70)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",71)
   where:
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",72)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",73)
     * mssleep - milliseconds to sleep
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",74)
     * tid - unique timer id value
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",75)
     * time_to_expir - milliseconds until timer drives given handler
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",76)
     * handler - function pointer to handler to be driven
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",77)
     * hdata_len - 0 or length of data to pass to handler as a parameter
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",78)
     * hdata - NULL or address of data to pass to handler as a parameter
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",79)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",80)
   gtm_hiber_start() always sleeps until the time expires;
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",81)
   gtm_hiber_start_wait_any() sleeps until the time expires or an interrupt
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",82)
   by any signal (including another timer). gtm_start_timer() starts a timer
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",83)
   but returns immediately (no sleeping) and drives the given handler when
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",84)
   time expires unless the timer is canceled.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",85)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",86)
   **Important**
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",87)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",88)
   YottaDB continues to support xc_* and gtm_* equivalent types and routines of
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",89)
   ydb_* for upward compatibility. These types are defined in a second header
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",90)
   file with the name that is supported on GT.M (gtmxc_types.h). Note the xc_*
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",91)
   equivalent types are marked in this header file as deprecated. Note also that
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",92)
   gtmxc_types.h also includes libyottadb.h for the definition of the ydb_* base
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",93)
   types and routines.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RELEVANT_FILES","s","LIBYOTTADB.H",94)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS")
Rules_to_Follow_in_Call-Ins
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",1)
   Rules to Follow in Call-Ins
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",3)
    1. External calls must not be fenced with TSTART/TCOMMIT if the external
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",4)
       routine calls back into mumps using call-in mechanism.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",5)
    2. The external application should never call exit() unless it has called
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",6)
       ydb_exit() previously. YottaDB internally installs an exit handler that
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",7)
       should never be bypassed.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",8)
    3. The external application should never use any signals when YottaDB is
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",9)
       active since YottaDB reserves them for its internal use. YottaDB provides
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",10)
       the ability to handle SIGUSR1 within M. An interface is provided by
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",11)
       YottaDB for timers.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",12)
    4. YottaDB recommends the use of ydb_malloc() and ydb_free() for memory
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",13)
       management by C code that executes in a YottaDB process space for
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",14)
       enhanced performance and improved debugging. Always use ydb_malloc to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",15)
       allocate returns for pointer types to prevent memory leaks.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",16)
    5. YottaDB performs device input using the read() system service. UNIX
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",17)
       documentation recommends against mixing this type of input with
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",18)
       buffered input services in the fgets() family and ignoring this
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",19)
       recommendation is likely to cause loss of input that is difficult to
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",20)
       diagnose and understand.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","RULES_TO_FOLLOW_IN_CALL-INS",21)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS")
Standalone_Programs
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",1)
   Standalone Programs
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",3)
   All external C functions that use call-ins should include the header file
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",4)
   libyottadb.h that defines various types and provides signatures of
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",5)
   call-in functions. To avoid potential size mismatches with the parameter
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",6)
   types, YottaDB strongly recommends that ydb_*_t types defined in libyottadb.h
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",7)
   be used instead of the native types (int, float, char, etc).
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",8)

^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",9)
   To use call-ins from a standalone C program, it is necessary that the YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",10)
   runtime library (libyottadb.so) is explicitly linked into the program. If
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",11)
   call-ins are used from an External Call function (which in turn was called
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",12)
   from YottaDB through the existing external call mechanism), the External Call
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",13)
   library does not need to be linked explicitly with libyottadb.so since YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",14)
   would have already loaded it.
^HELP("s","INTEGRATE_EXTERNAL","s","CALL-INS","s","STANDALONE_PROGRAMS",15)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY")
Create_Shareable_Library
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",1)
   Create Shareable Library
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",2)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",3)
   The method of creating a shareable library varies by the operating system.
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",4)
   The following examples illustrate the commands on an IBM pSeries (formerly
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",5)
   RS/6000) AIX system.
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",6)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",7)
   Example:
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",8)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",9)
   $ cat increment.c
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",10)
   int increment(int count, float *invar, float *outvar)
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",11)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",12)
       *outvar=*invar+1.0;
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",13)
       return 0;
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",14)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",15)
   $ cat decrement.c
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",16)
   int decrement(int count, float *invar, float *outvar)
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",17)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",18)
        *outvar=*invar-1.0;
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",19)
        return 0;
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",20)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",21)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",22)
   On IBM pSeries AIX:
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",23)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",24)
   Example:
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",25)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",26)
   $ cc -c -I$ydb_dist increment.c decrement.c
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",27)
   $ ld -o libcrement.so increment.o decrement.o -G -bexpall -bnoentry -bh:4 -lc
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",28)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",29)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",30)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",31)
   Refer to the AIX V4.2 documentation of the ld(1) AIX command for
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",32)
   information on shareable libraries under AIX V4.2.
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",33)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",34)
   On Linux x86:
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",35)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",36)
   Example:
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",37)

^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",38)
   % gcc -c -fPIC -I$ydb_dist increment.c decrement.c
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",39)
   % gcc -o libcrement.so -shared increment.o decrement.o
^HELP("s","INTEGRATE_EXTERNAL","s","CREATE_SHAREABLE_LIBRARY",40)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS")
External_Calls
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",1)
   External Calls
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",3)
   The functions in programs increment and decrement are now available to
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",4)
   YottaDB through the shareable library libcrement.sl or libcrement.so, or
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",5)
   though the DLL as libcrement.dll, depending on the specific platform. The
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",6)
   suffix .sl is used throughout the following examples to represent .sl,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",7)
   .so, or .dll. Be sure to use the appropriate suffix for your platform.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",8)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",9)
   YottaDB uses an "external call table" to map the typeless data of M into the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",10)
   typed data of C, and vice versa. The external call table has a first line
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",11)
   containing the pathname of the shareable library file followed by one or
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",12)
   more specification lines in the following format:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",13)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",14)
   entryref: return-value routine-name (parameter, parameter, ... ) [: SIGSAFE]
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",15)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",16)
   The optional case-insensitive keyword SIGSAFE following the parameter list
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",17)
   specifies the external call does not create its own signal handlers; this
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",18)
   allows YottaDB to avoid burdensome signal handler coordination for the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",19)
   external call. By default, YottaDB saves and restores signal setups for
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",20)
   external calls.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",21)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",22)
   entryref is an M entryref, return-value is ydb_long_t, ydb_status_t, or
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",23)
   void, and parameters are in the format:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",24)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",25)
   direction:type [num]
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",26)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",27)
   where [num] indicates a pre-allocation value explained later in this
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",28)
   chapter.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",29)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",30)
   Legal directions are I, O, or IO for input, output, or input/output,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",31)
   respectively.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",32)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",33)
   The following table describes the legal types defined in the C header file
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",34)
   $ydb_dist/libyottadb.h:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",35)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",36)
   Type : Usage
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",37)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",38)
   void: Specifies that the function does not return a value.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",39)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",40)
   ydb_status_t : Type int. If the function returns zero (0), then the call
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",41)
   was successful. If it returns a non-zero value, YottaDB will signal an error
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",42)
   upon returning to M.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",43)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",44)
   ydb_long_t : 32-bit signed integer on 32-bit platforms and 64-bit signed
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",45)
   integer on 64-bit platforms.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",46)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",47)
   ydb_ulong_t : 32-bit unsigned integer on 32-bit platforms and 64-bit
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",48)
   signed integer on 64-bit platforms.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",49)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",50)
   ydb_long_t* : For passing a pointer to long [integers].
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",51)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",52)
   ydb_float_t* : For passing a pointer to floating point numbers.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",53)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",54)
   ydb_double_t* : Same as above, but double precision.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",55)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",56)
   ydb_char_t*: For passing a "C" style string - null terminated.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",57)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",58)
   ydb_char_t** : For passing a pointer to a "C" style string.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",59)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",60)
   ydb_string_t* : For passing a structure in the form {int length;char
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",61)
   *address}. Useful for moving blocks of memory to or from YottaDB.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",62)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",63)
   ydb_pointertofunc_t : For passing callback function pointers.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",64)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",65)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",66)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",67)
   If an external call's function argument is defined in the external call
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",68)
   table, YottaDB allows invoking that function without specifying a value of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",69)
   the argument. All non-trailing and output-only arguments arguments which
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",70)
   do not specify a value translate to the following default values in C:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",71)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",72)
     o All numeric types: 0
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",73)
     o ydb_char_t * and ydb_char_t **: Empty string
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",74)
     o ydb_string_t *: A structure with 'length' field matching the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",75)
       preallocation size and 'address' field being a NULL pointer.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",76)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",77)
   In the mathpak package example, the following invocation translate inval
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",78)
   to the default value, that is, 0.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",79)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",80)
   YDB>do &mathpak.increment(,.outval)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",81)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",82)
   If an external call's function argument is defined in the external call
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",83)
   table and that function is invoked without specifying the argument, ensure
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",84)
   that the external call function appropriately handles the missing
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",85)
   argument. As a good programming practice, always ensure that count of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",86)
   arguments defined in the external call table matches the function
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",87)
   invocation.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",88)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",89)
   libyottadb.h also includes definitions for the following entry points
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",90)
   exported from libyottadb:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",91)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",92)
   void ydb_hiber_start(ydb_uint_t mssleep);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",93)
   void ydb_hiber_start_wait_any(ydb_uint_t mssleep)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",94)
   void ydb_start_timer(ydb_tid_t tid, ydb_int_t time_to_expir, void (*handler)(), ydb_int_t hdata_len, void \*hdata);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",95)
   void ydb_cancel_timer(ydb_tid_t tid);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",96)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",97)
   where:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",98)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",99)
     * mssleep - milliseconds to sleep
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",100)
     * tid - unique timer id value
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",101)
     * time_to_expir - milliseconds until timer drives given handler
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",102)
     * handler - function pointer to handler to be driven
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",103)
     * hdata_len - 0 or length of data to pass to handler as a parameter
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",104)
     * hdata - NULL or address of data to pass to handler as a parameter
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",105)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",106)
   ydb_hiber_start() always sleeps until the time expires;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",107)
   ydb_hiber_start_wait_any() sleeps until the time expires or an interrupt
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",108)
   by any signal (including another timer). ydb_start_timer() starts a timer
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",109)
   but returns immediately (no sleeping) and drives the given handler when
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",110)
   time expires unless the timer is canceled.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",111)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",112)
   **Important**
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",113)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",114)
   YottaDB continues to support the xc_* and gtm_* equivalent types and routines
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",115)
   of ydb_* for upward compatibility by also keeping the gtmxc_types.h header file
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",116)
   to contain that compatibility. gtmxc_types.h explicitly marks the xc_*
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",117)
   equivalent types as deprecated. Note also that gtmxc_types.h includes libyottadb.h.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",118)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",119)
   The first parameter of each called routine is an int (for example, int
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",120)
   argc in decrement.c and increment.c) that specifies the number of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",121)
   parameters passed. This parameter is implicit and only appears in the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",122)
   called routine. It does not appear in the call table specification, or in
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",123)
   the M invocation. If there are no explicit parameters, the call table
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",124)
   specification will have a zero (0) value because this value does not
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",125)
   include itself in the count. If there are fewer actual parameters than
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",126)
   formal parameters, the call is determined from the parameters specified by
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",127)
   the values supplied by the M program. The remaining parameters are
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",128)
   undefined. If there are more actual parameters than formal parameters,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",129)
   YottaDB reports an error.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",130)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",131)
   There may be only a single occurrence of the type ydb_status_t for each
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",132)
   entryref.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS",133)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM")
Callback_Mechanism
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",1)
   Callback Mechanism
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",2)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",3)
   YottaDB exposes certain functions that are internal to the YottaDB runtime
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",4)
   library for the external calls via a callback mechanism. While making an
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",5)
   external call, YottaDB populates and exposes a table of function pointers
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",6)
   containing addresses to call-back functions.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",7)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",8)
 +-----------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",9)
 |Index|      Function      |   Argument   |   Type   |      Description       |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",10)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",11)
 |0    |hiber_start         |              |          |sleep for a specified   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",12)
 |     |                    |              |          |time                    |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",13)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",14)
 |     |                    |slp_time      |integer   |milliseconds to sleep   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",15)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",16)
 |     |                    |              |          |sleep for a specified   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",17)
 |1    |hiber_start_wait_any|              |          |time or until any       |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",18)
 |     |                    |              |          |interrupt, whichever    |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",19)
 |     |                    |              |          |comes first             |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",20)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",21)
 |     |                    |slp_time      |integer   |milliseconds to sleep   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",22)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",23)
 |     |                    |              |          |start a timer and invoke|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",24)
 |2    |start_timer         |              |          |a handler function when |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",25)
 |     |                    |              |          |the timer expires       |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",26)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",27)
 |     |                    |              |          |unique user specified   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",28)
 |     |                    |tid           |integer   |identifier for this     |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",29)
 |     |                    |              |          |timer                   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",30)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",31)
 |     |                    |time_to_expire|integer   |milliseconds before     |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",32)
 |     |                    |              |          |handler is invoked      |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",33)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",34)
 |     |                    |              |pointer to|specifies the entry of  |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",35)
 |     |                    |handler       |function  |the handler function to |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",36)
 |     |                    |              |          |invoke                  |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",37)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",38)
 |     |                    |              |          |length of data to be    |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",39)
 |     |                    |hlen          |integer   |passed via the hdata    |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",40)
 |     |                    |              |          |argument                |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",41)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",42)
 |     |                    |hdata         |pointer to|data (if any) to pass to|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",43)
 |     |                    |              |char      |the handler function    |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",44)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",45)
 |     |                    |              |          |stop a timer previously |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",46)
 |3    |cancel_timer        |              |          |started with            |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",47)
 |     |                    |              |          |start_timer(), if it has|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",48)
 |     |                    |              |          |not yet expired         |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",49)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",50)
 |     |                    |              |          |unique user specified   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",51)
 |     |                    |tid           |integer   |identifier of the timer |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",52)
 |     |                    |              |          |to cancel               |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",53)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",54)
 |4    |gtm_malloc          |              |          |allocates process memory|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",55)
 |     |                    |              |          |from the heap           |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",56)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",57)
 |     |                    |<return-value>|pointer to|address of the allocated|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",58)
 |     |                    |              |void      |space                   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",59)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",60)
 |     |                    |              |32-bit    |                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",61)
 |     |                    |              |platforms:|                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",62)
 |     |                    |              |32-bit    |                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",63)
 |     |                    |              |unsigned  |bytes of space to       |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",64)
 |     |                    |              |integer   |allocate. This has the  |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",65)
 |     |                    |space_needed  |          |same signature as the   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",66)
 |     |                    |              |64-bit    |system malloc() call.   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",67)
 |     |                    |              |platforms:|                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",68)
 |     |                    |              |64-bit    |                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",69)
 |     |                    |              |unsigned  |                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",70)
 |     |                    |              |integer   |                        |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",71)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",72)
 |     |                    |              |          |return memory previously|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",73)
 |5    |gtm_free            |              |          |allocated with          |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",74)
 |     |                    |              |          |gtm_malloc()            |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",75)
 |-----+--------------------+--------------+----------+------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",76)
 |     |                    |              |pointer to|address of the          |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",77)
 |     |                    |free_address  |void      |previously allocated    |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",78)
 |     |                    |              |          |space                   |
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",79)
 +-----------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",80)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",81)
   The external routine can access and invoke a call-back function in any of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",82)
   the following mechanisms:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",83)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",84)
     * While making an external call, YottaDB sets the environment variable
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",85)
       ydb_callin_start to point to a string containing the start address
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",86)
       (decimal integer value) of the table described above. The external
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",87)
       routine needs to read this environment variable, convert the string
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",88)
       into an integer value and should index into the appropriate entry to
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",89)
       call the appropriate YottaDB function.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",90)
     * YottaDB also provides an input-only parameter type ydb_pointertofunc_t
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",91)
       that can be used to obtain call-back function pointers via parameters
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",92)
       in the external routine. If a parameter is specified as
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",93)
       I:ydb_pointertofunc_t and if a numeric value (between 0-5) is passed
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",94)
       for this parameter in M, YottaDB interprets this value as the index into
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",95)
       the callback table and passes the appropriate callback function
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",96)
       pointer to the external routine.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",97)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",98)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",99)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",100)
   YottaDB strongly discourages the use of signals, especially SIGALARM, in user
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",101)
   written C functions. YottaDB assumes that it has complete control over any
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",102)
   signals that occur and depends on that behavior for recovery if anything
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",103)
   should go wrong. The use of exposed timer APIs should be considered for
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",104)
   timer needs.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","CALLBACK_MECHANISM",105)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS")
Encryption_Extensions
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",1)
   Encryption Extensions
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",3)
   To support Database Encryption, YottaDB provides a reference implementation
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",4)
   which resides in $ydb_dist/plugin/gtmcrypt.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",5)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",6)
   The reference implementation includes:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",7)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",8)
     * A $ydb_dist/plugin/gtmcrypt sub-directory with all source files and
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",9)
       scripts. The scripts include those needed to build/install
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",10)
       libgtmcrypt.so and "helper" scripts, for example, add_db_key.sh (see
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",11)
       below).
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",12)
     * The plugin interface that YottaDB expects is defined in
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",13)
       ydbcrypt_interface.h. Never modify this file - it defines the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",14)
       interface that the plugin must provide.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",15)
     * $ydb_dist/plugin/libgtmcrypt.so is the shared library containing the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",16)
       executables which is dynamically linked by YottaDB and which in turn
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",17)
       calls the encryption packages. If the $ydb_dist/utf8 directory exists,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",18)
       then it should contain a symbolic link to ../plugin.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",19)
     * Source code is provided in the file
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",20)
       $ydb_dist/plugin/gtmcrypt/source.tar which includes build.sh and
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",21)
       install.sh scripts to respectively compile and install libgtmcrypt.so
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",22)
       from the source code.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",23)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",24)
   To support the implementation of a reference implementation, YottaDB provides
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",25)
   additional C structure types (in the gtmxc_types.h file):
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",26)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",27)
     * gtmcrypt_key_t - a datatype that is a handle to a key. The YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",28)
       database engine itself does not manipulate keys. The plug-in keeps the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",29)
       keys, and provides handles to keys that the YottaDB database engine uses
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",30)
       to refer to keys.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",31)
     * ydb_fileid_ptr_t - a pointer to a structure maintained by YottaDB to
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",32)
       uniquely identify a file. Note that a file may have multiple names -
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",33)
       not only as a consequence of absolute and relative path names, but
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",34)
       also because of symbolic links and also because a file system can be
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",35)
       mounted at more than one place in the file name hierarchy. YottaDB needs
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",36)
       to be able to uniquely identify files.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",37)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",38)
   Although not required to be used by a customized plugin implementation,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",39)
   YottaDB provides (and the reference implementation uses) the following
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",40)
   functions for uniquely identifying files:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",41)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",42)
     * ydb_status_t gtm_filename_to_id(ydb_string_t *filename, ydb_fileid_ptr_t
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",43)
       *fileid) - function that takes a file name and provides the file id
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",44)
       structure for that file.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",45)
     * ydb_status_t gtm_is_file_identical(ydb_fileid_ptr_t fileid1,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",46)
       ydb_fileid_ptr_t fileid2) - function that determines whether two file
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",47)
       ids map to the same file.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",48)
     * gtm_xcfileid_free(ydb_fileid_ptr_t fileid) - function to release a file
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",49)
       id structure.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",50)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",51)
   Mumps, MUPIP and DSE processes dynamically link to the plugin interface
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",52)
   functions that reside in the shared library. The functions serve as
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",53)
   software "shims" to interface with an encryption library such as libmcrypt
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",54)
   or libgpgme / libgcrypt.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",55)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",56)
   The plugin interface functions are:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",57)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",58)
     * gtmcrypt_init()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",59)
     * gtmcrypt_getkey_by_name()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",60)
     * gtmcrypt_getkey_by_hash()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",61)
     * gtmcrypt_hash_gen()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",62)
     * gtmcrypt_encode()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",63)
     * gtmcrypt_decode()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",64)
     * gtmcrypt_close()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",65)
     * and gtmcrypt_strerror()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",66)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",67)
   A YottaDB database consists of multiple database files, each of which has its
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",68)
   own encryption key, although you can use the same key for multiple files.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",69)
   Thus, the gtmcrypt* functions are capable of managing multiple keys for
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",70)
   multiple database files. Prototypes for these functions are in
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",71)
   ydbcrypt_interface.h.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",72)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",73)
   The core plugin interface functions, all of which return a value of type
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",74)
   ydb_status_t are:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",75)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",76)
     * gtmcrypt_init() performs initialization. If the environment variable
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",77)
       $ydb_passwd exists and has an empty string value, YottaDB calls
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",78)
       gtmcrypt_init() before the first M program is loaded; otherwise it
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",79)
       calls gtmcrypt_init() when it attempts the first operation on an
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",80)
       encrypted database file.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",81)
     * Generally, gtmcrypt_getkey_by_hash or, for MUPIP CREATE,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",82)
       gtmcrypt_getkey_by_name perform key acquisition, and place the keys
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",83)
       where gtmcrypt_decode() and gtmcrypt_encode() can find them when they
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",84)
       are called.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",85)
     * Whenever YottaDB needs to decode a block of bytes, it calls
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",86)
       gtmcrypt_decode() to decode the encrypted data. At the level at which
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",87)
       YottaDB database encryption operates, it does not matter what the data is
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",88)
       - numeric data, string data whether in M or UTF-8 mode and whether or
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",89)
       not modified by a collation algorithm. Encryption and decryption
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",90)
       simply operate on a series of bytes.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",91)
     * Whenever YottaDB needs to encode a block of bytes, it calls
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",92)
       gtmcrypt_encode() to encode the data.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",93)
     * If encryption has been used (if gtmcrypt_init() was previously called
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",94)
       and returned success), YottaDB calls gtmcrypt_close() at process exit and
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",95)
       before generating a core file. gtmcrypt_close() must erase keys in
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",96)
       memory to ensure that no cleartext keys are visible in the core file.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",97)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",98)
   More detailed descriptions follow.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",99)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",100)
     * gtmcrypt_key_t *gtmcrypt_getkey_by_name(ydb_string_t *filename) -
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",101)
       MUPIP CREATE uses this function to get the key for a database file.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",102)
       This function searches for the given filename in the memory key ring
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",103)
       and returns a handle to its symmetric cipher key. If there is more
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",104)
       than one entry for the given filename , the reference implementation
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",105)
       returns the entry matching the last occurrence of that filename in the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",106)
       master key file.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",107)
     * ydb_status_t gtmcrypt_hash_gen(gtmcrypt_key_t *key, ydb_string_t
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",108)
       *hash) - MUPIP CREATE uses this function to generate a hash from the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",109)
       key then copies that hash into the database file header. The first
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",110)
       parameter is a handle to the key and the second parameter points to
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",111)
       256 byte buffer. In the event the hash algorithm used provides hashes
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",112)
       smaller than 256 bytes, gtmcrypt_hash_gen() must fill any unused space
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",113)
       in the 256 byte buffer with zeros.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",114)
     * gtmcrypt_key_t *gtmcrypt_getkey_by_hash(ydb_string_t *hash) - YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",115)
       uses this function at database file open time to obtain the correct
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",116)
       key using its hash from the database file header. This function
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",117)
       searches for the given hash in the memory key ring and returns a
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",118)
       handle to the matching symmetric cipher key. MUPIP LOAD, MUPIP
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",119)
       RESTORE, MUPIP EXTRACT, MUPIP JOURNAL and MUPIP BACKUP -BYTESTREAM all
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",120)
       use this to find keys corresponding to the current or prior databases
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",121)
       from which the files they use for input were derived.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",122)
     * ydb_status_t gtmcrypt_encode(gtmcrypt_key_t *key, ydb_string_t *inbuf,
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",123)
       ydb_string_t *outbuf) and ydb_status_t gtmcrypt_decode(gtmcrypt_key_t
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",124)
       *key, ydb_string_t *inbuf, ydb_string_t *outbuf)- YottaDB uses these
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",125)
       functions to encode and decode data. The first parameter is a handle
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",126)
       to the symmetric cipher key, the second a pointer to the block of data
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",127)
       to encode or decode, and the third a pointer to the resulting block of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",128)
       encoded or decoded data. Using the appropriate key (same key for a
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",129)
       symmetric cipher), gtmcrypt_decode() must be able to decode any data
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",130)
       buffer encoded by gtmcrypt_encode(), otherwise the encrypted data is
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",131)
       rendered unrecoverable.7 As discussed earlier, YottaDB requires the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",132)
       encrypted and cleartext versions of a string to have the same length.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",133)
     * char *gtmcrypt_strerror() - YottaDB uses this function to retrieve
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",134)
       addtional error context from the plug-in after the plug-in returns an
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",135)
       error status. This function returns a pointer to additional text
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",136)
       related to the last error that occurred. YottaDB displays this text as
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",137)
       part of an error report. In a case where an error has no additional
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",138)
       context or description, this function returns a null string.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",139)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",140)
   The complete source code for reference implementations of these functions
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",141)
   is provided, licensed under the same terms as YottaDB. You are at liberty to
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",142)
   modify them to suit your specific YottaDB database encryption needs. Check
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",143)
   your YottaDB license if you wish to consider redistributing your changes to
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",144)
   others.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",145)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",146)
   For more information and examples, refer to the Database Encryption
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",147)
   Technical Bulletin.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","ENCRYPTION_EXTENSIONS",148)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES")
Examples
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",1)
   Examples
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",2)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",3)
   foo: void bar (I:ydb_float_t*, O:ydb_float_t*)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",4)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",5)
   There is one external call table for each package. The environment
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",6)
   variable "ydb_xc" must name the external call table file for the default
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",7)
   package. External call table files for packages other than the default
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",8)
   must be identified by environment variables of the form "ydb_xc_name".
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",9)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",10)
   The first of the external call tables is the location of the shareable
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",11)
   library. The location can include environment variable names.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",12)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",13)
   Example:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",14)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",15)
   % echo $ydb_xc_mathpak
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",16)
   /user/joe/mathpak.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",17)
   % echo lib /usr/
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",18)
   % cat mathpak.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",19)
   $lib/mathpak.sl
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",20)
   exp: ydb_status_t xexp(I:ydb_float_t*, O:ydb_float_t*)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",21)
   % cat exp.c
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",22)
   ...
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",23)
   int xexp(count, invar, outvar)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",24)
   int count;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",25)
   float *invar;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",26)
   float *outvar;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",27)
          {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",28)
           ...
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",29)
          }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",30)
   % gtm
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",31)
   ...
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",32)
   YDB>d &mathpak.exp(inval,.outval)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",33)
   YDB>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",34)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",35)
   Example : For preallocation:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",36)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",37)
   % echo $ydb_xc_extcall
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",38)
   /usr/joe/extcall.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",39)
   % cat extcall.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",40)
   /usr/lib/extcall.sl
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",41)
   prealloc: void gtm_pre_alloc_a(O:gtm_char_t *[12])
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",42)
   % cat extcall.c
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",43)
   #include <stdio.h>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",44)
   #include <string.h>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",45)
   #include "gtmxc_types.h"
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",46)
   void gtm_pre_alloc_a (int count, char *arg_prealloca)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",47)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",48)
       strcpy(arg_prealloca, "New Message");
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",49)
       return;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",50)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",51)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",52)
   Example : for call-back mechanism
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",53)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",54)
   % echo $ydb_xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",55)
   /usr/joe/callback.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",56)
   % cat /usr/joe/callback.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",57)
   $MYLIB/callback.sl
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",58)
   init:     void   init_callbacks()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",59)
   tstslp:  void   tst_sleep(I:ydb_long_t)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",60)
   strtmr: void   start_timer(I:ydb_long_t, I:ydb_long_t)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",61)
   % cat /usr/joe/callback.c
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",62)
   #include <stdio.h>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",63)
   #include <stdlib.h>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",64)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",65)
   #include "gtmxc_types.h"
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",66)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",67)
   void **functable;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",68)
   void (*setup_timer)(int , int , void (*)() , int , char *);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",69)
   void (*cancel_timer)(int );
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",70)
   void (*sleep_interrupted)(int );
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",71)
   void (*sleep_uninterrupted)(int );
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",72)
   void* (*malloc_fn)(int);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",73)
   void (*free_fn)(void*);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",74)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",75)
   void  init_callbacks (int count)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",76)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",77)
      char *start_address;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",78)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",79)
      start_address = (char *)getenv("ydb_callin_start");
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",80)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",81)
      if (start_address == (char *)0)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",82)
      {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",83)
              fprintf(stderr,"ydb_callin_start is not set\n");
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",84)
         return;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",85)
      }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",86)
      functable = (void **)atoi(start_address);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",87)
      if (functable == (void **)0)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",88)
      {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",89)
        perror("atoi : ");
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",90)
        fprintf(stderr,"addresses defined by ydb_callin_start not a number\n");
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",91)
        return;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",92)
      }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",93)
      sleep_uninterrupted = (void (*)(int )) functable[0];
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",94)
      sleep_interrupted = (void (*)(int )) functable[1];
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",95)
      setup_timer = (void (*)(int , int, void (*)(), int, char *)) functable[2];
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",96)
      cancel_timer = (void (*)(int )) functable[3];
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",97)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",98)
      malloc_fn = (void* (*)(int)) functable[4];
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",99)
      free_fn = (void (*)(void*)) functable[5];
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",100)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",101)
      return;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",102)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",103)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",104)
   void  sleep (int count, int time)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",105)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",106)
      (*sleep_uninterrupted)(time);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",107)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",108)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",109)
   void timer_handler ()
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",110)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",111)
      fprintf(stderr,"Timer Handler called\n");
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",112)
      /* Do something */
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",113)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",114)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",115)
   void  start_timer (int count, int time_to_int, int time_to_sleep)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",116)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",117)
      (*setup_timer)((int )start_timer, time_to_int, timer_handler, 0, 0);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",118)
      return;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",119)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",120)
   void* xmalloc (int count)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",121)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",122)
   return (*malloc_fn)(count);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",123)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",124)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",125)
   void  xfree(void* ptr)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",126)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",127)
      (*free_fn)(ptr);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",128)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",129)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",130)
   Example:gtm_malloc/gtm_free callbacks using ydb_pointertofunc_t
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",131)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",132)
   % echo $ydb_xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",133)
   /usr/joe/callback.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",134)
   % cat /usr/joe/callback.xc
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",135)
   /usr/lib/callback.sl
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",136)
   init: void init_callbacks(I:ydb_pointertofunc_t, I:ydb_pointertofunc_t)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",137)
   % gtm
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",138)
   YDB> do &.init(4,5)
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",139)
   YDB>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",140)
   % cat /usr/joe/callback.c
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",141)
   #include <stdio.h>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",142)
   #include <stdlib.h>
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",143)
   #include "gtmxc_types.h"
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",144)
   void* (*malloc_fn)(int);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",145)
   void (*free_fn)(void*);
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",146)
   void init_callbacks(int count, void* (*m)(int), void (*f)(void*))
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",147)
   {
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",148)
       malloc_fn = m;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",149)
       free_fn = f;
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",150)
   }
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","EXAMPLES",151)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS")
Limitations
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",1)
   Limitations
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",3)
   Since both YottaDB runtime environment and the external C functions execute
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",4)
   in the same process space, the following restrictions apply to the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",5)
   external functions:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",6)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",7)
    1. YottaDB is designed to use signals and has signal handlers that must
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",8)
       function for YottaDB to operate properly. The timer related call-backs
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",9)
       should be used in place of any library or system call which uses
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",10)
       SIGALRM such as sleep(). Use of signals by external call code may
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",11)
       cause YottaDB to fail.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",12)
    2. Use of the YottaDB provided malloc and free, creates an integrated heap
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",13)
       management system, which has a number of debugging tools. YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",14)
       recommends the usage of gtm_malloc/gtm_free in the external functions
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",15)
       that provides better debugging capability in case memory management
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",16)
       problems occur with external calls.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",17)
    3. Use of exit system call in external functions is strongly discouraged.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",18)
       Since YottaDB uses exit handlers to properly shutdown runtime environment
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",19)
       and any active resources, the system call _exit should never be used
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",20)
       in external functions.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",21)
    4. YottaDB uses timer signals so often that the likelihood of a system call
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",22)
       being interrupted is high. So, all system calls in the external
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",23)
       program can return EINTR if interrupted by a signal.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",24)
    5. Handler functions invoked with start_timer must not invoke services
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",25)
       that are identified by the Operating System documentation as unsafe
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",26)
       for signal handlers (or not identified as safe) - consult the system
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",27)
       documentation or man pages for this information. Such services cause
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",28)
       non-deterministic failures when they are interrupted by a function
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",29)
       that then attempts to call them, wrongly assuming they are reentrant.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","LIMITATIONS",30)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION")
Pre-allocation
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",1)
   Pre-allocation
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",2)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",3)
   The definition of parameters passed by reference with direction output can
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",4)
   include specification of a pre-allocation value. This is the number of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",5)
   units of memory that the user wants YottaDB to allocate before passing the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",6)
   parameter to the external routine. For example, in the case of type
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",7)
   ydb_char_t *, the pre-allocation value would be the number of bytes to be
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",8)
   allocated before the call to the external routine.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",9)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",10)
   Specification of a pre-allocation value should follow these rules:
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",11)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",12)
     * Pre-allocation is an unsigned integer value specifying the number of
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",13)
       bytes to be allocated on the system heap with a pointer passed into
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",14)
       the external call.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",15)
     * Pre-allocating on a type with a direction of input or input/output
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",16)
       results in a YottaDB error.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",17)
     * Pre-allocation is meaningful only on types ydb_char_t * and
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",18)
       ydb_string_t *. On all other types the pre-allocation value specified
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",19)
       will be ignored and the parameter will be allocated a default value
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",20)
       for that type. With ydb_string_t * arguments make sure to set the
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",21)
       'length' field appropriately before returning control to YottaDB. On
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",22)
       return from the external call, YottaDB uses the value in the length field
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",23)
       as the length of the returned value, in bytes.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",24)
     * If the user does not specify any value, then the default
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",25)
       pre-allocation value would be assigned to the parameter.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",26)
     * Specification of pre-allocation for "scalar" types (parameters which
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",27)
       are passed by value) is an error.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",28)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",29)
   **Important**
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",30)

^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",31)
   Pre-allocation is optional for all output-only parameters except
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",32)
   ydb_string_t * and ydb_char_t *. Pre-allocation yields better management
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",33)
   of memory for the external call. When an external call exceeds its
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",34)
   specified preallocation (ydb_string_t * or ydb_char_t * output), YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",35)
   produces the EXCEEDSPREALLOC error. In the case the user allocates space
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",36)
   for the character pointer inside a ydb_string_t * type output parameter, a
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",37)
   length field longer than the specified preallocate size for the output
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",38)
   parameter does not cause an EXCEEDSPREALLOC error.
^HELP("s","INTEGRATE_EXTERNAL","s","EXTERNAL_CALLS","s","PRE-ALLOCATION",39)

^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION")
Introduction
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",1)
   Introduction
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",2)

^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",3)
   Application code written in M can call application code written in C (or
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",4)
   which uses a C compatible call) and vice versa.
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",5)

^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",6)
   **Note**
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",7)

^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",8)
   This C code shares the process address space with the YottaDB run-time
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",9)
   library and M application code. Bugs in C code may result in difficult to
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",10)
   diagnose failures to occur in places not obviously related to the cause of
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",11)
   the failure.
^HELP("s","INTEGRATE_EXTERNAL","s","INTRODUCTION",12)

^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS")
Type_Limits_for_Call-ins_and_Call-outs
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",1)
   Type Limits for Call-ins and Call-outs
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",2)

^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",3)
   Depending on the direction (I, O, or IO) of a particular type, both
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",4)
   call-ins and call-outs may transfer a value in two directions as follows:
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",5)

^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",6)
   Call-out: YottaDB -> C -> YottaDB       Call-in:     C -> YottaDB -> C
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",7)
               |     |     |                      |     |     |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",8)
               '-----'-----'                      '-----'-----'
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",9)
                  1     2                            2     1
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",10)

^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",11)
   In the following table, the YottaDB->C limit applies to 1 and the C->YottaDB
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",12)
   limit applies to 2. In other words, YottaDB->C applies to I direction for
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",13)
   call-outs and O direction for call-ins and C->YottaDB applies to I direction
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",14)
   for call-ins and O direction for call-outs.
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",15)

^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",16)
   +------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",17)
   |                |        YottaDB->C         |        C->YottaDB         |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",18)
   |----------------+---------------------------+---------------------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",19)
   |      Type      | Precision |     Range     | Precision |     Range     |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",20)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",21)
   | ydb_int_t,     | Full      | [-2^31+1,     | Full      | [-2^31,       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",22)
   | ydb_int_t *    |           | 2^31-1]       |           | 2^31-1]       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",23)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",24)
   | ydb_uint_t,    | Full      | [0, 2^32-1]   | Full      | [0, 2^32-1]   |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",25)
   | ydb_uint_t *   |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",26)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",27)
   | ydb_long_t,    |           | [-2^63+1,     |           | [-2^63,       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",28)
   | ydb_long_t *   | 18 digits | 2^63-1]       | 18 digits | 2^63-1]       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",29)
   | (64-bit)       |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",30)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",31)
   | ydb_long_t,    |           | [-2^31+1,     |           | [-2^31,       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",32)
   | ydb_long_t *   | Full      | 2^31-1]       | Full      | 2^31-1]       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",33)
   | (32-bit)       |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",34)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",35)
   | ydb_ulong_t,   |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",36)
   | ydb_ulong_t *  | 18 digits | [0, 2^64-1]   | 18 digits | [0, 2^64-1]   |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",37)
   | (64-bit)       |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",38)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",39)
   | ydb_ulong_t,   |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",40)
   | ydb_ulong_t *  | Full      | [0, 2^32-1]   | Full      | [0, 2^32-1]   |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",41)
   | (32-bit)       |           |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",42)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",43)
   | ydb_float_t,   | 6-9       | [1E-43,       | 6 digits  | [1E-43,       |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",44)
   | ydb_float_t *  | digits    | 3.4028235E38] |           | 3.4028235E38] |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",45)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",46)
   | ydb_double_t,  | 15-17     | [1E-43, 1E47] | 15 digits | [1E-43, 1E47] |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",47)
   | ydb_double_t * | digits    |               |           |               |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",48)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",49)
   | ydb_char_t *   | N/A       | ["", 1MiB]    | N/A       | ["", 1MiB]    |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",50)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",51)
   | ydb_char_t **  | N/A       | ["", 1MiB]    | N/A       | ["", 1MiB]    |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",52)
   |----------------+-----------+---------------+-----------+---------------|
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",53)
   | ydb_string_t * | N/A       | ["", 1MiB]    | N/A       | ["", 1MiB]    |
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",54)
   +------------------------------------------------------------------------+
^HELP("s","INTEGRATE_EXTERNAL","s","TYPE_LIMITS_FOR_CALL-INS_AND_CALL-OUTS",55)

^HELP("s","INTERNATIONALIZATION")
Internationalization
^HELP("s","INTERNATIONALIZATION",1)
   Internationalization
^HELP("s","INTERNATIONALIZATION",2)

^HELP("s","INTERNATIONALIZATION",3)
   This chapter describes YottaDB facilities for applications using characters
^HELP("s","INTERNATIONALIZATION",4)
   encoded in other than eight-bit bytes (octets). Before continuing with use
^HELP("s","INTERNATIONALIZATION",5)
   of UTF-8 features, you will need to ensure that your system has installed
^HELP("s","INTERNATIONALIZATION",6)
   and configured the needed infrastructure for languages you wish to
^HELP("s","INTERNATIONALIZATION",7)
   support, including International Components for Unicode (ICU / libicu),
^HELP("s","INTERNATIONALIZATION",8)
   UTF-8 locale(s), and terminal emulators with appropriate fonts. This
^HELP("s","INTERNATIONALIZATION",9)
   chapter addresses the specific issues of defining alternative collation
^HELP("s","INTERNATIONALIZATION",10)
   sequences, and defining unique patterns for use with the pattern match
^HELP("s","INTERNATIONALIZATION",11)
   operator.
^HELP("s","INTERNATIONALIZATION",12)

^HELP("s","INTERNATIONALIZATION",13)
   Alternative collation sequences (or an alternative ordering of strings)
^HELP("s","INTERNATIONALIZATION",14)
   can be defined for global and local variable subscripts. They can be
^HELP("s","INTERNATIONALIZATION",15)
   established for specified globals or for an entire database. The
^HELP("s","INTERNATIONALIZATION",16)
   alternative sequences are defined by a series of routines in an executable
^HELP("s","INTERNATIONALIZATION",17)
   file pointed to by an environment variable. As the collation sequence is
^HELP("s","INTERNATIONALIZATION",18)
   implemented by a user-supplied program, virtually any collation policy may
^HELP("s","INTERNATIONALIZATION",19)
   be implemented. Detailed information on establishing alternative collation
^HELP("s","INTERNATIONALIZATION",20)
   sequences and defining the environment variable is provided in Collation
^HELP("s","INTERNATIONALIZATION",21)
   Sequence Definitions.
^HELP("s","INTERNATIONALIZATION",22)

^HELP("s","INTERNATIONALIZATION",23)
   M has defined pattern classes that serve as arguments to the pattern match
^HELP("s","INTERNATIONALIZATION",24)
   operator. YottaDB supports user definition of additional pattern classes as
^HELP("s","INTERNATIONALIZATION",25)
   well as redefinition of the standard pattern classes. Specific patterns
^HELP("s","INTERNATIONALIZATION",26)
   are defined in a text file that is pointed to by an environment variable.
^HELP("s","INTERNATIONALIZATION",27)
   Pattern classes may be re-defined dynamically. The details of defining
^HELP("s","INTERNATIONALIZATION",28)
   these pattern classes and the environment variable are described in the
^HELP("s","INTERNATIONALIZATION",29)
   section called Match Alternative Patterns.
^HELP("s","INTERNATIONALIZATION",30)

^HELP("s","INTERNATIONALIZATION",31)
   For some languages (such as Chinese), the ordering of strings according to
^HELP("s","INTERNATIONALIZATION",32)
   Unicode(R) code-points (character values) may or may not be the
^HELP("s","INTERNATIONALIZATION",33)
   linguistically or culturally correct ordering. Supporting applications in
^HELP("s","INTERNATIONALIZATION",34)
   such languages requires development of collation modules - YottaDB natively
^HELP("s","INTERNATIONALIZATION",35)
   supports M collation, but does not include pre-built collation modules for
^HELP("s","INTERNATIONALIZATION",36)
   any specific natural language. Therefore, applications that use characters
^HELP("s","INTERNATIONALIZATION",37)
   in Unicode may need to implement their own collation functions.
^HELP("s","INTERNATIONALIZATION",38)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION")
Alternate_Collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",1)
   Alternate Collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",3)
   Each alternative collation sequence requires a set of four user-created
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",4)
   routines--gtm_ac_xform_1 (or gtm_ac_xform), gtm_ac_xback_1 (or
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",5)
   gtm_ac_xback), gtm_ac_version, and gtm_ac_verify. The original and
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",6)
   transformed strings are passed between YottaDB and the user-created routines
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",7)
   using parameters of type gtm_descriptor or gtm32_descriptor. An "include
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",8)
   file" gtm_descript.h, located in the YottaDB distribution directory, defines
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",9)
   gtm_descriptor (used with gtm_ac_xform and gtm_ac_xback) as:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",11)
   typedef struct
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",12)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",13)
       short len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",14)
       short type;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",15)
       void *val;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",16)
   } gtm_descriptor;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",17)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",18)
   **Note**
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",19)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",20)
   On 64-bit UNIX platforms, gtm_descriptor may grow by up to eight (8)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",21)
   additional bytes as a result of compiler padding to meet platform
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",22)
   alignment requirements.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",23)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",24)
   gtm_descript.h defines gtm32_descriptor (used with gtm_xc_xform_1 and
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",25)
   gtm_xc_xback_2) as:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",26)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",27)
   typedef struct
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",28)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",29)
       unsigned int len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",30)
       unsigned int type;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",31)
       void *val;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",32)
   } gtm32_descriptor;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",33)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",34)
   where len is the length of the data, type is set to DSC_K_DTYPE_T
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",35)
   (indicating that this is an M string), and val points to the text of the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",36)
   string.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",37)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",38)
   The interface to each routine is described below.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION",39)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF")
%GBLDEF
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",1)
   %GBLDEF
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",3)
   Use the %GBLDEF utility to get, set, or kill the collation sequence of a
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",4)
   global variable mapped by the current global directory. %GBLDEF cannot
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",5)
   modify the collation sequence for either a global containing data or a
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",6)
   global whose subscripts span multiple regions. To change the collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",7)
   sequence for a global variable that contains data, extract the data, KILL
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",8)
   the variable, change the collation sequence, and reload the data. Use GDE
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",9)
   to modify the collation sequence of a global variable that spans regions.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING")
Assigning
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",1)
   Assigning
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",3)
   To assign a collation sequence to an individual global use the extrinsic
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",4)
   entry point:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",5)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",6)
   set^%GBLDEF(gname,nct,act)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",7)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",8)
   where:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",10)
     * The first argument, gname, is the name of the global. If the global
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",11)
       name appears as a literal, it must be enclosed in quotation marks ("
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",12)
       "). The must be a legal M variable name, including the leading caret
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",13)
       (^).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",14)
     * The second argument, nct, is an integer that determines whether
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",15)
       numeric subscripts are treated as strings. The value is FALSE (0) if
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",16)
       numeric subscripts are to collate before strings, as in standard M,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",17)
       and TRUE (1) if numeric subscripts are to be treated as strings (for
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",18)
       example, where 10 collates before 9).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",19)
     * The third argument, act, is an integer specifying the active collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",20)
       sequence from 0, standard M collation, to 255.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",21)
     * If the global contains data, this function returns a FALSE (0) and
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",22)
       does not modify the existing collation sequence definition.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",23)
     * If the global's subscripts span multiple regions, the function returns
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",24)
       a false (0). Use the global directory (GBLNAME object in GDE) to set
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",25)
       collation characteristics for a global whose subscripts span multiple
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",26)
       regions.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",27)
     * Always execute this function outside of a TSTART/TCOMMIT fence. If
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",28)
       $TLEVEL is non-zero, the function returns a false(0).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",29)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",30)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",31)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",32)
   YDB>kill ^G
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",33)
   YDB>write $select($$set^%GBLDEF("^G",0,3):"ok",1:"failed")
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",34)
   ok
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",35)
   YDB>
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",36)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",37)
   This deletes the global variable ^G, then uses the $$set%GBLDEF as an
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",38)
   extrinsic to set ^G to the collation sequence number 3 with numeric
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",39)
   subscripts collating before strings. Using $$set%GBLDEF as an argument to
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",40)
   $SELECT provides a return value as to whether or not the set was
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",41)
   successful. $SELECT will return a "FAILED" message if the collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",42)
   sequence requested is undefined.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","ASSIGNING",43)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING")
Deleting
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",1)
   Deleting
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",3)
   To delete the collation characteristics currently assigned to a global,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",4)
   use the extrinsic entry point:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",5)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",6)
   kill^%GBLDEF(gname)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",7)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",8)
     o If the global contains data, the function returns a false (0) and does
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",9)
       not modify the global.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",10)
     o If the global's subscript span multiple regions, the function returns
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",11)
       a false (0). Use the global directory (GBLNAME object in GDE) to set
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",12)
       collation characteristics for a global whose subscripts span multiple
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",13)
       regions.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",14)
     o Always execute this function outside of a TSTART/TCOMMIT fence. If
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",15)
       $TLEVEL is non-zero, the function returns a false (0).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","DELETING",16)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING")
Examining
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",1)
   Examining
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",3)
   To examine the collation characteristics currently assigned to a global
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",4)
   use the extrinsic entry point:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",5)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",6)
   get^%GBLDEF(gname[,reg])
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",7)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",8)
   where gname specifies the global variable name. When gname spans multiple
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",9)
   regions, reg specifies a region in the span.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",11)
   This function returns the data associated with the global name as a comma
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",12)
   delimited string having the following pieces:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",13)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",14)
     * A truth-valued integer specifying FALSE (0) if numeric subscripts
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",15)
       collate before strings, as in standard M, and TRUE (1) if numeric
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",16)
       subscripts are handled as strings.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",17)
     * An integer specifying the collation sequence.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",18)
     * An integer specifying the version, or revision level, of the currently
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",19)
       implemented collation sequence.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",20)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",21)
   **Note**
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",22)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",23)
   get^%GBLDEF(gname) returns global specific characteristics, which can
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",24)
   differ from collation characteristics defined for the database file at
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",25)
   MUPIP CREATE time from settings in the global directory.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",26)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",27)
   A "0" return from $$get^%gbldef(gname[,reg]) indicates that the global has
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",28)
   no special characteristics and uses the region default collation, while a
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",29)
   "0,0,0" return indicates that the global is explicitly defined to M
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",30)
   collation.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",31)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",32)
   DSE DUMP -FILEHEADER command displays region collation whenever the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",33)
   collation is other than M standard collation.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",34)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",35)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",36)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",37)
   YDB>Write $$get^%GBLDEF("^G")
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",38)
   1,3,1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",39)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",40)
   This example returns the collation sequence information currently assigned
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",41)
   to the global ^G.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","%GBLDEF","s","EXAMINING",42)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING")
Example_of_Collating_Alphabets_in_Reverse_Order_using
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",1)
   Example of Collating Alphabets in Reverse Order using
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",2)
   gtm_ac_xform_1 and gtm_ac_xback_1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",3)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",4)
   This example creates an alternate collation sequence that collates
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",5)
   alphabets in reverse order. This is in contrast to the standard M
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",6)
   collation that collates alphabets in ascending order.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",7)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",8)
   **Important**
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",10)
   No claim of copyright is made with respect to the code used in this
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",11)
   example. Please do not use the code as-is in a production environment.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",12)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",13)
   Please ensure that you have a correctly configured YottaDB installation,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",14)
   correctly configured environment variables, with appropriate directories
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",15)
   and files.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",16)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",17)
    1. Download col_reverse_32.c from
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",18)
       http://tinco.pair.com/bhaskar/gtm/doc/books/pg/UNIX_manual/col_reverse_32.c.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",19)
       It contain code for transformation routine (gtm_ac_xform_1), reverse
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",20)
       transformation routine (gtm_ac_xback_1) and version control routines
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",21)
       (gtm_ac_version and gtm_ac_verify).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",22)
    2. Save and compile col_reverse_32.c. On x86 GNU/Linux (64-bit Ubuntu
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",23)
       10.10), execute a command like the following:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",24)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",25)
       gcc -c col_reverse_32.c -I$ydb_dist
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",26)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",27)
   **Note**
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",28)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",29)
       The -I$ydb_dist option includes gtmxc_types.h.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",30)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",31)
    3. Create a new shared library or add the routines to an existing one.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",32)
       The following command adds these alternative sequence routines to a
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",33)
       shared library called altcoll.so on x86 GNU/Linux (64-bit Ubuntu
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",34)
       10.10).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",35)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",36)
       gcc -o revcol.so -shared col_reverse_32.o
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",37)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",38)
    4. Set the environment variable ydb_collate_2 to point to the location of
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",39)
       revcol.so. To set the local variable collation to this alternative
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",40)
       collation sequence, set the environment variable ydb_local_collate to
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",41)
       2.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",42)
    5. At the YottaDB prompt, execute the following command:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",43)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",44)
       YDB>Write $SELECT($$set^%GBLDEF("^E",0,2):"OK",1:"FAILED")
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",45)
       OK
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",46)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",47)
    6. Assign the following value to ^E.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",48)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",49)
       YDB>Set ^E("du Pont")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",50)
       YDB>Set ^E("Friendly")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",51)
       YDB>Set ^E("le Blanc")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",52)
       YDB>Set ^E("Madrid")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",53)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",54)
    7. Notice how the subscript of ^E sort in reverse order:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",55)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",56)
       YDB>zwrite ^E
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",57)
       ^G("le Blanc")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",58)
       ^G("du Pont")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",59)
       ^G("Madrid")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",60)
       ^G("Friendly")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_COLLATING_ALPHABETS_IN_REVERSE_ORDER_USING",61)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE")
Example_of_Upper_and_Lower_Case_Alphabetic_Collation_Sequence
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",1)
   Example of Upper and Lower Case Alphabetic Collation Sequence
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",3)
   This example is create an alternate collation sequence that collates upper
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",4)
   and lower case alphabetic characters in such a way that the set of keys
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",5)
   "du Pont," "Friendly," "le Blanc," and "Madrid" collates as:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",6)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",7)
     * du Pont
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",8)
     * Friendly
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",9)
     * le Blanc
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",10)
     * Madrid
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",11)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",12)
   This is in contrast to the standard M collation that orders them as:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",13)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",14)
     * Friendly
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",15)
     * Madrid
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",16)
     * du Pont
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",17)
     * le Blanc
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",18)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",19)
   **Important**
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",20)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",21)
   No claim of copyright is made with respect to the code used in this
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",22)
   example. Please do not use the code as-is in a production environment.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",23)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",24)
   Please ensure that you have a correctly configured YottaDB installation,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",25)
   correctly configured environment variables, with appropriate directories
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",26)
   and files.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",27)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",28)
   Seasoned YottaDB users may want download polish.c used in this example and
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",29)
   proceed directly to Step 5 for compiling and linking instructions. First
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",30)
   time users may want to start from Step 1.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",31)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",32)
    1. Create a new file called polish.c and put the following code:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",33)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",34)
       #include <stdio.h>
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",35)
       #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",36)
       #define COLLATION_TABLE_SIZE     256
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",37)
       #define MYAPPS_SUBSC2LONG        12345678
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",38)
       #define SUCCESS     0
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",39)
       #define FAILURE     1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",40)
       #define VERSION     0
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",41)
       static unsigned char xform_table[COLLATION_TABLE_SIZE] =
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",42)
                 {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",43)
                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",44)
                 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",45)
                 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",46)
                 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",47)
                 64, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",48)
                 95, 97, 99,101,103,105,107,109,111,113,115,117,118,119,120,121,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",49)
                 122, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",50)
                 96, 98,100,102,104,106,108,110,112,114,116,123,124,125,126,127,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",51)
                 128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",52)
                 144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",53)
                 160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",54)
                 176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",55)
                 192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",56)
                 208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",57)
                 224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",58)
                 240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",59)
                 };
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",60)
       static unsigned char inverse_table[COLLATION_TABLE_SIZE] =
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",61)
                 {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",62)
                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",63)
                 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",64)
                 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",65)
                 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",66)
                 64, 65, 97, 66, 98, 67, 99, 68,100, 69,101, 70,102, 71,103, 72,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",67)
                 104, 73,105, 74,106, 75,107, 76,108, 77,109, 78,110, 79,111, 80,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",68)
                 112, 81,113, 82,114, 83,115, 84,116, 85,117, 86,118, 87,119, 88,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",69)
                 120, 89,121, 90,122, 91, 92, 93, 94, 95, 96,123,124,125,126,127,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",70)
                 128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",71)
                 144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",72)
                 160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",73)
                 176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",74)
                 192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",75)
                 208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",76)
                 224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",77)
                 240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",78)
                 };
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",79)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",80)
       Elements in xform_table represent input order for transform. Elements
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",81)
       in inverse_table represent reverse transform for x_form_table.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",82)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",83)
    2. Add the following code for the gtm_ac_xform transformation routine:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",84)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",85)
       long gtm_ac_xform(gtm_descriptor *src, int level, gtm_descriptor *dst, int *dstlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",86)
             {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",87)
                 int n;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",88)
                 unsigned char  *cp, *cpout;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",89)
             #ifdef DEBUG
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",90)
                 char input[COLLATION_TABLE_SIZE], output[COLLATION_TABLE_SIZE];
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",91)
             #endif
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",92)
                 n = src->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",93)
                 if ( n > dst->len)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",94)
                    return MYAPPS_SUBSC2LONG;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",95)
                 cp  = (unsigned char *)src->val;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",96)
             #ifdef DEBUG
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",97)
                 memcpy(input, cp, src->len);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",98)
                 input[src->len] = '\0';
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",99)
             #endif
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",100)
                 cpout = (unsigned char *)dst->val;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",101)
                 while ( n-- > 0 )
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",102)
                    *cpout++ = xform_table[*cp++];
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",103)
                 *cpout = '\0';
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",104)
                 *dstlen = src->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",105)
             #ifdef DEBUG
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",106)
                 memcpy(output, dst->val, dst->len);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",107)
                 output[dst->len] = '\0';
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",108)
                 fprintf(stderr, "\nInput = \n");
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",109)
                 for (n = 0; n < *dstlen; n++ ) fprintf(stderr," %d ",(int )input[n]);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",110)
                 fprintf(stderr, "\nOutput = \n");
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",111)
                 for (n = 0; n < *dstlen; n++ ) fprintf(stderr," %d ",(int )output[n]);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",112)
             #endif
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",113)
                 return SUCCESS;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",114)
             }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",115)
          3. Add the following code for the gtm_ac_xback reverse transformation routine:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",116)
             long gtm_ac_xback(gtm_descriptor *src, int level, gtm_descriptor *dst, int *dstlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",117)
             {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",118)
                 int n;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",119)
                 unsigned char  *cp, *cpout;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",120)
             #ifdef DEBUG
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",121)
                 char input[256], output[256];
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",122)
             #endif
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",123)
                 n = src->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",124)
                 if ( n > dst->len)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",125)
                 return MYAPPS_SUBSC2LONG;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",126)
                 cp  = (unsigned char *)src->val;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",127)
                 cpout = (unsigned char *)dst->val;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",128)
                 while ( n-- > 0 )
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",129)
                    *cpout++ = inverse_table[*cp++];
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",130)
                 *cpout = '\0';
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",131)
                 *dstlen = src->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",132)
             #ifdef DEBUG
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",133)
                 memcpy(input, src->val, src->len);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",134)
                 input[src->len] = '\';
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",135)
                 memcpy(output, dst->val, dst->len);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",136)
                 output[dst->len] = '\0';
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",137)
                 fprintf(stderr, "Input = %s, Output = %s\n",input, output);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",138)
             #endif
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",139)
                 return SUCCESS;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",140)
             }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",141)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",142)
    3. Add code for the version identifier routine (gtm_ac_version) or the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",143)
       verification routine (gtm_ac_verify):
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",144)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",145)
       int gtm_ac_version()
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",146)
             {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",147)
                 return VERSION;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",148)
             }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",149)
             int gtm_ac_verify(unsigned char type, unsigned char ver)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",150)
             {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",151)
                     return !(ver == VERSION);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",152)
             }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",153)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",154)
    4. Save and compile polish.c. On x86 GNU/Linux (64-bit Ubuntu 10.10),
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",155)
       execute a command like the following:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",156)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",157)
       gcc -c polish.c -I$ydb_dist
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",158)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",159)
   **Note**
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",160)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",161)
       The -I$ydb_dist option includes gtmxc_types.h.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",162)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",163)
    5. Create a new shared library or add the above routines to an existing
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",164)
       one. The following command adds these alternative sequence routines to
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",165)
       a shared library called altcoll.so on x86 GNU/Linux (64-bit Ubuntu
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",166)
       10.10).
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",167)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",168)
       gcc -o altcoll.so -shared polish.o
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",169)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",170)
    6. Set $ydb_collate_1 to point to the location of altcoll.so.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",171)
    7. At the YDB> prompt execute the following command:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",172)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",173)
       YDB>Write $SELECT($$set^%GBLDEF("^G",0,1):"OK",1:"FAILED")
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",174)
             OK
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",175)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",176)
       This deletes the global variable ^G, then sets ^G to the collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",177)
       sequence number 1 with numeric subscripts collating before strings.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",178)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",179)
    8. Assign the following value to ^G.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",180)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",181)
       YDB>Set ^G("du Pont")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",182)
       YDB>Set ^G("Friendly")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",183)
       YDB>Set ^G("le Blanc")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",184)
       YDB>Set ^G("Madrid")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",185)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",186)
    9. See how the subscript of ^G order according to the alternative
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",187)
       collation sequence:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",188)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",189)
       YDB>ZWRite ^G
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",190)
       ^G("du Pont")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",191)
       ^G("Friendly")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",192)
       ^G("le Blanc")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",193)
       ^G("Madrid")=1
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","EXAMPLE_OF_UPPER_AND_LOWER_CASE_ALPHABETIC_COLLATION_SEQUENCE",194)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION")
Inverse_Transformation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",1)
   Inverse Transformation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",3)
   This routine returns altered keys to the original subscripts. The syntax
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",4)
   of this routine is:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",5)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",6)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",7)
   long gtm_ac_xback(gtm_descriptor *in, int level, gtm_descriptor *out, int *outlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",8)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",9)
   The arguments of gtm_ac_xback are identical to those of gtm_ac_xform.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",11)
   The syntax of gtm_ac_xback_1 is:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",12)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",13)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",14)
   long gtm_ac_xback_1 ( gtm32_descriptor *src, int level, gtm32_descriptor *dst, int *dstlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",15)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",16)
   The arguments of gtm_ac_xback_1 are identical to those of gtm_ac_xform_1.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",17)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",18)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",19)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",20)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",21)
   #define MYAPP_SUBSC2LONG 12345678
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",22)
   static unsigned char inverse_table[256] =
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",23)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",24)
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",25)
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",26)
   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",27)
   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",28)
   64, 65, 97, 66, 98, 67, 99, 68,100, 69,101, 70,102, 71,103, 72,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",29)
   104, 73,105, 74,106, 75,107, 76,108, 77,109, 78,110, 79,111, 80,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",30)
   112, 81,113, 82,114, 83,115, 84,116, 85,117, 86,118, 87,119, 88,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",31)
   120, 89,121, 90,122, 91, 92, 93, 94, 95, 96,123,124,125,126,127,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",32)
   128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",33)
   144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",34)
   160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",35)
   176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",36)
   192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",37)
   208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",38)
   224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",39)
   240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",40)
   };
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",41)
   long gtm_ac_xback (in, level, out, outlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",42)
        gtm_descriptor *in;    /* the input string */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",43)
        int level;            /* the subscript level */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",44)
        gtm_descriptor *out;    /* output buffer */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",45)
        int *outlen;        /* the length of the output string */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",46)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",47)
     int n;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",48)
     unsigned char *cp, *cout;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",49)
   /* Ensure space in the output buffer for the string. */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",50)
     n = in->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",51)
     if (n > out->len)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",52)
       return MYAPP_SUBSC2LONG;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",53)
   /* There is enough space, copy the string, transforming, if necessary */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",54)
     cp = in->val;            /* Address of first byte of input string */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",55)
     cout = out->val;        /* Address of first byte of output buffer */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",56)
     while (n-- > 0)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",57)
       *cout++ = inverse_table[*cp++];
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",58)
     *outlen = in->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",59)
     return 0;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",60)
   }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","INVERSE_TRANSFORMATION",61)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION")
Transformation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",1)
   Transformation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",3)
   gtm_ac_xform_1 or gtm_ac_xform routines transforms subscripts to the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",4)
   alternative collation sequence.>
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",5)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",6)
   If the application uses subscripted lvns longer than 32,767 bytes (but
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",7)
   less than 1,048,576 bytes), the alternative collation library must contain
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",8)
   the gtm_ac_xform_1 and gtm_ac_xback_1 routines. Otherwise, the alternative
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",9)
   collation library can contain gtm_ac_xform and gtm_ac_xback.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",11)
   The syntax of this routine is:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",12)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",13)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",14)
   int gtm_ac_xform_1(gtm32_descriptor* in, int level, gtm32_descriptor* out, int* outlen);
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION",15)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS")
Input_Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",1)
   Input Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",3)
   The input arguments for gtm_ac_xform are:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",4)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",5)
   in: a gtm32_descriptor containing the string to be transformed.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",6)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",7)
   level: an integer; this is not used currently, but is reserved for future
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",8)
   facilities.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",10)
   out: a gtm32_descriptor to be filled with the transformed key.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","INPUT_ARGUMENTS",11)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS")
Output_Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",1)
   Output Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",3)
   return value: A long word status code.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",4)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",5)
   out: A transformed subscript in the string buffer, passed by
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",6)
   gtm32_descriptor.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",7)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",8)
   outlen: A 32-bit signed integer, passed by reference, returning the actual
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",9)
   length of the transformed key.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",11)
   The syntax of gtm_ac_xform routine is:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",12)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",13)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",14)
   long gtm_ac_xform(gtm_descriptor *in, int level, gtm_descriptor *out, int *outlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS",15)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS")
Input_Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",1)
   Input Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",3)
   The input arguments for gtm_ac_xform are:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",4)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",5)
   in: a gtm_descriptor containing the string to be transformed.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",6)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",7)
   level: an integer; this is not used currently, but is reserved for future
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",8)
   facilities.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",10)
   out: a gtm_descriptor to be filled with the transformed key.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","INPUT_ARGUMENTS",11)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS")
Output_Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",1)
   Output Arguments
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",3)
   The output arguments for gtm_ac_xform are:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",4)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",5)
   return value: a long result providing a status code; it indicates the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",6)
   success (zero) or failure (non-zero) of the transformation.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",7)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",8)
   out: a gtm_descriptor containing the transformed key.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",10)
   outlen: an unsigned long, passed by reference, giving the actual length of
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",11)
   the output key.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",12)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",13)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",14)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",15)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",16)
   #define MYAPP_SUBSC2LONG 12345678
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",17)
   static unsigned char xform_table[256] =
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",18)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",19)
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",20)
    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",21)
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",22)
    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",23)
    64, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",24)
    95, 97, 99,101,103,105,107,109,111,113,115,117,118,119,120,121,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",25)
   122, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",26)
    96, 98,100,102,104,106,108,110,112,114,116,123,124,125,126,127,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",27)
   128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",28)
   144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",29)
   160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",30)
   176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",31)
   192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",32)
   208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",33)
   224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",34)
   240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",35)
   };
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",36)
   long
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",37)
   gtm_ac_xform (in, level, out, outlen)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",38)
        gtm_descriptor *in;    /* the input string */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",39)
        int level;            /* the subscript level */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",40)
        gtm_descriptor *out;    /* the output buffer */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",41)
        int *outlen;        /* the length of the output string */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",42)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",43)
     int n;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",44)
     unsigned char *cp, *cout;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",45)
   /* Ensure space in the output buffer for the string. */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",46)
     n = in->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",47)
     if (n > out->len)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",48)
       return MYAPP_SUBSC2LONG;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",49)
   /* There is space, copy the string, transforming, if necessary */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",50)
     cp = in->val;            /* Address of first byte of input string */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",51)
     cout = out->val;        /* Address of first byte of output buffer */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",52)
     while (n-- > 0)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",53)
       *cout++ = xform_table[*cp++];
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",54)
     *outlen = in->len;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",55)
     return 0;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",56)
   }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","OUTPUT_ARGUMENTS","s","OUTPUT_ARGUMENTS",57)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS")
Transformation_Routine_Characteristics
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",1)
   Transformation Routine Characteristics
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",3)
   The input and output values may contain <NUL> (hex code 00) characters.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",4)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",5)
   The collation transformation routine may concatenate a sentinel, such as
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",6)
   <NUL>, followed by the original subscript on the end of the transformed
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",7)
   key. If key length is not an issue, this permits the inverse
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",8)
   transformation routine to simply retrieve the original subscript rather
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",9)
   than calculating its value based on the transformed key.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",10)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",11)
   If there are reasons not to append the entire original subscript, YottaDB
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",12)
   allows you to concatenate a sentinel plus a predefined code so the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",13)
   original subscript can be easily retrieved by the inverse transformation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",14)
   routine, but still assures a reformatted key that is unique.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","TRANSFORMATION","s","TRANSFORMATION_ROUTINE_CHARACTERISTICS",15)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL")
Version_Control
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",1)
   Version Control
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",3)
   Two user-defined version control routines provide a safety mechanism to
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",4)
   guard against a collation routine being used on the wrong global, or an
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",5)
   attempt being made to modify a collation routine for an existing global.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",6)
   Either of these situations could cause incorrect collation or damage to
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",7)
   subscripts.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",8)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",9)
   When a global is assigned an alternative collation sequence, YottaDB invokes
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",10)
   a user-supplied routine that returns a numeric version identifier for the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",11)
   set of collation routines, which was stored with the global. The first
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",12)
   time a process accesses the global, YottaDB determines the assigned collation
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",13)
   sequence, then invokes another user-supplied routine. The second routine
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",14)
   matches the collation sequence and version identifier assigned to the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",15)
   global with those of the current set of collation routines.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",16)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",17)
   When you write the code that matches the type and version, you can decide
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",18)
   whether to modify the version identifier and whether to allow support of
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",19)
   globals created using a previous version of the routine.
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL",20)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION")
Verification
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",1)
   Verification
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",3)
   This routine verifies that the type and version associated with a global
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",4)
   are compatible with the active set of routines. Both the type and version
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",5)
   are unsigned characters passed by value. The syntax is:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",6)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",7)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",8)
   int gtm_ac_verify(unsigned char type, unsigned char ver)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",10)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",11)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",12)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",13)
   #include "gtm_descript.h"
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",14)
   #define MYAPP_WRONGVERSION 20406080    /* User condition */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",15)
   gtm_ac_verify (type, ver)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",16)
        unsigned char type, ver;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",17)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",18)
     if (type == 3)
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",19)
       {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",20)
         if (ver > 2)        /* version checking may be more complex */
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",21)
       {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",22)
         return 0;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",23)
       }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",24)
   }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",25)
     return MYAPP_WRONGVERSION;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",26)
   }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERIFICATION",27)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER")
Version_Identifier
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",1)
   Version Identifier
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",2)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",3)
   This routine returns an integer identifier between 0 and 255. This integer
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",4)
   provides a mechanism to enforce compatibility as a collation sequence
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",5)
   potentially evolves. When YottaDB first uses an alternate collation sequence
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",6)
   for a database or global, it captures the version and if it finds the
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",7)
   version has changed it at some later startup, it generates an error. The
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",8)
   syntax is:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",9)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",10)
   int gtm_ac_version()
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",11)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",12)
   Example:
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",13)

^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",14)
   int gtm_ac_version()
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",15)
   {
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",16)
       return 1;
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",17)
   }
^HELP("s","INTERNATIONALIZATION","s","ALTERNATE_COLLATION","s","VERSION_CONTROL","s","VERSION_IDENTIFIER",18)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS")
Collation_Sequence_Definitions
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",1)
   Collation Sequence Definitions
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",2)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",3)
   Normally, YottaDB orders data with numeric values first, followed by strings
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",4)
   sequenced by ASCII values. To use an alternative collating sequence the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",5)
   following items must be provided at YottaDB process intialization.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",6)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",7)
     * A shared library containing the routines for each alternative
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",8)
       collation sequence
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",9)
     * An environment variable of the form ydb_collate_n, specifying the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",10)
       shared library containing the routines for alternative collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",11)
       sequence n.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS",12)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD")
Collation_Method
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",1)
   Collation Method
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",2)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",3)
   YottaDB lets you define an alternative collation sequence as the default when
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",4)
   creating a new database. Subsequently, this default is applied when each
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",5)
   new global is created.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",6)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",7)
   This default collation sequence is set as a GDE qualifier for the ADD,
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",8)
   CHANGE, and TEMPLATE commands using the following example with CHANGE:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",9)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",10)
   GDE>CHANGE -REGION DEFAULT -COLLATION_DEFAULT=<0-255>
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",11)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",12)
   This qualifier always applies to regions, and takes effect when a database
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",13)
   is created with MUPIP CREATE. The output of GDE SHOW displays this value,
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",14)
   and DSE DUMP -FILEHEADER also includes this information. In the absence of
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",15)
   an alternative default collations sequence, the default used is 0, or
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",16)
   ASCII.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",17)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",18)
   The value cannot be changed once a database file is created, and will be
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",19)
   in effect for the life of the database file. The same restriction applies
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",20)
   to the version of the collation sequence. The version of a collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",21)
   sequence implementation is also stored in the database fileheader and
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",22)
   cannot be modified except by recreating the file.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",23)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",24)
   If the code of the collation sequence changes, making it incompatible with
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",25)
   the collation sequence in use when the database was created, use the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",26)
   following procedure to ensure the continued validity of the database.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",27)
   MUPIP EXTRACT the database using the older compatible collation routines,
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",28)
   then recreate and MUPIP LOAD using the newer collation routines.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","COLLATION_METHOD",29)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE")
Environment_Variable
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",1)
   Environment Variable
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",2)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",3)
   YottaDB locates the alternative collation sequences through the environment
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",4)
   variable ydb_collate_n where n is an integer from 1 to 255 that identifies
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",5)
   the collation sequence, and pathname identifies the shared library
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",6)
   containing the routines for that collation sequence, for example:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",7)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",8)
   $ ydb_collate_1=/opt/yottadb/collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",9)
   $ export ydb_collate_1
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",10)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",11)
   Multiple alternative collation sequence definitions can co-exist.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE",12)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS")
Establish_Alternative_Collations
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",1)
   Establish Alternative Collations
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",2)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",3)
   Alternative collation sequences for a global must be set when the global
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",4)
   contains no data. When the global is defined the collation sequence is
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",5)
   stored in the global. This ensures the future integrity of the global's
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",6)
   collation. If it becomes necessary to change the collation sequence of a
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",7)
   global containing data, you must copy the data to a temporary repository,
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",8)
   delete the global, modify the variable's collation sequence by
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",9)
   reinitializing the global either in a region that has the desired
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",10)
   collation or with %GBLDEF, and restore the data from the temporary
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",11)
   repository.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",12)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",13)
   Be careful when creating the transformation and inverse transformation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",14)
   routines. The transformation routine must unambiguously and reliably
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",15)
   encode every possible input value. The inverse routine must faithfully
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",16)
   return the original value in every case. Errors in these routines can
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",17)
   produce delayed symptoms that could be hard to debug. These routines may
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",18)
   not be written in M.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ENVIRONMENT_VARIABLE","s","ESTABLISH_ALTERNATIVE_COLLATIONS",19)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE")
Establishing_A_Local_Collation_Sequence
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",1)
   Establishing A Local Collation Sequence
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",2)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",3)
   All subscripted local variables for a process must use the same collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",4)
   sequence. The collation sequence used by local variables can be
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",5)
   established as a default or in the current process. The local collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",6)
   sequence can only be changed when a process has no subscripted local
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",7)
   variables defined.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",8)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",9)
   To establish a default local collation sequence provide a numeric value to
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",10)
   the environment variable ydb_local_collate to select one of the collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",11)
   tables, for example:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",12)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",13)
   $ ydb_local_collate=n
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",14)
   $ export ydb_local_collate
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",15)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",16)
   where n is the number of a collation sequence that matches a valid
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",17)
   collation number defined by an environment variable in the form
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",18)
   ydb_collate_n.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",19)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",20)
   An active process can use the %LCLCOL utility to define the collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",21)
   sequence for subscripts of local variables. %LCLCOL has these extrinsic
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",22)
   entry points:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",23)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",24)
   set^%LCLCOL(n)changes the local collation to the type specified by n.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",25)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",26)
   If the collation sequence is not available, the routine returns a false
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",27)
   (0) and does not modify the local collation sequence.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",28)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",29)
   Example:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",30)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",31)
   IF '$$set^%LCLCOL(3) D
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",32)
   . Write "local collation sequence not changed",! Break
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",33)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",34)
   This piece of code illustrates $$set^LCLCOL used as an extrinsic. It would
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",35)
   write an error message and BREAK if the local collation sequence was not
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",36)
   set to 3.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",37)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",38)
   set^%LCLCOL(n,ncol) determines the null collation type to be used with the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",39)
   collation type n.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",40)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",41)
   With set^%LCLCOL(,ncol), the null collation order can be changed while
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",42)
   keeping the alternate collation order unchanged. If subscripted local
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",43)
   variables exist, null collation order cannot be changed. In this case,
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",44)
   YottaDB issues YDB-E-COLLDATAEXISTS.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",45)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",46)
   get^%LCLCOL returns the current local type.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",47)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",48)
   Example:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",49)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",50)
   YDB>Write $$get^%LCLCOL
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",51)
   0
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",52)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",53)
   This example uses $$get^%LCLCOL as an extrinsic that returns 0, indicating
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",54)
   that the effective local collation sequence is the standard M collation
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",55)
   sequence.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",56)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",57)
   If set^%LCLCOL is not specified and ydb_local_collate is not defined, or
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",58)
   is invalid, the process uses M standard collation. The following would be
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",59)
   considered invalid values:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",60)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",61)
     * A value less than 0
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",62)
     * A value greater than 255
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",63)
     * A legal collation sequence that is inaccessible to the process
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",64)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",65)
   Inaccessibility could be caused by a missing environment variable, a
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",66)
   missing image, or security denial of access.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","ESTABLISHING_A_LOCAL_COLLATION_SEQUENCE",67)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY")
Shared_Library
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",1)
   Shared Library
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",2)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",3)
   A shared library for an alternative collation sequence must contain the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",4)
   following four routines:
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",5)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",6)
    1. gtm_ac_xform_1: Transforms subscripts up to the maximum supported
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",7)
       string length to the alternative collation sequence, or
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",8)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",9)
       gtm_ac_xform: Transforms subscripts up to 32,767 bytes to the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",10)
       alternative collation sequence.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",11)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",12)
    2. gtm_ac_xback_1: Use with gtm_ac_xform_1 to transform the alternative
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",13)
       collation keys back to the original subscript representation, or
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",14)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",15)
       gtm_ac_xback: Use with gtm_ac_xform to transforms the alternative
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",16)
       collation keys back to the original subscript representation.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",17)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",18)
    3. gtm_ac_version: Returns a numeric version identifier for the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",19)
       "currently active" set of collation routines.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",20)
    4. gtm_ac_verify: Returns the success (odd) or failure (even) in matching
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",21)
       a collation sequence with a given version number.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",22)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",23)
   YottaDB searches the shared library for the gtm_ac_xform_1 and gtm_ac_xback_1
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",24)
   before searching for the gtm_ac_xform and gtm_ac_xback routines. If the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",25)
   shared library contains gtm_ac_xform_1, YottaDB ignores gtm_ac_xform even if
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",26)
   it is present. If YottaDB finds gtm_ac_xform_1 but does not find
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",27)
   gtm_ac_xback_1, it reports a YDB-E-COLLATIONUNDEF error with an additional
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",28)
   mismatch warning YDB-E-COLLFNMISSING.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",29)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",30)
   If the application does not use strings longer than 32,767 bytes, the
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",31)
   alternative collation library need not contain the gtm_ac_xform_1 and
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",32)
   gtm_ac_xback_1 routines. On the other hand, if the application passes
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",33)
   strings greater than 32,767 bytes (but less than the maximum support
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",34)
   string length) and does not provide gtm_xc_xform_1 and gtm_xc_xback_1,
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",35)
   YottaDB issues the run-time error YDB-E-COLLARGLONG.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",36)

^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",37)
   Note that database key sizes are much more restricted by YottaDB than local
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",38)
   key sizes, and may be restricted further by user configuration.
^HELP("s","INTERNATIONALIZATION","s","COLLATION_SEQUENCE_DEFINITIONS","s","SHARED_LIBRARY",39)

^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)")
Implementing_an_Alternative_Collation_Sequence_for_Unicode(R)
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",1)
   Implementing an Alternative Collation Sequence for Unicode(R)
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",2)
characters
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",3)

^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",4)
   By default, YottaDB sorts string subscripts in the default order of the
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",5)
   Unicode(R) UTF-8 numeric code-point values. Since this implied ordering
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",6)
   may or may not be linguistically or culturally correct for a specific
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",7)
   application, an implementation of an algorithm such as the Unicode(R)
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",8)
   Collation Algorithm (UCA) may be required. Note that implementation of
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",9)
   collation in YottaDB requires the implementation of two functions, f(x) and
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",10)
   g(y). f(x) transforms each input sequence of bytes into an alternative
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",11)
   sequence of bytes for storage. Within the YottaDB database engine, M nodes
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",12)
   are retrieved according to the byte order in which they are stored. For
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",13)
   each y that can be generated by f(x), g(y) is an inverse function that
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",14)
   provides the original sequence of bytes; in other words, g(f(x)) must be
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",15)
   equal to x for all x that the application processes. For example, for the
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",16)
   People's Republic of China, it may be appropriate to convert from UTF-8 to
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",17)
   Guojia Biaozhun (****), the GB18030 standard, for example, using the
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",18)
   libiconv library. The following requirements are important:
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",19)

^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",20)
     * Unambiguous transformation routines: The transform and its inverse
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",21)
       must convert each input string to a unique sequence of bytes for
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",22)
       storage, and convert each sequence of bytes stored back to the
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",23)
       original string.
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",24)
     * Collation sequence for all expected character sequences in subscripts:
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",25)
       YottaDB does not validate the subscript strings passed to/from the
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",26)
       collation routines. If the application design allows illegal UTF-8
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",27)
       character sequences to be stored in the database, the collation
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",28)
       functions must appropriately transform, and inverse transform, these
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",29)
       as well.
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",30)
     * Handle different string lengths for before and after transformation:
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",31)
       If the lengths of the input string and transformed string differ, and,
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",32)
       for local variables, if the output buffer passed by YottaDB is not
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",33)
       sufficient, follow the procedure described below:
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",34)

^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",35)
          * Global Collation Routines: The transformed key must not exceed
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",36)
            the lesser of the maximum key size configuration or 1019 bytes,
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",37)
            the maximum GDS key size. YottaDB allocates a temporary buffer of
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",38)
            size 1019 bytes in the output string descriptor (of type
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",39)
            DSC_K_DTYPE_T) and passes it to the collation routine to return
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",40)
            the transformed key.
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",41)
          * Local Collation Routines: YottaDB allocates a temporary buffer in
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",42)
            the output string descriptor based on the size of the input
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",43)
            string. Both transformation and inverse transformation must check
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",44)
            the buffer size, and if it is not sufficient, the transformation
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",45)
            must allocate sufficient memory, set the output descriptor value
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",46)
            (val field of the descriptor) to point to the new memory , and
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",47)
            return the transformed key successfully. Since YottaDB copies the
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",48)
            key from the output descriptor into its internal structures, it
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",49)
            is important that the memory allocated remain available even
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",50)
            after the collation routines return. Collation routines are
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",51)
            typically called throughout the process lifetime, therefore, YottaDB
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",52)
            expects the collation libraries to define a large static buffer
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",53)
            sufficient to hold all key sizes in the application.
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",54)
            Alternatively, the collation transform can use a large heap
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",55)
            buffer (allocated by the system malloc() or YottaDB gtm_malloc()).
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",56)
            Application developers must choose the method best suited to
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",57)
            their needs.
^HELP("s","INTERNATIONALIZATION","s","IMPLEMENTING_AN_ALTERNATIVE_COLLATION_SEQUENCE_FOR_UNICODE(R)",58)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS")
Matching_Alternative_Patterns
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",1)
   Matching Alternative Patterns
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",2)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",3)
   YottaDB allows the definition of unique patterns for use with the pattern
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",4)
   match operator, in place of, or in addition to, the standard C, N, U, L,
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",5)
   and P. You can redefine existing pattern codes (patcodes), or add new
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",6)
   ones. These codes are defined in a specification file. The format is
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",7)
   described in the next section.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS",8)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION")
Code_Selection
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",1)
   Code Selection
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",2)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",3)
   To establish a default patcode table for a database define the environment
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",4)
   variable:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",5)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",6)
   $ ydb_pattern_file=pathname
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",7)
   $ export ydb_pattern_file
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",8)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",9)
   where filename is the text file containing the patcode table definition,
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",10)
   and
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",11)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",12)
   $ ydb_pattern_table=tablename
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",13)
   $ export ydb_pattern_table
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",14)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",15)
   where tablename is the name of the patcode table within the file pointed
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",16)
   to by ydb_pattern_file.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",17)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",18)
   **Warning**
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",19)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",20)
   YottaDB performs operations on literals at compile time and the pattern codes
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",21)
   settings may have an impact on such operations. Therefore, it is safest to
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",22)
   either always compile with the same pattern code settings as those used at
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",23)
   runtime. If changes to pattern codes are required at run time, "hide" any
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",24)
   patterns used on literal expressions from the compiler (which are
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",25)
   uncommon) using XECUTE commands or indirection.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",26)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",27)
   Within an active process, the patcode table is established using the M
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",28)
   VIEW command and the %PATCODE utility. Before invoking the %PATCODE
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",29)
   utility, you may use VIEW to load pattern definition files for YottaDB. The
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",30)
   required keyword and value are:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",31)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",32)
   VIEW "PATLOAD":"pathname"
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",33)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",34)
   This allows you to use the %PATCODE utility or the VIEW command to set
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",35)
   current patcode table. The format of the VIEW command to set the patcode
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",36)
   table is:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",37)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",38)
   VIEW "PATCODE":"tablename"
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",39)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",40)
   This is equivalent to set ^%PATCODE explained below.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",41)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",42)
   %PATCODE has the following extrinsic entry points:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",43)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",44)
   set^%PATCODE(tn)
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",45)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",46)
   sets the current patcode table to the one having the name specified by tn,
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",47)
   in the defined file specification.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",48)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",49)
   Example:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",50)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",51)
   YDB>Write $$set^%PATCODE("NEWLANGUAGE")
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",52)
   1
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",53)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",54)
   If there is no table with that name, the function returns a false (0) and
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",55)
   does not modify the current patcode table.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",56)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",57)
   get^%PATCODE
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",58)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",59)
   returns the current patcode table name.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",60)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",61)
   Example:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",62)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",63)
   YDB>Write $$get^%PATCODE
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",64)
   NEWLANGUAGE
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","CODE_SELECTION",65)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION")
Pattern_Code_Definition
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",1)
   Pattern Code Definition
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",2)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",3)
   This section explains the requirements for specifying alternative pattern
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",4)
   codes. These specifications are created as a table in a file which YottaDB
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",5)
   loads at run time.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",6)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",7)
   Use the following keywords to construct your text file. Each keyword must:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",8)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",9)
     * Appear as the first non-whitespace entry on a line.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",10)
     * Be upper case.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",11)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",12)
   The table names also must be uppercase. The patcodes are not
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",13)
   case-sensitive.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",14)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",15)
   PATSTART indicates the beginning of the definition text and must appear
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",16)
   before the first table definition.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",17)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",18)
   PATTABLE indicates the beginning of the table definition. The keyword
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",19)
   PATTABLE is followed by whitespace, then the table name. The text file can
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",20)
   contain multiple PATTABLEs.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",21)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",22)
   PATCODE indicates the beginning of a patcode definition. The keyword
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",23)
   PATCODE is followed by whitespace, then the patcode identifying character.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",24)
   On the next line enter a comma-delimited list of integer codes that
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",25)
   satisfy the patcode. A PATCODE definition is always included in the most
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",26)
   recently named PATTABLE. A PATTABLE can contain multiple PATCODEs.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",27)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",28)
   PATEND indicates the end of the definition text; it must appear after the
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",29)
   last table definition.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",30)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",31)
   To continue the comma-delimited list on multiple lines, place a dash (-)
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",32)
   at the end of each line that is not the last one in the sequence. To enter
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",33)
   comments in the file, begin the line with a semi-colon (;).
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",34)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",35)
   The following example illustrates a possible patcode table called
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",36)
   "NEWLANGUAGE," The example has definitions for patcodes "S," which would
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",37)
   be a non-standard pattern character, and "L," which would substitute
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",38)
   alternative definitions for the standard "L" (or lower case) pattern
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",39)
   characters.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",40)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",41)
   Example:
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",42)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",43)
   PATSTART
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",44)
     PATTABLE NEWLANGUAGE
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",45)
     PATCODE S
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",46)
       144,145,146,147,148,149,150
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",47)
     PATCODE L
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",48)
       230,231,232,233,234,235,236,237,238,239,240,241-,242,243,244,245,246,247,248,249,250,251,252,253,254,255
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",49)
   PATEND
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",50)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",51)
   Be mindful of the following items as you define your patcode table.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",52)

^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",53)
     * YottaDB loads a table name can only be loaded once during an invocation
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",54)
       of a process. Changes a loaded table do not apply to running processes
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",55)
       that have already reference that table.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",56)
     * The table name "M" is a reserved designation for standard M, which is
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",57)
       included in the YottaDB run-time library.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",58)
     * Standard patcodes A and E cannot be explicitly redefined. A is always
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",59)
       the union of codes U and L; E always designates the set of all
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",60)
       characters.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",61)
     * The C pattern code you define is used by YottaDB to determine those
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",62)
       characters which are to be treated as unprintable. All characters not
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",63)
       defined as C are treated as printable.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",64)
     * In UTF-8 mode, M standard patcodes (A,C,L,U,N,P,E) work with
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",65)
       Unicode(R) characters. Application developers can neither change their
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",66)
       default classification nor define the non-standard patcodes
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",67)
       ((B,D,F-K,M,O,Q-T,V-X) beyond the ASCII subset. This means that the
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",68)
       pattern tables cannot contain characters with codes greater than the
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",69)
       maximum ASCII code 127.
^HELP("s","INTERNATIONALIZATION","s","MATCHING_ALTERNATIVE_PATTERNS","s","PATTERN_CODE_DEFINITION",70)

^HELP("s","IO_PROCESSING")
IO_Processing
^HELP("s","IO_PROCESSING",1)
   IO Processing
^HELP("s","IO_PROCESSING",2)

^HELP("s","IO_PROCESSING",3)
   This chapter describes the following topics which relate to input and
^HELP("s","IO_PROCESSING",4)
   output processing:
^HELP("s","IO_PROCESSING",5)

^HELP("s","IO_PROCESSING",6)
     * Input/Output Intrinsic Special Variables, and their Maintenance.
^HELP("s","IO_PROCESSING",7)

^HELP("s","IO_PROCESSING",8)
       YottaDB provides several intrinsic special variables that allow processes
^HELP("s","IO_PROCESSING",9)
       to examine, and in some cases change, certain aspects of the
^HELP("s","IO_PROCESSING",10)
       input/output (I/O) processing. The focus in this chapter is how YottaDB
^HELP("s","IO_PROCESSING",11)
       handles the standard ones, such as $IO, $X, $Y, and those that are
^HELP("s","IO_PROCESSING",12)
       YottaDB-specific (for example, $ZA, $ZB).
^HELP("s","IO_PROCESSING",13)

^HELP("s","IO_PROCESSING",14)
     * Input/Output Devices
^HELP("s","IO_PROCESSING",15)

^HELP("s","IO_PROCESSING",16)
       Each device type supported by YottaDB responds to a particular subset of
^HELP("s","IO_PROCESSING",17)
       deviceparameters, while ignoring others. Devices may be programmed in
^HELP("s","IO_PROCESSING",18)
       a device-specific manner, or in a device-independent manner. This
^HELP("s","IO_PROCESSING",19)
       chapter discusses each device type, and provides tables of their
^HELP("s","IO_PROCESSING",20)
       deviceparameters.
^HELP("s","IO_PROCESSING",21)

^HELP("s","IO_PROCESSING",22)
     * Input/Output Commands and their Deviceparameters
^HELP("s","IO_PROCESSING",23)

^HELP("s","IO_PROCESSING",24)
       YottaDB bases its I/O processing on a simple character stream model. YottaDB
^HELP("s","IO_PROCESSING",25)
       does not use any pre-declared formats. This chapter describes the YottaDB
^HELP("s","IO_PROCESSING",26)
       I/O commands OPEN, USE, READ, WRITE, and CLOSE.
^HELP("s","IO_PROCESSING",27)

^HELP("s","IO_PROCESSING",28)
   OPEN, USE, and CLOSE commands accept deviceparameters, which are keywords
^HELP("s","IO_PROCESSING",29)
   that permit a YottaDB program to control the device state. Some
^HELP("s","IO_PROCESSING",30)
   deviceparameters require arguments. The current ANSI standard for YottaDB
^HELP("s","IO_PROCESSING",31)
   does not define the deviceparameters for all devices. This chapter
^HELP("s","IO_PROCESSING",32)
   includes descriptions of the YottaDB deviceparameters in the sections
^HELP("s","IO_PROCESSING",33)
   describing each command.
^HELP("s","IO_PROCESSING",34)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS")
FIFO_Characteristics
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",1)
   FIFO Characteristics
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",2)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",3)
   FIFOs have most of the same characteristics as other sequential files,
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",4)
   except that READs and WRITEs can occur in any order.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",5)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",6)
   The following characteristics of FIFO behavior may be helpful in using
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",7)
   them effectively.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",8)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",9)
   With READ:
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",10)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",11)
     * If a READ is done while there is no data in the FIFO:
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",12)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",13)
   The process hangs until data is put into the FIFO by another process, or
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",14)
   the READ times out, when a timeout is specified.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",15)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",16)
   The following table shows the result and the values of I/O status
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",17)
   variables for different types of READ operations on a FIFO device.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",18)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",19)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",20)
   | Operation |    Result     |  $DEVICE   | $ZA | $TEST |    X    | $ZEOF |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",21)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",22)
   | READ X:n  | Normal        | 0          | 0   | 1     | Data    | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",23)
   |           | Termination   |            |     |       | Read    |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",24)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",25)
   | READ X:n  | Timeout with  | 0          | 0   | 0     | empty   | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",26)
   |           | no data read  |            |     |       | string  |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",27)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",28)
   |           | Timeout with  |            |     |       | Partial |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",29)
   | READ X:n  | partial data  | 0          | 0   | 0     | data    | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",30)
   |           | read          |            |     |       |         |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",31)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",32)
   |           |               | 1,Device   |     |       | empty   |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",33)
   | READ X:n  | End of File   | detected   | 9   | 1     | string  | 1     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",34)
   |           |               | EOF        |     |       |         |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",35)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",36)
   | READ X:0  | Normal        | 0          | 0   | 1     | Data    | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",37)
   |           | Termination   |            |     |       | Read    |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",38)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",39)
   | READ X:0  | No data       | 0          | 0   | 0     | empty   | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",40)
   |           | available     |            |     |       | string  |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",41)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",42)
   |           | Timeout with  |            |     |       | Partial |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",43)
   | READ X:0  | partial data  | 0          | 0   | 0     | data    | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",44)
   |           | read          |            |     |       |         |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",45)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",46)
   |           |               | 1,Device   |     |       | empty   |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",47)
   | READ X:0  | End of File   | detected   | 9   | 1     | string  | 1     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",48)
   |           |               | EOF        |     |       |         |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",49)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",50)
   | READ X    | Error         | 1,<error   | 9   | n/c   | empty   | 0     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",51)
   |           |               | signature> |     |       | string  |       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",52)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",53)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",54)
   With WRITE:
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",55)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",56)
     * The FIFO device does non-blocking writes. If a process tries to WRITE
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",57)
       to a full FIFO and the WRITE would block, the device implicitly tries
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",58)
       to complete the operation up to a default of 10 times. If the
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",59)
       ydb_non_blocked_write_retries environment variable is defined, this
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",60)
       overrides the default number of retries. If the retries do not succeed
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",61)
       (remain blocked), the WRITE sets $DEVICE to "1,Resource temporarily
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",62)
       unavailable", $ZA to 9, and produces an error. If the YottaDB process has
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",63)
       defined an EXCEPTION, $ETRAP or $ZTRAP, the error trap may choose to
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",64)
       retry the WRITE after some action or delay that might remove data from
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",65)
       the FIFO device.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",66)
     * While it is hung, the process will not respond to <CTRL-C>.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",67)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",68)
   With CLOSE:
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",69)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",70)
     * The FIFO is not deleted unless the DELETE qualifier is specified.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",71)
     * If a process closes the FIFO with the DELETE qualifier, the FIFO
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",72)
       becomes unavailable to new users at that time.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",73)
     * All processes currently USEing the FIFO may continue to use it, until
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",74)
       the last process attached to it CLOSES it, and is destroyed.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",75)
     * Any process OPENing a FIFO with the same name as a deleted FIFO
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",76)
       creates a new one to which subsequent OPENs attach.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",77)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",78)
   The default access permissions on a FIFO are the same as the mask settings
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",79)
   of the process that created the FIFO. Use the SYSTEM, GROUP, WORLD, and
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",80)
   UIC deviceparameters to specify FIFO access permissions. File permissions
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",81)
   have no affect on a process that already has the FIFO open.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS",82)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY")
FIFO_Deviceparameter_Summary
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",1)
   FIFO Deviceparameter Summary
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",2)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",3)
   The following table summarizes the deviceparameters that can be used with
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",4)
   FIFOs.
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",5)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",6)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",7)
   |                      File Format Deviceparameters                      |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",8)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",9)
   |  DEVICEPARAMETER   | CMD |                 DESCRIPTION                 |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",10)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",11)
   | [NO]FIXED          | O   | Controls whether records have fixed length. |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",12)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",13)
   | [Z]LENGTH=intexpr  | U   | Controls the virtual page length.           |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",14)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",15)
   | RECORDSIZE=intexpr | O   | Specifies the maximum record size.          |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",16)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",17)
   | VARIABLE           | O   | Controls whether records have variable      |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",18)
   |                    |     | length.                                     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",19)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",20)
   | [Z]WIDTH=intexpr   | U   | Sets the device's logical record size and   |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",21)
   |                    |     | enables WRAP.                               |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",22)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",23)
   | [Z][NO]WRAP        | O/U | Controls the handling of records longer     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",24)
   |                    |     | than the device width.                      |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",25)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",26)

^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",27)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",28)
   |                      File Access Deviceparameters                      |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",29)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",30)
   | DEVICEPARAMETER | CMD |                    COMMENT                     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",31)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",32)
   |                 |     | Specifies that the FIFO should be deleted when |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",33)
   |                 |     | the last user closes it. If specified on an    |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",34)
   |                 |     | OPEN, DELETE is activated only at the time of  |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",35)
   | DELETE          | C   | the close. No new attachements are allowed to  |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",36)
   |                 |     | a deleted FIFO and any new attempt to use a    |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",37)
   |                 |     | FIFO with the name of the deleted device       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",38)
   |                 |     | creates a new device.                          |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",39)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",40)
   | GROUP=expr      | O/C | Specifies file permissions for other users in  |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",41)
   |                 |     | owner's group.                                 |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",42)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",43)
   | [NO]READONLY    | O   | OPENs a device for reading only (READONLY) or  |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",44)
   |                 |     | reading and writing (NOREADONLY).              |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",45)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",46)
   | OWNER=expr      | O/C | Specifies file permissions for owner of file.  |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",47)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",48)
   |                 |     | Specifies that CLOSE replace the name of a     |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",49)
   | RENAME=expr     | C   | disk file with the name specified by the       |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",50)
   |                 |     | expression.                                    |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",51)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",52)
   | SYSTEM=expr     | O/C | Specifies file permissions for owner of file   |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",53)
   |                 |     | (same as OWNER).                               |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",54)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",55)
   | UIC=expr        | O/C | Specifies the file's owner ID.                 |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",56)
   |-----------------+-----+------------------------------------------------|
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",57)
   | WORLD=expr      | O/C | Specifies file permissions for users not in    |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",58)
   |                 |     | the owner's group.                             |
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",59)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","FIFO_CHARACTERISTICS","s","FIFO_DEVICEPARAMETER_SUMMARY",60)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS")
I/O_Commands
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",1)
   I/O Commands
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",3)
   This section describes the following YottaDB I/O commands:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",5)
     * OPEN establishes a connection from a YottaDB process to a device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",6)
     * USE declares a device as the current source of input and destination
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",7)
       for output.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",8)
     * READ accepts characters from the current device into a global or local
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",9)
       variable.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",10)
     * WRITE sends characters to the current device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",11)
     * CLOSE breaks the connection between a YottaDB process and a device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE")
Close
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",1)
   Close
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",3)
   The CLOSE command breaks the connection between a process and a device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",5)
   The format of the CLOSE command is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",7)
   C[LOSE][:tvexpr] expr[:(keyword[=expr][:...])][,...]
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",9)
   When a CLOSE is issued, YottaDB flushes all pending output to the device, and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",10)
   processes any deviceparameters. CLOSEing a device not currently OPEN has
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",11)
   no effect.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",13)
   If a partial record has been output, a WRITE ! is done to complete it. To
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",14)
   suppress this action, set $X to zero before the CLOSE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",16)
   YottaDB retains the characteristics of all device types, except a sequential
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",17)
   file, for use in case of subsequent re-OPENs. If the device is a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",18)
   sequential file, characteristics controlled by deviceparameters are lost
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",19)
   after the CLOSE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",21)
   If the device being CLOSEd is $IO, YottaDB implicitly USEs $PRINCIPAL. YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",22)
   ignores CLOSE $PRINCIPAL.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",24)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",26)
   CLOSE SD:RENAME=SD_".SAV"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",28)
   This closes the device and, if it is a disk file, renames it to have the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",29)
   type .SAV.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",30)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",31)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",32)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",33)
   CLOSE SOCKDEV:(SOCKET="LOCALSOCK1":DELETE)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",34)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",35)
   This deletes the socket file associated with LOCALSOCK1 if it is a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",36)
   listening socket and closes only the named socket on the socket device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE",37)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE")
CLOSE_Deviceparameters_Table
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",1)
   CLOSE Deviceparameters Table
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",3)
   +-----------------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",4)
   |            CLOSE Deviceparameters             |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",5)
   |-----------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",6)
   | CLOSE DEVICEPARAMETER | TRM | SD | FIFO | SOC |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",7)
   |-----------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",8)
   | SD: Valid for sequential disk files           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",9)
   |                                               |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",10)
   | TRM: Valid for terminals and printers         |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",11)
   |                                               |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",12)
   | FIFO: Valid for FIFOs                         |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",13)
   |                                               |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",14)
   | NULL: Valid for NULL devices                  |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",15)
   |                                               |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",16)
   | SOC: Valid for Socket devices                 |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",17)
   |-----------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",18)
   | DELETE                |     | X  | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",19)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",20)
   | DESTROY               |     | X  | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",21)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",22)
   | EXCEPTION             | X   | X  | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",23)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",24)
   | GROUP                 |     | X  | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",25)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",26)
   | OWNER                 |     | X  | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",27)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",28)
   | RENAME                |     | X  | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",29)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",30)
   | REWIND                |     | X  |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",31)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",32)
   | SOCKET                |     |    |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",33)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",34)
   | SYSTEM                |     | X  | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",35)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",36)
   | UIC                   |     | X  | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",37)
   |-----------------------+-----+----+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",38)
   | WORLD                 |     | X  | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",39)
   +-----------------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",40)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",41)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",42)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",43)
   Since EXCEPTION is the only CLOSE deviceparameter that applies to NULL,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",44)
   the NULL device column is not shown in the table above.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","CLOSE","s","CLOSE_DEVICEPARAMETERS_TABLE",45)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY")
Deviceparameter_Summary
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",1)
   Deviceparameter Summary
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",3)
   +-----------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",4)
   |         Deviceparameter Summary         |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",5)
   |-----------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",6)
   |  DEVICEPARAMETER   | OPEN | USE | CLOSE |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",7)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",8)
   | APPEND             | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",9)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",10)
   | ATTACH             |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",11)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",12)
   | BLOCKSIZE=intexpr  | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",13)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",14)
   | [NO]CENABLE        |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",15)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",16)
   | CLEARSCREEN        |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",17)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",18)
   | CONNECT            | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",19)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",20)
   | [NO]CONVERT        |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",21)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",22)
   | CTRAP              |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",23)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",24)
   | DELETE             |      |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",25)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",26)
   | [NO]DELIMITER      | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",27)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",28)
   | [NO]DESTROY        |      |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",29)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",30)
   | DETACH             |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",31)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",32)
   | DOWNSCROLL         |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",33)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",34)
   | [NO]ECHO           |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",35)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",36)
   | ERASELINE          |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",37)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",38)
   | [NO]ESCAPE         |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",39)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",40)
   | EXCEPTION=expr     | X    | X   | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",41)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",42)
   | [NO]FILTER[=expr]  |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",43)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",44)
   | [NO]FIXED          | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",45)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",46)
   | FLUSH              |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",47)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",48)
   | GROUP=expr         | X    | X   | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",49)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",50)
   | KEY                | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",51)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",52)
   | IKEY               | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",53)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",54)
   | IOERROR=expr       | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",55)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",56)
   | [NO]HOSTSYNC       |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",57)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",58)
   | [Z]LENGTH=intexpr  |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",59)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",60)
   | NEWVERSION         | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",61)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",62)
   | OKEY               | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",63)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",64)
   | OWNER=expr         | X    | X   | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",65)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",66)
   | [NO]PASTHRU        |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",67)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",68)
   | [NO]RCHK           | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",69)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",70)
   | [NO]READONLY       | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",71)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",72)
   | RECORDSIZE=intexpr | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",73)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",74)
   | RENAME=expr        |      |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",75)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",76)
   | [NO]RETRY          | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",77)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",78)
   | REWIND             | X    | X   | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",79)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",80)
   | SKIPFILE=intexpr   |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",81)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",82)
   | SOCKET             |      | X   | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",83)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",84)
   | SPACE=intexpr      |      | X   | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",85)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",86)
   | [NO]STREAM         | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",87)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",88)
   | SYSTEM=expr        | X    |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",89)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",90)
   | TERMINATOR=expr    |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",91)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",92)
   | TIMEOUT=expr       |      |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",93)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",94)
   | [NO]TRUNCATE       | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",95)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",96)
   | [NO]TTSYNC         |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",97)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",98)
   | [NO]TYPEAHEAD      |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",99)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",100)
   | UIC=expr           | X    |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",101)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",102)
   | UPSCROLL           |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",103)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",104)
   | VARIABLE           | X    |     |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",105)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",106)
   | [Z]WIDTH=intexpr   |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",107)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",108)
   | WORLD=expr         | X    |     | X     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",109)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",110)
   | [Z][NO]WRAP        | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",111)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",112)
   | WRITELB=expr       |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",113)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",114)
   | X=intexpr          |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",115)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",116)
   | Y=intexpr          |      | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",117)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",118)
   | ZBFSIZE            | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",119)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",120)
   | Z[NO]DELAY         | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",121)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",122)
   | Z[NO]FF            | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",123)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",124)
   | ZIBFSIZE           | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",125)
   |--------------------+------+-----+-------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",126)
   | LISTEN=expr        | X    | X   |       |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",127)
   +-----------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","DEVICEPARAMETER_SUMMARY",128)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN")
Open
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",1)
   Open
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",3)
   The OPEN command establishes a connection from a YottaDB process to a device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",5)
   The format of the OPEN command is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",7)
   O[PEN][:tvexpr] expr[:[(keyword[=expr][:...])][:numexpr][:expr]][,...]
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",9)
   By default, when a device is unavailable, YottaDB retries the OPEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",10)
   indefinitely at approximately one second intervals. A device is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",11)
   unavailable when another process is using it exclusively, or when the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",12)
   OPENing process does not have the resources left to open the device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",14)
   All other errors on OPEN raise an error condition and interrupt program
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",15)
   flow. A timeout is a tool that lets a YottaDB routine regain program control
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",16)
   when a device remains unavailable. When the OPEN specifies a timeout, YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",17)
   keeps retrying until either the OPEN succeeds or the timeout expires.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",19)
   If OPEN establishes a connection with a device before the timeout expires,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",20)
   YottaDB sets $TEST to TRUE (1). If the timeout expires, YottaDB sets $TEST to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",21)
   FALSE (0). If an OPEN command does not specify a timeout, the execution of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",22)
   the command does not affect $TEST.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",24)
   If a process has not previously OPENed a device, any deviceparameters not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",25)
   supplied on the OPEN take their default values. When reOPENing a device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",26)
   that it previously closed, a YottaDB process restores all characteristics not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",27)
   specified on the OPEN to the values the device had when it was last
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",28)
   CLOSEd, except with SD, FIFO, and PIPE. YottaDB treats sequential disk files
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",29)
   differently and uses defaults for unspecified sequential disk file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",30)
   characteristics on every OPEN; in other words, by default CLOSE of a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",31)
   sequential disk file acts as if DESTROY were specified and it requires an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",32)
   explicit NODESTROY to retain sequential disk file characteristics on a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",33)
   CLOSE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",34)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",35)
   For a sequential disk device CLOSEd with the NODESTROY deviceparameter, a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",36)
   subsequent OPEN of the device with no deviceparameters restores the device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",37)
   state including its file position; or to the file position specified by a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",38)
   SEEK deviceparameter. Note that when $ZCHSET specifies a UTF character set
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",39)
   in FIXED format, the device must have done at least one READ prior to its
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",40)
   close. An OPEN with additional deviceparameters positions the device to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",41)
   the beginning of the file or to the end of file if APPEND is specified.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",42)
   Any SEEK specified as a deviceparameter is then applied.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",43)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",44)
   If you have a menu-driven application that OPENs and CLOSEs devices based
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",45)
   on user selections, take care that every OPEN explicitly includes all
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",46)
   deviceparameters important to the application.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",47)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",48)
   If a process OPENs an already OPEN device, YottaDB modifies any
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",49)
   characteristics that accept changes when a device is OPEN to reflect any
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",50)
   new deviceparameter specifications.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",51)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",52)
   In UTF-8 mode, the OPEN command recognizes ICHSET, OCHSET, and CHSET as
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",53)
   three additional deviceparameters to determine the encoding of the the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",54)
   input / output devices.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",55)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",56)
   In M mode, the OPEN command ignores ICHSET, OCHSET, CHSET, and PAD device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",57)
   parameters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",58)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",59)
   If an I/O device uses a multi-byte character encoding, every READ and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",60)
   WRITE operation of that device checks for well-formed characters according
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",61)
   to the specified character encoding with ICHSET or OCHSET. If the I/O
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",62)
   commands encounter an illegal sequence of bytes, they always trigger a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",63)
   run-time error; a VIEW "NOBADCHAR" does not prevent such errors. Strings
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",64)
   created by $ZCHAR() and other Z equivalent functions may contain illegal
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",65)
   sequences. The only way to input or output such illegal sequences is to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",66)
   specify character set "M" with one of these deviceparameters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN",67)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN")
Examples_of_OPEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",1)
   Examples of OPEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",3)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",5)
   set sd="report.dat" open sd:newversion
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",7)
   This OPENs a NEWVERSION of a sequential disk file named report.dat for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",8)
   both read and write access.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","EXAMPLES_OF_OPEN",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS")
OPEN_Deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS",1)
   OPEN Deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND")
APPEND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",1)
   APPEND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",3)
   APPEND Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",5)
   APPEND Applies to: Sequential Files
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",7)
   Positions the file pointer at the end-of-file. This deviceparameter only
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",8)
   affects the device on the first OPEN command or OPEN command if the file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",9)
   is CLOSEd NODESTROY. Re-OPENing an already OPEN device with this
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",10)
   deviceparameter has no effect. By default, OPEN sets the file pointer to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",11)
   the beginning-of-file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",13)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",15)
   If an APPEND is combined with a SEEK deviceparameter the APPEND is done
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",16)
   first - regardless of deviceparameter order.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",18)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",20)
   set sd="foo.txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",21)
   open sd:(append:recordsize=70:wrap)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",22)
   use sd
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",24)
   This example open file foo.txt and positions the file pointer at the end
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",25)
   of the file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","APPEND",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH")
ATTACH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",1)
   ATTACH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",3)
   ATTACH=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",5)
   Attach=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",7)
   ATTACH assigns expr as the handle name to the newly created socket. When
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",8)
   ATTACH is used and one of LISTEN or CONNECT is specified on the same OPEN,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",9)
   the value of expr becomes the identifier of the newly created socket. If
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",10)
   neither LISTEN nor CONNECT is specified, ATTACH is ignored.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",12)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",14)
   open tcpdev:(ichset="M":connect=hostname_":"_portno_":TCP":attach="client"):timeout:"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",16)
   This example uses the ATTACH deviceparameter to specify "client" as the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",17)
   identifier of the newly created socket. Note that YottaDB recognizes ICHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",18)
   only in UTF-8 mode.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ATTACH",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET")
CHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",1)
   CHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",3)
   CHSET=expr Applies to: All devices
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",5)
   Establishes a common encoding for both input and output devices for the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",6)
   device being OPENed in UTF-8 mode. The value of the expression can be M,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",7)
   UTF-8, UTF-16, UTF-16LE, or UTF-16BE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CHSET",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT")
CONNECT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",1)
   CONNECT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",3)
   CONNECT=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",5)
   Creates a client connection with a server, which is located by the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",6)
   information provided by expr. A new socket is allocated for the client
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",7)
   connection and is made the current socket for the device, if the operation
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",8)
   is successful.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",10)
   expr specifies the protocol and the protocol-specific information.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",11)
   Currently, YottaDB supports TCP/IP and LOCAL (also known as UNIX domain)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",12)
   socket protocols. For TCP/IP sockets, specify expr in the form of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",13)
   "<host>:<port>:TCP", where host is an IPv4 or IPv6 address optionally
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",14)
   encapsulated by square-brackets ([]) like "127.0.0.1", "::1",
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",15)
   "[127.0.0.1]", or "[::1]" or a IPv4 or IPv6 hostname like
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",16)
   yottadb.com. When a hostname is specified, YottaDB uses the IP version
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",17)
   of the first address returned by DNS:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",19)
     o that is supported by the operating system, and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",20)
     o for which a network interface exists.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",22)
   For LOCAL sockets, specify expr in the form of "<pathname>:LOCAL", where
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",23)
   <pathname> is the name of the file to be used for communication.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",24)
   <pathname> may contain a dollar sign ($) followed by the name of an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",25)
   environment variable which YottaDB expands in the same way as the device name
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",26)
   for a sequential file. The maximum allowed length of the expanded path
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",27)
   name depends on the OS.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",28)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",29)
   For LOCAL sockets, CONNECT attempts to open the specified file. If it
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",30)
   doesn't exist or there is no listener, CONNECT retries until it succeeds
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",31)
   or a specified timeout expires.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",32)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",33)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",34)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",35)
   CONNECT is not compatible with LISTEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",36)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",37)
   If the OPEN does not specify a timeout, a SOCKET OPEN waits for the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",38)
   connection to complete or an event that terminates the attempt.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",39)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",40)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",41)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",42)
   open tcpdev:(connect=hostname_":"_portno_":TCP":attach="client":ioerror="TRAP"):timeout:"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",43)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",44)
   This example establishes a client connect with the server using the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",45)
   connection string in the format of "hostname:port:TCP".
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","CONNECT",46)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER")
DELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",1)
   DELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",3)
   [NO]DELIMITER=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",5)
   DELIMITER establishes or replaces the list of delimiters used by the newly
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",6)
   created socket. The default is NODELIMITER. The delimiter list on a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",7)
   preexisting device remains the same until it is explicitly replaced or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",8)
   deleted.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",10)
   expr is a string where the following characters have special
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",11)
   interpretation:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",13)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",15)
   expr "ab:/:://:bc" is interpreted as four delimiters, which are "ab", ":",
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",16)
   "/", and "bc". One socket can have 0-64 delimiters and each delimiter can
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",17)
   contain 1-64 characters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",19)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",21)
   open tcpdev:(connect=host_":"_portno_":TCP":delim=$c(13):attach="client"):timeout:"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",23)
   This command specifies $CHAR(13) as the delimiter for the socket tcpdev.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","DELIMITER",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM")
EMPTERM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",1)
   EMPTERM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",3)
   [NO]EMPT[ERM] Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",5)
   Allows an "Erase" character on an empty input line to terminate a READ or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",6)
   READ # command. The default is NOEMPTERM. The ydb_principal_editing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",7)
   environment variable specifies the initial setting of [NO]EMPTERM. The
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",8)
   TERMINFO specified by the current value of the TERM environment variable
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",9)
   defines capnames values "kbs" and/or "kdch1" with character sequences for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",10)
   "Erase." If "kbs" or "kdch1" are multi-character values, you must also
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",11)
   specify the ESCAPE or EDIT deviceparameters for EMPTERM recognition.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",13)
   The erase character as set and shown by stty also terminates a READ
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",14)
   command with an empty input line. You can set this erase character to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",15)
   various values using the stty shell command. Typical values of an erase
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",16)
   character are <CTRL-H> and <CTRL-?>. Characters set and shown with stty
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",17)
   setting must match what the terminal emulator sends.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",19)
   The environment variable TERM must specify a terminfo entry that matches
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",20)
   both what the terminal (or terminal emulator) sends and expects.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EMPTERM",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION")
EXCEPTION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",1)
   EXCEPTION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",3)
   EXCEPTION=expr Applies to: All devices
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",5)
   Defines an error handler for an I/O device. The expression must contain a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",6)
   fragment of YottaDB code (for example, GOTO ERRFILE) that YottaDB XECUTEs when
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",7)
   YottaDB detects an error, or an entryref to which YottaDB transfers control, as
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",8)
   appropriate for the current ydb_ztrap_form, setting except that there is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",9)
   never any implicit popping with EXCEPTION action.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",11)
   A device EXCEPTION gets control after a non-fatal device error and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",12)
   $ETRAP/$ZTRAP get control after other non-fatal errors.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",14)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",16)
   YDB>do ^FREAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",17)
   FREAD;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",18)
    zprint ^FREAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",19)
    read "File > ",sd
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",20)
    set retry=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",21)
    set $ztrap="BADAGAIN"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",22)
    open sd:(readonly:exception="do BADOPEN")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",23)
    use sd:exception="goto EOF"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",24)
    for  use sd read x use $principal write x,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",25)
   EOF;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",26)
    if '$zeof zmessage +$zstatus
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",27)
    close sd
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",28)
    quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",29)
   BADOPEN;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",30)
    set retry=retry+1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",31)
    if retry=2 open sd
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",32)
    if retry=4 halt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",33)
    if $piece($zstatus,",",1)=2 do
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",34)
    . write !,"The file ",sd," does not exist. Retrying in about 2 seconds ..."
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",35)
    . hang 2.1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",36)
    . quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",37)
    if $piece($zstatus,",",1)=13 do
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",38)
    . write !,"The file ",sd," is not accessible. Retrying in about 3 seconds ..."
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",39)
    . hang 3.1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",40)
    . quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",41)
    quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",42)
   BADAGAIN;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",43)
    w !,"BADAGAIN",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",44)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",45)
   File >
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",46)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",47)
   This example asks for the name of the file and displays its contents. It
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",48)
   OPENs that file as READONLY and specifies an EXCEPTION. The exception
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",49)
   handler for the OPEN deals with file-not-found and file-access errors and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",50)
   retries the OPEN command on error. The first USE sets the EXCEPTION to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",51)
   handle end-of-file. The FOR loop reads the file one record at a time and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",52)
   transfers each record to the principal device. The GOTO in the EXCEPTION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",53)
   terminates the FOR loop. At label EOF, if $ZEOF is false, the code
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",54)
   reissues the error that triggered the exception. Otherwise, the CLOSE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",55)
   releases the file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","EXCEPTION",56)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO")
FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",1)
   FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",3)
   FIFO Applies to: FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",5)
   FIFO Applies to: FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",7)
   Specifies that the device for the OPEN is a FIFO name. YottaDB creates the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",8)
   FIFO if it does not already exist and if the process has adequate
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",9)
   privileges. However, in the event that the process does not have adequate
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",10)
   privileges, the process generates a run-time error. A process does not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",11)
   require any special privileges to OPEN an existing FIFO. The FIFO needs to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",12)
   be readable (or writeable) just like any other file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",14)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",16)
   open file:(fifo:read:recordsize=1048576):100
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIFO",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED")
FIXED
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",1)
   FIXED
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",3)
   [NO]FIXED Applies to: SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",5)
   [NO]FIXED Applies to: SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",7)
   Selects a fixed-length record format for sequential disk files. FIXED does
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",8)
   not specify the actual length of a record. Use RECORDSIZE to specify the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",9)
   record length.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",11)
   NOFIXED specifies a variable-length record format for sequential disk
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",12)
   files. NOFIXED is a synonym for VARIABLE. FIXED is incompatible with
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",13)
   STREAM and VARIABLE. By default, records have VARIABLE length record
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",14)
   format.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",16)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",18)
   FIXED length records do not implicitly use embedded record terminators
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",19)
   such as line feeds.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",21)
   In UTF-8 mode, YottaDB I/O enforces a more record-oriented view of the file,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",22)
   treating each record as RECORDSIZE bytes long. Note that a UTF-8
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",23)
   code-point never splits across records. If a multi-byte character (when
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",24)
   CHSET is UTF-8) or a surrogate pair (when CHSET is UTF-16) does not fit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",25)
   into the record (either logical as given by WIDTH or physical as given by
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",26)
   RECORDSIZE), the WRITE command uses the byte values as specified by the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",27)
   PAD deviceparameter to fill the physical record. A combining character may
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",28)
   end up in the subsequent record if it does not fit in the current record.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",30)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",31)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",32)
   PAD is effective only for devices opened with a CHSET related to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",33)
   Unicode(R) characters. In M mode PAD is always <SP>
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",34)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",35)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",36)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",37)
   YDB>do ^fixedex
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",38)
   fixedex;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",39)
     zprint ^fixedex
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",40)
     set file="fix.txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",41)
     open file:(newversion:fixed:recordsize=4)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",42)
     use file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",43)
     write "Hello, World",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",44)
     close file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",45)
     set file="fixnowrap.txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",46)
     open file:(newversion:fixed:recordsize=4:nowrap)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",47)
     use file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",48)
     write "Hel",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",49)
     write "lo, World",! ; This writes only 'lo, '
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",50)
     close file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",51)
     zsystem ("more fix*.txt")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",52)
     zsystem ("od -cb fix.txt")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",53)
     zsystem ("od -cb fixnowrap.txt")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",54)
     quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",55)
   ::::::::::::::
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",56)
   fix.txt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",57)
   ::::::::::::::
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",58)
   Hello, World
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",59)
   ::::::::::::::
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",60)
   fixnowrap.txt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",61)
   ::::::::::::::
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",62)
   Hel lo,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",63)
   0000000   H   e   l   l   o   ,       W   o   r   l   d
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",64)
           110 145 154 154 157 054 040 127 157 162 154 144
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",65)
   0000014
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",66)
   0000000   H   e   l       l   o   ,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",67)
           110 145 154 040 154 157 054 040
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",68)
   0000010
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",69)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",70)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",71)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",72)
   YDB>zprint ^gtmcp
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",73)
   gtmcp ; Copy a binary file using YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",74)
     new dest,line,max,src
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",75)
     if 2>$length($zcmdline," ") write "$ydb_dist/mumps -r source target",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",76)
     set dest=$piece($zcmdline," ",2)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",77)
     set src=$piece($zcmdline," ",1)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",78)
     set max=1024*1024 ; the maximum YottaDB string size
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",79)
     open src:(readonly:FIXED:WRAP:CHSET="M") ;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",80)
     open dest:(newversion:FIXED:WRAP:CHSET="M") ; use FIXED format because it does not insert carriage control characters after $X reaches its maximum value.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",81)
     for  use src read line#max quit:$zeof  use dest write line
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",82)
     close src
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",83)
     use dest
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",84)
     set $x=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",85)
     close dest
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",86)
     quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",87)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",88)
   This example copies a binary file using YottaDB.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FIXED",89)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW")
FOLLOW
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",1)
   FOLLOW
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",3)
   [NO]FOLLOW Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",5)
   Configures READ to return only when it has a complete record or reaches
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",6)
   any specified timeout; it waits for more input rather than terminating on
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",7)
   an EOF (end-of-file) condition.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",9)
   The USE command can switch a device from NOFOLLOW to FOLLOW or from FOLLOW
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",10)
   to NOFOLLOW. This provides a READ mode of operation similar to a tail -f
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",11)
   in UNIX.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","FOLLOW",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP")
GROUP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",1)
   GROUP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",3)
   GROUP=expr Applies to: SOC(LOCAL) SD FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",5)
   Specifies access permission on a UNIX file for other users in the file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",6)
   owner's group. The expression is a character string evaluating to null or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",7)
   to any combination of the letters RWX, indicating respectively Read,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",8)
   Write, and eXecute access. When permission controlling deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",9)
   (OWNER,GROUP,WORLD) appears on an OPEN of a new file, any user category
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",10)
   (OWNER, SYSTEM, WORLD), that is not explicitly specified is given the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",11)
   default access permissions. When any one of these deviceparameters appears
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",12)
   on an OPEN of an existing device, any user category that is not explicitly
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",13)
   specified remains unchanged.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",15)
   In order to modify file security, the user who issues the OPEN must have
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",16)
   ownership.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",18)
   If none of GROUP, SYSTEM, OWNER, or WORLD are specified on OPEN, YottaDB does
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",19)
   not modify the permissions on an existing file and new files are created
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",20)
   using the standard UNIX rules.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",22)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",24)
   open "test52.txt":(append:group="rw")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",26)
   This examples open file test52.txt in append mode with Read Write group
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",27)
   access. Note that the user who opens file text52.txt must have ownership
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",28)
   permissions for it.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","GROUP",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET")
ICHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",1)
   ICHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",3)
   ICHSET=expr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",5)
   Applies to: All devices
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",7)
   Establishes the character encoding of an input device being OPENed and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",8)
   USEed in the UTF-8 mode. The value of the expression can be M, UTF-8,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",9)
   UTF-16, UTF-16LE, or UTF-16BE. In M mode, ICHSET has no effect.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",11)
   If ICHSET is not specified, YottaDB assumes UTF-8 as the default character
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",12)
   set for input from the device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",14)
   If expr is set to a value other than M, UTF-8, UTF-16, UTF-16LE or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",15)
   UTF-16BE, YottaDB produces a run-time error. UTF-16, UTF-LE, and UTF-16BE are
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",16)
   not supported for $Principal and Terminal devices.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",18)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",20)
   ICHSET is a deviceparameter of both the OPEN and USE commands. As ICHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",21)
   can change the character set of an already OPENed device, it can help deal
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",22)
   with binary data intermixed with character data.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ICHSET",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY")
IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",1)
   IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",3)
   Applies to: SD, PIPE, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",5)
   IKEY allows the use of a seperate key for READ to a device; for example,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",6)
   when a YottaDB process is an element of a UNIX pipe. The format of the IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",7)
   deviceparameter is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",9)
   IKEY="key_name [IV]"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",11)
   key_name is case-sensitive and must match a key name in the "files"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",12)
   section of the ydb_crypt_config file. The optional IV specifies an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",13)
   initialization vector to use for encryption and decryption.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",15)
   For more information, refer to the description of KEY deviceparameter of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",16)
   OPEN or USE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IKEY",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT")
INDEPENDENT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",1)
   INDEPENDENT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",3)
   INDEPENDENT Applies to: PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",5)
   The INDEPENDENT deviceparameter specifies that the newly created process
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",6)
   will not be terminated by the CLOSE of the device. The input and output of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",7)
   INDEPENDENT processes should be handled in such a way that it runs
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",8)
   independently even after the CLOSE of the device. By default, CLOSE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",9)
   terminates the process associated with the PIPE device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","INDEPENDENT",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR")
IOERROR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",1)
   IOERROR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",3)
   IOERROR=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",5)
   Enables exception handling in socket devices. expr specifies the I/O error
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",6)
   trapping mode. A value equal to "TRAP" specifies that I/O errors on a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",7)
   device raise error conditions. A value equal to "NOTRAP", or when IOERROR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",8)
   is not specified, indicates that I/O error on a device does not raise
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",9)
   error conditions.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",11)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",13)
   The IOERROR setting is associated with sockets while EXCEPTION is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",14)
   associated with the SOCKET device. In other words, IOERROR can be turned
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",15)
   on or off for each of the sockets associated with a SOCKET device but
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",16)
   there is only one EXCEPTION value which is used for all the sockets.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",18)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",20)
   open sock:(connect=host_":"_port_":TCP":delim=$char(13,10):ioerror="TRAP")::"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",22)
   This example opens a socket connection and specifies that I/O errors on
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",23)
   the device raises error conditions.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",25)
   If $LENGTH(expr)&("Tt"[$EXTRACT(expr)) then Error Trapping is enabled;
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",26)
   otherwise the application must check $DEVICE and other ISVs for errors.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",28)
   Note that an OPEN command does not change the current device. Therefore,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",29)
   $DEVICE does not have the status information when an error occurs on OPEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",30)
   An application should check $TEST and other ISVs for errors on OPEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",31)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",32)
   $DEVICE holds status information only after a socket is successfully
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",33)
   ATTACHed to a socket device. To properly trap IOERRORs related to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",34)
   connection handling, it is best to create an empty SOCKET device (with
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",35)
   something like open tcpdev::timeout:"SOCKET") before opening a socket
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",36)
   connection with the OPEN (with LISTEN or CONNECT deviceparameters)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",37)
   command. Then, use ATTACH to bring it to the current SOCKET device. This
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",38)
   method ensures that a device exists that would update $DEVICE with status
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",39)
   information.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","IOERROR",40)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY")
KEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",1)
   KEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",3)
   Applies to: SD, PIPE, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",5)
   Specifies information about the key file to use for reading and writing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",6)
   encrypted data. The syntax of the KEY deviceparameter is as follows:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",8)
   KEY="key_name [IV]"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",10)
   key_name is case-sensitive and must match a key name in the "files"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",11)
   section of the ydb_crypt_config file. The optional IV specifies an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",12)
   initialization vector to use for encryption and decryption.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",14)
   To perform encryption and description, YottaDB calls an encryption plugin
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",15)
   using the YottaDB encryption API and can use any library that conforms to the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",16)
   API. The encryption plugin in turn can call user-selected cryptographic
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",17)
   libraries for cryptographic functionality. The key name and IV are passed
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",18)
   as binary sequences of bytes to the reference implementation plugin.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",19)
   Because YottaDB only uses the first space in the deviceparameter to delimit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",20)
   the end of the key, the IV can include any content, including spaces. The
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",21)
   YottaDB runtime system uses the plugin to pass the IV to the cryptographic
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",22)
   libraries used, which use the length of the IV, to determine whether an IV
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",23)
   less than the required size it is zero padded, and whether an IV that is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",24)
   longer than the required length generates an error. YottaDB suggests using
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",25)
   $ZCHAR() in preference to $CHAR() when building IV byte sequences, and to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",26)
   make sure that IV sequences are not unintentionally subjected to numeric
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",27)
   conversion.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",28)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",29)
   A USE command with a KEY/IKEY/OKEY deviceparameter that attempts to change
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",30)
   the cipher key or IV, including disabling encryption (by specifying an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",31)
   empty key), only succeeds prior to the first WRITE or READ, or after the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",32)
   encryption or decryption state has been reset, such as after a REWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",33)
   (only for READ) or a TRUNCATE at the start of a file (for both READ and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",34)
   WRITE).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",35)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",36)
   Separate IKEY and OKEY deviceparameters allow different keys for READ from
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",37)
   and WRITE to a device; for example, when a YottaDB process is an element of a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",38)
   UNIX pipe. Because encryption ciphers use state machines (which are
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",39)
   initialized with the IV at the beginning of the file), YottaDB permits READ
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",40)
   and WRITE operations only either starting at the beginning of a file, or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",41)
   at the position at which the last READ or WRITE operation completed. In
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",42)
   particular, non-empty files cannot be opened in APPEND mode; the SEEK
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",43)
   deviceparameter is prohibited; and the TRUNCATE is only permitted at the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",44)
   beginning of a file or at the end, the former deleting the contents, and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",45)
   the latter effectively a no-op.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",46)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",47)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",48)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",49)
   Encrypted files must be written and read sequentially from the beginning
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",50)
   (including the Byte Order Marker for UTF files); YottaDB supports READ and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",51)
   WRITE operations at arbitrary locations in a file only for unencrypted
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",52)
   files.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",53)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",54)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",55)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",56)
   The basic steps to use a key and IV to create an encrypted file and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",57)
   decrypt its data in a testing environment are as follows. These steps are
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",58)
   solely for demonstration purposes. You must understand and appropriately
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",59)
   adjust the steps before using them in a production environment. For
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",60)
   example, in a production environment you should keep the key files in a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",61)
   secure location, protected with appropriate permissions from unauthorized
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",62)
   access (such as 0500 for directories and 0400 for individual files). File
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",63)
   encryption is just one of many components of a comprehensive security
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",64)
   plan.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",65)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",66)
   export LD_LIBRARY_PATH=/usr/local/lib
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",67)
   export GNUPGHOME=$PWD/mygnupg
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",68)
   $ydb_dist/plugin/gtmcrypt/gen_keypair.sh mykeypair@gtm Keymaster
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",69)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Sunday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",70)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Monday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",71)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Tuesday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",72)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Wednesday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",73)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Thursday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",74)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Friday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",75)
   $ydb_dist/plugin/gtmcrypt/gen_sym_key.sh 0 Saturday.key
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",76)
   echo -n "Enter password for ydb_passwd";export ydb_passwd="`$ydb_dist/plugin/gtmcrypt/maskpass|cut -f 3 -d " "`"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",77)
   export ydb_crypt_config=mygtmcryptfile
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",78)
   cat mygtmcryptfile
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",79)
    files: {
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",80)
    CustomerReportKey1: "Sunday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",81)
    CustomerReportKey2: "Monday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",82)
    CustomerReportKey3: "Tuesday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",83)
    CustomerReportKey4: "Wednesday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",84)
    CustomerReportKey5: "Thursday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",85)
    CustomerReportKey6: "Friday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",86)
    CustomerReportKey7: "Saturday.key";
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",87)
   };
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",88)
   $ydb_dist/mumps -dir
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",89)
   YDB>zprint ^encrfile
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",90)
   encrfile
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",91)
    set now=$horolog
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",92)
    set timestamp=$zdate(now,"YYYYMMDDAM1260SS")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",93)
    set dayofweek=$zdate(now,"DAY","","1,2,3,4,5,6,7")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",94)
    set file="Customers"_timestamp_".log"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",95)
    open file:(newversion:key="CustomerReportKey"_dayofweek_" "_timestamp)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",96)
    use file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",97)
    write "Customer Report - Page 1",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",98)
    close file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",99)
    write "IV : ",timestamp,!,"Key : CustomerReportKey"_dayofweek
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",100)
   YDB>do ^encrfile
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",101)
   IV : 20140911AM042419
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",102)
   Key : CustomerReportKey5
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",103)
   YDB>zprint ^readencrfile
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",104)
   readencrfile(key,iv)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",105)
    set file="Customers"_iv_".log"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",106)
    open file:(key=key_" "_iv)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",107)
    use file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",108)
    for read data use $principal write data,! use file quit:$zeof
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",109)
    close file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",110)
   YDB>do ^readencrfile("CustomerReportKey5","20140911AM042419")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",111)
   Customer Report - Page 1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",112)
   YDB>
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",113)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",114)
   In this example, the key name is CustomerReportKey followed by the number
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",115)
   representing the day of the week, and IV is a timestamp, which is also a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",116)
   part of the file name. Although all reports start with the same string
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",117)
   "Customer Report - Page 1", using a different IV for each file ensures
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",118)
   that encrypted data begins with a different sequence of bytes, and making
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",119)
   that IV a part of the file name ensures that the recipient of a report
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",120)
   (who would have access to the key) can easily deduce the IV needed to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",121)
   decrypt the contents.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","KEY",122)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN")
LISTEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",1)
   LISTEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",3)
   LISTEN=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",5)
   A new socket is allocated to listen for a connection. It is made the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",6)
   current socket for the device, if the operation is successful. Upon
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",7)
   successful completion, $KEY is set to the format of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",8)
   "LISTENING|<socket_handle>|{<portnumber>|</path/to/LOCAL_socket>}"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",9)
   otherwise, $KEY is assigned the empty string.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",11)
   expr specifies the protocol and protocol specific information. Currently,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",12)
   YottaDB supports TCP/IP and LOCAL (also known as UNIX domain) socket
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",13)
   protocols. For TCP/IP sockets, specify expr in the form of "<port>:TCP".
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",15)
   If <port>=0 is specified, the system chooses the port for the TCP/IP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",16)
   socket.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",18)
   For LOCAL sockets:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",20)
     o Specify expr in the form of "<pathname>:LOCAL", where <pathname> is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",21)
       the name of the file to be used for communication. <pathname> may
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",22)
       contain a dollar sign ($) followed by the name of an environment
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",23)
       variable which YottaDB expands in the same way as the device name for a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",24)
       sequential file. The maximum allowed length of the expanded path name
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",25)
       depends on the OS.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",26)
     o LISTEN creates the file if it doesn't exist. If the OPEN command
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",27)
       specifies the NEWVERSION deviceparameter, the file specified by the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",28)
       pathname exists, and is a socket file, that file is deleted and YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",29)
       creates a new file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",30)
     o LISTEN with an OPEN processes the GROUP, OWNER, SYSTEM, WORLD, UIC,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",31)
       and NEWVERSION deviceparameters the same as OPEN for sequential files.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","LISTEN",32)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME")
MOREREADTIME
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",1)
   MOREREADTIME
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",3)
   MOREREADTIME=intexpr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",5)
   MOREREADTIME specifies the polling interval (in milliseconds) that a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",6)
   SOCKET device uses to check for arriving packets.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",8)
   With no MOREREADTIME specified, SOCKET READ implements a dynamic approach
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",9)
   of using a longer first interval of 200 ms when it finds no data, then
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",10)
   shortening the interval to 10 ms when data starts to arrive.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",12)
   If an interval is specified, the SOCKET device always uses the specified
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",13)
   interval and doesn't adjust dynamically. This applies to any SOCKET READ.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",15)
   If a SOCKET READ is not subject to any of the defined terminating
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",16)
   conditions, it terminates either after it has at least one character
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",17)
   followed by an interval with no new packets, or reading 1,048,576 bytes.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",19)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",21)
   Use tcpdev:morereadtime=200
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",23)
   This example specifies that all READs for socket device tcpdev must wait
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",24)
   for 200 milliseconds for input.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","MOREREADTIME",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION")
NEWVERSION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",1)
   NEWVERSION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",3)
   NEWVERSION Applies to: SD FIFO SOC(LOCAL)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",5)
   The NEWVERSION deviceparameter assures that when an existing file is used,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",6)
   it is empty upon the OPEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",8)
   By default, if any version of the file exists, OPEN accesses the current
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",9)
   version. If no version of the file exists, OPEN without READONLY creates a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",10)
   new file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",12)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",14)
   YDB>file1="foo.txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",15)
   YDB>open file1:newversion:recordsize=5000
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",16)
   YDB>
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",18)
   This example creates a new version of sequential file foo.txtwith
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",19)
   RECORDSIZE of 5000 bytes.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",21)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",23)
   YDB>set delim=$c(13)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",24)
   YDB>set tcpdev="server$"_$j,timeout=30
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",25)
   YDB>open tcpdev:(LISTEN="local.socket"_":LOCAL":delim=$c(13):attach="server":newversion):timeout:"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",27)
   This example deletes the old local.socket file (if it exists) and creates
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",28)
   a new LISTENING local.socket file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","NEWVERSION",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET")
OCHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",1)
   OCHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",3)
   OCHSET=expr Applies to: All devices
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",5)
   Establishes the character encoding of the output device OPENed and USEed
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",6)
   in the UTF-8 mode. The value of the expression can be M, UTF-8, UTF-16,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",7)
   UTF-16LE, or UTF-16BE. In M mode, OCHSET has no effect.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",9)
   If *CHSET is not specified, YottaDB assumes UTF-8 as the default character
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",10)
   set for all the input / output devices.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",12)
   If expr is set to a value other than M, UTF-8, UTF-16, UTF-16LE or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",13)
   UTF-16BE, YottaDB produces a run-time error. UTF-16, UTF-LE, and UTF-16BE are
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",14)
   not supported for $Principal and Terminal devices.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",16)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",18)
   OCHSET is a deviceparameter of both the OPEN and USE commands. As OCHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",19)
   can change the character set of an already OPENed device, it can help deal
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",20)
   with binary data intermixed with character data.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",22)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",24)
   YDB>SET file1="mydata.out"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",25)
   YDB>SET expr="UTF-16LE"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",26)
   YDB>OPEN file1:(ochset=expr)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",27)
   YDB>SET DS=$CHAR($$FUNC^%HD("0905"))_$CHAR($$FUNC^%HD("091A"))
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",28)
   YDB>SET DS=DS_$CHAR($$FUNC^%HD("094D"))_$CHAR($$FUNC^%HD("091B"))_$CHAR($$FUNC^%HD("0940"))
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",29)
   YDB>USE file1 WRITE DS,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",30)
   YDB>CLOSE file1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",31)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",32)
   This example opens a new file called mydata.out and writes Devanagari
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",33)
   characters in the UTF-16LE encoding.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OCHSET",34)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY")
OKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",1)
   OKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",3)
   Applies to: SD, PIPE, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",5)
   OKEY allows the use of a seperate key for WRITE to a device; for example,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",6)
   when a YottaDB process is an element of a UNIX pipe. The format of the IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",7)
   deviceparameter is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",9)
   OKEY="key_name [IV]"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",11)
   key_name is case-sensitive and must match a key name in the "files"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",12)
   section of the ydb_crypt_config file. The optional IV specifies an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",13)
   initialization vector to use for encryption and decryption.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",15)
   For more information, refer to the description of KEY deviceparameter of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",16)
   OPEN or USE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OKEY",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER")
OWNER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",1)
   OWNER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",3)
   OWNER=expr Applies to: SOC(LOCAL) SD FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",5)
   Specifies access permission on a UNIX file for the owner of the file. The
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",6)
   expression is a character string evaluating to null or to any combination
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",7)
   of the letters RWX, indicating Read, Write, and eXecute access. When any
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",8)
   one of these deviceparameters appears on an OPEN of a new file, any user
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",9)
   category that is not explicitly specified is given the default mask. When
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",10)
   any one of these deviceparameters (OWNER, GROUP, , WORLD) appears on an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",11)
   OPEN of an existing file, any user category that is not explicitly
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",12)
   specified remains unchanged.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",14)
   To modify file security, the user who issues the OPEN must have ownership.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",16)
   If none of GROUP, SYSTEM, OWNER, or WORLD are specified on OPEN, YottaDB does
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",17)
   not modify the permissions on an existing file and new files are created
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",18)
   using the standard UNIX rules.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",20)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",22)
   open "test49.txt":(newversion:owner="rw":group="rw":world="rw")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",24)
   This example opens a new version of test49.txt with Read Write acess for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",25)
   the owner.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","OWNER",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD")
PAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",1)
   PAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",3)
   PAD=expr Applies to: SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",5)
   For FIXED format sequential files when the character set is not M, if a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",6)
   multi-byte character (when CHSET is UTF-8) or a surrogate pair (when CHSET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",7)
   is UTF-16) does not fit into the record (either logical as given by WIDTH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",8)
   or physical as given by RECORDSIZE) the WRITE command uses bytes with the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",9)
   value specified by the PAD deviceparameter to fill out the physical
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",10)
   record. READ ignores the pad bytes when found at the end of the record.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",11)
   The value for PAD is given as an integer in the range 0-127 (the ASCII
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",12)
   characters). PAD is always a byte value and the default is $ZCHAR(32) or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",13)
   [SPACE].
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",15)
   In UTF-8 mode, there are three cases that cause YottaDB to insert PAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",16)
   characters when WRITEing. When READing YottaDB attempts to strip any PAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",17)
   characters. This stripping only works properly if the RECORDSIZE and PAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",18)
   are the same for the READ as when the WRITEs occurred. WRITE inserts PAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",19)
   characters when:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",21)
    1. The file is closed and the last record is less than the RECORDSIZE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",22)
       Records are padded (for FIXED) by WRITE ! as well as when the file is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",23)
       closed.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",24)
    2. $X exceeds WIDTH before the RECORDSIZE is full.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",25)
    3. The next character won't fit in the remaining RECORDSIZE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",27)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",28)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",29)
   In all UTF-16 character sets, RECORDSIZE must be even and PAD bytes occupy
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",30)
   two bytes with the high order byte zero.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",31)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",32)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",33)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",34)
   YDB>do ^padexample
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",35)
   padexample
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",36)
    zprint ^padexample
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",37)
    set a="************"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",38)
    set encoding="UTF-8"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",39)
    set filename="bom"_encoding_".txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",40)
    open filename:(newversion:fixed:record=8:pad=66:chset=encoding)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",41)
    use filename
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",42)
    write a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",43)
    close filename
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",44)
    halt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",45)
   $ cat bomUTF-8.txt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",46)
   **BB**BB**BB**BB**BB**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",47)
   $ od -tcd1 bomUTF-8.txt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",48)
   0000000  344  270  273  350  246  201    B    B  351  233  250  345  234  250    B    B
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",49)
            -28  -72  -69  -24  -90 -127   66   66  -23 -101  -88  -27 -100  -88   66   66
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",50)
   0000020  350  245  277  347  217  255    B    B  347  211  231  345  201  234    B    B
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",51)
            -24  -91  -65  -25 -113  -83   66   66  -25 -119 -103  -27 -127 -100   66   66
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",52)
   0000040  347  225  231  345  234  250    B    B  345  271  263  345  216  237
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",53)
            -25 -107 -103  -27 -100  -88   66   66  -27  -71  -77  -27 -114  -97   32   32
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",54)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",55)
   In this example, the local variable a is set to a string of three-byte
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",56)
   characters. PAD=66 sets padding byte value to $CHAR(66)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PAD",57)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE")
PARSE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",1)
   PARSE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",3)
   PARSE Applies to: PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",5)
   The PARSE deviceparameter invokes preliminary validation of the COMMAND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",6)
   value. When debugging, PARSE provides more accessible diagnosis for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",7)
   COMMAND values. By default, OPEN does not validate command values before
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",8)
   passing them to the newly created process. PARSE has certain limitations,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",9)
   which may, or may not map to, those of the shell.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","PARSE",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE")
RECORDSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",1)
   RECORDSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",3)
   RECORDSIZE=intexpr Applies to: SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",5)
   Overrides the default record size for a disk.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",7)
   RECORDSIZE specifies an initial WIDTH. Note because RECORDSIZE is in bytes
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",8)
   that in UTF-8 mode it produces a WIDTH that assumes one-byte characters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",10)
   The RECORDSIZE of a fixed length record for a YottaDB sequential disk device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",11)
   is always specified in bytes, rather than characters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",13)
   For all UTF-16 CHSET values, RECORDSIZE must be even and PAD characters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",14)
   each occupy two bytes in the record.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",16)
   The maximum size of intexpr is 1,048,576 bytes. YottaDB produces an error if
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",17)
   you specify a value greater than 1,048,576.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",19)
   When a CHSET related to Unicode(R) characters is in use, YottaDB treats
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",20)
   RECORDSIZE as a byte limit at which to wrap or truncate output depending
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",21)
   on [Z][NO]WRAP. For any Unicode character set, YottaDB ignores RECORDSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",22)
   for a device which is already open if any I/O has been done.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",24)
   If the character set is not UTF-16, UTF-16LE, UTF-16BE, the default
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",25)
   RECORDSIZE is 32K-1bytes.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",27)
   If the character set is UTF-16, UTF-16LE or UTF16-BE, the RECORDSIZE must
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",28)
   always be in multiples of 2. For these character sets, the default
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",29)
   RECORDIZE is 32K-4 bytes.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",30)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",31)
   For all UTF-16 CHSET values, RECORDSIZE must be even and PAD characters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",32)
   each occupy two bytes in the record.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","RECORDSIZE",33)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND")
REWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",1)
   REWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",3)
   REWIND Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",5)
   REWIND Applies to: Sequential Files
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",7)
   REWIND positions the file pointer of a sequential disk.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",9)
   When $PRINCIPAL identifies a device that supports REWIND, the REWIND or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",10)
   INREWIND device parameters perform a REWIND of the input and OUTREWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",11)
   performs a REWIND of the output.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",13)
   By default, OPEN does not REWIND.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",15)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",17)
   OPEN "test40.txt":(REWIND:RECORDSIZE=70:NOWRAP)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",19)
   This example opens file test40.txt and places the file pointer at the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",20)
   beginning of the file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","REWIND",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR")
SEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",1)
   SEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",3)
   SEEK Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",5)
   Positions the current file pointer to the location specified in strexpr.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",6)
   The format of strexpr is a string of the form "[+|-]integer" where
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",7)
   unsigned value specifies an offset from the beginning of the file, and an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",8)
   explicitly signed value specifies an offset relative to the current file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",9)
   position. For STREAM or VARIABLE format, the positive intexpr after any
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",10)
   sign is a byte offset, while for a FIXED format, it is a record offset. In
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",11)
   order to deal with the possible presence of a Byte Order Marker (BOM),
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",12)
   SEEK for a FIXED format file written in a UTF character set must follow at
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",13)
   least one prior READ since the device was created.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",15)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",17)
   If an APPEND is combined with a SEEK deviceparameter the APPEND is done
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",18)
   first - regardless of deviceparameter order.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",20)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",22)
   YDB>zprint ^seekdemo
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",23)
   seekdemo
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",24)
     new x,p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",25)
     set p="seekfixed"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",26)
     open p:(newversion:fixed:recordsize=60)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",27)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",28)
     ; create file with 9 records of length 60 bytes each
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",29)
     ; number from 0 to correspond to record offset
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",30)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",31)
     for i=0:1:8 write $justify(i_" - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-|",60)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",32)
     use p:rewind
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",33)
     for i=0:1:8 read x set zk=$zkey use $p write "x= ",x," $zkey= ",zk,! use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",34)
     close p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",35)
     write !!,"** OPEN with FIXED:RECORDSIZE=60:seek=""5""",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",36)
     open p:(fixed:recordsize=60:seek="5")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",37)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",38)
     read x set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",39)
     ;expect: $ZKEY= 6,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",40)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",41)
     write !,"** use with SEEK=""-3""",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",42)
     use p:seek="-3"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",43)
     read x set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",44)
     ;expect: $ZKEY= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",45)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",46)
     write !,"** use with SEEK=""-1"" to read from the same record. read x#20 to read a partial record",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",47)
     use p:seek="-1"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",48)
     read x#20 set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",49)
     ;expect: $ZKEY= 3,20
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",50)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",51)
     write !,"** read x#40 to finish reading the record",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",52)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",53)
     read x#40 set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",54)
     ;expect: $ZKEY= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",55)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",56)
     write !,"** CLOSE NODESTROY and reOPEN with no deviceparameters",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",57)
     close p:nodestroy
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",58)
     open p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",59)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",60)
     read x set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",61)
     ;expect: $ZKEY= 5,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",62)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",63)
     write !,"** CLOSE NODESTROY and reOPEN with SEEK=""+2""",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",64)
     close p:nodestroy
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",65)
     open p:seek="+2"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",66)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",67)
     read x set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",68)
     ;expect: $ZKEY= 8,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",69)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",70)
     write !,"** CLOSE NODESTROY and reOPEN with M:SEEK=""+3""",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",71)
     close p:nodestroy
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",72)
     open p:(M:seek="+3")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",73)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",74)
     read x set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",75)
     ;expect: $ZKEY= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",76)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",77)
     write !,"** CLOSE NODESTROY and reOPEN with APPEND:SEEK=""-1""",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",78)
     close p:nodestroy
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",79)
     open p:(append:seek="-1")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",80)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",81)
     read x set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",82)
     ;expect: $ZKEY= 9,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",83)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",84)
     close p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",85)
     write !,"** CLOSE DESTROY and OPEN non-fixed with SEEK=""120"" and read 60 bytes",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",86)
     open p:seek="120"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",87)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",88)
     read x#60 set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",89)
     ;expect: $ZKEY= 180
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",90)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",91)
     write !,"** CLOSE NODESTROY and reOPEN with append:SEEK=""-60"" and read last 60 bytes",!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",92)
     close p:nodestroy
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",93)
     open p:(append:seek="-60")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",94)
     use p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",95)
     read x#60 set ZKEY=$zkey
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",96)
     ;expect: $ZKEY= 540
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",97)
     use $p write "x= ",x," $zkey= ",ZKEY,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",98)
     close p
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",99)
     quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",100)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",101)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",102)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",103)
   YDB>do ^seekdemo
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",104)
   x= 0 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 1,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",105)
   x= 1 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 2,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",106)
   x= 2 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 3,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",107)
   x= 3 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",108)
   x= 4 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 5,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",109)
   x= 5 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 6,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",110)
   x= 6 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 7,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",111)
   x= 7 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 8,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",112)
   x= 8 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 9,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",113)
   ** OPEN with FIXED:RECORDSIZE=60:seek="5"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",114)
   x= 5 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 6,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",115)
   ** use with SEEK="-3"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",116)
   x= 3 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",117)
   ** use with SEEK="-1" to read from the same record. read x#20 to read a partial record
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",118)
   x= 3 - [-05-|-10-|-15-| $zkey= 3,20
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",119)
   ** read x#40 to finish reading the record
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",120)
   x= -20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",121)
   ** CLOSE NODESTROY and reOPEN with no deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",122)
   x= 4 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 5,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",123)
   ** CLOSE NODESTROY and reOPEN with SEEK="+2"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",124)
   x= 7 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 8,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",125)
   ** CLOSE NODESTROY and reOPEN with M:SEEK="+3"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",126)
   x= 3 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 4,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",127)
   ** CLOSE NODESTROY and reOPEN with APPEND:SEEK="-1"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",128)
   x= 8 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 9,0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",129)
   ** CLOSE DESTROY and OPEN non-fixed with SEEK="120" and read 60 bytes
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",130)
   x= 2 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 180
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",131)
   ** CLOSE NODESTROY and reOPEN with append:SEEK="-60" and read last 60 bytes
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",132)
   x= 8 - [-05-|-10-|-15-|-20-|-25-|-30-|-35-|-40-|-45-|-50-|-55-| $zkey= 540
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",133)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",134)
   YDB>
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",135)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",136)
   This program demonstrates the use of the SEEK deviceparameter on OPEN and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",137)
   USE and reOPEN after CLOSE NODESTROY. This test is shown as an M program
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",138)
   which may be executed, followed by the expected test output. First the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",139)
   test creates the file called "seekfixed" with 9, 60-byte records and then
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",140)
   REWINDs and reads each record and outputs the record followed by $ZKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",141)
   which is a record,byte pair. Note that the records are numbered from 0 to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",142)
   match the SEEK record offset. Later in the test the same file is OPENed
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",143)
   VARIABLE so $ZKEY will be a byte offset in that case. Details are given
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",144)
   after the file output.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",145)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",146)
   The first OPEN has deviceparameters set to (FIXED:RECORDSIZE=60:SEEK="5")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",147)
   which SEEKs to record offset 5 or physical record 6. Note, FIXED length
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",148)
   records and RECORDSIZE remain in effect after a CLOSE NODESTROY unless
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",149)
   changed on a reOPEN. Record offset 5 is read and output along with $ZKEY=
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",150)
   6,0 which points to the beginning of record offset 6. Next, a USE with
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",151)
   SEEK="-3" is done to move back 3 records to read and output record
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",152)
   followed by $ZKEY= 4,0. A USE with SEEK="-1" moves back one record to the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",153)
   beginning of the record just processed. A partial read of 20 bytes is done
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",154)
   to show a record offset 3 with a byte offset of 20 or $ZKEY= 3,20. A read
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",155)
   of 40 bytes is then done to finish processing that record for a $ZKEY=
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",156)
   4,0. Next a sequence of CLOSE NODESTROY and reOPENs are done. After the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",157)
   first CLOSE NODESTROY a reOPEN is done with no deviceparameters. The state
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",158)
   of the file device, including file position, is restored and a read is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",159)
   done of record offset 4 which is output followed by $ZKEY= 5,0. The file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",160)
   device is then CLOSEd NODESTROY and a reOPEN is done with the only
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",161)
   deviceparameter being SEEK="+2". The state of the file device is restored
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",162)
   and a relative SEEK is done 2 records later in the file with a read which
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",163)
   outputs record offset 7 followed by $ZKEY= 8,0. The file device is then
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",164)
   CLOSEd NODESTORY and a reOPEN is done with deviceparameters (M:SEEK="+3").
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",165)
   The file device is OPENed at the beginning of the file due to the presence
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",166)
   of a deviceparameter (M) other than SEEK on reOPEN. A relative SEEK
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",167)
   forward of 3 records is then done from the beginning of the file and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",168)
   record offset 3 is read and output followed by $ZKEY= 4,0. The file device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",169)
   is then CLOSEd NODESTORY and a reOPEN is done with the (APPEND:SEEK="-1").
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",170)
   APPEND moves the file position to the EOF and then the SEEK="-1" moves the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",171)
   file position to the beginning of record 8 - the final record in the file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",172)
   Note, the APPEND is applied prior to the SEEK - regardless of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",173)
   deviceparameter order. The file device is then CLOSEd (DESTROY is the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",174)
   default) and OPENed with the only deviceparameter being absolute
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",175)
   SEEK="120" to byte offset 120. This processing is NOFIXED by default and a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",176)
   read of x#60 is done and output followed by $ZKEY= 180. The output is the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",177)
   same as record 2 in FIXED format. Finally, the file device is then CLOSEd
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",178)
   NODESTROY and a reOPEN is done with deviceparameters (APPEND:SEEK="-60").
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",179)
   This will move the file position to the EOF and go back 60 bytes which is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",180)
   the starting offset to the final record in the file. Another read of x#60
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",181)
   and is done and output followed by $ZKEY= 540 - which is the size of the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",182)
   file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SEEK=STREXPR",183)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL")
SHELL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",1)
   SHELL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",3)
   SHELL Applies to: PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",5)
   The SHELL deviceparameter specifies the shell for the new process. By
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",6)
   default the newly created process uses the shell specified by the $SHELL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",7)
   environment variable, otherwise, if the environment variable SHELL is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",8)
   undefined the process uses /bin/sh.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SHELL",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR")
STDERR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",1)
   STDERR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",3)
   STDERR Applies to: PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",5)
   The STDERR deviceparameter specifies that the stderr output from the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",6)
   created process goes to a PIPE device with the name of the STDERR value.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",7)
   This PIPE device acts as a restricted device that can appear only as the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",8)
   argument to USE, READ and CLOSE commands. It is implicitly READONLY and an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",9)
   attempt to WRITE to it triggers an error. If it has not previously acted
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",10)
   as the argument to an explicit CLOSE command, the CLOSE of the PIPE device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",11)
   implicitly closes the the STDERR device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",13)
   If the OPEN command does not specify STDERR, YottaDB redirects the stderr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",14)
   output of the co-process created by the COMMAND to the standard output of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",15)
   the co-process. Specify STDERR when there is a need to read the standard
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",16)
   error of the COMMAND seperately.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STDERR",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM")
STREAM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",1)
   STREAM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",3)
   [NO]STREAM Applies to: SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",5)
   STREAM and VARIABLE are semantically equivalent unless WRAP is disabled.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",6)
   As long as records do not exceed the WIDTH, they are also equivalent.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",8)
   When WRAP is disabled and a WRITE exceeds the WIDTH, VARIABLE format
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",9)
   truncates the line at the WIDTH, however in STREAM format, each WRITE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",10)
   argument is output without truncation or line terminator and the total
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",11)
   record can be of arbitrary length.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",13)
   For STREAM or VARIABLE record format files, a READ returns when it
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",14)
   encounters an EOL, or has read #length characters for a READ #(fixed
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",15)
   length READ), or WIDTH characters if #length is not specified, whichever
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",16)
   occurs first.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",18)
   By default, records are VARIABLE, NOSTREAM.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",20)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",22)
   set sd="foo.txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",23)
   open sd:(newversion:stream)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",24)
   use sd:(width=20:nowrap)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",25)
   for i=1:1:10 write " the quick brown fox jumped over the lazy dog ",$x,!
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",26)
   use sd:(rewind:width=100)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",27)
   for i=1:1 use sd read x quit:$zeof use $principal write !,i,?5,x
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",28)
   close sd
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",29)
   quit
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",30)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",31)
   The output of this example is as follows:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",32)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",33)
   1     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",34)
   2     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",35)
   3     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",36)
   4     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",37)
   5     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",38)
   6     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",39)
   7     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",40)
   8     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",41)
   9     the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",42)
   10    the quick brown fox jumped over the lazy dog 46
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",43)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",44)
   If you change the FORMAT to VARIABLE, the same example produces the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",45)
   following output.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",46)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",47)
   1     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",48)
   2     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",49)
   3     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",50)
   4     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",51)
   5     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",52)
   6     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",53)
   7     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",54)
   8     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",55)
   9     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",56)
   10    the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",57)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",58)
   If you remove the "!" format from the WRITE sequence for VARIABLE, the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",59)
   same example produces the following output:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",60)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",61)
   1     the quick brown fox
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",62)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",63)
   With STREAM, the same example produces the following output:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",64)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",65)
   1     the quick brown fox jumped over the lazy dog 46 the quick brown fox jumped over the lazy dog 94 the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",66)
   2     quick brown fox jumped over the lazy dog 142 the quick brown fox jumped over the lazy dog 191 the q
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",67)
   3    uick brown fox jumped over the lazy dog 240 the quick brown fox jumped over the lazy dog 289 the qui
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",68)
   4    ck brown fox jumped over the lazy dog 338 the quick brown fox jumped over the lazy dog 387 the quick
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",69)
   5     brown fox jumped over the lazy dog 436 the quick brown fox jumped over the lazy dog 485
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","STREAM",70)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM")
SYSTEM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",1)
   SYSTEM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",3)
   SYSTEM=expr Applies to: SOC(LOCAL) SD FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",5)
   This deviceparameter is a synonym for OWNER that is provided in the UNIX
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",6)
   version of YottaDB for compatibility with OpenVMS applications.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",8)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",10)
   YDB> set perm="rwx"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",11)
   YDB>OPEN "test52.txt":(NEWVERSION:SYSTEM="r":GROUP=perm:WORLD=perm)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",12)
   YDB>ZSYSTEM "ls -la test52.txt"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",14)
   -r--rwxrwx 1 user group 0 Aug 20 18:36 test52.txt
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",15)
   YDB>
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",17)
   This example opens file test52.txt and sets read access for the owner,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",18)
   while others have complete access.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","SYSTEM",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE")
TRUNCATE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",1)
   TRUNCATE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",3)
   [NO]TRUNCATE Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",5)
   Truncates the file destroying all data beyond the current file pointer. If
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",6)
   APPEND is also specified, the file pointer will be positioned at the end
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",7)
   of the file even if TRUNCATE is before APPEND in the list of device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",8)
   parameters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",10)
   TRUNCATE on a USE $PRINCIPAL command works on a stdout device when the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",11)
   device supports the action.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","TRUNCATE",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC")
UIC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",1)
   UIC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",3)
   UIC=expr Applies to: SOC(LOCAL) SD FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",5)
   Specifies the owner and group for the file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",7)
   Specifies the group that has access to the file. The format of the string
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",8)
   is "o,g" where g is a decimal number representing the group portion of the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",9)
   UIC and o is a decimal number representing the owner portion. The
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",10)
   super-user can set the file UIC to any value. See the man page for the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",11)
   chown() system call for the rules for regular users since they vary by
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",12)
   platform and system configuration.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","UIC",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE")
VARIABLE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",1)
   VARIABLE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",3)
   VARIABLE Applies to: SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",5)
   Specifies the VARIABLE record length format for sequential disk files.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",7)
   By default, records have variable length format.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","VARIABLE",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD")
WORLD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",1)
   WORLD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",3)
   WORLD=expr Applies to: SOC(LOCAL) SD FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",5)
   WORLD=expr Applies to: LOCAL Sockets, Sequential Files, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",7)
   Specifies access permissions for users other than the owner who are not in
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",8)
   the group specified for a file. This category of users is usually referred
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",9)
   to as other in UNIX. The expression is a character string evaluating to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",10)
   null or to any combination of the letters RWX, indicating respectively
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",11)
   Read, Write, and eXecute access. When any one of these deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",12)
   appear on an OPEN of an existing file, any user category that is not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",13)
   explicitly specified remains unchanged.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",15)
   To modify file security, the user who issues the OPEN must have ownership.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",17)
   By default, OPEN and CLOSE do not modify the permissions on an existing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",18)
   file. Unless otherwise specified, when OPEN creates a new file, it
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",19)
   establishes security using standard defaulting rules.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",21)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",23)
   OPEN "test51.txt":(NEWVERSION:WORLD="rw")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",25)
   This example opens file test51.txt and specifies Read Write permission for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",26)
   users not in owner's group.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WORLD",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY")
WRITEONLY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",1)
   WRITEONLY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",3)
   [NO]WRITEONLY Applies to: PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",5)
   The WRITEONLY deviceparameter specifies that the PIPE acts only to send
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",6)
   its output to the created process. Any attempt to READ from such a PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",7)
   triggers an error. Note that when you open a PIPE with both STDERR and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",8)
   WRITEONLY you can still READ from the STDERR device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","WRITEONLY",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE")
ZBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",1)
   ZBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",3)
   ZBFSIZE Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",5)
   Allocates a buffer used by YottaDB when reading from a socket. The ZBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",6)
   deviceparameter should be at least as big as the largest message expected.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",8)
   By default, the size of ZBFSIZE is 1024 and the maximum it can be is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",9)
   1048576.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZBFSIZE",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY")
ZDELAY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",1)
   ZDELAY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",3)
   Z[NO]DELAY Applies to: SOC(TCP)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",5)
   Controls buffering of data packets by the system TCP stack using the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",6)
   TCP_NODELAY option to the setsockopt system call. This behavior is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",7)
   sometimes known as the Nagle algorithm. The default is ZDELAY. This delays
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",8)
   sending additional packets until either an acknowledgment of previous
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",9)
   packets is received or an interval passes. If several packets are sent
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",10)
   from one end of a connection before the other end responds, setting
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",11)
   ZNODELAY may be desirable though at the cost of additional packets being
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",12)
   transmitted over the network. ZNODELAY must be fully spelled out.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",14)
   LOCAL sockets ignore the ZDELAY deviceparameter.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",16)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",18)
   open tcpdev:(LISTEN=portno_":TCP":attach="server":zbfsize=2048:zibfsize=1024):timeout:"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",20)
   This example opens the socket device tcpdev and allocates a buffer size of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",21)
   2048 bytes.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZDELAY",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF")
ZFF
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",1)
   ZFF
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",3)
   Z[NO]FF=expr Applied to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",5)
   Z[NO]FF=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",7)
   expr specifies a string of characters, typically in $CHAR() format to send
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",8)
   to socket device, whenever a routine issues a WRITE #. When no string is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",9)
   specified or when ZFF="", then no characters are sent. The default in YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",10)
   is ZNOFF.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZFF",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE")
ZIBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",1)
   ZIBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",3)
   ZIBFSIZE Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",5)
   ZIBFSIZE Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",7)
   Sets the buffer size used by the network software (setsockopt SO_RCVBUF).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",9)
   The default and the maximum values depend on the platform and/or system
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",10)
   parameters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",12)
   Note that LOCAL sockets ignore the ZIBFSIZE deviceparameter.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETERS","s","ZIBFSIZE",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE")
OPEN_Deviceparameter_Table
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",1)
   OPEN Deviceparameter Table
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",3)
   +------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",4)
   |                   OPEN Deviceparameters                    |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",5)
   |------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",6)
   | OPEN DEVICEPARAMETER | TRM | SD | FIFO | PIPE | NULL | SOC |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",7)
   |------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",8)
   |           TRM: Valid for terminals and printers            |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",9)
   |                                                            |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",10)
   |            SD: Valid for sequential disk files             |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",11)
   |                                                            |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",12)
   |                   FIFO: Valid for FIFOs                    |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",13)
   |                                                            |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",14)
   |                NULL: Valid for null devices                |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",15)
   |                                                            |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",16)
   |                   PIPE: Valid for PIPEs                    |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",17)
   |                                                            |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",18)
   |               SOC: Valid for Socket devices                |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",19)
   |------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",20)
   | APPEND               |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",21)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",22)
   | ATTACH=expr          |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",23)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",24)
   | CHSET=encoding       | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",25)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",26)
   | COMMAND=expr         |     |    |      | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",27)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",28)
   | CONNECT=expr         |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",29)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",30)
   | [NO]DELIMITER        |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",31)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",32)
   | [NO]EMPT[ERM]        | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",33)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",34)
   | EXCEPTION=expr       | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",35)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",36)
   | FIFO                 |     |    | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",37)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",38)
   | [NO]FIXED            |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",39)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",40)
   | [NO]FOLLOW           |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",41)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",42)
   | GROUP=expr           |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",43)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",44)
   | ICHSET=encoding      | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",45)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",46)
   | IKEY                 |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",47)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",48)
   | INDEPENDENT          |     |    |      | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",49)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",50)
   | IOERROR=expr         |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",51)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",52)
   | KEY                  |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",53)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",54)
   | LISTEN=expr          |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",55)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",56)
   | [NO]NEWVERSION       |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",57)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",58)
   | OCHSET=encoding      | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",59)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",60)
   | OKEY                 |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",61)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",62)
   | OWNER=expr           |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",63)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",64)
   | PARSE                |     |    |      | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",65)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",66)
   | [NO]READONLY         |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",67)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",68)
   | RECORDSIZE=intexpr   |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",69)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",70)
   | SEEK=strexpr         |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",71)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",72)
   | SHELL=expr           |     |    |      | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",73)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",74)
   | STDERR=expr          |     |    |      | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",75)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",76)
   | [NO]STREAM           |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",77)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",78)
   | SYSTEM=expr          |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",79)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",80)
   | [NO]TRUNCATE         |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",81)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",82)
   | UIC=expr             |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",83)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",84)
   | VARIABLE             |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",85)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",86)
   | WORLD=expr           |     | X  | X    |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",87)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",88)
   | [NO]WRAP             | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",89)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",90)
   | [NO]WRITEONLY        |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",91)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",92)
   | ZBFSIZE              |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",93)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",94)
   | Z[NO]DELAY           |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",95)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",96)
   | Z[NO]FF              |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",97)
   |----------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",98)
   | ZIBFSIZE             |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",99)
   +------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","OPEN","s","OPEN_DEVICEPARAMETER_TABLE",100)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE")
Use
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",1)
   Use
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",3)
   The USE command selects the current device for READs (input) and WRITEs
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",4)
   (output).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",5)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",6)
   The format of the USE command is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",8)
   U[SE][:tvexpr] expr[:(keyword[=expr][:...])][,...]
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",10)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",12)
   USE $P:(X=0:Y=$Y-1:NOECHO)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",14)
   This example USEs the principal device. If that device is a terminal, the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",15)
   deviceparameters turn off echo and position the cursor to the beginning of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",16)
   the previous line.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS")
USE_Deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS",1)
   USE Deviceparameters
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH")
ATTACH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",1)
   ATTACH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",3)
   ATTACH=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",5)
   expr specifies the handle for a socket in the socketpool. ATTACH looks up
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",6)
   expr in the socketpool's collection of sockets and brings the one found to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",7)
   the current SOCKET device. If an ATTACH operation is successful, the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",8)
   attached socket becomes the current socket for the device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",10)
   ATTACH is not compatible with any other device parameters in the USE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",11)
   command.A socket can move from one device to another using DETACH/ATTACH.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",13)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",15)
   A socket does not carry [I|O]CHSET with it while being moved. Such a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",16)
   socket uses the [I|O]CHSET of the device it is ATTACHed to. If there is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",17)
   input still buffered, this may cause unintentional consequences in the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",18)
   application if [I|O]CHSET changes. YottaDB does not detect (or report) a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",19)
   change in [I|O]CHSET due to DETACH/ATTACH.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ATTACH",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL")
CANONICAL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",1)
   CANONICAL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",3)
   [NO]CANONICAL Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",5)
   [NO]CANONICAL Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",7)
   Enables or disables canonical input as controlled by the ICANON terminal
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",8)
   attribute. See the documentation on your platform for details, but in
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",9)
   general this would be erase and kill edit functions, and lines delimited
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",10)
   by NL (usually <LF>), EOF (usually ^D), and EOL (usually not defined).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",12)
   By default, canonical input is enabled (that is [NO]CANONICAL is the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",13)
   default).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CANONICAL",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE")
CENABLE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",1)
   CENABLE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",3)
   [NO]CENABLE Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",5)
   Enables or disables the ability to force YottaDB into Direct Mode by entering
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",6)
   <CTRL-C> at $PRINCIPAL.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",8)
   If CENABLE is set, <CTRL-C> interrupts process execution.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",10)
   By default, CENABLE is set. If CTRAP contains $C(3), CENABLE is disabled.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",12)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",14)
   use $principal:(nocenable:ctrap="":exception="")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CENABLE",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN")
CLEARSCREEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",1)
   CLEARSCREEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",3)
   CLEARSCREEN Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",5)
   CLEARSCREEN Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",7)
   Clears the terminal screen from the present cursor position to the bottom
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",8)
   of the screen. The CLEARSCREEN deviceparameter does not change the cursor
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",9)
   position or the $X and $Y variables.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",11)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",13)
   U $P:(X=0:Y=0:CLEAR)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",15)
   This example positions the cursor to "home" in the upper left corner of a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",16)
   VDT and clears the entire current screen "page."
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CLEARSCREEN",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT")
CONNECT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",1)
   CONNECT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",3)
   CONNECT=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",5)
   CONNECT=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",7)
   Enables a client connection with a server, which is located by the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",8)
   information provided by expr. A new socket is allocated for the client
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",9)
   connection and is made the current socket for the device, if the operation
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",10)
   is successful.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",12)
   expr specifies the protocol and the protocol-specific information.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",13)
   Currently, YottaDB supports TCP/IP and LOCAL (also known as UNIX domain)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",14)
   socket protocols.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",16)
   For more information, refer to "CONNECT".
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",18)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",20)
   CONNECT is not compatible with LISTEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",22)
   Although CONNECT can be used with USE command, YottaDB recommends not to use
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",23)
   it that way, because unlike the OPEN command, there is no way to specify a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",24)
   timeout to the USE command. CONNECT in the USE command take a default
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",25)
   timeout value of 0.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONNECT",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT")
CONVERT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",1)
   CONVERT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",3)
   [NO]CONVERT Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",5)
   [NO]CONVERT Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",7)
   Enables or disables YottaDB from converting lowercase input to uppercase
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",8)
   during READs.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",10)
   By default, the terminal device driver operates NOCONVERT.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",12)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",14)
   use $principal:(convert)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",15)
   READ X
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",17)
   This example converts all lowercase to uppercase during READ X.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CONVERT",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP")
CTRAP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",1)
   CTRAP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",3)
   CTRAP=expr Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",5)
   CTRAP=expr Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",7)
   Establishes the <CTRL> characters in the expression as trap characters for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",8)
   the current device. When YottaDB receives a trap character in the input from
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",9)
   a device, YottaDB issues a run-time exception. The device does not have to be
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",10)
   the current device, that is $IO.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",12)
   The <CTRL> characters are ASCII 0 though 31. However terminal
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",13)
   configuration may prevent of most <CTRL> characters from ever reaching
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",14)
   YottaDB's CTRAP facility.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",16)
   For example, the command U $P:CTRAP=$C(26,30,7,19) sets a trap for the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",17)
   ASCII characters <SUB>, <RS>, <BEL> and <DC3>.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",19)
   Specifying CTRAP completely replaces the previous CTRAP list. Setting
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",20)
   CTRAP to the null string ("") disables character trapping.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",22)
   A trap character enabled by CTRAP produces one of the following actions:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",24)
   For more information on error handling, refer to Chapter 13: "Err
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",25)
   Processing".
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",27)
   When CTRAP includes <CTRL-C>, [NO]CENABLE has no effect. CTRAPping
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",28)
   <CTRL-C> also takes precedence over CENABLE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","CTRAP",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER")
DELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",1)
   DELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",3)
   [NO]DELIMITER Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",5)
   [NO]DELIMITER Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",7)
   DELIMITER establishes or replaces the list of delimiters used by the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",8)
   current socket. The default is NODELIMITER.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",10)
   expr must be a string of the following format:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",12)
    1. ':' is used to separate delimiters (it is the delimiter for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",13)
       delimiters).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",14)
    2. '/' serves as an escape character.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",16)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",18)
   expr "ab:/:://:bc" is interpreted as four delimiters, which are "ab", ":",
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",19)
   "/", and "bc". One socket can have 0-64 delimiters and each delimiter can
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",20)
   contain 1-64 characters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",22)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",24)
   See "Socket (server.m)" example.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DELIMITER",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH")
DETACH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",1)
   DETACH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",3)
   DETACH=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",5)
   DETACH=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",7)
   Removes the socket identified by expr from the current socket device,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",8)
   without affecting any existing connection of that socket. The removed
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",9)
   socket is placed in the socketpool and may be attached to another socket
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",10)
   device. If the socket being removed is the current socket, then YottaDB does
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",11)
   the following:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",13)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",15)
   A socket can move from one device to another using DETACH/ATTACH. A socket
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",16)
   does not carry [I|O]CHSET with it while being moved. Such a socket uses
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",17)
   the [I|O]CHSET of the device it is ATTACHed to. If there is input still
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",18)
   buffered, this may cause unintentional consequences in the application if
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",19)
   [I|O]CHSET changes. YottaDB does not detect (or report) a change in
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",20)
   [I|O]CHSET due to DETACH/ATTACH.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",22)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",24)
   YDB>set tcp="seerv" open tcp:(listen="6321:TCP":attach="serv")::"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",25)
   YDB>zshow "D"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",26)
   /dev/pts/9 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",27)
   seerv OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",28)
       SOCKET[0]=serv DESC=3 LISTENING PASSIVE NOTRAP PORT=6321
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",29)
            ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",30)
   YDB>set tcp="seerv" o tcp:(listen="6322:TCP":attach="serv2")::"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",31)
   YDB>zshow "D"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",32)
   /dev/pts/9 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",33)
   seerv OPEN SOCKET TOTAL=2 CURRENT=1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",34)
       SOCKET[0]=serv DESC=3 LISTENING PASSIVE NOTRAP PORT=6321
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",35)
            ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",36)
       SOCKET[1]=serv2 DESC=4 LISTENING PASSIVE NOTRAP PORT=6322
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",37)
            ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",38)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",39)
   At this point, the socket device "seerv" has two sockets associated with
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",40)
   it.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",41)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",42)
   The following command moves the "serv" socket to the "socketpool" device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",43)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",44)
   YDB>use tcp:detach="serv"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",45)
   YDB>use 0 zshow "D"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",46)
   /dev/pts/9 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",47)
   seerv OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",48)
       SOCKET[0]=serv2 DESC=4 LISTENING PASSIVE NOTRAP PORT=6322
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",49)
            ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",50)
   socketpool OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",51)
       SOCKET[0]=serv DESC=3 LISTENING PASSIVE NOTRAP PORT=6321
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",52)
            ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",53)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",54)
   Notice how socket "serv" is now associated with the pseudo socket device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",55)
   "socketpool". Its only purpose is to hold detached sockets.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",56)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",57)
   YDB>set tcp2="s2" o tcp2:::"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",58)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",59)
   This creates a new socket device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",60)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",61)
   YDB>zshow "D"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",62)
   /dev/pts/9 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",63)
    s2 OPEN SOCKET TOTAL=0 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",64)
   seerv OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",65)
       SOCKET[0]=serv2 DESC=4 LISTENING PASSIVE NOTRAP PORT=6322
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",66)
           ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",67)
   socketpool OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",68)
       SOCKET[0]=serv DESC=3 LISTENING PASSIVE NOTRAP PORT=6321
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",69)
           ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",70)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",71)
   The following command moves the serv socket from the socketpool to the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",72)
   tcp2 device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",73)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",74)
   YDB>use tcp2:attach="serv"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",75)
   YDB>use 0 zshow "D"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",76)
   /dev/pts/9 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",77)
   s2 OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",78)
      SOCKET[0]=serv DESC=3 LISTENING PASSIVE NOTRAP PORT=6321
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",79)
          ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",80)
   seerv OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",81)
      SOCKET[0]=serv2 DESC=4 LISTENING PASSIVE NOTRAP PORT=6322
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",82)
          ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",83)
   socketpool OPEN SOCKET TOTAL=0 CURRENT=-1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DETACH",84)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL")
DOWNSCROLL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",1)
   DOWNSCROLL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",3)
   DOWNSCROLL Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",5)
   DOWNSCROLL Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",7)
   If $Y=0, DOWNSCROLL does nothing. Otherwise, DOWNSCROLL moves the cursor
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",8)
   up one line on the terminal screen and decrements $Y by one. DOWNSCROLL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",9)
   does not change the column position or $X. Some terminal hardware may not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",10)
   support DOWNSCROLL.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","DOWNSCROLL",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO")
ECHO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",1)
   ECHO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",3)
   [NO]ECHO Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",5)
   [NO]ECHO Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",7)
   Enables or disables the echo of terminal input. If you disable ECHO, the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",8)
   EDITING functions will be disabled and any input is not available for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",9)
   later recall.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",11)
   By default, terminal input ECHOes.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",13)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",15)
   use $principal:noecho
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",17)
   This example disables the echo of terminal input.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ECHO",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING")
EDITING
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",1)
   EDITING
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",3)
   [NO]EDITING Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",5)
   Enables the EDITING mode for the $PRINCIPAL device. If you enable EDITING,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",6)
   YottaDB allows the use of the left and right cursor movement keys and certain
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",7)
   <CTRL> characters within the current input line. You can recall the last
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",8)
   input line using the up or down arrow key. The editing functions are the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",9)
   same as during direct mode command input as described in the "Line
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",10)
   Editing" section of the "Operating & Debugging in Direct Mode" chapter
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",11)
   except that backspace is not treated the same as the erase character from
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",12)
   terminfo which is usually delete (ASCII 127). NOECHO disables EDITING
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",13)
   mode.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",15)
   Set the environment variable ydb_principal_editing to specify the mode for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",16)
   EDITING. For example, ydb_principal_editing="EDITING" enables EDITING mode
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",17)
   at YottaDB startup. You can also specify the mode for INSERT. For example,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",18)
   ydb_principal_editing="NOINSERT:EDITING". If you specify both modes then
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",19)
   separate them with a colon (":") and put them in any order.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",21)
   By default, EDITING mode is disabled.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",23)
   If you enable the EDITING mode, escape sequences do not terminate READs.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",25)
   Enabling PASTHRU mode supersedes EDITING mode.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",26)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",27)
   If any of the EDITING <CTRL> characters are in the CTRAP list, their
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",28)
   editing functions are not available since CTRAP takes precedence. However
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",29)
   the EDITING <CTRL> characters takes precedence over the TERMINATOR list.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",30)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",31)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",32)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",33)
   M READ EDITING depends on the values of $X and $Y being correct. If the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",34)
   application sends its own escape sequences or control characters, which
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",35)
   change the cursor position, it must properly update $X and $Y before doing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",36)
   a M READ with EDITING enabled to ensure correct formatting during input.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EDITING",37)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM")
EMPTERM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",1)
   EMPTERM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",3)
   [NO]EMPT[ERM] Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",5)
   Allows an "Erase" character on an empty input line to terminate a READ or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",6)
   READ # command. The default is NOEMPTERM. The ydb_principal_editing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",7)
   environment variable specifies the initial setting of [NO]EMPTERM. The
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",8)
   TERMINFO specified by the current value of the TERM environment variable
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",9)
   defines capnames values "kbs" and/or "kdch1" with character sequences for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",10)
   "Erase." If "kbs" or "kdch1" are multi-character values, you must also
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",11)
   specify the ESCAPE or EDIT deviceparameters for EMPTERM recognition.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",13)
   The erase character as set and shown by stty also terminates a READ
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",14)
   command with an empty input line. You can set this erase character to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",15)
   various values using the stty shell command. Typical values of an erase
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",16)
   character are <CTRL-H> and <CTRL-?>. Characters set and shown with stty
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",17)
   setting must match what the terminal emulator sends.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",19)
   The environment variable TERM must specify a terminfo entry that matches
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",20)
   both what the terminal (or terminal emulator) sends and expects.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EMPTERM",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE")
ERASELINE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",1)
   ERASELINE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",3)
   ERASELINE Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",5)
   ERASELINE Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",7)
   Clears the current line from the physical cursor position to the end of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",8)
   the line. ERASELINE does not affect the physical cursor position, or $X
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",9)
   and $Y.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ERASELINE",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE")
ESCAPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",1)
   ESCAPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",3)
   [NO]ESCAPE Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",5)
   [NO]ESCAPE Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",7)
   Enables or disables YottaDB processing of escape sequences.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",9)
   The following events result when a terminal has ESCAPE sequence processing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",10)
   enabled. When an <ESC> or <CSI> arrives in the terminal input, the device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",11)
   driver verifies the sequence that follows as a valid ANSI escape sequence,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",12)
   terminates the READ, and sets $ZB to contain the entire escape sequence.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",13)
   In the case of a READ * when ESCAPE sequence processing is enabled and an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",14)
   escape introducer is read, the entire escape sequence is returned in $ZB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",15)
   and the ASCII representation of the first character is returned in the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",16)
   argument of the READ *.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",18)
   When escape processing is disabled, READ *x returns 27 in x for an <ESC>.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",19)
   If the escape introducer is also a TERMINATOR, $ZB has a string of length
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",20)
   one (1), and a value of the $ASCII() representation of the escape
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",21)
   introducer; otherwise, $ZB holds the empty string. For single character
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",22)
   and short fixed reads with NOESCAPE, the remaining characters in the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",23)
   escape sequence will be in the input stream for subsequent READS
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",24)
   regardless of [NO]TYPEAHEAD.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",26)
   An application that operates with (NOESCAPE:TERM=$C(13)) must provide
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",27)
   successive READ * commands to remove the remaining characters in the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",28)
   escape sequence from the input stream.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",30)
   By default, ESCAPE processing is disabled.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",31)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",32)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",33)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",34)
   use $principal:(noescape:term=$c(13))
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",35)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",36)
   This example disables the escape sequence processing and set $c(13) as the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",37)
   line terminator.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ESCAPE",38)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION")
EXCEPTION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",1)
   EXCEPTION
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",3)
   EXCEPTION=expr Applies to: All devices
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",5)
   EXCEPTION=expr Applies to: All devices
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",7)
   Defines an error handler for an I/O device. The expression must contain a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",8)
   fragment of YottaDB code (for example, GOTO ERRFILE) that YottaDB XECUTEs when
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",9)
   the driver for the device detects an error, or an entryref to which YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",10)
   transfers control, as appropriate for the current ydb_ztrap_form.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","EXCEPTION",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER")
FILTER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",1)
   FILTER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",3)
   [NO]FILTER[=expr] Applies to: TRM SOC NULL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",5)
   [NO]FILTER[=expr] Applies to: Terminals and Printers, Socket Device, and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",6)
   NULL Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",8)
   Specifies character filtering for specified cursor movement sequences.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",9)
   Filtering requires character by character examination of all output and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",10)
   reduces I/O performance.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",12)
   Each FILTER deviceparameter can have only one argument. However, multiple
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",13)
   FILTER deviceparameters can appear in a single USE command, each with
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",14)
   different arguments.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",16)
   By default, YottaDB does not perform output filtering. For YottaDB to maintain
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",17)
   $X for non-graphic characters as described by the standard,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",18)
   FILTER="CHARACTERS" must be enabled. Output filtering adds additional
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",19)
   overhead to I/O processing.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",20)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",21)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",23)
   use tcpdev:filter="NOESCAPE"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",25)
   This example removes the effect of escape sequences on the maintenance $X
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",26)
   and $Y.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FILTER",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW")
FOLLOW
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",1)
   FOLLOW
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",3)
   [NO]FOLLOW Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",5)
   Configures READ to return only when it has a complete record or reaches
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",6)
   any specified timeout; it waits for more input rather than terminating on
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",7)
   an EOF (end-of-file) condition.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",9)
   The USE command can switch a device from NOFOLLOW to FOLLOW or from FOLLOW
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",10)
   to NOFOLLOW. This provides a READ mode of operation similar to a tail -f
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",11)
   in UNIX.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","FOLLOW",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC")
HOSTSYNC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",1)
   HOSTSYNC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",3)
   [NO]HOSTSYNC Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",5)
   [NO]HOSTSYNC Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",7)
   Enables or disables the use of XON/XOFF by the host to throttle input and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",8)
   prevent impending buffer overruns for a terminal. This deviceparameter
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",9)
   provides a control mechanism for the host over asynchronous communication
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",10)
   lines to help prevent data loss when hardware is slow and/or processing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",11)
   load is high.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",13)
   By default, HOSTSYNC is disabled.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","HOSTSYNC",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY")
IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",1)
   IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",3)
   Applies to: SD, PIPE, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",5)
   IKEY allows the use of a seperate key to READ from a device; for example,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",6)
   when a YottaDB process is an element of a UNIX pipe. The format of the IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",7)
   deviceparameter is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",9)
   IKEY="key_name [IV]"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",11)
   key_name is case-sensitive and must match a key name in the "files"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",12)
   section of the ydb_crypt_config file. The optional IV specifies an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",13)
   initialization vector to use for encryption and decryption.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",15)
   For more information, refer to the description of KEY deviceparameter of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",16)
   OPEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IKEY",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND")
INREWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",1)
   INREWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",3)
   Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",5)
   Performs a REWIND on input when $PRINCIPAL identifies a device that
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",6)
   supports REWIND. Use this deviceparameter with $PRINCIPAL when redirected
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",7)
   from a file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INREWIND",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR")
INSEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",1)
   INSEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",3)
   Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",5)
   Performs a SEEK on input when $PRINCIPAL identifies a device that supports
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",6)
   SEEK. Use this deviceparameter with $PRINCIPAL when redirected from a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",7)
   file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSEEK=STREXPR",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT")
INSERT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",1)
   INSERT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",3)
   [NO]INSERT Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",5)
   Enables or disables insert mode for the $PRINCIPAL device. If INSERT mode
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",6)
   is enabled, YottaDB inserts input characters at the logical position in the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",7)
   input stream designated by the virtual cursor as defined by $X and $Y, for
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",8)
   example in the middle of the line/record. If INSERT mode is disabled,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",9)
   input characters overwrite the existing characters in the input stream at
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",10)
   the logical position designated by the virtual cursor. You can toggle the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",11)
   insert mode within a direct mode line or if EDITING is enabled for a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",12)
   single READ argument's input using the terminal's INSERT key. The INSERT
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",13)
   mode is reset to the default or what was last specified with USE at the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",14)
   beginning of each direct mode line or READ argument.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","INSERT",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR")
IOERROR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",1)
   IOERROR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",3)
   IOERROR=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",5)
   IOERROR=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",7)
   Enables exception handling in socket devices. expr specifies the I/O error
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",8)
   trapping mode. A value equal to "TRAP" specifies that I/O errors on a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",9)
   device raise error conditions. A value equal to "NOTRAP", or when IOERROR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",10)
   is not specified, indicates that an I/O error on a device does not raise
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",11)
   error conditions.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",13)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",15)
   YottaDB currently handles exception handling at device level instead of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",16)
   socket level.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",18)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",20)
   use sock:(ioerror="TRAP":exception="zgoto "_$zlevel_":error")
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",22)
   This example enables exception handling in socket device sock and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",23)
   specifies that all I/O errors on sock raise the error condition.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",25)
   If $LENGTH(strexpr)&("Tt"[$EXTRACT(strexpr)) then Error Trapping is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",26)
   enabled; otherwise the application must check $DEVICE for errors.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","IOERROR",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY")
KEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",1)
   KEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",3)
   Applies to: SD, PIPE, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",5)
   Specifies information about the key file to use for reading and writing
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",6)
   encrypted data. The syntax of the KEY deviceparameter is as follows:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",8)
   KEY="key_name [IV]"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",10)
   key_name is case-sensitive and must match a key name in the "files"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",11)
   section of the ydb_crypt_config file. The optional IV specifies an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",12)
   initialization vector to use for encryption and decryption.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",14)
   For more information and an example, refer to the description of KEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",15)
   deviceparameter of OPEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","KEY",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH")
LENGTH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",1)
   LENGTH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",3)
   [Z]LENGTH=intexpr Applies to: TRM SOC SD FIFO PIPE NULL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",5)
   [Z]LENGTH=intexpr Applies to: Terminals and Printers, Socket Device, and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",6)
   NULL Device.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",8)
   Sets the virtual page length for an I/O device to the integer expression.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",9)
   You can specify the virtual page length up to 1,048,576. The page length
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",10)
   controls the point at which the device driver automatically resets $Y to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",11)
   0.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",13)
   By default, for terminals, YottaDB uses the terminfo variable lines (which
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",14)
   may be from the terminal definition or from a stty command) as the initial
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",15)
   value for LENGTH. The default length for null device and socket device is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",16)
   66.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",18)
   Setting LENGTH to zero prevents resetting $Y to zero.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",20)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",22)
   use sock:(width=80:znoff:zlength=24)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",24)
   This example sets the virtual page length to 24 for socket device sock.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LENGTH",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN")
LISTEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",1)
   LISTEN
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",3)
   LISTEN=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",5)
   A new socket is allocated to listen for a connection. It is made the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",6)
   current socket for the device, if the operation is successful.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",8)
   expr specifies the protocol and the protocol-specific information.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",9)
   Currently, YottaDB supports TCP/IP and LOCAL (also known as UNIX domain)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",10)
   socket protocols.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",12)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",14)
   YDB>set tcp="seerv" open tcp:(listen="6321:TCP":attach="serv")::"SOCKET"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",15)
   YDB>use tcp:listen="6322:TCP"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",16)
   YDB>use 0 zshow "D"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",17)
   /dev/pts/9 OPEN TERMINAL NOPAST NOESCA NOREADS TYPE WIDTH=80 LENG=24
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",18)
   seerv OPEN SOCKET TOTAL=2 CURRENT=1
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",19)
   SOCKET[0]=serv DESC=3 LISTENING PASSIVE NOTRAP PORT=6321
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",20)
        ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",21)
   SOCKET[1]=h12185825450 DESC=4 LISTENING PASSIVE NOTRAP PORT=6322
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",22)
        ZDELAY ZBFSIZE=1024 ZIBFSIZE=87380 NODELIMITER
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","LISTEN",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY")
OKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",1)
   OKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",3)
   Applies to: SD, PIPE, and FIFO
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",5)
   OKEY allows the use of a seperate key for WRITE to a device; for example,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",6)
   when a YottaDB process is an element of a UNIX pipe. The format of the IKEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",7)
   deviceparameter is:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",9)
   OKEY="key_name [IV]"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",11)
   key_name is case-sensitive and must match a key name in the "files"
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",12)
   section of the ydb_crypt_config file. The optional IV specifies an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",13)
   initialization vector to use for encryption and decryption.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",15)
   For more information, refer to the description of KEY deviceparameter of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",16)
   OPEN.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OKEY",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND")
OUTREWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",1)
   OUTREWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",3)
   Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",5)
   Performs a REWIND on output when $PRINCIPAL identifies a device that
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",6)
   supports REWIND. Use this deviceparameter with $PRINCIPAL when redirected
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",7)
   to a file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTREWIND",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR")
OUTSEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",1)
   OUTSEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",3)
   Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",5)
   Performs a SEEK on output when $PRINCIPAL identifies a device that
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",6)
   supports SEEK. Use this deviceparameter with $PRINCIPAL when redirected to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",7)
   a file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","OUTSEEK=STREXPR",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU")
PASTHRU
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",1)
   PASTHRU
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",3)
   [NO]PASTHRU Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",5)
   [NO]PASTHRU Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",7)
   Enables or disables interpretation of the ERASE character for a terminal.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",8)
   PASTHRU shifts management of handling and response to ERASE characters in
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",9)
   the input stream from YottaDB to the application code.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",11)
   Exercise caution with PASTHRU in debugging, because using a PASTHRU
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",12)
   terminal in Direct Mode is somewhat awkward.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",14)
   [NO]TTSYNC must be used with [NO]PASTHRU to control XON/XOFF handling.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",16)
   By default, the device driver operates NOPASTHRU.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",18)
   PASTHRU supersedes line editing.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","PASTHRU",19)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC")
READSYNC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",1)
   READSYNC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",3)
   [NO]READSYNC Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",5)
   Enables or disables automatic output of <XON> before a READ and <XOFF>
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",6)
   after a READ.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",8)
   By default, the terminal drivers operate NOREADSYNC.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","READSYNC",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND")
REWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",1)
   REWIND
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",3)
   REWIND Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",5)
   REWIND places the file pointer to the beginning of the file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",7)
   By default, USE does not REWIND.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",9)
   REWIND on redirected output for $PRINCIPAL is the same as OUTREWIND.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","REWIND",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR")
SEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",1)
   SEEK=strexpr
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",3)
   SEEK Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",5)
   Positions the current file pointer to the location specified in strexpr.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",6)
   The format of strexpr is a string of the form "[+|-]integer" where an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",7)
   unsigned value specifies an offset from the beginning of the file, and an
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",8)
   explicitly signed value specifies an offset relative to the current file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",9)
   position. For STREAM or VARIABLE format, the positive intexpr after any
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",10)
   sign is a byte offset, while for a FIXED format, it is a record offset. In
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",11)
   order to deal with the possible presence of a Byte Order Marker (BOM),
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",12)
   SEEK for a FIXED format file written in a UTF character set must follow at
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",13)
   least one prior READ since the device was created.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",15)
   SEEK on redirected input for $PRINCIPAL is the same as INSEEK.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SEEK=STREXPR",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET")
SOCKET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",1)
   SOCKET
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",3)
   SOCKET=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",5)
   Makes the socket specified by the handle named in expr the current socket
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",6)
   for the Socket device . If the named socket is a listening socket, it
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",7)
   checks for an incoming connection request and if one is available, it
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",8)
   accepts the request and creates a new connected socket in which case $KEY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",9)
   provides information on the new socket Specifying a socket handle not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",10)
   contained in the Socket device generates an error.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",12)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",14)
   SOCKET is compatible with DELIMITER only.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","SOCKET",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR")
TERMINATOR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",1)
   TERMINATOR
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",3)
   [NO]TERMINATOR[=expr] Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",5)
   Specifies which of the 256 ASCII characters terminate a READ. For example,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",6)
   TERMINATOR=$C(0) makes <NUL> the terminator.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",8)
   When NOESCAPE is in effect, TERMINATOR controls whether or not <ESC> or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",9)
   <CSI> are treated as terminators, however, when ESCAPE processing is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",10)
   enabled, the entire escape sequence is treated as a terminator regardless
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",11)
   of the TERMINATOR specification.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",13)
   When EDITING is enabled, the control characters used for editing are not
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",14)
   treated as terminators even if they are in the TERMINATOR list.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",16)
   You can define any control character as a terminator, but they are all
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",17)
   single character.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",19)
   When the terminal is in UTF-8 mode (chset=utf8,) YottaDB limits the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",20)
   terminator characters to the first 127 which are common between ASCII and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",21)
   UTF-8 encodng. In M mode, any of the 256 characters may be specified a
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",22)
   terminator.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",23)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",24)
   In UTF-8 mode, if CR is in the terminator list (either by default or
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",25)
   explicitly,) YottaDB ignore the following LF to keep with the standard
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",26)
   Unicode(R) line terminator definitions.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",28)
   NOTERMINATOR eliminates all terminators. When a terminal has all
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",29)
   terminators disabled, fixed length READ and READ * terminate on receipt of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",30)
   some number of characters, and a timed READ terminates on timeout, but any
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",31)
   other READ only terminates when the input fills the terminal read buffer.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",32)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",33)
   By default, terminals recognize <CR>, <LF>, and <ESC> as terminators (that
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",34)
   is, TERMINATOR=$C(10, 13,27)). TERMINATOR="" restores the default. In
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",35)
   UTF-8 mode, the usual UTF-8 line terminators are also included in the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",36)
   default set of terminators.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",37)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",38)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",39)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",40)
   YDB> USE $P:TERM=$C(26,13,11,7)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",41)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",42)
   This example enables the ASCII characters <SUB>, <CR>, <VT> and <BEL> as
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",43)
   READ terminators.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TERMINATOR",44)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE")
TRUNCATE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",1)
   TRUNCATE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",3)
   [NO]TRUNCATE Applies to: SD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",5)
   Enables or disables overwriting of existing data in sequential files.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",6)
   Because the position of each record depends on the prior record, a WRITE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",7)
   destroys the ability to reliably position to subsequent records in a file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",8)
   Therefore, by default (NOTRUNCATE), YottaDB permits WRITEs only when the file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",9)
   pointer is positioned at the end-of-file. When a device has TRUNCATE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",10)
   enabled, a WRITE issued when the file pointer is not at end-of-file
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",11)
   truncates the file by destroying all data from the file pointer to the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",12)
   end-of-file.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",14)
   By default, OPEN accesses files NOTRUNCATE, which does not allow
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",15)
   overwriting of sequential files.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",16)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",17)
   This deviceparameter may not be supported by your platform.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TRUNCATE",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC")
TTSYNC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",1)
   TTSYNC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",3)
   [NO]TTSYNC Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",5)
   Enables or disables recognition of XON/XOFF for terminal output.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",7)
   **Note**
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",9)
   A terminal may have its own handling of XON/XOFF, controlled by a set-up
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",10)
   mode or by switches. If an application requires program recognition of
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",11)
   <CTRL-S> and <CTRL-Q>, the terminals may require reconfiguration.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TTSYNC",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD")
TYPEAHEAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",1)
   TYPEAHEAD
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",3)
   [NO]TYPEAHEAD Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",5)
   [NO]TYPEAHEAD Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",7)
   Enables or disables type-ahead buffering for a terminal. When TYPEAHEAD is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",8)
   disabled, any pending input which has not yet been read will be discarded
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",9)
   before input is read for each READ argument. When TYPEAHEAD is enabled,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",10)
   any input not read by one READ argument will remain available for the next
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",11)
   READ argument or command.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",13)
   The size of the type-ahead buffer limits the amount of data entered at the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",14)
   terminal that the device driver can store in anticipation of future READs.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",16)
   By default, the terminal device driver accepts TYPEAHEAD.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","TYPEAHEAD",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL")
UPSCROLL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",1)
   UPSCROLL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",3)
   UPSCROLL Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",5)
   Moves the cursor down one line on the terminal screen. If $Y=LENGTH-1,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",6)
   UPSCROLL sets $Y=0. Otherwise UPSCROLL increments $Y by one. If the cursor
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",7)
   is physically at the bottom of the page, the screen scrolls up one line.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",8)
   UPSCROLL does not change the column position or $X.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","UPSCROLL",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH")
WIDTH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",1)
   WIDTH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",3)
   [Z]WIDTH=intexpr Applies to: TRM SOC NULL SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",5)
   [Z]WIDTH=intexpr Applies to: Terminals and Printers, Socket Device, NULL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",6)
   Device, PIPE, and Sequential Files
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",8)
   Sets the device's logical record size and enables WRAP. The default WIDTH
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",9)
   for SOC, SD and FIFO is taken from the RECORDSIZE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",10)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",11)
   NOWRAP and WIDTH supersede each other. When WIDTH and NOWRAP appear
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",12)
   together on the same USE command, the final one controls the device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",13)
   behavior. For a terminal, WIDTH=0 is equivalent to WIDTH=n:NOWRAP, where n
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",14)
   is the default length of a logical record on that terminal.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",16)
   Terminals inherit their default WIDTH in YottaDB from the invoking shell
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",17)
   environment. The default WIDTH for null and socket device is 255.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",19)
   For SD and SOC which support 1MB strings, you can specify WIDTH up to
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",20)
   1,048,576.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",22)
   In UTF-8 mode and TRM, SOC, SD, and FIFO output, the WIDTH deviceparameter
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",23)
   is in units of display-columns and is used with $X to control truncation
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",24)
   and WRAPing for output and maintenance of $X and $Y for input.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",25)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",26)
   In UTF-8 mode and SOC, the WIDTH deviceparameter is in units of UTF-8 code
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",27)
   points and is used with $X to control truncation and wrapping for output
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",28)
   and maintenance of $X and $Y for input.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",30)
   In M mode if WIDTH is set to 0, YottaDB uses the default WIDTH of the TRM and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",31)
   SOC devices. USE x:WIDTH=0 is equivalent to USE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",32)
   x:(WIDTH=<device-default>:NOWRAP. For SOC, SD and FIFO devices in M mode,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",33)
   the device default is the RECORDSIZE.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",34)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",35)
   YottaDB format control characters, FILTER, and the device WIDTH and WRAP also
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",36)
   have an effect on $X.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",37)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",38)
   In UTF-8 mode and SOC output, the WIDTH deviceparameter specifies the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",39)
   number of UTF-8 characters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WIDTH",40)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP")
WRAP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",1)
   WRAP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",3)
   [NO]WRAP Applies to: TRM SOC NULL SD FIFO PIPE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",5)
   [NO]WRAP Applies to: Terminals and Printers, FIFO, Socket Device, NULL
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",6)
   Device, and Sequential Files
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",7)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",8)
   Enables or disables automatic record termination. When the current record
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",9)
   size ($X) reaches the maximum WIDTH and the device has WRAP enabled, YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",10)
   starts a new record, as if the routine had issued a WRITE ! command. When
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",11)
   reading, WRAP only determines whether $X remains within the range of zero
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",12)
   to WIDTH.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",14)
   Note that WRAP is enabled by default for SD, NULL, FIFO, PIPE and SOCKET.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",15)
   For TRM, WRAP is enabled by default if the terminfo variable
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",16)
   auto_right_margin (capname "am") is set.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",17)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",18)
   NOWRAP causes YottaDB to require a WRITE ! to terminate the record. NOWRAP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",19)
   allows $X to become greater than the device WIDTH for terminals and null
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",20)
   devices.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",21)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",22)
   The combination of STREAM and NOWRAP on disk files allows you to write
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",23)
   data of arbitrary length without truncation. Without the STREAM option,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",24)
   the WRAP option determines the action taken when the record length exceeds
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",25)
   the device WIDTH. NOWRAP causes YottaDB to truncate the record, while WRAP
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",26)
   causes YottaDB to insert a format control character except for FIXED format.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",27)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",28)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",29)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",30)
   See WRAP examples in the OPEN deviceparameters section.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","WRAP",31)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X")
X
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",1)
   X
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",3)
   X=intexpr Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",5)
   X=intexpr Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",7)
   $X positions the cursor to a vertical column on the terminal. If NOWRAP is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",8)
   enabled or intexpr<WIDTH, YottaDB sets $X=intexpr. If WRAP is enabled and
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",9)
   intexpr>WIDTH, YottaDB sets $X=intexpr#WIDTH, where # is the YottaDB modulo
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",10)
   operator. The resulting $X determines the actual physical position.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",12)
   To ensure that $Y and $X match what is occurring visually on the terminal,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",13)
   the YottaDB deviceparameters and the device characteristics must match at all
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",14)
   times.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",16)
   The terminal hardware may affect physical cursor positioning. The X
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",17)
   deviceparameter does not change the cursor row or update $Y.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","X",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y")
Y
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",1)
   Y
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",3)
   Y=intexpr Applies to: TRM
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",5)
   Y=intexpr Applies to: Terminals and Printers
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",7)
   Positions the cursor to a horizontal row on the terminal.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",9)
   YottaDB sets $Y=intexpr#LENGTH, where # is the YottaDB modulo operator. If
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",10)
   intexpr<LENGTH, the resulting $Y determines the physical position. If
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",11)
   intexpr>LENGTH, the cursor is positioned so that $Y=intexpr#LENGTH, where
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",12)
   # is the YottaDB module operator. The terminal hardware may affect physical
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",13)
   cursor positioning.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",14)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",15)
   To ensure that $Y and $X match what is occurring visually on the terminal,
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",16)
   the YottaDB deviceparameters and the device characteristics must match at all
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",17)
   times. For example, if a process initiates a subprocess that changes the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",18)
   terminal wrap setting from NOWRAP, previously set with the YottaDB USE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",19)
   command to WRAP , YottaDB does not reflect the change when the subprocess
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",20)
   completes. Therefore, wraps on the terminal do not reflect in the values
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",21)
   of $X and $Y.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",22)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",23)
   The Y deviceparameter does not change the cursor column or update $X.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","Y",24)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE")
ZBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",1)
   ZBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",3)
   ZBFSIZE Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",5)
   ZBFSIZE Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",7)
   Allocates a buffer used by YottaDB when reading from a socket. The ZBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",8)
   deviceparameter should be at least as big as the largest message expected.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",9)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",10)
   By default, the size of ZBFSIZE is 1024 and the maximum it can be is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",11)
   1048576.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZBFSIZE",12)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY")
ZDELAY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",1)
   ZDELAY
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",3)
   Z[NO]DELAY Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",5)
   Z[NO]DELAY Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",7)
   Controls buffering of data packets by the system TCP stack using the
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",8)
   TCP_NODELAY option to the SETSOCKOPT system call. This behavior is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",9)
   sometimes known as the Nagle algorithm. The default is ZDELAY. This delays
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",10)
   sending additional packets until either an acknowledgement of previous
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",11)
   packets is received or an interval passes. If several packets are sent
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",12)
   from one end of a connection before the other end responds, setting
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",13)
   ZNODELAY may be desirable though at the cost of additional packets being
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",14)
   transmitted over the network. ZNODELAY must be fully spelled out.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZDELAY",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF")
ZFF
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",1)
   ZFF
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",3)
   Z[NO]FF=expr Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",5)
   Z[NO]FF=expr Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",7)
   expr specifies a string of characters, typically in $CHAR() format to send
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",8)
   to socket device, whenever a routine issues a WRITE #. When no string is
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",9)
   specified or when ZFF="", then no characters are sent. The default in YottaDB
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",10)
   is ZNOFF.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",12)
   Example:
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",14)
   u tcpdev:(zwidth=80:zff=$char(13):zlength=24)
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",15)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",16)
   This example sends $char(13) to the current socket of device tcpdev on
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",17)
   every WRITE #.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZFF",18)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE")
ZIBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",1)
   ZIBFSIZE
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",3)
   ZIBFSIZE Applies to: SOC
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",4)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",5)
   ZIBFSIZE Applies to: Socket Device
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",6)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",7)
   Sets the buffer size used by the network software (setsockopt SO_RCVBUF).
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",8)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",9)
   The default and the maximum values depend on the platform and/or system
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",10)
   parameters.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",11)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",12)
   Note that LOCAL sockets ignore the ZIBFSIZE deviceparameter.
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","USE_DEVICEPARAMETERS","s","ZIBFSIZE",13)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY")
_Summary
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",1)
    Summary
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",2)

^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",3)
   +-----------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",4)
   |                   USE Deviceparameters                    |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",5)
   |-----------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",6)
   | USE DEVICEPARAMETER | TRM | SD | FIFO | PIPE | NULL | SOC |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",7)
   |-----------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",8)
   |           TRM: Valid for terminals and printers           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",9)
   |                                                           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",10)
   |              SD: Valid for sequential files               |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",11)
   |                                                           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",12)
   |                   FIFO: Valid for FIFOs                   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",13)
   |                                                           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",14)
   |               PIPE: Valid for PIPE devices                |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",15)
   |                                                           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",16)
   |               NULL: Valid for null devices                |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",17)
   |                                                           |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",18)
   |               SOC: Valid for socket devices               |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",19)
   |-----------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",20)
   | ATTACH              |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",21)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",22)
   | CANONICAL           | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",23)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",24)
   | [NO]CENABLE         | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",25)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",26)
   | [I|O]CHSET          | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",27)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",28)
   | CLEARSCREEN         | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",29)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",30)
   | CONNECT             |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",31)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",32)
   | [NO]CONVERT         | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",33)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",34)
   | CTRAP=expr          | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",35)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",36)
   | [NO]DELIMITER       |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",37)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",38)
   | DETACH=expr         |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",39)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",40)
   | DOWNSCROLL          | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",41)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",42)
   | [NO]ECHO            | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",43)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",44)
   | [NO]EMPTERM         | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",45)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",46)
   | ERASELINE           | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",47)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",48)
   | [NO]ESCAPE          | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",49)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",50)
   | EXCEPTION=expr      | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",51)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",52)
   | [NO]FILTER[=expr]   | X   |    |      |      | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",53)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",54)
   | FLUSH               | X   |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",55)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",56)
   | [NO]FOLLOW          |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",57)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",58)
   | [NO]HOSTSYNC        | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",59)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",60)
   | IKEY                |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",61)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",62)
   | INREWIND            |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",63)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",64)
   | INSEEK              |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",65)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",66)
   | IOERROR             |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",67)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",68)
   | KEY                 |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",69)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",70)
   | [Z]LENGTH=expr      | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",71)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",72)
   | LISTEN              |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",73)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",74)
   | OKEY                |     | X  | X    | X    |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",75)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",76)
   | OUTREWIND           |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",77)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",78)
   | OUTSEEK             |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",79)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",80)
   | [NO]PASTHRU         | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",81)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",82)
   | REWIND              |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",83)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",84)
   | SEEK=strexpr        |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",85)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",86)
   | SOCKET              |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",87)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",88)
   | TERMINATOR[=expr]   | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",89)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",90)
   | [NO]TRUNCATE        |     | X  |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",91)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",92)
   | [NO]TYPEAHEAD       | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",93)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",94)
   | UPSCROLL            | X   |    |      |      |      |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",95)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",96)
   | [Z]WIDTH=intexpr    | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",97)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",98)
   | [NO]WRAP            | X   | X  | X    | X    | X    | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",99)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",100)
   | X=intexpr           | X   |    |      |      | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",101)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",102)
   | Y=intexpr           | X   |    |      |      | X    |     |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",103)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",104)
   | ZBFSIZE             |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",105)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",106)
   | Z[NO]DELAY          |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",107)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",108)
   | Z[NO]FF             |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",109)
   |---------------------+-----+----+------+------+------+-----|
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",110)
   | ZIBFSIZE            |     |    |      |      |      | X   |
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",111)
   +-----------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","I/O_COMMANDS","s","USE","s","_SUMMARY",112)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES")
Sequential_Files
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES",1)
   Sequential Files
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES",2)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES",3)
   YottaDB provides access to sequential files. These files allow linear access
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES",4)
   to records. Sequential files are used to create programs, store reports,
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES",5)
   and to communicate with facilities outside of YottaDB.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES",6)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS")
Line_Terminators
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",1)
   Line Terminators
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",2)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",3)
   LF ($CHAR(10)) terminates the logical record for all M mode sequential
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",4)
   files, TRM, PIPE, and FIFO. For non FIXED format sequential files and
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",5)
   terminal devices for which character set is not M, all the standard
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",6)
   Unicode(R) line terminators terminate the logical record. These are U+000A
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",7)
   (LF), U+0000D (CR), U+000D followed by U+000A (CRLF), U+0085 (NEL), U+000C
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",8)
   (FF), U+2028 (LS) and U+2029 (PS).
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","LINE_TERMINATORS",9)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS")
READ/WRITE_Operations
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",1)
   READ/WRITE Operations
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",2)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",3)
   The following table describes all READ and WRITE operations for STREAM,
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",4)
   VARIABLE, and FIXED format sequential files having automatic record
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",5)
   termination enabled (WRAP) or disabled (NOWRAP).
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",6)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",7)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",8)
   |  Command  | WRAP or | STREAM or VARIABLE format file |  FIXED format   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",9)
   |           | NOWRAP  |            behavior            |  file behavior  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",10)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",11)
   | READ      |         | Write the entire argument, but |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",12)
   | format or |         | anytime $X is about to exceed  | Similar to      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",13)
   | WRITE or  | WRAP    | WIDTH: insert a <LF>           | VARIABLE but no |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",14)
   | WRITE *   |         | character, set $X to 0,        | <LF>            |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",15)
   |           |         | increment $Y                   |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",16)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",17)
   |           |         | Update $X based on STREAM or   |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",18)
   |           |         | VARIABLE format as described   |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",19)
   |           |         | below                          |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",20)
   |           |         |--------------------------------|                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",21)
   |           |         | STREAM: Write | VARIABLE       |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",22)
   |           |         | all of the    | ($X=WIDTH):    |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",23)
   | READ      |         | argument with | Write up to    |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",24)
   | format or | NOWRAP  | no truncation | WIDTH-$X       | Same as         |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",25)
   | WRITE or  |         | nor with a    | characters.    | VARIABLE        |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",26)
   | WRITE *   |         | line          | Write no more  |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",27)
   |           |         | terminator    | output to the  |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",28)
   |           |         | being         | device until a |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",29)
   |           |         | inserted. Add | WRITE ! or a   |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",30)
   |           |         | length of     | SET $X makes   |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",31)
   |           |         | argument to   | $X less than   |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",32)
   |           |         | $X.           | WIDTH.         |                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",33)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",34)
   |           |         |                                | Write PAD bytes |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",35)
   | READ or   | either  | Write <LF>, set $X to 0,       | to bring the    |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",36)
   | WRITE !   |         | increment $Y                   | current record  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",37)
   |           |         |                                | to WIDTH        |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",38)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",39)
   |           |         |                                | Write PAD bytes |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",40)
   |           |         |                                | to bring the    |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",41)
   |           |         | Write <FF>,<LF>, set $X to 0,  | current record  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",42)
   | WRITE #   | either  | increment $Y                   | to WIDTH, then  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",43)
   |           |         |                                | a <FF> followed |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",44)
   |           |         |                                | by WIDTH-1 PAD  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",45)
   |           |         |                                | bytes           |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",46)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",47)
   |           |         |                                | After a WRITE,  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",48)
   |           |         |                                | if $X >0,       |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",49)
   |           |         |                                | perform an      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",50)
   |           |         |                                | implicit "WRITE |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",51)
   |           |         |                                | !" adding PAD   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",52)
   |           |         | After a WRITE, if $X > 0,      | bytes to create |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",53)
   | CLOSE     | either  | Write <LF>                     | a full record.  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",54)
   |           |         |                                | If you need to  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",55)
   |           |         |                                | avoid trailing  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",56)
   |           |         |                                | PAD bytes set   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",57)
   |           |         |                                | $X to 0 before  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",58)
   |           |         |                                | closing a FIXED |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",59)
   |           |         |                                | format file.    |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",60)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",61)
   |           |         | Return characters up to        | Return WIDTH    |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",62)
   |           |         | $X=WIDTH, or until             | characters; no  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",63)
   | READ X    | either  | encountering an <LF> or EOF.   | maintenance of  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",64)
   |           |         | If <LF> encountered, set $X to | $X and $Y,      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",65)
   |           |         | 0, increment $Y                | except that EOF |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",66)
   |           |         |                                | increments $Y   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",67)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",68)
   |           |         | Return characters up to the    | Return          |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",69)
   |           |         | first of $X=WIDTH or len       | MIN(WIDTH, len) |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",70)
   | READ      |         | characters, or encountering a  | characters; no  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",71)
   | X#len     | either  | <LF> or EOF; if up to len      | maintenance of  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",72)
   |           |         | characters or EOF update $X,   | $X and $Y,      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",73)
   |           |         | otherwise set $X to 0 and      | except that EOF |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",74)
   |           |         | increment $Y                   | increments $Y   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",75)
   |-----------+---------+--------------------------------+-----------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",76)
   |           |         |                                | Return the code |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",77)
   |           |         | Return the code for one        | for one         |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",78)
   |           |         | character and increment $X, if | character, if   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",79)
   | READ *X   | either  | WIDTH=$X or <LF> encountered,  | EOF return -1;  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",80)
   |           |         | set $X=0, increment $Y; if EOF | no maintenance  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",81)
   |           |         | return -1                      | of $X and $Y,   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",82)
   |           |         |                                | except that EOF |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",83)
   |           |         |                                | increments $Y   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",84)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",85)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",86)
   **Note**
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",87)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",88)
     o EOF == end-of-file; <FF>== ASCII form feed; <LF> == ASCII line feed;
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",89)
     o In M mode, and by default in UTF-8 mode PAD == <SP> == ASCII space.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",90)
     o "READ format" in this table means READ ? or READ <strlit>
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",91)
     o A change to WIDTH implicitly sets WRAP unless NOWRAP follows in the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",92)
       deviceparameter list
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",93)
     o In VARIABLE and STREAM mode, READ (except for READ *) never returns
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",94)
       <LF> characters
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",95)
     o In M mode, the last setting of RECORDSIZE or WIDTH for the device
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",96)
       determines WIDTH
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",97)
     o In M Mode, a WRITE to a sequential device after setting $X to a value
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",98)
       greater than the device WIDTH or a reducing WIDTH to less than the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",99)
       current $X acts as if the first character caused $X to exceed the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",100)
       WIDTH induces an immediate WRAP, if WRAP is enabled
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",101)
     o In UTF-8 mode, RECORDSIZE is in bytes and WIDTH is in characters and
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",102)
       the smaller acts as the WIDTH limit in the table.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",103)
     o In UTF-8 mode, FIXED mode writes <SP> to the RECORDSIZE when the next
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",104)
       character won't fit.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",105)
     o In UTF-8 mode, all READ forms do not return trailing PAD characters.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",106)
     o In UTF-8 mode, all characters returned by all forms of FIXED mode READ
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",107)
       are from a single record.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",108)
     o WRITE for a Sequential Disk (SD) device works at the current file
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",109)
       position, whether attained with APPEND, REWIND or SEEK.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",110)
     o YottaDB manages any BOM for UTF mode files by ensuring they are at the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",111)
       beginning of the file and produces a BOMMISMATCH error for an attempt
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",112)
       to change the byte-ordering on OPEN for an existing file.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",113)
     o An attempt to OPEN a non-zero length file WRITEONLY without either
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",114)
       NEWVERSION or TRUNCATE in UTF mode produces an OPENDEVFAIL due to the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",115)
       fact that any existing BOM information cannot be verified.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",116)
     o Note that with YottaDB SD encryption, because of the state information
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",117)
       associated with encryption processing, encrypted files require the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",118)
       file to be WRITEn or READ from the beginning rather than from an
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",119)
       arbitrary position.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","READ/WRITE_OPERATIONS",120)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS")
Sequential_File_Pointers
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",1)
   Sequential File Pointers
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",2)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",3)
   Sequential file I/O operations use a construct called a file pointer. The
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",4)
   file pointer logically identifies the next record to read or write. OPEN
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",5)
   commands position the file pointer at the beginning of the file (REWIND)
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",6)
   or at the end-of-file (APPEND). APPEND cannot reposition a file currently
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",7)
   open. Because the position of each record depends on the previous record,
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",8)
   a WRITE destroys the ability to reliably position the file pointer to
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",9)
   subsequent records in a file. Therefore, by default (NOTRUNCATE), YottaDB
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",10)
   permits WRITEs only when the file pointer is positioned at the end of the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",11)
   file.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",12)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",13)
   A file that has been previously created and contains data that should be
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",14)
   retained can also be opened with the device parameter APPEND.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",15)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",16)
   If a device has TRUNCATE enabled, a WRITE issued when the file pointer is
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",17)
   not at the end of the file causes all contents after the current file
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",18)
   pointer to be discarded. This effectively moves the end of the file to the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",19)
   current position and permits the WRITE.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SEQUENTIAL_FILE_POINTERS",20)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY")
Summary
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",1)
   Summary
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",2)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",3)
   The following tables provide a brief summary of deviceparameters for
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",4)
   sequential files grouped into related areas.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",5)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",6)
   +----------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",7)
   |                  Error Processing Deviceparameters                   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",8)
   |----------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",9)
   | DEVICEPARAMETER | COMMAND |                 COMMENT                  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",10)
   |-----------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",11)
   | EXCEPTION=expr  | O/U/C   | Controls device-specific error handling. |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",12)
   +----------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",13)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",14)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",15)
   |               File Pointer Positioning Deviceparameters                |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",16)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",17)
   | DEVICEPARAMETER | COMMAND |                  COMMENT                   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",18)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",19)
   | APPEND          | O       | Positions file pointer at EOF.             |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",20)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",21)
   | REWIND          | O/U/C   | Positions file pointer at start of the     |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",22)
   |                 |         | file.                                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",23)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",24)
   |                 |         | Positions the current file pointer to the  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",25)
   |                 |         | location specified in strexpr. The format  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",26)
   |                 |         | of strexpr is a string of the form         |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",27)
   |                 |         | "[+|-]integer" where unsigned value        |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",28)
   |                 |         | specifies an offset from the beginning of  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",29)
   |                 |         | the file, and an explicitly signed value   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",30)
   |                 |         | specifies an offset relative to the        |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",31)
   | SEEK=strexpr    | O/U     | current file position. For STREAM or       |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",32)
   |                 |         | VARIABLE format, the positive intexpr      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",33)
   |                 |         | after any sign is a byte offset, while for |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",34)
   |                 |         | a FIXED format, it is a record offset. In  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",35)
   |                 |         | order to deal with the possible presence   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",36)
   |                 |         | of a Byte Order Marker (BOM), SEEK for a   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",37)
   |                 |         | FIXED format file written in a UTF         |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",38)
   |                 |         | character set must follow at least one     |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",39)
   |                 |         | prior READ since the device was created.   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",40)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",41)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",42)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",43)
   |                      File Format Deviceparameters                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",44)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",45)
   |  DEVICEPARAMETERS  | COMMAND |                 COMMENT                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",46)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",47)
   | [NO]FIXED          | O       | Controls whether records have fixed     |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",48)
   |                    |         | length.                                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",49)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",50)
   | [Z]LENGTH=intexpr  | U       | Controls virtual page length.           |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",51)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",52)
   | RECORDSIZE=intexpr | O       | Specifies maximum record size.          |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",53)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",54)
   | STREAM             | O       | Specifies the STREAM format.            |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",55)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",56)
   | VARIABLE           | O       | Controls whether records have variable  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",57)
   |                    |         | length.                                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",58)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",59)
   | [Z]WIDTH=intexpr   | U       | Controls maximum width of an output     |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",60)
   |                    |         | line.                                   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",61)
   |--------------------+---------+-----------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",62)
   | [Z][NO]WRAP        | O/U     | Controls handling of records longer     |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",63)
   |                    |         | than device width.                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",64)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",65)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",66)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",67)
   |                      File Access Deviceparameters                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",68)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",69)
   | DEVICEPARAMETER | COMMAND |                  COMMENT                   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",70)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",71)
   | DELETE          | C       | Specifies file be deleted by CLOSE.        |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",72)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",73)
   | GROUP=expr      | O/C     | Specifies file permissions for other users |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",74)
   |                 |         | in the owner's group.                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",75)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",76)
   | NEWVERSION      | O       | Specifies YottaDB create a new version of  |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",77)
   |                 |         | file.                                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",78)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",79)
   | OWNER=expr      | O/C     | Specifies file permissions for the owner   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",80)
   |                 |         | of file.                                   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",81)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",82)
   | [NO]READONLY    | O       | Controls read-only file access.            |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",83)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",84)
   | RENAME=expr     | C       | Specifies CLOSE replace name of a disk     |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",85)
   |                 |         | file with name specified by expression.    |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",86)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",87)
   | SYSTEM=expr     | O/C     | Specifies file permissions for the owner   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",88)
   |                 |         | of the file (same as OWNER).               |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",89)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",90)
   | [NO]TRUNCATE    | O/U     | Controls overwriting of existing data in   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",91)
   |                 |         | file.                                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",92)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",93)
   | UIC=expr        | O/C     | Specifies file's owner ID.                 |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",94)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",95)
   | WORLD=expr      | O/C     | Specifies file permissions for users not   |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",96)
   |                 |         | in the owner's group.                      |
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",97)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",98)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",99)
   O: Applies to the OPEN command
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",100)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",101)
   U: Applies to the USE command
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",102)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",103)
   C: Applies to the CLOSE command
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","SUMMARY",104)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES")
_Binary_Files
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",1)
    Binary Files
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",2)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",3)
   To write a binary data file, open it with FIXED:WRAP:CHSET="M" and set $X
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",4)
   to zero before the WRITE to avoid filling the last record with spaces (the
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",5)
   default PAD byte value).
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",6)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",7)
   **Note**
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",8)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",9)
   With CHSET not "M", FIXED has a different definition. Each record is
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",10)
   really the same number of bytes as specified by RECORDSIZE. Padding bytes
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",11)
   are added as needed to each record.
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",12)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",13)
   Example:
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",14)

^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",15)
   bincpy(inname,outname); YottaDB routine to do a binary copy from file named in argument 1 to file named in argument 2
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",16)
           ;
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",17)
     new adj,nrec,rsize,x
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",18)
     new $etrap
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",19)
     set $ecode="",$etrap="goto error",$zstatus=""
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",20)
     set rsize=32767                          ; max recordsize that keeps $X on track
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",21)
     open inname:(readonly:fixed:recordsize=rsize:exception="goto eof")
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",22)
     open outname:(newversion:stream:nowrap:chset="M")
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",23)
     for nrec=1:1 use inname read x use outname write x
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",24)
   eof
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",25)
     if $zstatus["IOEOF" do  quit
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",26)
     . set $ecode=""
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",27)
     . close inname
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",28)
     . use outname
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",29)
     . set adj=$x
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",30)
     . set $x=0 close outname
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",31)
     . write !,"Copied ",$select((nrec-1)<adj:adj,1:((nrec-1)*rsize)+adj)," bytes from ",inname," to ",outname
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",32)
     else  use $principal write !,"Error with file ",inname,":"
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",33)
   error
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",34)
     write !,$zstatus
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",35)
     close inname,outname
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",36)
     quit
^HELP("s","IO_PROCESSING","s","SEQUENTIAL_FILES","s","_BINARY_FILES",37)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES")
Using_Null_Devices
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",1)
   Using Null Devices
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",2)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",3)
   Null devices comprise of a collection of system purpose devices that
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",4)
   include /dev/null, /dev/zero, /dev/random, and /dev/urandom.
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",5)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",6)
     o /dev/null returns a null string on READ and sets $ZEOF
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",7)
     o /dev/random and /dev/urandom return a random value on READ and set
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",8)
       $ZEOF
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",9)
     o /dev/zero returns 0's on READ and does not set $ZEOF
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",10)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",11)
   A null device discards all output. YottaDB maintains a virtual cursor
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",12)
   position for null devices as it does for terminals on output. Use null
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",13)
   devices for program testing and debugging, or for jobs that permit I/O to
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",14)
   be discarded under certain circumstances. For example, JOB processes must
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",15)
   have input and output devices associated with them, even though they do
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",16)
   not use them. Null devices are low overhead never-fail alternatives for
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",17)
   certain classes of I/O.
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES",18)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY")
Null_Deviceparameter_Summary
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",1)
   Null Deviceparameter Summary
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",2)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",3)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",4)
   |                         Null Deviceparameters                          |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",5)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",6)
   |  DEVICEPARAMETER  | COMMAND |                 COMMENT                  |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",7)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",8)
   |                     O: Applies to the OPEN command                     |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",9)
   |                                                                        |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",10)
   |                     U: Applies to the USE command                      |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",11)
   |                                                                        |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",12)
   |                    C: Applies to the CLOSE command                     |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",13)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",14)
   |                   |         | Controls device-specified error          |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",15)
   |                   |         | handling. For the null device this is    |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",16)
   | EXCEPTION=expr    | O/U/C   | only EOF handling and therefore          |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",17)
   |                   |         | exceptions can never be invoked except   |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",18)
   |                   |         | by a READ.                               |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",19)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",20)
   | [NO]FILTER[=expr] | U       | Controls some $X,$Y maintenance.         |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",21)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",22)
   | [Z]LENGTH=intexpr | U       | Controls the length of the virtual page. |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",23)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",24)
   | [Z]WIDTH=intexpr  | U       | Controls maximum size of a record.       |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",25)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",26)
   | [Z][NO]WRAP       | O/U     | Controls handling of records longer than |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",27)
   |                   |         | the maximum width.                       |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",28)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",29)
   | X=intexpr         | U       | Sets $X to intexpr.                      |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",30)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",31)
   | Y=intexpr         | U       | Sets $Y to intexpr.                      |
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",32)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICEPARAMETER_SUMMARY",33)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES")
Null_Device_Examples
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",1)
   Null Device Examples
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",2)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",3)
   This section contains examples of null device usage.
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",4)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",5)
   Example:
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",6)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",7)
   YDB>do ^runrep
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",8)
   runrep;
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",9)
    zprint ^runrep
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",10)
    set dev="/dev/null"
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",11)
    set hdr="********* REPORT HEADER ************"
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",12)
    open dev use dev
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",13)
    set x="" write hdr,!,$zdate($horolog),?30,$job,!
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",14)
    for  set x=$order(^tmp($job,x)) quit:x=""  do REPORT
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",15)
    quit
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",16)
   REPORT;
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",17)
    ;large amount of code
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",18)
    quit;
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",19)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",20)
   This program produces a report derived from the information in the global
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",21)
   variable ^tmp. The unspecified routine REPORT may potentially contain a
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",22)
   large amount of code. To see that the basic program functions without
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",23)
   error, the programmer may discard the output involved in favor of watching
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",24)
   the function. To run the program normally, the programmer simply has to
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",25)
   change the variable dev to name another device and the routine REPORT
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",26)
   writes to the dev device.
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",27)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",28)
   Example:
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",29)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",30)
   job ^X:(in="/dev/null":out="/dev/null":err="error.log")
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",31)
   JOB ^X:(IN="/dev/null":OUT="/dev/null":ERR="error.log")
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",32)

^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",33)
   This example issues a YottaDB JOB command to execute the routine ^X in
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",34)
   another process. This routine processes a large number of global variables
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",35)
   and produces no output. In the example, the JOBbed process takes its input
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",36)
   from a null device, and sends its output to a null device. If the JOBbed
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",37)
   process encounters an error, it directs the error message to error.log.
^HELP("s","IO_PROCESSING","s","USING_NULL_DEVICES","s","NULL_DEVICE_EXAMPLES",38)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES")
Using_PIPE_Devices
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",1)
   Using PIPE Devices
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",2)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",3)
   A PIPE device is used to access and manipulate the input and/or output of
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",4)
   a shell command as a YottaDB I/O device. YottaDB maintains I/O status variables
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",5)
   for a PIPE device just as it does for other devices. An OPEN of the device
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",6)
   starts a sub-process. Data written to the device by the M program is
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",7)
   available to the process on its STDIN. The M program can read the STDOUT
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",8)
   and STDERR of the sub-process. This facilitates output only applications,
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",9)
   such as printing directly from a YottaDB program to an lp command; input only
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",10)
   applications, such as reading the output of a command such as ps; and
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",11)
   co-processing applications, such as using iconv to convert data from one
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",12)
   encoding to another.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",13)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",14)
   A PIPE is akin to a FIFO device. Both FIFO and PIPE map YottaDB devices to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",15)
   UNIX pipes, the conceptual difference being that whereas a FIFO device
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",16)
   specifies a named pipe, but does not specify the process on the other end
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",17)
   of the pipe, a PIPE device specifies a process to communicate with, but
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",18)
   the pipes are unnamed. Specifically, an OPEN of a PIPE creates a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",19)
   subprocess with which the YottaDB process communicates.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",20)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",21)
   A PIPE device is specified with a "PIPE" value for mnemonicspace on an
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",22)
   OPEN command.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",23)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",24)
   **Note**
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",25)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",26)
   YottaDB ignores the mnemonicspace specification on an OPEN of a previously
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",27)
   OPEN device and leaves the existing device with its original
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",28)
   characteristics.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES",29)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS")
PIPE_Characteristics
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",1)
   PIPE Characteristics
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",2)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",3)
   The following characteristics of PIPE may be helpful in using them
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",4)
   effectively.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",5)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",6)
   With Read:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",7)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",8)
   A READ with no timeout reads whatever data is available to be read; if
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",9)
   there is no data to be read, the process hangs until some data becomes
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",10)
   available.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",11)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",12)
   A READ with a timeout reads whatever data is available to be read, and
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",13)
   returns; if there is no data to be read, the process waits for a maximum
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",14)
   of the timeout period, an integer number of seconds, for data to become
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",15)
   available (if the timeout is zero, it returns immediately, whether or not
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",16)
   any data was read). If the READ returns before the timeout expires, it
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",17)
   sets $TEST to TRUE(1); if the timeout expires, it sets $TEST to FALSE (0).
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",18)
   When the READ command does not specify a timeout, it does not change
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",19)
   $TEST. READ specifying a maximum length (for example, READ X#10 for ten
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",20)
   characters) reads until either the PIPE has supplied the specified number
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",21)
   of characters, or a terminating delimiter.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",22)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",23)
   The following table shows the result and values of I/O status variables
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",24)
   for various READ operations on a PIPE device.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",25)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",26)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",27)
   | Operation |    Result     |  $DEVICE   | $ZA | $TEST |    X    | $ZEOF |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",28)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",29)
   | READ X:n  | Normal        | 0          | 0   | 1     | Data    | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",30)
   |           | Termination   |            |     |       | Read    |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",31)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",32)
   | READ X:n  | Timeout with  | 0          | 0   | 0     | empty   | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",33)
   |           | no data read  |            |     |       | string  |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",34)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",35)
   |           | Timeout with  |            |     |       | Partial |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",36)
   | READ X:n  | partial data  | 0          | 0   | 0     | data    | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",37)
   |           | read          |            |     |       |         |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",38)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",39)
   |           |               | 1,Device   |     |       | empty   |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",40)
   | READ X:n  | End of File   | detected   | 9   | 1     | string  | 1     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",41)
   |           |               | EOF        |     |       |         |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",42)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",43)
   | READ X:0  | Normal        | 0          | 0   | 1     | Data    | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",44)
   |           | Termination   |            |     |       | Read    |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",45)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",46)
   | READ X:0  | No data       | 0          | 0   | 0     | empty   | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",47)
   |           | available     |            |     |       | string  |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",48)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",49)
   |           | Timeout with  |            |     |       | Partial |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",50)
   | READ X:0  | partial data  | 0          | 0   | 0     | data    | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",51)
   |           | read          |            |     |       |         |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",52)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",53)
   |           |               | 1,Device   |     |       | empty   |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",54)
   | READ X:0  | End of File   | detected   | 9   | 1     | string  | 1     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",55)
   |           |               | EOF        |     |       |         |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",56)
   |-----------+---------------+------------+-----+-------+---------+-------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",57)
   | READ X    | Error         | 1,<error   | 9   | n/c   | empty   | 0     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",58)
   |           |               | signature> |     |       | string  |       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",59)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",60)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",61)
   With WRITE:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",62)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",63)
   The PIPE device does non-blocking writes. If a process tries to WRITE to a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",64)
   full PIPE and the WRITE would block, the device implicitly tries to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",65)
   complete the operation up to a default of 10 times. If the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",66)
   ydb_non_blocked_write_retries environment variable is defined, this
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",67)
   overrides the default number of retries. If the retries do not succeed
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",68)
   (remain blocked), the WRITE sets $DEVICE to "1,Resource temporarily
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",69)
   unavailable", $ZA to 9, and produces an error. If the YottaDB process has
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",70)
   defined an EXCEPTION, $ETRAP or $ZTRAP, the error trap may choose to retry
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",71)
   the WRITE after some action or delay that might remove data from the PIPE
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",72)
   device.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",73)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",74)
   With WRITE /EOF:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",75)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",76)
   WRITE /EOF to a PIPE device flushes, sets $X to zero (0) and terminates
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",77)
   output to the created process, but does not CLOSE the PIPE device. After a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",78)
   WRITE /EOF, any additional WRITE to the device discards the content, but
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",79)
   READs continue to work as before. A WRITE /EOF signals the receiving
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",80)
   process to expect no further input, which may cause it to flush any output
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",81)
   it has buffered and terminate. You should explicitly CLOSE the PIPE device
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",82)
   after finishing all READs. If you do not want WRITE /EOF to flush any
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",83)
   pending output including padding in FIXED mode or a terminating EOL in
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",84)
   NOFIXED mode, SET $X=0 prior to the WRITE /EOF.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",85)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",86)
   To avoid an indefinite hang doing a READ from a created process that
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",87)
   buffers its output to the input of the PIPE device, READ with timeout
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",88)
   (typically 0).
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",89)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",90)
   With CLOSE:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",91)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",92)
   The CLOSE of a PIPE device prevents all subsequent access to the pipes
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",93)
   associated with the device. Unless the OPEN that created the device
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",94)
   specified INDEPENDENT, the process terminates. Note that any subsequent
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",95)
   attempt by the created process to read from its stdin (which would be a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",96)
   closed pipe) returns an EOF and typical UNIX behavior would be to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",97)
   terminate on such an event.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_CHARACTERISTICS",98)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY")
PIPE_Deviceparameter_Summary
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",1)
   PIPE Deviceparameter Summary
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",2)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",3)
   The following table summarizes the PIPE format deviceparameters.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",4)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",5)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",6)
   |  DEVICE PARAMETER  | CMD |                 DESCRIPTION                 |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",7)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",8)
   | [NO]FIXED          | O   | Controls whether records have fixed length  |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",9)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",10)
   | RECORDSIZE=intexpr | O   | Specifies the maximum record size.          |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",11)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",12)
   | VARIABLE           | O   | Controls whether records have variable      |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",13)
   |                    |     | length.                                     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",14)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",15)
   | [Z]WIDTH=intexpr   | U   | Sets the device's logical record size and   |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",16)
   |                    |     | enables WRAP.                               |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",17)
   |--------------------+-----+---------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",18)
   | [Z][NO]WRAP        | O/U | Controls the handling of records longer     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",19)
   |                    |     | than the device width.                      |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",20)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",21)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",22)
   The following table summarizes PIPE access deviceparamters.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",23)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",24)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",25)
   |                |   | Specifies the command string to execut in a       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",26)
   |                |   | created process for the PIPE device. YottaDB uses |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",27)
   | COMMAND=string | o | the default searching mechanism of the UNIX shell |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",28)
   |                |   | for creating the process and initiating its       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",29)
   |                |   | command(s).                                       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",30)
   |----------------+---+---------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",31)
   | SHELL=string   | o | Specifies the path to a shell to be used instead  |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",32)
   |                |   | of the default shell                              |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",33)
   |----------------+---+---------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",34)
   |                |   | Specifies a device handle for a return pipe to    |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",35)
   |                |   | which the created process writes any standard     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",36)
   | STDERR=string  | o | error output. The YottaDB process can USE, READ,  |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",37)
   |                |   | and CLOSE it, but cannot WRITE to it. When the    |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",38)
   |                |   | YottaDB process CLOSEs the PIPE device, the PIPE  |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",39)
   |                |   | device CLOSEs STDERR, if still OPEN.              |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",40)
   |----------------+---+---------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",41)
   | WRITEONLY      | o | Specifies that the YottaDB process may only WRITE |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",42)
   |                |   | to the created process via the PIPE device.       |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",43)
   |----------------+---+---------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",44)
   |                |   | Specifies that the YottaDB process may only READ  |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",45)
   |                |   | from the created process via the PIPE device.     |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",46)
   | READONLY       | o | Output from both the standard output and the      |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",47)
   |                |   | standard error output of the created process is   |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",48)
   |                |   | available unless STDERR is specified.             |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",49)
   |----------------+---+---------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",50)
   | PARSE          | o | Specifies that YottaDB parse the COMMAND and      |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",51)
   |                |   | issue an OPEN exception for any invalid command.  |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",52)
   |----------------+---+---------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",53)
   | INDEPENDENT    | o | Specifies that the created process continues to   |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",54)
   |                |   | execute after the PIPE device is CLOSEd.          |
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",55)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICEPARAMETER_SUMMARY",56)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES")
PIPE_Device_Examples
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",1)
   PIPE Device Examples
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",2)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",3)
   The following examples show the use of deviceparameters and status
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",4)
   variables with PIPE devices.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",5)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",6)
   Example:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",7)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",8)
   pipe1;
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",9)
     set p1="test1"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",10)
     open p1:(shell="/bin/sh":comm="cat")::"PIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",11)
     for i=1:1:10 do
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",12)
     . use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",13)
     . write i,":abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz ",!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",14)
     . read x
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",15)
     . use $P
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",16)
     . write x,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",17)
     close p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",18)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",19)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",20)
   This WRITEs 10 lines of output to the cat command and reads the cat output
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",21)
   back into the local variable x. The YottaDB process WRITEs each line READ
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",22)
   from the PIPE to the principal device. This example works because "cat" is
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",23)
   not a buffering command. The example above would not work for a command
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",24)
   such as tr that buffers its input.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",25)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",26)
   Example :
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",27)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",28)
   pipe3;
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",29)
     set p1="test1"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",30)
     open p1:(shell="/bin/sh":command="tr -d e")::"PIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",31)
     for i=1:1:1000 do
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",32)
     . use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",33)
     . write i,":abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz ",!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",34)
     . read x:0
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",35)
     . if '+$device use $principal write x,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",36)
     use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",37)
     write /EOF
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",38)
     for  read x quit:$zeof  use $principal write x,! use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",39)
     close p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",40)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",41)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",42)
   This shows the use of tr (a buffering command) in the created process for
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",43)
   the PIPE device. To see the buffering effect the YottaDB process WRITEs 1000
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",44)
   lines to the PIPE device. Different operating systems may have different
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",45)
   buffer sizes. Notice the use of the r x:0 and the check on $DEVICE in the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",46)
   loop. If $DEVICE is 0, WRITE x writes the data read to the principal
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",47)
   device. No actual READs complete, however, until tr reaches its buffer
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",48)
   size and writes to its stdout. The final few lines remain buffered by tr
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",49)
   after the process finishes the first loop. The YottaDB process then issues a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",50)
   WRITE /EOF to the PIPE causing tr to flush its buffered lines. In the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",51)
   final for loop the YottaDB process uses the simple form of READ x from the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",52)
   PIPE followed by a WRITE of each line to the principal device until $zeof
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",53)
   becomes TRUE.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",54)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",55)
   Example :
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",56)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",57)
   pipe4;
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",58)
     set a="test"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",59)
     open a:(command="nestin":independent)::"PIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",60)
     use a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",61)
     set key=$KEY
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",62)
     write "Show nestin still running after CLOSE of a",!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",63)
     write "The parent process of 1 shows the parent shell has exited after CLOSE of a"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",64)
     read line1,line2
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",65)
     use $principal
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",66)
     write !,line1,!,line2,!,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",67)
     set k="ps -ef | grep -v grep | grep -v sh | grep -w '"_key_"' | awk '{print $2}'"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",68)
     set b="getpid"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",69)
     open b:(command=k:readonly)::"PIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",70)
     use b
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",71)
     read pid
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",72)
     close a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",73)
     close b
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",74)
     set k2="ps -ef | grep -v grep | grep -v sh | grep -w '"_pid_"'"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",75)
     set c="psout"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",76)
     open c:(command=k2:writeonly)::"PIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",77)
     close c
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",78)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",79)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",80)
   This demonstrates that the created sub process nestin keeps running as an
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",81)
   INDEPENDENT process after the YottaDB process CLOSEs the pipe. This YottaDB
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",82)
   process uses another PIPE device to return the process id of nestin and
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",83)
   READ it into pid so that it may be killed by this or another process,
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",84)
   should that be appropriate.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",85)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",86)
   **Note**
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",87)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",88)
   "nestin.c" is a program which reads from standard input and writes to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",89)
   standard output until it see and EOF. It then loops for 300 1sec sleeps
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",90)
   doing nothing. The purpose of using independent is as a server process
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",91)
   which continues until it receives some other signal for termination.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",92)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",93)
   Example:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",94)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",95)
   YDB>kill ^a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",96)
   YDB>zprint ^indepserver
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",97)
   indepserver;
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",98)
     read x
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",99)
     write "received = ",x,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",100)
     set ^quit=0
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",101)
     for  do  quit:^quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",102)
     . if $data(^a) write "^a = ",^a,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",103)
     . Hang 5
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",104)
   YDB>set a="test"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",105)
   YDB>open a:(command="mumps -run ^indepserver>indout":independent)::"pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",106)
   YDB>use a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",107)
   YDB>write "instructions",!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",108)
   YDB>close a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",109)
   YDB>zsystem "cat indout"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",110)
   received = instructions
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",111)
   YDB>set ^a=1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",112)
   YDB>zsystem "cat indout"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",113)
   received = instructions
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",114)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",115)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",116)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",117)
   YDB>s ^quit=1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",118)
   YDB>zsystem "cat indout"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",119)
   received = instructions
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",120)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",121)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",122)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",123)
   ^a = 1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",124)
   YDB>
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",125)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",126)
   This is a simple example using a mumps process as a server.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",127)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",128)
   Example:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",129)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",130)
   pipe5;
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",131)
     set p1="test1"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",132)
     set a=0
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",133)
     open p1:(shell="/bin/sh":command="cat":exception="goto cont1")::"PIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",134)
     set c=":abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",135)
     for i=1:1:10000  do
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",136)
     . use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",137)
     . write i_c,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",138)
     . use $principal write i,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",139)
     use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",140)
     write /EOF
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",141)
     for  read x quit:$zeof  use $principal write x,! use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",142)
     close p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",143)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",144)
   cont1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",145)
     if $zeof quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",146)
     if a=0 set a=i/2
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",147)
     set z=$za
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",148)
     ; use $device to make sure ztrap is caused by blocked write to pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",149)
     set d=$device
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",150)
     if "1,Resource temporarily unavailable"=d DO
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",151)
     . use $p
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",152)
     . write "pipe full, i= ",i," $ZA = ",z,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",153)
     . set i=i-1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",154)
     . use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",155)
     . for j=1:1:a  read x use $principal write j,"-",x,! use p1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",156)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",157)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",158)
   This demonstrates how to deal with write blocking of a PIPE device. The
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",159)
   loop doing the WRITE does not READ from the PIPE. Eventually causing the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",160)
   output of cat to block on its output and stop reading input from the pipe.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",161)
   When the process takes the $ZTRAP to cont1 it tests $DEVICE to determine
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",162)
   if the trap is caused by the full pipe. If so, it uses the for loop to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",163)
   read half the number of lines output by the main loop. It decrements i and
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",164)
   returns to the original WRITE loop to retry the failed line and continue
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",165)
   with the WRITEs to the pipe. Depending upon the configuration of the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",166)
   environment, it may trap several times before processing all lines.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",167)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",168)
   Example:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",169)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",170)
   ; Example program that starts another program in a pipe and traps the errors. The called
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",171)
   ; programs intentionally induce errors
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",172)
   pipexample
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",173)
     set $etrap="do readfrompipe(.pipe,.piperr) use $p zwrite $zstatus zhalt 99"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",174)
     set pipe="pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",175)
     set piperr="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",176)
     set writesize=1024
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",177)
     set cmd=$piece($zcmdline," ") set:'$length(cmd) cmd="induceEPIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",178)
     open pipe:(shell="/bin/bash":command="$ydb_dist/mumps -run "_cmd_"^pipexample":stderr=piperr)::"pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",179)
     zshow "D":devicelist write "The active device is ",devicelist("D",2),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",180)
     use pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",181)
     for i=1:1:1024 write $tr($justify(i,writesize)," ","X"),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",182)
     close pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",183)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",184)
   ; Same as above, but without defining the PIPE's standard error
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",185)
   nostderr
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",186)
     set $etrap="do readfrompipe(.pipe) use $p zshow ""*"" zhalt 99"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",187)
     set pipe="pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",188)
     set writesize=1024
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",189)
     set cmd=$piece($zcmdline," ",2) set:'$length(cmd) cmd="induceEAGAIN"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",190)
     open pipe:(shell="/bin/bash":command="$ydb_dist/mumps -run "_cmd_"^pipexample")::"pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",191)
     zshow "D":devicelist write "The active device is ",devicelist("D",2),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",192)
     write !,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",193)
     use pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",194)
     for i=1:1:1024 write $tr($justify(i,writesize)," ","X"),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",195)
     close pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",196)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",197)
   ; This routine intentionally delays reading from the pipe to induce an EAGAIN
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",198)
   induceEAGAIN
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",199)
     set $etrap="use $p zwrite $zstatus zhalt 99"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",200)
     set hangtime=+$zcmdline set:'hangtime hangtime=5 set add=1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",201)
     for i=1:1:1024 read x(i) quit:$zeof  do
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",202)
     . set delay(i)=1/(add+$random(hangtime))
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",203)
     . hang delay(i)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",204)
     . set:i=30 add=10
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",205)
     halt
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",206)
   ; This routine intentionally induces an EPIPE by immediately sending a SIGTERM to itself causing
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",207)
   ; a FORCEDHALT error which goes to STDERR. Subsequently, a random DIVZERO error occurs, but this
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",208)
   ; error goes to STDOUT since it is not a fatal error
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",209)
   induceEPIPE
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",210)
     set $etrap="use $p zwrite $zstatus zhalt 99"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",211)
     set divzero=150373210 ; DIVZERO goes to stdout
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",212)
     write "My PID is ",$job,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",213)
     zsystem:'$zcmdline "kill -15 "_$job  ; FORCEDHALT error goes to stderr
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",214)
     for i=1:1 read x(i) quit:$zeof  zmessage:'$random(1000) divzero
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",215)
     halt
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",216)
   ; Read the contents of the pipe on failure. Messages from the programs inside the pipe aid
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",217)
   ; in undestanding the underlying problem(s)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",218)
   readfrompipe(pipe,piperr)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",219)
     new i
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",220)
     new $etrap
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",221)
     set $etrap="set x=$zjobexam() zhalt 88"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",222)
     use pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",223)
     for i=1:1  read pipe(i):0 quit:'$test!$zeof
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",224)
     zkill pipe(i)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",225)
     do:$data(piperr)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",226)
     . use piperr
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",227)
     . for i=1:1  read piperr(i):0 quit:'$test!$zeof
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",228)
     . zkill piperr(i)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",229)
     close pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",230)
     use $p
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",231)
     for i=1:1  quit:'$data(pipe(i))  write ?4,"stdout:",pipe(i),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",232)
     for i=1:1  quit:'$data(piperr(i))  write ?4,"stderr:",piperr(i),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",233)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",234)
   ; Example of trapping an error and retrying the operation as necessary. Error conditions
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",235)
   ; used are EPIPE, aka "Broken pipe" or ENO32, and EAGAIN, aka ENO11.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",236)
   retry
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",237)
     set $etrap="use $p zshow ""*"" zhalt 99"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",238)
     set pipe="pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",239)
     set piperr="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",240)
     set writesize=1024
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",241)
     set cmd=$piece($zcmdline," ") set:'$length(cmd) cmd="induceEPIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",242)
     for try=0:1  do  quit:$get(readcomplete,0)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",243)
     . new $etrap set $etrap="goto retryEPIPE"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",244)
     . open pipe:(shell="/bin/bash":command="$ydb_dist/mumps -run "_cmd_"^pipexample "_try:stderr=piperr)::"pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",245)
     . zshow "D":devicelist write "Try ",try,$char(9),devicelist("D",2),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",246)
     . use pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",247)
     . for i=1:1:1024 do
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",248)
     . . new $etrap set $etrap="goto retryEAGAIN^pipexample"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",249)
     . . write $tr($justify(i,writesize)," ","X"),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",250)
     . set readcomplete=1
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",251)
     close pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",252)
     use $p
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",253)
     write ?4,"Writes completed",!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",254)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",255)
   retryEPIPE
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",256)
     quit:$zstatus'["ENO32"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",257)
     use $p
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",258)
     write "...Caught on try ",try,", write ",i,"... ",$zstatus,!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",259)
     set $ecode=""
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",260)
     do readfrompipe(.pipe,.piperr)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",261)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",262)
   retryEAGAIN
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",263)
     quit:$zstatus'["ENO11"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",264)
     use $p
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",265)
     write "...Failed to perform non-blocked writes... Retrying write # ",$increment(i,-1),!
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",266)
     set $ecode=""
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",267)
     hang 1+$random(5)
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",268)
     use pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",269)
     quit
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",270)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",271)
   This example demonstrates how to handle PIPE device errors, whether with
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",272)
   the device itself or from programs inside the PIPE device.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",273)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",274)
   Example:
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",275)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",276)
   sh> mumps -run pipexample induceEAGAIN
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",277)
   The active device is pipe OPEN PIPE SHELL="/bin/bash" COMMAND="$ydb_dist/mumps -run induceEAGAIN^pipexample" STDERR="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",278)
   $ZSTATUS="11,pipexample+9^pipexample,%SYSTEM-E-ENO11, Resource temporarily unavailable"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",279)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",280)
   sh> mumps -run retry^pipexample induceEAGAIN
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",281)
   Try 0   pipe OPEN PIPE SHELL="/bin/bash" COMMAND="$ydb_dist/mumps -run induceEAGAIN^pipexample 0" STDERR="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",282)
   ...Failed to perform non-blocked writes... Retrying write # 54
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",283)
   ...Failed to perform non-blocked writes... Retrying write # 63
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",284)
   ...Failed to perform non-blocked writes... Retrying write # 69
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",285)
   ...Failed to perform non-blocked writes... Retrying write # 78
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",286)
       Writes completed
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",287)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",288)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",289)
   This example demonstrates handling WRITE errors, like ENO11 or EAGAIN,
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",290)
   that do not terminate the PIPE device. The PIPE device does non-blocking
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",291)
   writes. If a process tries to WRITE to a full PIPE and the WRITE would
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",292)
   block, the device implicitly tries to complete the operation up to a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",293)
   default of 10 times. YottaDB sleeps 100 micro seconds between each retry.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",294)
   When dealing with programs that can take a while to process input, it's a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",295)
   good idea to either schedule a delay between WRITEs or come up with a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",296)
   mechanism to back off the WRITEs when the buffer fills up.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",297)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",298)
   sh> mumps -run pipexample induceEPIPE
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",299)
   The active device is pipe OPEN PIPE SHELL="/bin/bash" COMMAND="$ydb_dist/mumps -run induceEPIPE^pipexample" STDERR="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",300)
       stdout:My PID is 12808
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",301)
       stderr:%YDB-F-FORCEDHALT, Image HALTed by MUPIP STOP
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",302)
   $ZSTATUS="32,pipexample+9^pipexample,%SYSTEM-E-ENO32, Broken pipe"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",303)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",304)
   sh> mumps -run retry^pipexample induceEPIPE
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",305)
   Try 0   pipe OPEN PIPE SHELL="/bin/bash" COMMAND="$ydb_dist/mumps -run induceEPIPE^pipexample 0" STDERR="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",306)
   ...Caught on try 0, write 49... 32,retry+13^pipexample,%SYSTEM-E-ENO32, Broken pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",307)
       stdout:My PID is 16252
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",308)
       stderr:%YDB-F-FORCEDHALT, Image HALTed by MUPIP STOP
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",309)
   Try 1   pipe OPEN PIPE SHELL="/bin/bash" COMMAND="$ydb_dist/mumps -run induceEPIPE^pipexample 1" STDERR="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",310)
   ...Caught on try 1, write 697... 32,retry+13^pipexample,%SYSTEM-E-ENO32, Broken pipe
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",311)
       stdout:My PID is 16403
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",312)
       stdout:$ZSTATUS="150373210,induceEPIPE+5^pipexample,%YDB-E-DIVZERO, Attempt to divide by zero"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",313)
   Try 2   pipe OPEN PIPE SHELL="/bin/bash" COMMAND="$ydb_dist/mumps -run induceEPIPE^pipexample 2" STDERR="piperr"
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",314)
       Writes completed
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",315)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",316)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",317)
   This example demonstrates how to create a separate STDERR pipe device from
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",318)
   which to read the STDERR output of the program(s) inside the pipe. Reading
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",319)
   the STDERR is important when dealing with failures from Unix programs. It
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",320)
   is possible to read the errors without creating a STDERR pipe device,
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",321)
   however the error messages are commingled with the output of the programs
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",322)
   inside the pipe which could make diagnosis of the underlying problem
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",323)
   harder. Notice that YottaDB writes fatal errors, YDB-F types, to STDERR, but
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",324)
   all others go to STDOUT.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",325)

^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",326)
   Additionally, this example demonstrates handling errors that terminate the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",327)
   PIPE device. In this example, the PIPE device is terminated when a program
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",328)
   inside the pipe terminates before reading all of the driving MUMPS
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",329)
   program's output causing an EPIPE or ENO32, a broken pipe. In such a
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",330)
   situation the MUMPS program must capture the error that caused the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",331)
   termination and respond accordingly. The program may need to call out to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",332)
   other programs to determine the status of a service it is using or to
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",333)
   alert the operator of an error with an external program or service. To
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",334)
   operate successfully, the program must recreate the pipe and retry the
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",335)
   operation.
^HELP("s","IO_PROCESSING","s","USING_PIPE_DEVICES","s","PIPE_DEVICE_EXAMPLES",336)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES")
Using_Socket_Devices
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",1)
   Using Socket Devices
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",3)
   SOCKET devices are used to access and manipulate sockets. A SOCKET device
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",4)
   can have unlimited associated sockets. The default limit is 64. Set the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",5)
   environment variable ydb_max_sockets to the number of maximum associated
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",6)
   sockets sockets that you wish to set for a YottaDB process.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",7)
   $VIEW("MAX_SOCKETS")returns the current value of the maximum number of
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",8)
   associated sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",9)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",10)
   At any time, only one socket from the collection can be the current
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",11)
   socket. If there is no current socket, an attempt to READ from, or WRITE
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",12)
   to the device, generates an error.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",13)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",14)
   Sockets can be attached and detached from the collection of sockets
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",15)
   associated with a device. Detached sockets belong to a pseudo-device
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",16)
   called the "socketpool". SOCKET devices use "YGTMSOCKETPOOL" to identify
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",17)
   the socket pool; an attempt OPEN a device of that name produces a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",18)
   DEVNAMERESERVED error. A process can detach a socket from a device and
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",19)
   later attach it to the same device or another device.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",20)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",21)
   **Caution**
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",22)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",23)
   Currently, YottaDB does not produce an error if a socket is attached to a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",24)
   device having a different CHSET.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",25)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",26)
   **Note**
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",27)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",28)
   Exception handler (EXCEPTION) operates at the SOCKET device level and
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",29)
   error trapping (IOERROR) operates the socket-level. So, one EXCEPTION
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",30)
   operates on all sockets of a SOCKET device and IOEROR can be individually
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",31)
   turned on or off for each socket.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES",32)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT")
Message_Management
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",1)
   Message Management
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",3)
   From an application perspective, the transport layers used by a socket
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",4)
   device are stream-oriented, with no provisions for implicit application
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",5)
   messages. Therefore, the following are two common protocols used to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",6)
   segment application messages.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",7)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",8)
    1. One method is to use a, typically small, fixed length message
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",9)
       containing the length of the next, variable length, message. In YottaDB a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",10)
       simplistic writer might be:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",11)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",12)
       Write $Justify($Length(x),4),x
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",13)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",14)
       A corresponding simplistic reader might be:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",15)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",16)
       read len#4,x#len
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",17)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",18)
       The advantage of this approach is that the message content (the value
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",19)
       of x in the code fragments above) can contain any character. The
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",20)
       disadvantage is that detecting that the protocol has become
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",21)
       desynchronized is a problem.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",22)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",23)
    2. The other common method is to place a delimiter between each
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",24)
       application message. The protocol breaks if a message ever includes a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",25)
       delimiter as part of its content.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",26)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",27)
   The SOCKET device provides a facility for recognizing delimiters to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",28)
   simplify parsing messages.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","MESSAGE_MANAGEMENT",29)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND")
Read_Command
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",1)
   Read Command
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",3)
   The READ command may be used to obtain data from a socket. A READ
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",4)
   operation terminates if any of the following are detected, in the order
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",5)
   specified below:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",6)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",7)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",8)
   |   Terminating    |     Argument Contains      | $Device |     $Key     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",9)
   |    Condition     |                            |         | (Continued)  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",10)
   |------------------+----------------------------+---------+--------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",11)
   | Error            | Empty string               | Error   | Empty string |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",12)
   |                  |                            | string  |              |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",13)
   |------------------+----------------------------+---------+--------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",14)
   | Timeout          | Data received before       | Empty   | Empty string |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",15)
   |                  | timeout                    | string  |              |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",16)
   |------------------+----------------------------+---------+--------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",17)
   | Delimiter        | Data up to, but not        | Empty   | Delimiter    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",18)
   |                  | including the delimiter    | string  | string       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",19)
   |------------------+----------------------------+---------+--------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",20)
   | Fixed length met | String of fixed length     | Empty   | Empty string |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",21)
   |                  |                            | string  |              |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",22)
   |------------------+----------------------------+---------+--------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",23)
   |                  | One (1) to as many         |         |              |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",24)
   | Buffer emptied   | characters as happen to be | Empty   | Empty string |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",25)
   |                  | provided by the transport  | string  |              |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",26)
   |                  | interface                  |         |              |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",27)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",28)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",29)
   A non-fixed-length read, with no timeout and no delimiters requires a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",30)
   complex implementation of sequence of READs to ensure a predictable
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",31)
   result. This is because the transport layer stream fragments delivered to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",32)
   the reader has only accidental correspondence with the operations
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",33)
   performed by the writer. For example, the following
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",34)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",35)
   Write "Message 1","Message 2"
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",36)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",37)
   is presented to the reader as the stream "Message1Message2" but it can
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",38)
   take from one (1) to 18 READ commands to retrieve the entire stream.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","READ_COMMAND",39)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY")
Socket_Deviceparameter_Summary
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",1)
   Socket Deviceparameter Summary
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",3)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",4)
   |                   Error Processing Deviceparameters                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",5)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",6)
   | DEVICEPARAMETER | COMMAND |                  COMMENT                   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",7)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",8)
   | EXCEPTION=expr  | O/U/C   | Controls device-specific error handling.   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",9)
   |-----------------+---------+--------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",10)
   |                 |         | use [NO]TRAP as strexpr                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",11)
   |                 |         |                                            |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",12)
   | IOERROR=strexpr | O/U     | If $LENGTH(strexpr) and                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",13)
   |                 |         | ("Tt"[$EXTRACT(strexpr)) then Error        |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",14)
   |                 |         | Trapping is enabled; otherwise the         |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",15)
   |                 |         | application must check $DEVICE for errors. |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",16)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",17)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",18)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",19)
   |                   Socket Management Deviceparameters                   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",20)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",21)
   |     DEVICEPARAMETER     | COMMAND |              COMMENT               |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",22)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",23)
   |                         |         | With OPEN, ATTACH assigns expr as  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",24)
   |                         |         | the handle name to the newly       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",25)
   |                         |         | created socket                     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",26)
   | ATTACH=strexpr          | O/U     |                                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",27)
   |                         |         | With USE, expr specifies the       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",28)
   |                         |         | handle of a socket in the          |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",29)
   |                         |         | socketpool.                        |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",30)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",31)
   |                         |         | Creates a client connection with a |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",32)
   | CONNECT                 | O/U     | server, which is located by the    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",33)
   |                         |         | information provided by expr.      |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",34)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",35)
   |                         |         | Establishes or replaces the list   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",36)
   | [NO]DELIMITER[=strexpr] | O/U     | of delimiters used by the newly    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",37)
   |                         |         | created socket.                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",38)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",39)
   |                         |         | Removes the socket identified by   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",40)
   |                         |         | expr from the current socket       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",41)
   | DETACH                  | U       | device, without affecting any      |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",42)
   |                         |         | existing connection of that        |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",43)
   |                         |         | socket, and places it in the       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",44)
   |                         |         | socketpool.                        |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",45)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",46)
   | LISTEN=expr             | O/U     | Allocate a new socket to listen    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",47)
   |                         |         | for a connection.                  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",48)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",49)
   |                         |         | The polling interval (in           |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",50)
   | MOREREADTIME=intexpr    | O/U     | milliseconds) that a SOCKET device |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",51)
   |                         |         | uses to check for arriving packet  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",52)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",53)
   |                         |         | Makes the socket specified by the  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",54)
   | SOCKET=expr             | U       | handle named in expr the current   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",55)
   |                         |         | socket for the Socket device.      |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",56)
   |-------------------------+---------+------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",57)
   |                         |         | Controls buffering of data packets |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",58)
   |                         |         | by the system TCP stack using the  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",59)
   | Z[NO]DELAY              | U       | TCP_NODELAY option to the          |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",60)
   |                         |         | setsockopt system call. ZNODELAY   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",61)
   |                         |         | must be fully spelled out.         |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",62)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",63)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",64)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",65)
   |                        Format Deviceparameters                         |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",66)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",67)
   |   DEVICEPARAMETER    | COMMAND |                COMMENT                |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",68)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",69)
   | [NO]FILTER[=strexpr] | U       | strexpr specifies character filtering |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",70)
   |                      |         | for socket output.                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",71)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",72)
   | LENGTH=intexpr or    |         | Sets virtual page length for socket   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",73)
   |                      | U       | device.                               |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",74)
   | ZLENGTH=intexpr      |         |                                       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",75)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",76)
   | ICHSET=strexpr       | O/U/C   | strexpr specifies input character set |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",77)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",78)
   | OCHSET=strexpr       | O/U/C   | strexpr specifies output character    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",79)
   |                      |         | set                                   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",80)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",81)
   | [NO]WRAP             | O/U     | Controls handling of records longer   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",82)
   |                      |         | than the device width.                |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",83)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",84)
   | WIDTH=intexpr        | U       | Controls the maximum length of an     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",85)
   |                      |         | output message.                       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",86)
   |----------------------+---------+---------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",87)
   | Z[NO]FF[=strexpr]    | O/U     | Controls whether and what characters  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",88)
   |                      |         | to send in response to a WRITE #.     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",89)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",90)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",91)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",92)
   |                        Buffer Deviceparameters                         |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",93)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",94)
   | DEVICEPARAMETER  | COMMAND |                  COMMENT                  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",95)
   |------------------+---------+-------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",96)
   | ZBFSIZE =intexpr | O/U     | Allocates a buffer used by YottaDB when   |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",97)
   |                  |         | reading from a socket.                    |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",98)
   |------------------+---------+-------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",99)
   | ZIBFSIZE=intexpr | O/U     | Sets the buffer size used by the network  |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",100)
   |                  |         | software (setsockopt SO_RCVBUF).          |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",101)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICEPARAMETER_SUMMARY",102)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES")
Socket_Device_Examples
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",1)
   Socket Device Examples
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",3)
   The sockexamplemulti32.m routine shows the use of $KEY and $ZKEY in a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",4)
   basic socket I/O setup. It's functionality is atypical in order to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",5)
   demonstrate a number of features. It launches two jobs: a server process
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",6)
   which opens a listening socket and a client process which makes five
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",7)
   connections to the server. The server sends a message to each connection
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",8)
   socket. Even-numbered client sockets read the message partially but do not
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",9)
   send a response back to the server. Odd-numbered client sockets receive
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",10)
   the full message and respond to the server with the message "Ok.". The
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",11)
   server reads two characters (but the client sends three) and $ZKEY shows
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",12)
   sockets with unread characters.Please click Download sockexamplemulti32.m
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",13)
   to download the sockexamplemulti32.m program and follow instructions in
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",14)
   the comments near the top of the program file. You can also download
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",15)
   sockexamplemulti32.m from
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",16)
   http://tinco.pair.com/bhaskar/gtm/doc/books/pg/UNIX_manual/sockexamplemulti32.m.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",17)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",18)
   You can start a YottaDB process in response to a connection request made
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",19)
   using inetd/xinetd. The following example uses inetd/xinetd to implement a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",20)
   listener which responds to connections and messages just as the prior
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",21)
   example.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",22)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",23)
   In the configuration file for xinetd, define a new service called
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",24)
   gtmserver. Set socket_type to "stream" and wait to "no" as in the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",25)
   following snippet:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",26)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",27)
   service gtmserver
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",28)
   {
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",29)
   disable = no
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",30)
   type = UNLISTED
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",31)
   port = 7777
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",32)
   socket_type = stream
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",33)
   wait = no
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",34)
   user = gtmuser
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",35)
   server = /path/to/startgtm
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",36)
   }
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",37)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",38)
   If you define the server in /etc/services, the type and port options are
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",39)
   not needed. For more information, the xinetd.conf man page for more
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",40)
   details.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",41)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",42)
   If you are using inetd, add a line to /etc/inetd.conf with the sockettype
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",43)
   "stream", protocol "tcp", and specify the "nowait" flag as in the example
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",44)
   below, which assumes a gtmserver service is defined in /etc/services:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",45)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",46)
   gtmserver stream tcp nowait gtmuser /path/to/startgtm
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",47)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",48)
   In both of the above examples, "gtmuser" is the name of the user to own
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",49)
   and run the gtmserver service, and "/path/to/startgtm" is the name of a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",50)
   script which defines some environment variables needed before invoking
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",51)
   YottaDB. Please check the man page for inetd.conf on your system as the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",52)
   details may be slightly different.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",53)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",54)
   The minimum variables are: $ydb_dist, which specifies the directory
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",55)
   containing the YottaDB distribution, and $ydb_routines, which specifies the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",56)
   paths used to locate the YottaDB routines. As an example:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",57)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",58)
   #!/bin/bash
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",59)
   cd /path/to/workarea
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",60)
   export ydb_dist=/usr/local/gtm
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",61)
   export ydb_routines="/var/myApp/o(/var/myApp/r) $ydb_dist"
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",62)
   export ydb_gbldir=/var/myApp/g/mumps.dat
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",63)
   $ydb_dist/mumps -r start^server
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",64)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",65)
   When start^server begins, the $PRINCIPAL device is the current device
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",66)
   which is the incoming connection and $KEY contains
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",67)
   "ESTABLISHED|socket_handle| remote_ip_address". In most cases, a USE
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",68)
   command near the beginning of the routine sets various device parameters
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",69)
   such as delimiters.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",70)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",71)
   The ZSHOW "D" command reports available information on both the local and
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",72)
   remote sides of a TCP socket including local and remove addresses and
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",73)
   ports.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",74)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",75)
   0 OPEN SOCKET TOTAL=1 CURRENT=0
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",76)
   SOCKET[0]=h11135182870 DESC=0 CONNECTED ACTIVE NOTRAP
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",77)
   REMOTE=10.1.2.3@53731 LOCAL=10.2.3.4@7777
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",78)
   ZDELAY ZIBFSIZE=1024 ZIBFSIZE=0
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_EXAMPLES",79)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION")
Socket_Device_Operation
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",1)
   Socket Device Operation
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",3)
   Each socket may be in one of the following states (observable through
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",4)
   $KEY):
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",5)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",6)
   A listening socket used for accepting new connections goes through these
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",7)
   three states in one step with a single OPEN or USE. When a server does a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",8)
   WRITE /WAIT, a client can establish a connection which creates a new
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",9)
   server socket. $KEY includes information about this new socket in the form
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",10)
   of CONNECT|handle|<address> where <address> is the IP address for TCP
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",11)
   sockets and path for LOCAL sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",12)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",13)
   Each socket may have one or more sockets waiting for either an incoming
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",14)
   connection or data available to READ (observable through $ZKEY). $ZKEY
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",15)
   contains semi- colon (";") separated list of entries detailing any waiting
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",16)
   sockets for a current SOCKET device.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",17)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",18)
   For more information on $KEY and $ZKEY, refer to "ISV".
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_DEVICE_OPERATION",19)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION")
Socket_Read_Operation
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",1)
   Socket Read Operation
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",3)
   TCP/IP is a stream-based protocol that guarantees that bytes arrive in the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",4)
   order in which they were sent. However, it does not guarantee that they
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",5)
   will be grouped in the same packets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",6)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",7)
   If packets arrive infrequently, or at varying rates that are sometimes
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",8)
   slow, a short interval can waste CPU cycles checking for an unlikely
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",9)
   event. On the other hand, if the handling of packets is time critical, a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",10)
   long interval can introduce an undesirable latency. If packets arrive in a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",11)
   rapid and constant flow (an unusual situation), the interval doesn't
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",12)
   matter as much, as there is always something in the buffer for the READ to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",13)
   work with. If you do not specify MOREREADTIME, SOCKET READ implements a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",14)
   dynamic approach of using a longer first interval of 200 ms when it finds
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",15)
   no data, then shortening the interval to 10 ms when data starts to arrive.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",16)
   If you specify an interval, the SOCKET device always uses the specified
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",17)
   interval and does not adjust dynamically.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",18)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",19)
   Most SOCKET READ operations terminate as a result of the first condition
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",20)
   detected from (a) receipt of delimiters, (b) receipt of the maximum number
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",21)
   of characters, or (c) expiration of a timeout. Note that all of these
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",22)
   conditions are optional, and a specific READ may specify zero or more of
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",23)
   them. This section refers to these three conditions as "defined
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",24)
   terminating conditions". If a SOCKET READ is not subject to any of the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",25)
   defined terminating conditions, it terminates after it has received at
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",26)
   least one character followed by an interval with no new characters. An
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",27)
   error can also terminate a READ. While none of the terminating conditions
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",28)
   is satisfied, the READ continues.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",29)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",30)
   The following flowchart represents the logic of a SOCKET READ.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_OPERATION",31)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS")
Socket_Read_Termination_Conditions
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",1)
   Socket Read Termination Conditions
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",3)
   A SOCKET READ operation terminates if any of the following conditions are
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",4)
   met:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",5)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",6)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",7)
   |  Terminating   |    Argument Contains    | $Device |   $Key    | $Test |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",8)
   |   Conditions   |                         |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",9)
   |----------------+-------------------------+---------+-----------+-------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",10)
   | Error          | Empty String            | Error   | Empty     | 1     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",11)
   |                |                         | String  | String    |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",12)
   |----------------+-------------------------+---------+-----------+-------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",13)
   | Timeout*       | Data received before    | Empty   | Empty     | 0     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",14)
   |                | timeout                 | String  | String    |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",15)
   |----------------+-------------------------+---------+-----------+-------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",16)
   | Delimiter*     | Data up to, but not     | Empty   | Delimiter | 1     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",17)
   |                | including the delimiter | String  | String    |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",18)
   |----------------+-------------------------+---------+-----------+-------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",19)
   | Fixed Length   | String of Fixed Length  | Empty   | Empty     | 1     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",20)
   | Met*           |                         | String  | String    |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",21)
   |----------------+-------------------------+---------+-----------+-------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",22)
   | Width          | Full width String       | Empty   | Empty     | 1     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",23)
   |                |                         | String  | String    |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",24)
   |----------------+-------------------------+---------+-----------+-------|
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",25)
   |                | One (1) to as many      |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",26)
   |                | characters as provided  |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",27)
   |                | by the transport        |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",28)
   |                | interface before        |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",29)
   |                | waiting for an interval |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",30)
   |                | (in milliseconds)       |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",31)
   |                | specified by            |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",32)
   |                | MOREREADTIME with no    |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",33)
   |                | additional input. If    |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",34)
   |                | MOREREADTIME is not     |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",35)
   |                | specified, buffer is    |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",36)
   | Buffer Emptied | checked every 200       | Empty   | Empty     | 1     |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",37)
   |                | milliseconds for its    | String  | String    |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",38)
   |                | first input and then    |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",39)
   |                | every 10 milliseconds   |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",40)
   |                | until no new input      |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",41)
   |                | arrives and no other    |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",42)
   |                | terminating conditions  |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",43)
   |                | are met.                |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",44)
   |                |                         |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",45)
   |                | IF MOREREADTIME is      |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",46)
   |                | specified, READ uses    |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",47)
   |                | that value exclusively  |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",48)
   |                | for buffer checks.      |         |           |       |
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",49)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",50)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",51)
   * denotes Defined Terminating Conditions
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",52)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",53)
   A non-fixed-length read, with no timeout and no delimiters (the sixth row
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",54)
   in the above table) requires a complex implementation of sequence of READs
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",55)
   to ensure a predictable result. This is because the transport layer stream
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",56)
   fragments delivered to the reader has only accidental correspondence with
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",57)
   the operations performed by the writer. For example, the following:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",58)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",59)
   Write "Message 1","Message 2" is presented to the reader as the stream
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",60)
   "Message1Message2" but it can take from one (1) to 18 READ commands to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",61)
   retrieve the entire stream.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",62)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",63)
   Messaging protocol should implement READ in any of the following ways:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",64)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",65)
    1. Use a delimiter to separate messages (generic READ and possibly a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",66)
       larger value for MOREREADTIME).
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",67)
    2. Specify messages as <length, value> pairs (a pair of fixed-length
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",68)
       READs (READ # ) and possibly a larger value for MOREREADTIME).
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",69)
    3. Parse the bytes or characters as they come in (possibly a smaller
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",70)
       value for MOREADTIME)
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","SOCKET_READ_TERMINATION_CONDITIONS",71)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND")
WRITE_Command
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",1)
   WRITE Command
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",2)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",3)
   The WRITE command sends data to a socket.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",4)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",5)
   WRITE ! inserts the character(s) of the first I/O delimiter (if any) to
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",6)
   the sending buffer. If "ZFF=expr" has been specified, WRITE # inserts the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",7)
   characters of expr. Otherwise WRITE # has no effect. WRITE ! and WRITE #
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",8)
   always maintain $X and $Y in a fashion that emulates a terminal cursor
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",9)
   position except when the device is OPENed with a UTF CHSET because the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",10)
   units for $X and $Y for terminals are in display columns while for sockets
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",11)
   they are in codepoints.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",12)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",13)
   The WRITE command for SOCKET devices accepts the following
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",14)
   controlmnemonics:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",15)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",16)
   /L[ISTEN][(numexpr)]
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",17)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",18)
   where numexpr specifies the listen queue depth for a listening socket. The
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",19)
   value of numexpr must be between 1 and the system-enforced maximum. By
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",20)
   default, an OPEN or USE with LISTEN immediately sets the listen queue size
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",21)
   to 1. For vendor-specific information on how to change your system's
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",22)
   maximum queue length, refer to the listen manpage.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",23)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",24)
   /W[AIT][(timeout)]
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",25)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",26)
   where timeout is a numeric expression that specifies how long in seconds a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",27)
   server waits for a connection or data to become available on one of the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",28)
   sockets in the current Socket Device.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",29)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",30)
   **Note**
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",31)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",32)
   If the current Socket Device is $PRINCIPAL and input and output are
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",33)
   different SOCKETs, WRITE /WAIT applies to the input side of the device.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",34)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",35)
   WRITE /PASS([targetpid],[timeout],handle[,handle]...)
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",36)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",37)
   WRITE /PASS allows a YottaDB process to send DETACHed TCP or LOCAL sockets
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",38)
   (that is, sockets in the socket pool) to another YottaDB process. The
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",39)
   receiving process should execute WRITE /ACCEPT to receive the socket.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",40)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",41)
     o If a numeric targetpid is specified, YottaDB matches the value against
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",42)
       the process id ($JOB) of the process receiving the sockets. YottaDB uses
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",43)
       a system service to perform this check on platforms that support it -
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",44)
       currently: Linux and AIX. If the pids do not match, YottaDB issues a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",45)
       PEERPIDMISMATCH error and does not transfer the sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",46)
     o If a numeric timeout is specified, YottaDB sets $TEST to 1 if the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",47)
       transfer completes within the specified time, and otherwise sets $TEST
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",48)
       to 0 and does not transfer any of the sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",49)
     o Each handle specifies a socket in the socket pool.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",50)
     o On a successful transfer, YottaDB eliminates access by the sending
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",51)
       process to the specified and sent sockets. In any case where the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",52)
       transfer does not complete, YottaDB retains all the sockets in the socket
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",53)
       pool of the sender.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",54)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",55)
   WRITE /ACCEPT(.lvar,[sourcepid],[timeout][,[handle]]...)
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",56)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",57)
   WRITE /ACCEPT allows a YottaDB process to receive a DETACHed TCP or LOCAL
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",58)
   sockets (that is, sockets in the socket pool) from another YottaDB process .
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",59)
   The sending process should execute WRITE /PASS to send the socket.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",60)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",61)
     o lvar is an unsubscripted local variable name (lvn) which must be
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",62)
       passed by reference indicated with a period (".") prefix. On
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",63)
       successful completion, the specified unsubscripted lvn contains the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",64)
       handles of the received socket, in the order they were sent, delimited
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",65)
       with a vertical bar ("|"). YottaDB places the sockets in the socket pool,
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",66)
       so the process can ATTACH them to an appropriate SOCKET device for
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",67)
       subsequent use.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",68)
     o If a numeric sourcepid is specified, YottaDB matches the value against
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",69)
       the process id ($JOB) of the process sending the sockets. If the pids
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",70)
       do not match, YottaDB issues a PEERPIDMISMATCH error and does not
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",71)
       transfer the sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",72)
     o If a numeric timeout is specified, YottaDB sets $TEST to 1 if the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",73)
       transfer completes within the specified time, and otherwise sets $TEST
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",74)
       to 0 and does not transfer the sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",75)
     o If any handles are specified, YottaDB assigns the provided handles to the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",76)
       received sockets in the order in which they appear in the WRITE /PASS
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",77)
       of the sending process; empty items in the comma delimited handle list
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",78)
       act to preserve ordering. Where the list provides no handle, the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",79)
       socket retains the handle provided by the sender. In either case, if
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",80)
       there is already a socket with the transfer handle in the socket pool,
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",81)
       YottaDB generates a new handle for the transfer socket. YottaDB ignores
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",82)
       excess handles specified beyond the number of incoming sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",83)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",84)
   Both WRITE /PASS and WRITE /ACCEPT require the current $IO to be a SOCKET
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",85)
   device with a CONNECTed (not LISTENing) and LOCAL domain (not TCP) current
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",86)
   socket. YottaDB issues CONNSOCKREQ or LOCALSOCKREQ errors, respectively, when
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",87)
   those conditions are not met.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",88)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",89)
   SOCKET devices do not support mixing other READs and WRITEs with socket
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",90)
   passing on the same CONNECTED LOCAL socket and produce SOCKPASSDATAMIX
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",91)
   errors. The application may perform multiple WRITE /PASS and WRITE /ACCEPT
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",92)
   operations in either direction on the socket before issuing a CLOSE.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",93)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",94)
   Note that the receiving process must establish desired deviceparameters
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",95)
   (e.g., DELIMITER) for a socket either by ATTACHing it to a SOCKET device
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",96)
   that provides the characteristic for all its sockets, or by a subsequent
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",97)
   USE that specifies the appropriate deviceparameter(s). YottaDB transfers only
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",98)
   the socket connection itself, the socket handle, and buffered socket data
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",99)
   (if any).
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",100)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",101)
   WRITE /TLS(option[,[timeout][,tlsid[,cfg-file-options]])
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",102)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",103)
   SOCKET devices support encrypted connections with TLS using an encryption
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",104)
   plugin. YottaDB ships with a reference implementation of the plugin which
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",105)
   uses OpenSSL; the reference implementation also supports TLS for YottaDB
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",106)
   replication streams. OpenSSL options are controlled by a configuration
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",107)
   file. The WRITE /TLS command activates this feature for connected sockets.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",108)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",109)
     o option is "server", "client", or "renegotiate". "server" or "client"
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",110)
       indicates which TLS role to assume. The server role requires a
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",111)
       certificate specified in the configuration file section with the label
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",112)
       matching tlsid. The client role may require a certificate depending on
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",113)
       the OpenSSL options. If a timeout is specified for options "client" or
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",114)
       "server", YottaDB sets $TEST to 1 if the command successfully completed
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",115)
       or to 0 if it timed out. $DEVICE provides status information in case
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",116)
       of an error. ZSHOW "D" includes "TLS" in the second line of the output
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",117)
       for an encrypted socket.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",118)
     o "renegotiate" applies only to a server socket. It allows applications
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",119)
       to request a TLS renegotiation. Renegotiation requires the suspension
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",120)
       of application communication and the application must read all pending
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",121)
       data before initiating a renegotiation. This means that in the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",122)
       communication protocol used, both parties must be at a known state
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",123)
       when renegotiating keys. For example, in YottaDB replication, one party
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",124)
       sends a renegotiation request and waits for an acknowledgement before
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",125)
       initiating the renegotiation.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",126)
     o tlsid refers to the name of a section in the configuration file
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",127)
       specified by the ydb_crypt_config environment variable. If tlsid is not
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",128)
       specified with the "renegotiate" option and cfg-file-options are
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",129)
       specified, YottaDB creates a virtual section by appending "-RENEGOTIATE"
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",130)
       to the tlsid used to enable TLS on the socket. For the renegotiate
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",131)
       option, if no section named tlsid is present in the configuration
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",132)
       file, YottaDB creates a virtual section with that name for the life of
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",133)
       the process.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",134)
     o cfg-file-options specifies configuration file options. Note
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",135)
       cfg-file-options override those options if they are already specified
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",136)
       in the configuration file except ssl-options and verify-level which
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",137)
       are merged.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",138)
     o Supported cfg-file-options for the "renegotiate" command are
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",139)
       (case-sensitive): verify-depth, verify-level, verify-mode,
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",140)
       session-id-hex, and CAfile. WRITE /TLS ignores all other configuration
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",141)
       file options whether given on the command or in the configuration
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",142)
       file. For more information on the supported configuration options,
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",143)
       refer to the Creating a Configuration File section of the
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",144)
       Administration and Operations Guide.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",145)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",146)
   **Note**
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",147)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",148)
   Note that SOCKET device actions may produce the following errors:
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",149)
   TLSDLLOPEN, TLSINIT, TLSCONVSOCK, TLSHANDSHAKE, TLSCONNINFO, TLSIOERROR,
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",150)
   and TLSRENEGOTIATE.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",151)

^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",152)
   YottaDB buffers WRITEs to TLS enabled sockets until a subsequent USE :FLUSH,
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",153)
   WRITE !, WRITE #, or an internal 400 millisecond timer expires.
^HELP("s","IO_PROCESSING","s","USING_SOCKET_DEVICES","s","WRITE_COMMAND",154)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS")
Using_Terminals
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",1)
   Using Terminals
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",2)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS",3)
   A YottaDB process assigns $PRINCIPAL to the UNIX standard input of the
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",4)
   process (for READ) and standard output (for WRITE). For a local
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",5)
   interactive process, $PRINCIPAL identifies the "terminal" from which the
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",6)
   user is signed on.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",7)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS",8)
   While all terminals support the CTRAP deviceparameter, only $PRINCIPAL
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",9)
   supports CENABLE. While CTRAP allows terminal input to redirect program
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",10)
   flow, CENABLE allows the terminal user to invoke the Direct Mode.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",11)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS",12)
   Directly connected printers often appear to YottaDB as a terminal (although
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",13)
   printers generally do not provide input) regardless of whether the printer
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",14)
   is connected to the computer with a high speed parallel interface, or an
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",15)
   asynchronous terminal controller.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS",16)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS")
Set_Characteristics
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",1)
   Set Characteristics
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",2)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",3)
   YottaDB does not isolate its handling of terminal characteristics from the
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",4)
   operating system environment at large. YottaDB inherits the operating system
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",5)
   terminal characteristics in effect at the time the YottaDB image is invoked.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",6)
   When YottaDB exits, the terminal characteristics known by the operating
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",7)
   system are restored.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",8)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",9)
   However, if the process temporarily leaves the YottaDB environment with a
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",10)
   ZSYSTEM command , YottaDB does not recognize any changes to the terminal
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",11)
   characteristics left by the external environment. This may cause
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",12)
   disparities between the physical behavior of the terminal, and the
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",13)
   perceived behavior by YottaDB.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",14)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",15)
   UNIX enforces standard device security for explicit OPENs of terminals
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",16)
   other than the sign-in terminal ($PRINCIPAL). If you are unable to OPEN a
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",17)
   terminal, contact your system manager.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",18)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",19)
   USE of a terminal causes the device driver to flush the output buffer.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",20)
   This feature of the USE command provides routine control over the timing
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",21)
   of output, which is occasionally required. However, it also means that
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",22)
   redundant USE commands may induce an unnecessary performance penalty.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",23)
   Therefore, YottaDB recommends restricting USE commands to redirecting I/O,
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",24)
   modifying deviceparameters, and initiating specifically required flushes.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",25)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",26)
   The terminal input buffer size is fixed at 1024 on UNIX and a variable
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",27)
   read terminates after 1023 characters.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS",28)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM")
Set_TERM
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",1)
   Set TERM
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",2)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",3)
   The environment variable $TERM must specify a terminfo entry that
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",4)
   accurately matches the terminal (or terminal emulator) settings. Refer to
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",5)
   the terminfo man pages for more information on the terminal settings of
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",6)
   the platform where YottaDB needs to run.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",7)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",8)
   Some terminfo entries may seem to work properly but fail to recognize
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",9)
   function key sequences or position the cursor properly in response to
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",10)
   escape sequences from YottaDB. YottaDB itself does not have any knowledge of
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",11)
   specific terminal control characteristics. Therefore, it is important to
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",12)
   specify the right terminfo entry to let YottaDB communicate correctly with
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",13)
   the terminal. You may need to add new terminfo entries depending on their
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",14)
   specific platform and implementation. The terminal (emulator) vendor may
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",15)
   also be able to help.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",16)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",17)
   YottaDB uses the following terminfo capabilities. The full variable name is
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",18)
   followed by the capname in parenthesis:
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",19)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",20)
   auto_right_margin(am), clr_eos(ed), clr_eol(el), columns(cols), cursor_address(cup), cursor_down(cud1),cursor_left(cub1), cursor_right(cuf1), cursor_up(cuu1), eat_newline_glitch(xenl), key_backspace(kbs), key_dc(kdch1),key_down(kcud1), key_left(kcub1), key_right(kcuf1), key_up(kcuu1), key_insert(kich1), keypad_local(rmkx),keypad_xmit(smkx), lines(lines).
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",21)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",22)
   YottaDB sends keypad_xmit before terminal reads for direct mode and READs
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",23)
   (other than READ *) if EDITING is enabled. YottaDB sends keypad_local after
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",24)
   these terminal reads.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SET_CHARACTERISTICS","s","SET_TERM",25)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY")
Summary
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",1)
   Summary
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",2)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",3)
   The following tables provide a brief summary of deviceparameters for
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",4)
   terminals, grouped into related areas.
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",5)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",6)
   +----------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",7)
   |                  Error Processing Deviceparameters                   |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",8)
   |----------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",9)
   | DEVICEPARAMETER | COMMAND |                 COMMENT                  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",10)
   |-----------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",11)
   | EXCEPTION=expr  | O/U/C   | Controls device-specific error handling. |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",12)
   +----------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",13)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",14)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",15)
   |                Interaction Management Deviceparameters                 |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",16)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",17)
   |    DEVICEPARAMETER    | COMMAND |               COMMENT                |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",18)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",19)
   |                       |         | Controls whether <CTRL-C> on         |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",20)
   | [NO]CENABLE           | U       | $PRINCIPAL causes YottaDB to go to   |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",21)
   |                       |         | direct mode.                         |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",22)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",23)
   | CTRAP=expr            | U       | Controls vectoring on trapped <CTRL> |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",24)
   |                       |         | characters.                          |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",25)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",26)
   | [NO]EDITING           | U       | Controls the editing mode for        |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",27)
   |                       |         | $PRINCIPAL.                          |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",28)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",29)
   |                       |         | Control whether an "Erase" character |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",30)
   | [NO]EMPTERM           | U       | on an empty input line should        |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",31)
   |                       |         | terminate a READ or READ # command.  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",32)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",33)
   | [NO]ESCAPE            | U       | Controls escape sequence processing. |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",34)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",35)
   | [NO]INSERT            | U       | Controls insert or overstrike on     |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",36)
   |                       |         | input.                               |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",37)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",38)
   |                       |         | Controls interpretation by the       |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",39)
   | [NO]PASTHRU           | U       | operating system of special control  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",40)
   |                       |         | characters (for example <CTRL-B>).   |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",41)
   |-----------------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",42)
   | [NO]TERMINATOR[=expr] | U       | Controls characters that end a READ  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",43)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",44)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",45)
   +------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",46)
   |                  Flow Control Deviceparameters                   |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",47)
   |------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",48)
   | DEVICEPARAMETER | COMMAND |               COMMENT                |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",49)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",50)
   | [NO]CONVERT     | U       | Controls forcing input to uppercase. |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",51)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",52)
   | [NO]FILTER      | U       | Controls some $X, $Y maintenance.    |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",53)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",54)
   | FLUSH           | U       | Clears the typeahead buffer.         |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",55)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",56)
   | [NO]HOSTSYNC    | U       | Controls host's use of XON/XOFF.     |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",57)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",58)
   | [NO]READSYNC    | U       | Controls wrapping READs in XON/XOFF. |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",59)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",60)
   | [NO]TTSYNC      | U       | Controls input response to XON/XOFF. |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",61)
   |-----------------+---------+--------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",62)
   | [NO]TYPEAHEAD   | U       | Controls unsolicited input handling. |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",63)
   +------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",64)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",65)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",66)
   |                   Screen Management Deviceparameters                   |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",67)
   |------------------------------------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",68)
   |  DEVICEPARAMETER  | COMMAND |                 COMMENT                  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",69)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",70)
   | CLEARSCREEN       | U       | Clears from cursor to end-of-screen.     |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",71)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",72)
   | DOWNSCROLL        | U       | Moves display down one line.             |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",73)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",74)
   | [NO]ECHO          | U       | Controls the host echo of input.         |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",75)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",76)
   | ERASELINE         | U       | Clears from cursor to end-of-line.       |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",77)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",78)
   | [Z]LENGTH=intexpr | U       | Controls maximum number of lines on a    |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",79)
   |                   |         | page ($Y).                               |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",80)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",81)
   | UPSCROLL          | U       | Moves display up one line.               |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",82)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",83)
   | [Z]WIDTH=intexpr  | U       | Controls the maximum width of an output  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",84)
   |                   |         | line ($X).                               |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",85)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",86)
   | [Z][NO]WRAP       | U       | Controls handling of output lines longer |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",87)
   |                   |         | than the maximum width.                  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",88)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",89)
   | X=intexpr         | U       | Positions the cursor to column intexpr.  |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",90)
   |-------------------+---------+------------------------------------------|
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",91)
   | Y=intexpr         | U       | Positions the cursor to row intexpr.     |
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",92)
   +------------------------------------------------------------------------+
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",93)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",94)
   O: Applies to the OPEN command
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",95)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",96)
   U: Applies to the USE command
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",97)

^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",98)
   C: Applies to the CLOSE command
^HELP("s","IO_PROCESSING","s","USING_TERMINALS","s","SUMMARY",99)

^HELP("s","ISV")
ISV
^HELP("s","ISV",1)
   ISV
^HELP("s","ISV",2)

^HELP("s","ISV",3)
   This chapter describes the M Intrinsic Special Variables implemented in
^HELP("s","ISV",4)
   YottaDB. All entries starting with the letter Z are YottaDB additions to the
^HELP("s","ISV",5)
   ANSI standard Intrinsic Special Variables. None of the Intrinsic Special
^HELP("s","ISV",6)
   Variables are case sensitive.
^HELP("s","ISV",7)

^HELP("s","ISV",8)
   M Intrinsic Special Variables start with a single dollar sign ($). YottaDB
^HELP("s","ISV",9)
   provides such variables for program examination. In some cases, the
^HELP("s","ISV",10)
   Intrinsic Special Variables may be set to modify the corresponding part of
^HELP("s","ISV",11)
   the environment.
^HELP("s","ISV",12)

^HELP("s","ISV",13)
   **Note**
^HELP("s","ISV",14)

^HELP("s","ISV",15)
   None of the Intrinsic Special Variables can be KILLed. SETting or NEWing
^HELP("s","ISV",16)
   is generally not allowed, but is specifically noted in the descriptions of
^HELP("s","ISV",17)
   those that do.
^HELP("s","ISV",18)

^HELP("s","ISV","s","$DEVICE")
$Device
^HELP("s","ISV","s","$DEVICE",1)
   $Device
^HELP("s","ISV","s","$DEVICE",2)

^HELP("s","ISV","s","$DEVICE",3)
   $D[EVICE] reflects the status of the current device. If the status of the
^HELP("s","ISV","s","$DEVICE",4)
   device does not reflect any error-condition, the value of $DEVICE, when
^HELP("s","ISV","s","$DEVICE",5)
   interpreted as a truth-value is 0 (FALSE). If the status of the device
^HELP("s","ISV","s","$DEVICE",6)
   reflect any error-condition, the value of $DEVICE, when interpreted as a
^HELP("s","ISV","s","$DEVICE",7)
   truth-value is 1 (TRUE).
^HELP("s","ISV","s","$DEVICE",8)

^HELP("s","ISV","s","$DEVICE",9)
   **Note**
^HELP("s","ISV","s","$DEVICE",10)

^HELP("s","ISV","s","$DEVICE",11)
   The initial value of $DEVICE is implementation dependant. However, if the
^HELP("s","ISV","s","$DEVICE",12)
   initial value of $IO is the empty string, then the initial value of
^HELP("s","ISV","s","$DEVICE",13)
   $DEVICE is also empty string.
^HELP("s","ISV","s","$DEVICE",14)

^HELP("s","ISV","s","$DEVICE",15)
   $DEVICE gives status code and meaning, in one access:
^HELP("s","ISV","s","$DEVICE",16)

^HELP("s","ISV","s","$DEVICE",17)
   Example:
^HELP("s","ISV","s","$DEVICE",18)

^HELP("s","ISV","s","$DEVICE",19)
   1,Connection reset by peer
^HELP("s","ISV","s","$DEVICE",20)

^HELP("s","ISV","s","$DEVICE",21)
   The above message is displayed on the server side when the socket device
^HELP("s","ISV","s","$DEVICE",22)
   is closed on the client side.
^HELP("s","ISV","s","$DEVICE",23)

^HELP("s","ISV","s","$ECODE")
$ECode
^HELP("s","ISV","s","$ECODE",1)
   $ECode
^HELP("s","ISV","s","$ECODE",2)

^HELP("s","ISV","s","$ECODE",3)
   $EC[ODE] contains a list of error codes for "active" errors -the error
^HELP("s","ISV","s","$ECODE",4)
   conditions which are not yet resolved. If there are no active errors,
^HELP("s","ISV","s","$ECODE",5)
   $ECODE contains the empty string. Whenever an error occurs, a code for
^HELP("s","ISV","s","$ECODE",6)
   that error is appended to the value of $ECODE in such a way that the value
^HELP("s","ISV","s","$ECODE",7)
   of $ECODE always starts and ends with a comma.
^HELP("s","ISV","s","$ECODE",8)

^HELP("s","ISV","s","$ECODE",9)
   The value of $ECODE can be SET, and when it is set to a non-NULL value,
^HELP("s","ISV","s","$ECODE",10)
   error processing starts.
^HELP("s","ISV","s","$ECODE",11)

^HELP("s","ISV","s","$ECODE",12)
   List of codes for $ECODE start with comma seperated by commas. A code
^HELP("s","ISV","s","$ECODE",13)
   starts with "M", "U", or "Z", with rest numeric. "M" codes are assigned by
^HELP("s","ISV","s","$ECODE",14)
   MDC (MUMPS Development Committee), "U" by application (programmers), and
^HELP("s","ISV","s","$ECODE",15)
   "Z" codes by MUMPS implementors (in this case YottaDB).
^HELP("s","ISV","s","$ECODE",16)

^HELP("s","ISV","s","$ECODE",17)
   An error always has a YottaDB specified code and many errors also have an
^HELP("s","ISV","s","$ECODE",18)
   ANSI Standard code. The complete list of standardized error codes can be
^HELP("s","ISV","s","$ECODE",19)
   referenced from YottaDB Message and Recovery Procedures Reference Manual
^HELP("s","ISV","s","$ECODE",20)
   version 4.3 and onwards.
^HELP("s","ISV","s","$ECODE",21)

^HELP("s","ISV","s","$ECODE",22)
   IF $ECODE[",M61," WRITE "Undefined local variable"
^HELP("s","ISV","s","$ECODE",23)

^HELP("s","ISV","s","$ECODE",24)
   **Note**
^HELP("s","ISV","s","$ECODE",25)

^HELP("s","ISV","s","$ECODE",26)
   The leftmost character of the value of $ECODE is always a comma. This
^HELP("s","ISV","s","$ECODE",27)
   means that every error code that is stored in $ECODE is surrounded by
^HELP("s","ISV","s","$ECODE",28)
   commas. If $ECODE was to contains the error code without the commas (that
^HELP("s","ISV","s","$ECODE",29)
   is, "M61"), the variable would check for subset "M6" as well. Thus, it is
^HELP("s","ISV","s","$ECODE",30)
   recommended that you include the commas in the value to check. For
^HELP("s","ISV","s","$ECODE",31)
   example; check whether $ECODE contains ",M61,".
^HELP("s","ISV","s","$ECODE",32)

^HELP("s","ISV","s","$ECODE",33)
   $ECODE can be SET but not NEW'd. When $ECODE is set to the empty string ("
^HELP("s","ISV","s","$ECODE",34)
   "), error handling becomes "inactive" and therefore QUIT does not trigger
^HELP("s","ISV","s","$ECODE",35)
   additional error handling.
^HELP("s","ISV","s","$ECODE",36)

^HELP("s","ISV","s","$ECODE",37)
   When $ECODE is not set to the empty string, M error handling is active,
^HELP("s","ISV","s","$ECODE",38)
   which also affects behavior in some aspects of $STACK.
^HELP("s","ISV","s","$ECODE",39)

^HELP("s","ISV","s","$ESTACK")
$EStack
^HELP("s","ISV","s","$ESTACK",1)
   $EStack
^HELP("s","ISV","s","$ESTACK",2)

^HELP("s","ISV","s","$ESTACK",3)
   $ES[TACK] contains an integer count of the number of M virtual machine
^HELP("s","ISV","s","$ESTACK",4)
   stack levels that have been activated and not removed since the last time
^HELP("s","ISV","s","$ESTACK",5)
   $ESTACK was NEW'd.
^HELP("s","ISV","s","$ESTACK",6)

^HELP("s","ISV","s","$ESTACK",7)
   A NEW $ESTACK saves the value of current $ESTACK and then sets its value
^HELP("s","ISV","s","$ESTACK",8)
   to zero (0). If $ESTACK has not been NEW'd in the current execution path,
^HELP("s","ISV","s","$ESTACK",9)
   $ESTACK=$STACK.
^HELP("s","ISV","s","$ESTACK",10)

^HELP("s","ISV","s","$ESTACK",11)
   SET $ETRAP="QUIT:$ESTACK GOTO LABEL^ROUTINE"
^HELP("s","ISV","s","$ESTACK",12)

^HELP("s","ISV","s","$ESTACK",13)
   $ESTACK maybe used as a flag to indicate error traps invoked in particular
^HELP("s","ISV","s","$ESTACK",14)
   stack levels needed to perform some different action(s). $ESTACK can be
^HELP("s","ISV","s","$ESTACK",15)
   most useful in setting up a layered error trapping mechanism.
^HELP("s","ISV","s","$ESTACK",16)

^HELP("s","ISV","s","$ESTACK",17)
   **Note**
^HELP("s","ISV","s","$ESTACK",18)

^HELP("s","ISV","s","$ESTACK",19)
   YottaDB does not permit $ESTACK to be SET, however $ESTACK can be NEWed.
^HELP("s","ISV","s","$ESTACK",20)

^HELP("s","ISV","s","$ETRAP")
$ETrap
^HELP("s","ISV","s","$ETRAP",1)
   $ETrap
^HELP("s","ISV","s","$ETRAP",2)

^HELP("s","ISV","s","$ETRAP",3)
   $ET[RAP] contains a string value that YottaDB invokes when an error occurs
^HELP("s","ISV","s","$ETRAP",4)
   during routine execution. When a process is initiated, YottaDB assigns $ETRAP
^HELP("s","ISV","s","$ETRAP",5)
   the value of the ydb_etrap environment variable, if ydb_etrap is defined,
^HELP("s","ISV","s","$ETRAP",6)
   and otherwise the empty string, in which case $ZTRAP="B" controls initial
^HELP("s","ISV","s","$ETRAP",7)
   error handling.
^HELP("s","ISV","s","$ETRAP",8)

^HELP("s","ISV","s","$ETRAP",9)
   The value of this variable is the M[UMPS] code that YottaDB executes when it
^HELP("s","ISV","s","$ETRAP",10)
   encounters an error.
^HELP("s","ISV","s","$ETRAP",11)

^HELP("s","ISV","s","$ETRAP",12)
   SET $ETRAP="QUIT:$ESTACK GOTO LABEL^ROUTINE"
^HELP("s","ISV","s","$ETRAP",13)

^HELP("s","ISV","s","$ETRAP",14)
   The value of $ETRAP is changed with the SET command. Changing the value of
^HELP("s","ISV","s","$ETRAP",15)
   $ETRAP with the SET command initiates a new trap; it does not save the old
^HELP("s","ISV","s","$ETRAP",16)
   trap.
^HELP("s","ISV","s","$ETRAP",17)

^HELP("s","ISV","s","$ETRAP",18)
   $ETRAP may also appear as an argument to an inclusive NEW command. NEW
^HELP("s","ISV","s","$ETRAP",19)
   $ETRAP causes YottaDB to stack the active condition handler's ($ETRAP) old
^HELP("s","ISV","s","$ETRAP",20)
   value. NEW leaves the $ETRAP unchanged regardless of the previously active
^HELP("s","ISV","s","$ETRAP",21)
   condition handler. NEW $ETRAP command puts $ETRAP in control for error
^HELP("s","ISV","s","$ETRAP",22)
   handling.
^HELP("s","ISV","s","$ETRAP",23)

^HELP("s","ISV","s","$ETRAP",24)
   For more examples of the use of special variable $ETRAP, see the function
^HELP("s","ISV","s","$ETRAP",25)
   $STACK().
^HELP("s","ISV","s","$ETRAP",26)

^HELP("s","ISV","s","$HOROLOG")
$Horolog
^HELP("s","ISV","s","$HOROLOG",1)
   $Horolog
^HELP("s","ISV","s","$HOROLOG",2)

^HELP("s","ISV","s","$HOROLOG",3)
   $H[OROLOG] contains a string value specifying the number of days since "31
^HELP("s","ISV","s","$HOROLOG",4)
   December, 1840," and the number of seconds since midnight of date in the
^HELP("s","ISV","s","$HOROLOG",5)
   time zone of the process, separated by a comma (,). At midnight, the piece
^HELP("s","ISV","s","$HOROLOG",6)
   of the string following the comma resets to zero (0), and the piece
^HELP("s","ISV","s","$HOROLOG",7)
   preceding the comma increments by one (1). YottaDB does not permit the SET
^HELP("s","ISV","s","$HOROLOG",8)
   command to modify $HOROLOG. A process takes the system time from the
^HELP("s","ISV","s","$HOROLOG",9)
   system clock, but can adjust the time zone by appropriately setting the TZ
^HELP("s","ISV","s","$HOROLOG",10)
   environment variable before invoking YottaDB.
^HELP("s","ISV","s","$HOROLOG",11)

^HELP("s","ISV","s","$HOROLOG",12)
   Example:
^HELP("s","ISV","s","$HOROLOG",13)

^HELP("s","ISV","s","$HOROLOG",14)
   YDB>Write $HOROLOG
^HELP("s","ISV","s","$HOROLOG",15)

^HELP("s","ISV","s","$HOROLOG",16)
   Produces the result 58883,55555 at 3:25:55 pm on 20 March, 2002.
^HELP("s","ISV","s","$HOROLOG",17)

^HELP("s","ISV","s","$HOROLOG",18)
   For further information on formatting $HOROLOG for external use, refer to
^HELP("s","ISV","s","$HOROLOG",19)
   "$ZDate()".
^HELP("s","ISV","s","$HOROLOG",20)

^HELP("s","ISV","s","$IO")
$IO
^HELP("s","ISV","s","$IO",1)
   $IO
^HELP("s","ISV","s","$IO",2)

^HELP("s","ISV","s","$IO",3)
   $I[O] contains the name of the current device specified by the last USE
^HELP("s","ISV","s","$IO",4)
   command. The M standard does not permit the SET command to modify $IO. USE
^HELP("s","ISV","s","$IO",5)
   0 produces the same $IO as USE $P[RINCIPAL], but $P is the preferred
^HELP("s","ISV","s","$IO",6)
   construct.
^HELP("s","ISV","s","$IO",7)

^HELP("s","ISV","s","$JOB")
$Job
^HELP("s","ISV","s","$JOB",1)
   $Job
^HELP("s","ISV","s","$JOB",2)

^HELP("s","ISV","s","$JOB",3)
   $J[OB] the current process identifier.
^HELP("s","ISV","s","$JOB",4)

^HELP("s","ISV","s","$JOB",5)
   YottaDB uses the decimal representation of the current process identifier
^HELP("s","ISV","s","$JOB",6)
   (PID) for the value of $JOB. $JOB is guaranteed to be unique for every
^HELP("s","ISV","s","$JOB",7)
   concurrently operating process on a system. However, operating systems
^HELP("s","ISV","s","$JOB",8)
   reuse PIDs over time. YottaDB does not permit the SET command to modify $JOB.
^HELP("s","ISV","s","$JOB",9)

^HELP("s","ISV","s","$JOB",10)
   Example:
^HELP("s","ISV","s","$JOB",11)

^HELP("s","ISV","s","$JOB",12)
   LOOP0 for  set itm=$order(^tmp($J,itm)) quit:itm=""  do LOOP1
^HELP("s","ISV","s","$JOB",13)

^HELP("s","ISV","s","$JOB",14)
   This uses $J as the first subscript in a temporary global to insure that
^HELP("s","ISV","s","$JOB",15)
   every process uses separate data space in the global ^tmp.
^HELP("s","ISV","s","$JOB",16)

^HELP("s","ISV","s","$KEY")
$Key
^HELP("s","ISV","s","$KEY",1)
   $Key
^HELP("s","ISV","s","$KEY",2)

^HELP("s","ISV","s","$KEY",3)
   $K[EY] contains the string that terminated the most recent READ command
^HELP("s","ISV","s","$KEY",4)
   from the current device (including any introducing and terminating
^HELP("s","ISV","s","$KEY",5)
   characters). If no READ command was issued to the current device or if no
^HELP("s","ISV","s","$KEY",6)
   terminator is used, the value of $KEY is an empty string. However, when
^HELP("s","ISV","s","$KEY",7)
   input is terminated by typing a function key, the value of $KEY is equal
^HELP("s","ISV","s","$KEY",8)
   to the string of characters that is transmitted by that function key.
^HELP("s","ISV","s","$KEY",9)

^HELP("s","ISV","s","$KEY",10)
   The effect of a READ *glvn on $KEY is unspecified.
^HELP("s","ISV","s","$KEY",11)

^HELP("s","ISV","s","$KEY",12)
   For terminals, $KEY and $ZB both have the terminator.
^HELP("s","ISV","s","$KEY",13)

^HELP("s","ISV","s","$KEY",14)
   For SOCKET:
^HELP("s","ISV","s","$KEY",15)

^HELP("s","ISV","s","$KEY",16)
   $KEY contains the socket handle and the state information of the current
^HELP("s","ISV","s","$KEY",17)
   SOCKET device after certain I/O commands.
^HELP("s","ISV","s","$KEY",18)

^HELP("s","ISV","s","$KEY",19)
   After a successful OPEN or USE with the LISTEN deviceparameter, $KEY
^HELP("s","ISV","s","$KEY",20)
   contains for TCP sockets:
^HELP("s","ISV","s","$KEY",21)

^HELP("s","ISV","s","$KEY",22)
   "LISTENING|<socket_handle>|<portnumber>"
^HELP("s","ISV","s","$KEY",23)

^HELP("s","ISV","s","$KEY",24)
   and for LOCAL sockets:
^HELP("s","ISV","s","$KEY",25)

^HELP("s","ISV","s","$KEY",26)
   "LISTENING|<socket_handle>|<address>"
^HELP("s","ISV","s","$KEY",27)

^HELP("s","ISV","s","$KEY",28)
   After a successful OPEN or USE with the CONNECT device parameter or when
^HELP("s","ISV","s","$KEY",29)
   YottaDB was started with a socket as the $PRINCIPAL device, $KEY contains:
^HELP("s","ISV","s","$KEY",30)

^HELP("s","ISV","s","$KEY",31)
   "ESTABLISHED|<socket handle>|<address>"
^HELP("s","ISV","s","$KEY",32)

^HELP("s","ISV","s","$KEY",33)
   When WRITE /WAIT selects an incoming connection, $KEY contains:
^HELP("s","ISV","s","$KEY",34)

^HELP("s","ISV","s","$KEY",35)
   "CONNECT|<socket_handle>|<address>"
^HELP("s","ISV","s","$KEY",36)

^HELP("s","ISV","s","$KEY",37)
   When WRITE /WAIT selects a socket with data available for reading, $KEY
^HELP("s","ISV","s","$KEY",38)
   contains:
^HELP("s","ISV","s","$KEY",39)

^HELP("s","ISV","s","$KEY",40)
   "READ|<socket_handle>|<address>"
^HELP("s","ISV","s","$KEY",41)

^HELP("s","ISV","s","$KEY",42)
   For TCP sockets, <address> is the numeric IP address for the remote end of
^HELP("s","ISV","s","$KEY",43)
   the connection. For LOCAL sockets it is the path to the socket.
^HELP("s","ISV","s","$KEY",44)

^HELP("s","ISV","s","$KEY",45)
   For TCP LISTENING sockets, <portnumber> is the local port on which
^HELP("s","ISV","s","$KEY",46)
   socket_handle is listening for incoming connections. For LOCAL LISTENING
^HELP("s","ISV","s","$KEY",47)
   sockets, it is the path of the socket.
^HELP("s","ISV","s","$KEY",48)

^HELP("s","ISV","s","$KEY",49)
   If the WRITE /WAIT was timed, $KEY returns an empty value if the wait
^HELP("s","ISV","s","$KEY",50)
   timed out or there was no established connection. $KEY only has the
^HELP("s","ISV","s","$KEY",51)
   selected handle, if any, immediately after a WRITE /WAIT. $KEY is also
^HELP("s","ISV","s","$KEY",52)
   used by other socket I/O commands such as READ which sets it to the
^HELP("s","ISV","s","$KEY",53)
   delimiter or malformed UTF-8 character, if any, which terminated the read.
^HELP("s","ISV","s","$KEY",54)

^HELP("s","ISV","s","$PRINCIPAL")
$Principal
^HELP("s","ISV","s","$PRINCIPAL",1)
   $Principal
^HELP("s","ISV","s","$PRINCIPAL",2)

^HELP("s","ISV","s","$PRINCIPAL",3)
   $P[RINCIPAL] contains the absolute pathname of the principal (initial $IO)
^HELP("s","ISV","s","$PRINCIPAL",4)
   device. $PRINCIPAL is an MDC Type A enhancement to standard M.
^HELP("s","ISV","s","$PRINCIPAL",5)

^HELP("s","ISV","s","$PRINCIPAL",6)
   Input and output for a process may come from separate devices, namely, the
^HELP("s","ISV","s","$PRINCIPAL",7)
   standard input and output. However, the M I/O model allows only one device
^HELP("s","ISV","s","$PRINCIPAL",8)
   to be USEd (or active) at a time. When an image starts, YottaDB implicitly
^HELP("s","ISV","s","$PRINCIPAL",9)
   OPENs the standard input and standard output device(s) and assigns the
^HELP("s","ISV","s","$PRINCIPAL",10)
   device(s) to $PRINCIPAL. For USE deviceparameters, it is the standard
^HELP("s","ISV","s","$PRINCIPAL",11)
   input that determines the device type.
^HELP("s","ISV","s","$PRINCIPAL",12)

^HELP("s","ISV","s","$PRINCIPAL",13)
   For an image invoked interactively, $PRINCIPAL is the user's terminal. For
^HELP("s","ISV","s","$PRINCIPAL",14)
   an image invoked from a terminal by means of a shell script, $PRINCIPAL is
^HELP("s","ISV","s","$PRINCIPAL",15)
   the shell script's standard input (usually the terminal) and standard
^HELP("s","ISV","s","$PRINCIPAL",16)
   output (also usually the terminal) for output, unless the shell redirects
^HELP("s","ISV","s","$PRINCIPAL",17)
   the input or output.
^HELP("s","ISV","s","$PRINCIPAL",18)

^HELP("s","ISV","s","$PRINCIPAL",19)
   YottaDB provides a mechanism for the user to create a name for $PRINCIPAL in
^HELP("s","ISV","s","$PRINCIPAL",20)
   the shell before invoking YottaDB. The environment variable ydb_principal, if
^HELP("s","ISV","s","$PRINCIPAL",21)
   defined becomes a synonym for the actual device and the value for
^HELP("s","ISV","s","$PRINCIPAL",22)
   $PRINCIPAL. $IO holds the same value as $PRINCIPAL. $ZIO in this case,
^HELP("s","ISV","s","$PRINCIPAL",23)
   holds the fully expanded name of the actual device.
^HELP("s","ISV","s","$PRINCIPAL",24)

^HELP("s","ISV","s","$PRINCIPAL",25)
   YottaDB ignores a CLOSE specifying the principal device. YottaDB does not permit
^HELP("s","ISV","s","$PRINCIPAL",26)
   the SET command to modify $PRINCIPAL.
^HELP("s","ISV","s","$PRINCIPAL",27)

^HELP("s","ISV","s","$PRINCIPAL",28)
   YottaDB fulfills READ to $PRINCIPAL when it is an empty socket device (that
^HELP("s","ISV","s","$PRINCIPAL",29)
   is, one with all sockets detached) with an empty string, and discards
^HELP("s","ISV","s","$PRINCIPAL",30)
   WRITE output to such a device.
^HELP("s","ISV","s","$PRINCIPAL",31)

^HELP("s","ISV","s","$PRINCIPAL",32)
   YottaDB opens /dev/null as a placeholder for a socket which used to be
^HELP("s","ISV","s","$PRINCIPAL",33)
   associated with $PRINCIPAL via stdin when it is closed.
^HELP("s","ISV","s","$PRINCIPAL",34)

^HELP("s","ISV","s","$PRINCIPAL",35)
   YottaDB creates a SOCKET device for $PRINCIPAL when standard input is a LOCAL
^HELP("s","ISV","s","$PRINCIPAL",36)
   domain socket and sets the default DELIMITER to "$C(10)" for sockets in
^HELP("s","ISV","s","$PRINCIPAL",37)
   the device.
^HELP("s","ISV","s","$PRINCIPAL",38)

^HELP("s","ISV","s","$PRINCIPAL",39)
   When $PRINCIPAL identifies a device that supports REWIND, the REWIND or
^HELP("s","ISV","s","$PRINCIPAL",40)
   INREWIND device parameters perform a REWIND of the input and OUTREWIND
^HELP("s","ISV","s","$PRINCIPAL",41)
   performs a REWIND of the output.
^HELP("s","ISV","s","$PRINCIPAL",42)

^HELP("s","ISV","s","$PRINCIPAL",43)
   When $PRINCIPAL has different input/output devices, the USE command
^HELP("s","ISV","s","$PRINCIPAL",44)
   recognizes intrinsic special variables $ZPIN or $ZPOUT and applies
^HELP("s","ISV","s","$PRINCIPAL",45)
   appropriate deviceparameters to the input or output side of $PRINCIPAL,
^HELP("s","ISV","s","$PRINCIPAL",46)
   respectively. A USE with $ZPIN or $ZPOUT sets $IO to $PRINCIPAL for READs
^HELP("s","ISV","s","$PRINCIPAL",47)
   and WRITEs from the input and output side of $PRINCIPAL. For more
^HELP("s","ISV","s","$PRINCIPAL",48)
   information refer to "$ZPIN" or "$ZPOUT" .
^HELP("s","ISV","s","$PRINCIPAL",49)

^HELP("s","ISV","s","$QUIT")
$Quit
^HELP("s","ISV","s","$QUIT",1)
   $Quit
^HELP("s","ISV","s","$QUIT",2)

^HELP("s","ISV","s","$QUIT",3)
   $Q[UIT] indicates whether the current block of code was called as an
^HELP("s","ISV","s","$QUIT",4)
   extrinsic function or as a subroutine.
^HELP("s","ISV","s","$QUIT",5)

^HELP("s","ISV","s","$QUIT",6)
   If $Q[UIT] contains 1 (when the current process-stack frame is invoked by
^HELP("s","ISV","s","$QUIT",7)
   an extrinsic function), the QUIT would therefore require an argument.
^HELP("s","ISV","s","$QUIT",8)

^HELP("s","ISV","s","$QUIT",9)
   **Note**
^HELP("s","ISV","s","$QUIT",10)

^HELP("s","ISV","s","$QUIT",11)
   When a process is initiated, but before any commands are processed, the
^HELP("s","ISV","s","$QUIT",12)
   value of $Q[UIT] is zero (0).
^HELP("s","ISV","s","$QUIT",13)

^HELP("s","ISV","s","$QUIT",14)
   This special variable is mainly used in error-trapping conditions. Its
^HELP("s","ISV","s","$QUIT",15)
   value tells whether the current DO level was reached by means of a
^HELP("s","ISV","s","$QUIT",16)
   subroutine call (DO xxx) or by a function call (SET variable=$$xxx).
^HELP("s","ISV","s","$QUIT",17)

^HELP("s","ISV","s","$QUIT",18)
   A typical way of exiting from an error trap is:
^HELP("s","ISV","s","$QUIT",19)

^HELP("s","ISV","s","$QUIT",20)
   QUIT:$QUIT "" QUIT
^HELP("s","ISV","s","$QUIT",21)

^HELP("s","ISV","s","$QUIT",22)
   **Note**
^HELP("s","ISV","s","$QUIT",23)

^HELP("s","ISV","s","$QUIT",24)
   YottaDB does not permit $QUIT to be SET or NEWed.
^HELP("s","ISV","s","$QUIT",25)

^HELP("s","ISV","s","$REFERENCE")
$Reference
^HELP("s","ISV","s","$REFERENCE",1)
   $Reference
^HELP("s","ISV","s","$REFERENCE",2)

^HELP("s","ISV","s","$REFERENCE",3)
   $R[EFERENCE] contains the last global reference. Until the first global
^HELP("s","ISV","s","$REFERENCE",4)
   reference is made by an M program or after a global reference with an
^HELP("s","ISV","s","$REFERENCE",5)
   invalid key, $REFERENCE contains the empty string (""). This way it is
^HELP("s","ISV","s","$REFERENCE",6)
   useful in determining if the usage of a naked reference is valid.
^HELP("s","ISV","s","$REFERENCE",7)

^HELP("s","ISV","s","$REFERENCE",8)
   A typical way of using this is:
^HELP("s","ISV","s","$REFERENCE",9)

^HELP("s","ISV","s","$REFERENCE",10)
   IF $REFERENCE="" QUIT "<undefined>"
^HELP("s","ISV","s","$REFERENCE",11)

^HELP("s","ISV","s","$REFERENCE",12)
   **Note**
^HELP("s","ISV","s","$REFERENCE",13)

^HELP("s","ISV","s","$REFERENCE",14)
   $R[EFERENCE] being a read-only variable cannot be SET or NEW'd.
^HELP("s","ISV","s","$REFERENCE",15)

^HELP("s","ISV","s","$STACK")
$STack
^HELP("s","ISV","s","$STACK",1)
   $STack
^HELP("s","ISV","s","$STACK",2)

^HELP("s","ISV","s","$STACK",3)
   $ST[ACK] contains an integer value of zero (0) or greater indicating the
^HELP("s","ISV","s","$STACK",4)
   current level of M execution stack depth.
^HELP("s","ISV","s","$STACK",5)

^HELP("s","ISV","s","$STACK",6)
   When a process is initiated but before any command is executed, the value
^HELP("s","ISV","s","$STACK",7)
   of $STACK is zero (0).
^HELP("s","ISV","s","$STACK",8)

^HELP("s","ISV","s","$STACK",9)
   **Note**
^HELP("s","ISV","s","$STACK",10)

^HELP("s","ISV","s","$STACK",11)
   The difference between $STACK and $ESTACK is that $ESTACK may appear as an
^HELP("s","ISV","s","$STACK",12)
   argument of the NEW command. NEWing $ESTACK resets its value to zero (0),
^HELP("s","ISV","s","$STACK",13)
   and can be useful to set up a layered error trapping mechanism.
^HELP("s","ISV","s","$STACK",14)

^HELP("s","ISV","s","$STACK",15)
   The value of $STACK is "absolute" since the start of a YottaDB. process,
^HELP("s","ISV","s","$STACK",16)
   whereas the value of $ESTACK is "relative" to the most recent "anchoring
^HELP("s","ISV","s","$STACK",17)
   point".
^HELP("s","ISV","s","$STACK",18)

^HELP("s","ISV","s","$STORAGE")
$Storage
^HELP("s","ISV","s","$STORAGE",1)
   $Storage
^HELP("s","ISV","s","$STORAGE",2)

^HELP("s","ISV","s","$STORAGE",3)
   $S[TORAGE] contains an integer value specifying the number of free bytes
^HELP("s","ISV","s","$STORAGE",4)
   of address space remaining between the memory currently under management
^HELP("s","ISV","s","$STORAGE",5)
   by the process and the theoretical maximum available to the process.
^HELP("s","ISV","s","$STORAGE",6)

^HELP("s","ISV","s","$STORAGE",7)
   YottaDB uses memory for code (instructions) and data. If the amount of
^HELP("s","ISV","s","$STORAGE",8)
   virtual memory available to the process exceeds 2,147,483,647 bytes, it is
^HELP("s","ISV","s","$STORAGE",9)
   reported as 2,147,483,647 bytes.
^HELP("s","ISV","s","$STORAGE",10)

^HELP("s","ISV","s","$STORAGE",11)
   Instruction space starts out with the original executable image. However,
^HELP("s","ISV","s","$STORAGE",12)
   YottaDB may expand instruction space by ZLINKing additional routines.
^HELP("s","ISV","s","$STORAGE",13)

^HELP("s","ISV","s","$STORAGE",14)
   Data space starts out with stack space that never expands, and pool space
^HELP("s","ISV","s","$STORAGE",15)
   which may expand. Operations such as opening a database or creating a
^HELP("s","ISV","s","$STORAGE",16)
   local variable may cause an expansion in pool space. YottaDB expands pool
^HELP("s","ISV","s","$STORAGE",17)
   space in fairly large increments. Therefore, SETs of local variables may
^HELP("s","ISV","s","$STORAGE",18)
   not affect $STORAGE at all or may cause an apparently disproportionate
^HELP("s","ISV","s","$STORAGE",19)
   drop in its value.
^HELP("s","ISV","s","$STORAGE",20)

^HELP("s","ISV","s","$STORAGE",21)
   Once a YottaDB process adds either instruction or data space, it never
^HELP("s","ISV","s","$STORAGE",22)
   releases that space. However, YottaDB does reuse process space made available
^HELP("s","ISV","s","$STORAGE",23)
   by actions such as KILLs of local variables. $STORAGE can neither be SET
^HELP("s","ISV","s","$STORAGE",24)
   or NEWed.
^HELP("s","ISV","s","$STORAGE",25)

^HELP("s","ISV","s","$SYSTEM")
$SYstem
^HELP("s","ISV","s","$SYSTEM",1)
   $SYstem
^HELP("s","ISV","s","$SYSTEM",2)

^HELP("s","ISV","s","$SYSTEM",3)
   $SY[STEM] contains a string that identifies the executing M instance. The
^HELP("s","ISV","s","$SYSTEM",4)
   value of $SYSTEM is a string that starts with a unique numeric code that
^HELP("s","ISV","s","$SYSTEM",5)
   identifies the manufacturer. Codes are assigned by the MDC (MUMPS
^HELP("s","ISV","s","$SYSTEM",6)
   Development Committee).
^HELP("s","ISV","s","$SYSTEM",7)

^HELP("s","ISV","s","$SYSTEM",8)
   $SYSTEM in YottaDB starts with "47" followed by a comma and the evaluation of
^HELP("s","ISV","s","$SYSTEM",9)
   the environment variable ydb_sysid or gtm_sysid. If neither of the names have
^HELP("s","ISV","s","$SYSTEM",10)
   any evaluation (i.e. both are undefined), the value after the comma is gtm_sysid.
^HELP("s","ISV","s","$SYSTEM",11)

^HELP("s","ISV","s","$TEST")
$Test
^HELP("s","ISV","s","$TEST",1)
   $Test
^HELP("s","ISV","s","$TEST",2)

^HELP("s","ISV","s","$TEST",3)
   $T[EST] contains a truth value specifying the evaluation of the last IF
^HELP("s","ISV","s","$TEST",4)
   argument or the result of the last operation with timeout. If the last
^HELP("s","ISV","s","$TEST",5)
   timed operation timed out, $TEST contains FALSE (0); otherwise, it
^HELP("s","ISV","s","$TEST",6)
   contains TRUE (1).
^HELP("s","ISV","s","$TEST",7)

^HELP("s","ISV","s","$TEST",8)
   $TEST serves as the implicit argument for ELSE commands and argumentless
^HELP("s","ISV","s","$TEST",9)
   IF commands.
^HELP("s","ISV","s","$TEST",10)

^HELP("s","ISV","s","$TEST",11)
   M stacks $TEST when invoking an extrinsic and performing an argumentless
^HELP("s","ISV","s","$TEST",12)
   DO. After these operations complete with an implicit or explicit QUIT, M
^HELP("s","ISV","s","$TEST",13)
   restores the corresponding stacked value. Because, with these two
^HELP("s","ISV","s","$TEST",14)
   exceptions, $TEST reflects the last IF argument or timeout result on a
^HELP("s","ISV","s","$TEST",15)
   process wide basis. Use $TEST only in immediate proximity to the operation
^HELP("s","ISV","s","$TEST",16)
   that last updated it.
^HELP("s","ISV","s","$TEST",17)

^HELP("s","ISV","s","$TEST",18)
   Neither $SELECT() nor post-conditional expressions modify $TEST.
^HELP("s","ISV","s","$TEST",19)

^HELP("s","ISV","s","$TEST",20)
   M routines cannot modify $TEST with the SET command.
^HELP("s","ISV","s","$TEST",21)

^HELP("s","ISV","s","$TEST",22)
   Example:
^HELP("s","ISV","s","$TEST",23)

^HELP("s","ISV","s","$TEST",24)
   IF x=+x DO ^WORK
^HELP("s","ISV","s","$TEST",25)
   ELSE SET x=0
^HELP("s","ISV","s","$TEST",26)

^HELP("s","ISV","s","$TEST",27)
   The ELSE statement causes M to use the value of $TEST to determine whether
^HELP("s","ISV","s","$TEST",28)
   to execute the rest of the line. Because the code in routine WORK may use
^HELP("s","ISV","s","$TEST",29)
   IFs and timeouts, this use of $TEST is not recommended.
^HELP("s","ISV","s","$TEST",30)

^HELP("s","ISV","s","$TEST",31)
   Example:
^HELP("s","ISV","s","$TEST",32)

^HELP("s","ISV","s","$TEST",33)
   SET MYFLG=x=+x
^HELP("s","ISV","s","$TEST",34)
   IF MYFLG DO ^WORK
^HELP("s","ISV","s","$TEST",35)
   IF 'MYFLG SET x=0
^HELP("s","ISV","s","$TEST",36)

^HELP("s","ISV","s","$TEST",37)
   This example introduces a local variable flag to address the problems of
^HELP("s","ISV","s","$TEST",38)
   the prior example. Note that its behavior results in the opposite $TEST
^HELP("s","ISV","s","$TEST",39)
   value from the prior example.
^HELP("s","ISV","s","$TEST",40)

^HELP("s","ISV","s","$TEST",41)
   Example:
^HELP("s","ISV","s","$TEST",42)

^HELP("s","ISV","s","$TEST",43)
   IF x=+x DO ^WORK IF 1
^HELP("s","ISV","s","$TEST",44)
   ELSE SET x=0
^HELP("s","ISV","s","$TEST",45)

^HELP("s","ISV","s","$TEST",46)
   This example uses the IF 1 to ensure that the ELSE works counter to the
^HELP("s","ISV","s","$TEST",47)
   IF.
^HELP("s","ISV","s","$TEST",48)

^HELP("s","ISV","s","$TLEVEL")
$TLevel
^HELP("s","ISV","s","$TLEVEL",1)
   $TLevel
^HELP("s","ISV","s","$TLEVEL",2)

^HELP("s","ISV","s","$TLEVEL",3)
   $TL[EVEL] contains a count of executed TSTARTs that are currently
^HELP("s","ISV","s","$TLEVEL",4)
   unmatched by TCOMMITs. $TLEVEL is zero (0) when there is no TRANSACTION in
^HELP("s","ISV","s","$TLEVEL",5)
   progress. When $TLEVEL is greater than one (>1), it indicates that there
^HELP("s","ISV","s","$TLEVEL",6)
   are nested sub-transactions in progress. Sub-transactions are always
^HELP("s","ISV","s","$TLEVEL",7)
   subject to the completion of the main TRANSACTION and cannot be
^HELP("s","ISV","s","$TLEVEL",8)
   independently acted upon by COMMIT, ROLLBACK, or RESTART.
^HELP("s","ISV","s","$TLEVEL",9)

^HELP("s","ISV","s","$TLEVEL",10)
   $TLEVEL can be used to determine whether there is a TRANSACTION in
^HELP("s","ISV","s","$TLEVEL",11)
   progress and to determine the level of nesting of sub-transactions.
^HELP("s","ISV","s","$TLEVEL",12)

^HELP("s","ISV","s","$TLEVEL",13)
   M routines cannot modify $TLEVEL with SET.
^HELP("s","ISV","s","$TLEVEL",14)

^HELP("s","ISV","s","$TLEVEL",15)
   Example:
^HELP("s","ISV","s","$TLEVEL",16)

^HELP("s","ISV","s","$TLEVEL",17)
   IF $TLEVEL TROLLBACK
^HELP("s","ISV","s","$TLEVEL",18)

^HELP("s","ISV","s","$TLEVEL",19)
   This example performs a TROLLBACK if a transaction is in progress. A
^HELP("s","ISV","s","$TLEVEL",20)
   statement like this should appear in any error handler used with
^HELP("s","ISV","s","$TLEVEL",21)
   transaction processing.
^HELP("s","ISV","s","$TLEVEL",22)

^HELP("s","ISV","s","$TRESTART")
$TRestart
^HELP("s","ISV","s","$TRESTART",1)
   $TRestart
^HELP("s","ISV","s","$TRESTART",2)

^HELP("s","ISV","s","$TRESTART",3)
   $TR[ESTART] contains a count of the number of times the current
^HELP("s","ISV","s","$TRESTART",4)
   TRANSACTION has been RESTARTed. A RESTART can be explicit (specified in M
^HELP("s","ISV","s","$TRESTART",5)
   as a TRESTART) or implicit (initiated by YottaDB as part of its internal
^HELP("s","ISV","s","$TRESTART",6)
   concurrency control mechanism). $TRESTART can have values of 0 through 4.
^HELP("s","ISV","s","$TRESTART",7)
   When there is no TRANSACTION in progress, $TRESTART is zero (0).
^HELP("s","ISV","s","$TRESTART",8)

^HELP("s","ISV","s","$TRESTART",9)
   $TRESTART can be used by the application to limit the number of RESTARTs,
^HELP("s","ISV","s","$TRESTART",10)
   or to cause a routine to perform different actions during a RESTART than
^HELP("s","ISV","s","$TRESTART",11)
   during the initial execution.
^HELP("s","ISV","s","$TRESTART",12)

^HELP("s","ISV","s","$TRESTART",13)
   **Note**
^HELP("s","ISV","s","$TRESTART",14)

^HELP("s","ISV","s","$TRESTART",15)
   YottaDB does not permit the SET command to modify $TRESTART.
^HELP("s","ISV","s","$TRESTART",16)

^HELP("s","ISV","s","$TRESTART",17)
   Example:
^HELP("s","ISV","s","$TRESTART",18)

^HELP("s","ISV","s","$TRESTART",19)
   TRANS TSTART ():SERIAL
^HELP("s","ISV","s","$TRESTART",20)
   IF $TRESTART>2 WRITE !;"Access Conflict" QUIT
^HELP("s","ISV","s","$TRESTART",21)

^HELP("s","ISV","s","$TRESTART",22)
   This example terminates the sub-routine with a message if the number of
^HELP("s","ISV","s","$TRESTART",23)
   RESTARTs exceeds 2.
^HELP("s","ISV","s","$TRESTART",24)

^HELP("s","ISV","s","$X")
$X
^HELP("s","ISV","s","$X",1)
   $X
^HELP("s","ISV","s","$X",2)

^HELP("s","ISV","s","$X",3)
   $X contains an integer value ranging from 0 to 65,535, specifying the
^HELP("s","ISV","s","$X",4)
   horizontal position of a virtual cursor in the current output record. $X=0
^HELP("s","ISV","s","$X",5)
   represents the left-most position of a record or row.
^HELP("s","ISV","s","$X",6)

^HELP("s","ISV","s","$X",7)
   Every OPEN device has a $X. However, M only accesses $X of the current
^HELP("s","ISV","s","$X",8)
   device. Therefore, exercise care in sequencing USE commands and references
^HELP("s","ISV","s","$X",9)
   to $X.
^HELP("s","ISV","s","$X",10)

^HELP("s","ISV","s","$X",11)
   Generally, YottaDB increments $X for every character written to and read from
^HELP("s","ISV","s","$X",12)
   the current device. Usually, the increment is 1, but for a process in
^HELP("s","ISV","s","$X",13)
   UTF-8 mode, the increment is the number of glyphs or codepoints (depends
^HELP("s","ISV","s","$X",14)
   on the type of device). M format control characters, write filtering, and
^HELP("s","ISV","s","$X",15)
   the device WIDTH also have an effect on $X.
^HELP("s","ISV","s","$X",16)

^HELP("s","ISV","s","$X",17)
   $X never equals or exceeds the value of the device WIDTH. Whenever it
^HELP("s","ISV","s","$X",18)
   reaches the value equal to the device WIDTH, it gets reset to zero (0).
^HELP("s","ISV","s","$X",19)

^HELP("s","ISV","s","$X",20)
   YottaDB follows the MDC Type A recommendation and permits an M routine to SET
^HELP("s","ISV","s","$X",21)
   $X. However, SET $X does not automatically issue device commands or escape
^HELP("s","ISV","s","$X",22)
   sequences to reposition the physical cursor.
^HELP("s","ISV","s","$X",23)

^HELP("s","ISV","s","$Y")
$Y
^HELP("s","ISV","s","$Y",1)
   $Y
^HELP("s","ISV","s","$Y",2)

^HELP("s","ISV","s","$Y",3)
   $Y contains an integer value ranging from 0 to 65,535 specifying the
^HELP("s","ISV","s","$Y",4)
   vertical position of a virtual cursor in the current output page. $Y=0
^HELP("s","ISV","s","$Y",5)
   represents the top row or line.
^HELP("s","ISV","s","$Y",6)

^HELP("s","ISV","s","$Y",7)
   Every OPEN device has a $Y. However, M only accesses $Y of the current
^HELP("s","ISV","s","$Y",8)
   device. Therefore, exercise care in sequencing USE commands and references
^HELP("s","ISV","s","$Y",9)
   to $Y.
^HELP("s","ISV","s","$Y",10)

^HELP("s","ISV","s","$Y",11)
   When YottaDB finishes the logical record in progress, it generally increments
^HELP("s","ISV","s","$Y",12)
   $Y. YottaDB recognizes the end of a logical record when it processes certain
^HELP("s","ISV","s","$Y",13)
   M format control characters, or when the record reaches its maximum size,
^HELP("s","ISV","s","$Y",14)
   as determined by the device WIDTH, and the device is set to WRAP. The
^HELP("s","ISV","s","$Y",15)
   definition of "logical record" varies from device to device. For an exact
^HELP("s","ISV","s","$Y",16)
   definition, see the sections on each device type. Write filtering and the
^HELP("s","ISV","s","$Y",17)
   device LENGTH also have an effect on $Y.
^HELP("s","ISV","s","$Y",18)

^HELP("s","ISV","s","$Y",19)
   $Y never equals or exceeds the value of the device LENGTH. Whenever it
^HELP("s","ISV","s","$Y",20)
   reaches the value equal to the device LENGTH, it gets reset to zero (0)
^HELP("s","ISV","s","$Y",21)

^HELP("s","ISV","s","$Y",22)
   YottaDB permits an M routine to SET $Y. However, SET $Y does not
^HELP("s","ISV","s","$Y",23)
   automatically issue device commands or escape sequences to reposition the
^HELP("s","ISV","s","$Y",24)
   physical cursor.
^HELP("s","ISV","s","$Y",25)

^HELP("s","ISV","s","$ZA")
$ZA
^HELP("s","ISV","s","$ZA",1)
   $ZA
^HELP("s","ISV","s","$ZA",2)

^HELP("s","ISV","s","$ZA",3)
   $ZA contains a status determined by the last read on the device. The value
^HELP("s","ISV","s","$ZA",4)
   is a decimal integer with a meaning determined by the device as follows:
^HELP("s","ISV","s","$ZA",5)

^HELP("s","ISV","s","$ZA",6)
   For Terminal I/O:
^HELP("s","ISV","s","$ZA",7)

^HELP("s","ISV","s","$ZA",8)
   0Indicating normal termination of a read operation
^HELP("s","ISV","s","$ZA",9)

^HELP("s","ISV","s","$ZA",10)
   1: Indicating a parity error
^HELP("s","ISV","s","$ZA",11)

^HELP("s","ISV","s","$ZA",12)
   2: Indicating that the terminator sequence was too long
^HELP("s","ISV","s","$ZA",13)

^HELP("s","ISV","s","$ZA",14)
   9: Indicating a default for all other errors
^HELP("s","ISV","s","$ZA",15)

^HELP("s","ISV","s","$ZA",16)
   For Sequential Disk and Tape Files I/O:
^HELP("s","ISV","s","$ZA",17)

^HELP("s","ISV","s","$ZA",18)
   0: Indicating normal termination of a read operation
^HELP("s","ISV","s","$ZA",19)

^HELP("s","ISV","s","$ZA",20)
   9: Indicating a failure of a read operation
^HELP("s","ISV","s","$ZA",21)

^HELP("s","ISV","s","$ZA",22)
   For Fifos I/O:
^HELP("s","ISV","s","$ZA",23)

^HELP("s","ISV","s","$ZA",24)
   Decimal representing $JOB (identifier) of the process that wrote the last
^HELP("s","ISV","s","$ZA",25)
   message the current process read
^HELP("s","ISV","s","$ZA",26)

^HELP("s","ISV","s","$ZA",27)
   $ZA refers to the status of the current device. Therefore, exercise care
^HELP("s","ISV","s","$ZA",28)
   in sequencing USE commands and references to $ZA.
^HELP("s","ISV","s","$ZA",29)

^HELP("s","ISV","s","$ZA",30)
   YottaDB does not permit the SET command to modify $ZA.
^HELP("s","ISV","s","$ZA",31)

^HELP("s","ISV","s","$ZA",32)
   For more information on $ZA, refer "Input/Output Processing".
^HELP("s","ISV","s","$ZA",33)

^HELP("s","ISV","s","$ZALLOCSTOR")
$ZALlocstor
^HELP("s","ISV","s","$ZALLOCSTOR",1)
   $ZALlocstor
^HELP("s","ISV","s","$ZALLOCSTOR",2)

^HELP("s","ISV","s","$ZALLOCSTOR",3)
   $ZALLOCSTOR contains the number of bytes that are (sub) allocated
^HELP("s","ISV","s","$ZALLOCSTOR",4)
   (including overhead) by YottaDB for various activities. It provides one view
^HELP("s","ISV","s","$ZALLOCSTOR",5)
   (see also $ZREALSTOR and $ZUSEDSTOR) of the process memory utilization and
^HELP("s","ISV","s","$ZALLOCSTOR",6)
   can help identify storage related problems. YottaDB does not permit
^HELP("s","ISV","s","$ZALLOCSTOR",7)
   $ZALLOCSTOR to be SET or NEWed.
^HELP("s","ISV","s","$ZALLOCSTOR",8)

^HELP("s","ISV","s","$ZAUDIT")
$ZAUDit
^HELP("s","ISV","s","$ZAUDIT",1)
   $ZAUDit
^HELP("s","ISV","s","$ZAUDIT",2)

^HELP("s","ISV","s","$ZAUDIT",3)
   $ZAUDIT contains a boolean value that indicates whether Audit Principal
^HELP("s","ISV","s","$ZAUDIT",4)
   Device is enabled. YottaDB does not permit $ZAUDIT to be SET or NEWed.
^HELP("s","ISV","s","$ZAUDIT",5)

^HELP("s","ISV","s","$ZB")
$ZB
^HELP("s","ISV","s","$ZB",1)
   $ZB
^HELP("s","ISV","s","$ZB",2)

^HELP("s","ISV","s","$ZB",3)
   $ZB contains a string specifying the input terminator for the last
^HELP("s","ISV","s","$ZB",4)
   terminal READ. $ZB contains null and is not maintained for devices other
^HELP("s","ISV","s","$ZB",5)
   than terminals. $ZB may contain any legal input terminator, such as <CR>
^HELP("s","ISV","s","$ZB",6)
   (ASCII 13) or an escape sequence starting with <ESC> (ASCII 27), from zero
^HELP("s","ISV","s","$ZB",7)
   (0) to 15 bytes in length. $ZB contains null for any READ terminated by a
^HELP("s","ISV","s","$ZB",8)
   timeout or any fixed-length READ terminated by input reaching the maximum
^HELP("s","ISV","s","$ZB",9)
   length.
^HELP("s","ISV","s","$ZB",10)

^HELP("s","ISV","s","$ZB",11)
   $ZB contains the actual character string, not a sequence of numeric ASCII
^HELP("s","ISV","s","$ZB",12)
   codes.
^HELP("s","ISV","s","$ZB",13)

^HELP("s","ISV","s","$ZB",14)
   Example:
^HELP("s","ISV","s","$ZB",15)

^HELP("s","ISV","s","$ZB",16)
   SET zb=$ZB FOR i=1:1:$L(zb) WRITE !,i,?5,$A(zb,i)
^HELP("s","ISV","s","$ZB",17)

^HELP("s","ISV","s","$ZB",18)
   This displays the series of ASCII codes for the characters in $ZB.
^HELP("s","ISV","s","$ZB",19)

^HELP("s","ISV","s","$ZB",20)
   $ZB refers to the last READ terminator of the current device. Therefore,
^HELP("s","ISV","s","$ZB",21)
   exercise care in sequencing USE commands and references to $ZB.
^HELP("s","ISV","s","$ZB",22)

^HELP("s","ISV","s","$ZB",23)
   YottaDB does not permit the SET command to modify $ZB.
^HELP("s","ISV","s","$ZB",24)

^HELP("s","ISV","s","$ZB",25)
   For more information on $ZB, refer to the "Input/Output Processing"
^HELP("s","ISV","s","$ZB",26)
   chapter.
^HELP("s","ISV","s","$ZB",27)

^HELP("s","ISV","s","$ZCHSET")
$ZCHset
^HELP("s","ISV","s","$ZCHSET",1)
   $ZCHset
^HELP("s","ISV","s","$ZCHSET",2)

^HELP("s","ISV","s","$ZCHSET",3)
   $ZCHSET is a read-only intrinsic special variable that takes its value
^HELP("s","ISV","s","$ZCHSET",4)
   from the environment variable ydb_chset. An application can obtain the
^HELP("s","ISV","s","$ZCHSET",5)
   character set used by a YottaDB process by the value of $ZCHSET. $ZCHSET can
^HELP("s","ISV","s","$ZCHSET",6)
   have only two values --"M", or "UTF-8".
^HELP("s","ISV","s","$ZCHSET",7)

^HELP("s","ISV","s","$ZCHSET",8)
   **Warning**
^HELP("s","ISV","s","$ZCHSET",9)

^HELP("s","ISV","s","$ZCHSET",10)
   YottaDB performs operations on literals at compile time and the character set
^HELP("s","ISV","s","$ZCHSET",11)
   may have an impact on such operations. Therefore, always compile with the
^HELP("s","ISV","s","$ZCHSET",12)
   same character set as that used at runtime.
^HELP("s","ISV","s","$ZCHSET",13)

^HELP("s","ISV","s","$ZCHSET",14)
   Example:
^HELP("s","ISV","s","$ZCHSET",15)

^HELP("s","ISV","s","$ZCHSET",16)
   $ export ydb_chset=UTF-8
^HELP("s","ISV","s","$ZCHSET",17)
   $ /usr/local/lib/yottadb/r130/ydb
^HELP("s","ISV","s","$ZCHSET",18)
   YDB>write $zchset
^HELP("s","ISV","s","$ZCHSET",19)
   UTF-8
^HELP("s","ISV","s","$ZCHSET",20)
   YDB>
^HELP("s","ISV","s","$ZCHSET",21)

^HELP("s","ISV","s","$ZCLOSE")
$ZCLose
^HELP("s","ISV","s","$ZCLOSE",1)
   $ZCLose
^HELP("s","ISV","s","$ZCLOSE",2)

^HELP("s","ISV","s","$ZCLOSE",3)
   Provides termination status of the last PIPE CLOSE as follows:
^HELP("s","ISV","s","$ZCLOSE",4)

^HELP("s","ISV","s","$ZCLOSE",5)
     o -99 when the check times out
^HELP("s","ISV","s","$ZCLOSE",6)
     o -98 for unanticipated problems with the check
^HELP("s","ISV","s","$ZCLOSE",7)
     o the negative of the signal value if a signal terminated the
^HELP("s","ISV","s","$ZCLOSE",8)
       co-process.
^HELP("s","ISV","s","$ZCLOSE",9)

^HELP("s","ISV","s","$ZCLOSE",10)
   If positive, $ZCLOSE contains the exit status returned by the last
^HELP("s","ISV","s","$ZCLOSE",11)
   co-process.
^HELP("s","ISV","s","$ZCLOSE",12)

^HELP("s","ISV","s","$ZCMDLINE")
$ZCMdline
^HELP("s","ISV","s","$ZCMDLINE",1)
   $ZCMdline
^HELP("s","ISV","s","$ZCMDLINE",2)

^HELP("s","ISV","s","$ZCMDLINE",3)
   $ZCM[DLINE] contains a string value specifying the "excess" portion of the
^HELP("s","ISV","s","$ZCMDLINE",4)
   command line that invoked the YottaDB process. By "excess" is meant the
^HELP("s","ISV","s","$ZCMDLINE",5)
   portion of the command line that is left after YottaDB has done all of its
^HELP("s","ISV","s","$ZCMDLINE",6)
   command line processing. For example, a command line mumps -direct extra1
^HELP("s","ISV","s","$ZCMDLINE",7)
   extra2 causes YottaDB to process the command line upto mumps -direct and
^HELP("s","ISV","s","$ZCMDLINE",8)
   place the "excess" of the command line, that is "extra1 extra2" in
^HELP("s","ISV","s","$ZCMDLINE",9)
   $ZCMDLINE. $ZCMDLINE gives the M routine access to the shell command line
^HELP("s","ISV","s","$ZCMDLINE",10)
   input.
^HELP("s","ISV","s","$ZCMDLINE",11)

^HELP("s","ISV","s","$ZCMDLINE",12)
   Note that the actual user input command line might have been transformed
^HELP("s","ISV","s","$ZCMDLINE",13)
   by the shell (for example, removing one level of quotes, filename, and
^HELP("s","ISV","s","$ZCMDLINE",14)
   wildcard substituion, and so on.), and it is this transformed command line
^HELP("s","ISV","s","$ZCMDLINE",15)
   that YottaDB processes.
^HELP("s","ISV","s","$ZCMDLINE",16)

^HELP("s","ISV","s","$ZCMDLINE",17)
   Example:
^HELP("s","ISV","s","$ZCMDLINE",18)

^HELP("s","ISV","s","$ZCMDLINE",19)
   $ cat > test.m
^HELP("s","ISV","s","$ZCMDLINE",20)
   write " $ZCMDLINE=",$ZCMDLINE,!
^HELP("s","ISV","s","$ZCMDLINE",21)
   quit
^HELP("s","ISV","s","$ZCMDLINE",22)
   $ mumps -run test OTHER  information
^HELP("s","ISV","s","$ZCMDLINE",23)
   $ZCMDLINE=OTHER information
^HELP("s","ISV","s","$ZCMDLINE",24)
   $
^HELP("s","ISV","s","$ZCMDLINE",25)

^HELP("s","ISV","s","$ZCMDLINE",26)
   This creates the program test.m, which writes the value of $ZCMDLINE. Note
^HELP("s","ISV","s","$ZCMDLINE",27)
   how the two spaces specified in OTHER information in the command line gets
^HELP("s","ISV","s","$ZCMDLINE",28)
   transformed to just one space in OTHER information in $ZCMDLINE due to the
^HELP("s","ISV","s","$ZCMDLINE",29)
   shell's pre-processing.
^HELP("s","ISV","s","$ZCMDLINE",30)

^HELP("s","ISV","s","$ZCMDLINE",31)
   Example:
^HELP("s","ISV","s","$ZCMDLINE",32)

^HELP("s","ISV","s","$ZCMDLINE",33)
   $ cat foo.m
^HELP("s","ISV","s","$ZCMDLINE",34)
   foo     ; a routine to invoke an arbitrary entry with or without
^HELP("s","ISV","s","$ZCMDLINE",35)
    parameters
^HELP("s","ISV","s","$ZCMDLINE",36)
      ;
^HELP("s","ISV","s","$ZCMDLINE",37)
     set $etrap="" ; exit if the input isn't valid
^HELP("s","ISV","s","$ZCMDLINE",38)
     if $length($zcmdline) do @$zcmdline quit
^HELP("s","ISV","s","$ZCMDLINE",39)
     quit
^HELP("s","ISV","s","$ZCMDLINE",40)
   $ mumps -run foo 'BAR^FOOBAR("hello")'
^HELP("s","ISV","s","$ZCMDLINE",41)

^HELP("s","ISV","s","$ZCMDLINE",42)
   In this example, YottaDB processes the shell command line up to foo and puts
^HELP("s","ISV","s","$ZCMDLINE",43)
   the rest in $ZCMDLINE. This mechanism allows mumps -run to invoke an
^HELP("s","ISV","s","$ZCMDLINE",44)
   arbitrary entryref with or without parameters. Note that this example
^HELP("s","ISV","s","$ZCMDLINE",45)
   encloses the command line argument with single quotes to prevent
^HELP("s","ISV","s","$ZCMDLINE",46)
   inappropriate expansion in Bourne-type shells. Always remember to use the
^HELP("s","ISV","s","$ZCMDLINE",47)
   escaping and quoting conventions of the shell and YottaDB to prevent
^HELP("s","ISV","s","$ZCMDLINE",48)
   inappropriate expansion.
^HELP("s","ISV","s","$ZCMDLINE",49)

^HELP("s","ISV","s","$ZCMDLINE",50)
   **Important**
^HELP("s","ISV","s","$ZCMDLINE",51)

^HELP("s","ISV","s","$ZCMDLINE",52)
   Use the ^%XCMD utility to XECUTEs code from the shell command line and
^HELP("s","ISV","s","$ZCMDLINE",53)
   return any error status (truncated to a single byte on UNIX) that the code
^HELP("s","ISV","s","$ZCMDLINE",54)
   generates.
^HELP("s","ISV","s","$ZCMDLINE",55)

^HELP("s","ISV","s","$ZCOMPILE")
$ZCOmpile
^HELP("s","ISV","s","$ZCOMPILE",1)
   $ZCOmpile
^HELP("s","ISV","s","$ZCOMPILE",2)

^HELP("s","ISV","s","$ZCOMPILE",3)
   $ZCO[MPILE] contains a string value composed of one or more qualifiers
^HELP("s","ISV","s","$ZCOMPILE",4)
   that control the YottaDB compiler. Explicit ZLINKs and auto-ZLINKs use these
^HELP("s","ISV","s","$ZCOMPILE",5)
   qualifiers as defaults for any compilations that they perform.
^HELP("s","ISV","s","$ZCOMPILE",6)

^HELP("s","ISV","s","$ZCOMPILE",7)
   $ZCOMPILE is a read-write ISV, that is, it can appear on the left side of
^HELP("s","ISV","s","$ZCOMPILE",8)
   the equal sign (=) in the argument to the SET command. A $ZCOMPILE value
^HELP("s","ISV","s","$ZCOMPILE",9)
   has the form of a list of M command qualifiers each separated by a space (
^HELP("s","ISV","s","$ZCOMPILE",10)
   ).
^HELP("s","ISV","s","$ZCOMPILE",11)

^HELP("s","ISV","s","$ZCOMPILE",12)
   When the environment variable ydb_compile is defined, YottaDB initializes
^HELP("s","ISV","s","$ZCOMPILE",13)
   $ZCOMPILE to the translation of ydb_compile. Otherwise YottaDB initializes
^HELP("s","ISV","s","$ZCOMPILE",14)
   $ZCOMPILE to null. Changes to the value of $ZCOMPILE during a YottaDB
^HELP("s","ISV","s","$ZCOMPILE",15)
   invocation only last for the current invocation and do not change the
^HELP("s","ISV","s","$ZCOMPILE",16)
   value of the environment variable ydb_compile.
^HELP("s","ISV","s","$ZCOMPILE",17)

^HELP("s","ISV","s","$ZCOMPILE",18)
   ZCOMPILE returns a status of 1 after any error in compilation.
^HELP("s","ISV","s","$ZCOMPILE",19)

^HELP("s","ISV","s","$ZCOMPILE",20)
   When $ZCOMPILE is null, YottaDB uses the default M command qualifiers
^HELP("s","ISV","s","$ZCOMPILE",21)
   -IGNORE, -LABEL=LOWER, -NOLIST, and -OBJECT.
^HELP("s","ISV","s","$ZCOMPILE",22)

^HELP("s","ISV","s","$ZCOMPILE",23)
   Example:
^HELP("s","ISV","s","$ZCOMPILE",24)

^HELP("s","ISV","s","$ZCOMPILE",25)
   $ export ydb_compile="-LIST -LENGTH=56 -SPACE=2"
^HELP("s","ISV","s","$ZCOMPILE",26)
   $ gtm
^HELP("s","ISV","s","$ZCOMPILE",27)
   YDB>WRITE $ZCOMPILE
^HELP("s","ISV","s","$ZCOMPILE",28)
   -LIST -LENGTH=56 -SPACE=2
^HELP("s","ISV","s","$ZCOMPILE",29)
   YDB>SET $ZCOMPILE="-LIST -NOIGNORE"
^HELP("s","ISV","s","$ZCOMPILE",30)
   YDB>WRITE $ZCOMPILE
^HELP("s","ISV","s","$ZCOMPILE",31)
   -LIST -NOIGNORE
^HELP("s","ISV","s","$ZCOMPILE",32)
   YDB>ZLINK "A.m"
^HELP("s","ISV","s","$ZCOMPILE",33)
   YDB>HALT
^HELP("s","ISV","s","$ZCOMPILE",34)
   $ echo $ydb_compile
^HELP("s","ISV","s","$ZCOMPILE",35)
   -LIST -LENGTH=56 -SPACE=2
^HELP("s","ISV","s","$ZCOMPILE",36)

^HELP("s","ISV","s","$ZCOMPILE",37)
   This example uses the environment variable ydb_compile to set up $ZCOMPILE.
^HELP("s","ISV","s","$ZCOMPILE",38)
   Then it modifies $ZCOMPILE with the SET command. The ZLINK argument
^HELP("s","ISV","s","$ZCOMPILE",39)
   specifies a file with a .m extension (type), which forces a compile. The
^HELP("s","ISV","s","$ZCOMPILE",40)
   compile produces a listing for routine A.m and does not produce an object
^HELP("s","ISV","s","$ZCOMPILE",41)
   module if A.m contains compilation errors. After YottaDB terminates, the
^HELP("s","ISV","s","$ZCOMPILE",42)
   shell command echo $ydb_compile demonstrates that the SET command did not
^HELP("s","ISV","s","$ZCOMPILE",43)
   change the environment variable.
^HELP("s","ISV","s","$ZCOMPILE",44)

^HELP("s","ISV","s","$ZCSTATUS")
$ZCstatus
^HELP("s","ISV","s","$ZCSTATUS",1)
   $ZCstatus
^HELP("s","ISV","s","$ZCSTATUS",2)

^HELP("s","ISV","s","$ZCSTATUS",3)
   $ZC[STATUS] holds the value of the status code for the last compilation
^HELP("s","ISV","s","$ZCSTATUS",4)
   performed by a ZCOMPILE command. One (1) indicates a clean compilation, a
^HELP("s","ISV","s","$ZCSTATUS",5)
   positive number greater than one is an error code you can turn into text
^HELP("s","ISV","s","$ZCSTATUS",6)
   with $ZMESSAGE(), and a negative number is a negated error code that
^HELP("s","ISV","s","$ZCSTATUS",7)
   indicates YottaDB was not able to produce an object file. The error details
^HELP("s","ISV","s","$ZCSTATUS",8)
   appear in the compilation output, so $ZCSTATUS typically contains the code
^HELP("s","ISV","s","$ZCSTATUS",9)
   for ERRORSUMMARY.
^HELP("s","ISV","s","$ZCSTATUS",10)

^HELP("s","ISV","s","$ZCSTATUS",11)
   YottaDB does not permit the SET command to modify $ZSTATUS.
^HELP("s","ISV","s","$ZCSTATUS",12)

^HELP("s","ISV","s","$ZDATEFORM")
$ZDAteform
^HELP("s","ISV","s","$ZDATEFORM",1)
   $ZDAteform
^HELP("s","ISV","s","$ZDATEFORM",2)

^HELP("s","ISV","s","$ZDATEFORM",3)
   $ZDA[TEFORM] contains an integer value, specifying the output year format
^HELP("s","ISV","s","$ZDATEFORM",4)
   of $ZDATE(). $ZDATEFORM can be modified using the SET command. YottaDB
^HELP("s","ISV","s","$ZDATEFORM",5)
   initializes $ZDATEFORM to the translation of the environment variable
^HELP("s","ISV","s","$ZDATEFORM",6)
   ydb_zdate_form. If ydb_zdate_form is not defined, YottaDB initializes
^HELP("s","ISV","s","$ZDATEFORM",7)
   $ZDATEFORM to zero (0).
^HELP("s","ISV","s","$ZDATEFORM",8)

^HELP("s","ISV","s","$ZDATEFORM",9)
   Refer to "Functions" and "Utility Routines" chapters in the YottaDB
^HELP("s","ISV","s","$ZDATEFORM",10)
   Programmer's Guide for more details.
^HELP("s","ISV","s","$ZDATEFORM",11)

^HELP("s","ISV","s","$ZDATEFORM",12)
   Example:
^HELP("s","ISV","s","$ZDATEFORM",13)

^HELP("s","ISV","s","$ZDATEFORM",14)
   YDB>WRITE $ZDATEFROM
^HELP("s","ISV","s","$ZDATEFORM",15)
   0
^HELP("s","ISV","s","$ZDATEFORM",16)
   YDB>WRITE $ZDATE($H)
^HELP("s","ISV","s","$ZDATEFORM",17)
   11/15/02
^HELP("s","ISV","s","$ZDATEFORM",18)
   YDB>SET $ZDATEFORM=1
^HELP("s","ISV","s","$ZDATEFORM",19)
   YDB>WRITE $ZDATE($H)
^HELP("s","ISV","s","$ZDATEFORM",20)
   11/15/2002
^HELP("s","ISV","s","$ZDATEFORM",21)

^HELP("s","ISV","s","$ZDIRECTORY")
$ZDirectory
^HELP("s","ISV","s","$ZDIRECTORY",1)
   $ZDirectory
^HELP("s","ISV","s","$ZDIRECTORY",2)

^HELP("s","ISV","s","$ZDIRECTORY",3)
   $ZD[IRECTORY] contains the string value of the full path of the current
^HELP("s","ISV","s","$ZDIRECTORY",4)
   directory. Initially $ZDIRECTORY contains the default/current directory
^HELP("s","ISV","s","$ZDIRECTORY",5)
   from which the YottaDB image/process was activated.
^HELP("s","ISV","s","$ZDIRECTORY",6)

^HELP("s","ISV","s","$ZDIRECTORY",7)
   If the current directory does not exist at the time of YottaDB process
^HELP("s","ISV","s","$ZDIRECTORY",8)
   activation, YottaDB errors out.
^HELP("s","ISV","s","$ZDIRECTORY",9)

^HELP("s","ISV","s","$ZDIRECTORY",10)
   Example:
^HELP("s","ISV","s","$ZDIRECTORY",11)

^HELP("s","ISV","s","$ZDIRECTORY",12)
   YDB>WRITE $ZDIR
^HELP("s","ISV","s","$ZDIRECTORY",13)
   /usr/tmp
^HELP("s","ISV","s","$ZDIRECTORY",14)
   YDB>SET $ZDIR=".."
^HELP("s","ISV","s","$ZDIRECTORY",15)
   YDB>WRITE $ZDIR
^HELP("s","ISV","s","$ZDIRECTORY",16)
   /usr
^HELP("s","ISV","s","$ZDIRECTORY",17)

^HELP("s","ISV","s","$ZDIRECTORY",18)
   This example displays the current working directory and changes $ZDIR to
^HELP("s","ISV","s","$ZDIRECTORY",19)
   the parent directory.
^HELP("s","ISV","s","$ZDIRECTORY",20)

^HELP("s","ISV","s","$ZDIRECTORY",21)
   $ZDIRECTORY is a read-write Intrinsic Special Variable, that is, it can
^HELP("s","ISV","s","$ZDIRECTORY",22)
   appear on the left side of the equal sign (=) in the argument to a SET
^HELP("s","ISV","s","$ZDIRECTORY",23)
   command. If an attempt is made to set $ZDIRECTORY to a non-existent
^HELP("s","ISV","s","$ZDIRECTORY",24)
   directory specification, YottaDB issues an error and keeps the value of
^HELP("s","ISV","s","$ZDIRECTORY",25)
   $ZDIRECTORY unchanged.
^HELP("s","ISV","s","$ZDIRECTORY",26)

^HELP("s","ISV","s","$ZDIRECTORY",27)
   At image exit, YottaDB restores the current directory to the directory that
^HELP("s","ISV","s","$ZDIRECTORY",28)
   was the current directory when YottaDB was invoked even if that directory
^HELP("s","ISV","s","$ZDIRECTORY",29)
   does not exist.
^HELP("s","ISV","s","$ZDIRECTORY",30)

^HELP("s","ISV","s","$ZEDIT")
$ZEDit
^HELP("s","ISV","s","$ZEDIT",1)
   $ZEDit
^HELP("s","ISV","s","$ZEDIT",2)

^HELP("s","ISV","s","$ZEDIT",3)
   $ZED[IT] holds the value of the status code for the last edit session
^HELP("s","ISV","s","$ZEDIT",4)
   invoked by a ZEDIT command.
^HELP("s","ISV","s","$ZEDIT",5)

^HELP("s","ISV","s","$ZEDIT",6)
   YottaDB does not permit the SET or NEW command to modify $ZEDIT.
^HELP("s","ISV","s","$ZEDIT",7)

^HELP("s","ISV","s","$ZEOF")
$ZEOf
^HELP("s","ISV","s","$ZEOF",1)
   $ZEOf
^HELP("s","ISV","s","$ZEOF",2)

^HELP("s","ISV","s","$ZEOF",3)
   $ZEO[F] contains a truth-valued expression indicating whether the last
^HELP("s","ISV","s","$ZEOF",4)
   READ operation reached the end-of-file. $ZEOF equals TRUE (1) at EOF and
^HELP("s","ISV","s","$ZEOF",5)
   FALSE (0) at other positions.
^HELP("s","ISV","s","$ZEOF",6)

^HELP("s","ISV","s","$ZEOF",7)
   YottaDB does not maintain $ZEOF for terminal devices.
^HELP("s","ISV","s","$ZEOF",8)

^HELP("s","ISV","s","$ZEOF",9)
   $ZEOF refers to the end-of-file status of the current device. Therefore,
^HELP("s","ISV","s","$ZEOF",10)
   exercise care in sequencing USE commands and references to $ZEOF.
^HELP("s","ISV","s","$ZEOF",11)

^HELP("s","ISV","s","$ZEOF",12)
   YottaDB does not permit the SET or NEW command to modify $ZEOF.
^HELP("s","ISV","s","$ZEOF",13)

^HELP("s","ISV","s","$ZEOF",14)
   For more information on $ZEOF, refer to the "Input/Output Processing"
^HELP("s","ISV","s","$ZEOF",15)
   chapter.
^HELP("s","ISV","s","$ZEOF",16)

^HELP("s","ISV","s","$ZERROR")
$ZError
^HELP("s","ISV","s","$ZERROR",1)
   $ZError
^HELP("s","ISV","s","$ZERROR",2)

^HELP("s","ISV","s","$ZERROR",3)
   $ZE[RROR] is supposed to hold the application-specific error-code
^HELP("s","ISV","s","$ZERROR",4)
   corresponding to the YottaDB error-code stored in $ECODE/$ZSTATUS.
^HELP("s","ISV","s","$ZERROR",5)

^HELP("s","ISV","s","$ZERROR",6)
   $ZERROR contains a default value of "Unprocessed $ZERROR, see $ZSTATUS" at
^HELP("s","ISV","s","$ZERROR",7)
   process startup.
^HELP("s","ISV","s","$ZERROR",8)

^HELP("s","ISV","s","$ZERROR",9)
   $ZERROR can be SET but not NEWed.
^HELP("s","ISV","s","$ZERROR",10)

^HELP("s","ISV","s","$ZERROR",11)
   The mapping of a YottaDB error-code to the application-specific error-code is
^HELP("s","ISV","s","$ZERROR",12)
   achieved as follows. Whenever YottaDB encounters an error, $ECODE/$ZSTATUS
^HELP("s","ISV","s","$ZERROR",13)
   gets set first. It then invokes the code that $ZYERROR points to if it is
^HELP("s","ISV","s","$ZERROR",14)
   not null. It is intended that the code invoked by $ZYERROR use the value
^HELP("s","ISV","s","$ZERROR",15)
   of $ZSTATUS to select or construct a value to which it SETs $ZERROR. If an
^HELP("s","ISV","s","$ZERROR",16)
   error is encountered by the attempt to execute the code specified in
^HELP("s","ISV","s","$ZERROR",17)
   $ZYERROR, YottaDB sets $ZERROR to the error status encountered. If $ZYERROR
^HELP("s","ISV","s","$ZERROR",18)
   is null, YottaDB does not change the value of $ZERROR. In all cases, YottaDB
^HELP("s","ISV","s","$ZERROR",19)
   proceeds to return control to the code specified by $ETRAP/$ZTRAP or
^HELP("s","ISV","s","$ZERROR",20)
   device EXCEPTION whichever is applicable.
^HELP("s","ISV","s","$ZERROR",21)

^HELP("s","ISV","s","$ZGBLDIR")
$ZGbldir
^HELP("s","ISV","s","$ZGBLDIR",1)
   $ZGbldir
^HELP("s","ISV","s","$ZGBLDIR",2)

^HELP("s","ISV","s","$ZGBLDIR",3)
   $ZG[BLDIR] contains the value of the current Global Directory filename.
^HELP("s","ISV","s","$ZGBLDIR",4)
   When $ZGBLDIR specifies an invalid or inaccessible file, YottaDB cannot
^HELP("s","ISV","s","$ZGBLDIR",5)
   successfully perform database operations.
^HELP("s","ISV","s","$ZGBLDIR",6)

^HELP("s","ISV","s","$ZGBLDIR",7)
   YottaDB initializes $ZGBLDIR to the translation of the environment variable
^HELP("s","ISV","s","$ZGBLDIR",8)
   ydb_gbldir. The value of the ydb_gbldir environment variable may include a
^HELP("s","ISV","s","$ZGBLDIR",9)
   reference to another environment variable. If ydb_gbldir is not defined,
^HELP("s","ISV","s","$ZGBLDIR",10)
   YottaDB initializes $ZGBLDIR to null. When $ZGBLDIR is null, YottaDB constructs
^HELP("s","ISV","s","$ZGBLDIR",11)
   a file name for the Global Directory using the name $ydb_gbldir and the
^HELP("s","ISV","s","$ZGBLDIR",12)
   extension .gld in the current working directory.
^HELP("s","ISV","s","$ZGBLDIR",13)

^HELP("s","ISV","s","$ZGBLDIR",14)
   $ZGBLDIR is a read-write Intrinsic Special Variable, (i.e., it can appear
^HELP("s","ISV","s","$ZGBLDIR",15)
   on the left side of the equal sign (=) in the argument to the SET
^HELP("s","ISV","s","$ZGBLDIR",16)
   command). SET $ZGBLDIR="" causes YottaDB to assign $ZGBLDIR to the
^HELP("s","ISV","s","$ZGBLDIR",17)
   translation of ydb_gbldir if that environment variable is defined. If it is
^HELP("s","ISV","s","$ZGBLDIR",18)
   not defined, then SET $ZGBLDIR="" causes YottaDB to construct a file name
^HELP("s","ISV","s","$ZGBLDIR",19)
   using the name $ydb_gbldir.gld in the current directory.  NEWing $ZGBLDIR is
^HELP("s","ISV","s","$ZGBLDIR",20)
   the same as SET $ZGBLDIR="", which as just noted may change its value. For
^HELP("s","ISV","s","$ZGBLDIR",21)
   code that immediately SETs $ZGBLDIR after NEW'ng it that behavior doesn't
^HELP("s","ISV","s","$ZGBLDIR",22)
   matter, but without an associated SET, such a change may seem
^HELP("s","ISV","s","$ZGBLDIR",23)
   counterintuitive. A $ZGBLDIR value may include an environment variable.
^HELP("s","ISV","s","$ZGBLDIR",24)

^HELP("s","ISV","s","$ZGBLDIR",25)

^HELP("s","ISV","s","$ZGBLDIR",26)
   SETting $ZGBLDIR also causes YottaDB to attempt to open the specified file.
^HELP("s","ISV","s","$ZGBLDIR",27)
   If the file name is invalid or the file is inaccessible, YottaDB triggers an
^HELP("s","ISV","s","$ZGBLDIR",28)
   error without changing the value of $ZGBLDIR.
^HELP("s","ISV","s","$ZGBLDIR",29)

^HELP("s","ISV","s","$ZGBLDIR",30)
   To establish a value for $ZGBLDIR outside of M, use the appropriate shell
^HELP("s","ISV","s","$ZGBLDIR",31)
   command to assign a translation to ydb_gbldir. Defining ydb_gbldir provides
^HELP("s","ISV","s","$ZGBLDIR",32)
   a convenient way to use the same Global Directory during a session where
^HELP("s","ISV","s","$ZGBLDIR",33)
   you repeatedly invoke and leave YottaDB.
^HELP("s","ISV","s","$ZGBLDIR",34)

^HELP("s","ISV","s","$ZGBLDIR",35)
   Changes to the value of $ZGBLDIR during a YottaDB invocation only last for
^HELP("s","ISV","s","$ZGBLDIR",36)
   the current invocation and do not change the value of ydb_gbldir.
^HELP("s","ISV","s","$ZGBLDIR",37)

^HELP("s","ISV","s","$ZGBLDIR",38)
   Example:
^HELP("s","ISV","s","$ZGBLDIR",39)

^HELP("s","ISV","s","$ZGBLDIR",40)
   $ ydb_gbldir=test.gld
^HELP("s","ISV","s","$ZGBLDIR",41)
   $ export ydb_gbldir
^HELP("s","ISV","s","$ZGBLDIR",42)
   $ gtm
^HELP("s","ISV","s","$ZGBLDIR",43)
   YDB>WRITE $zgbldir
^HELP("s","ISV","s","$ZGBLDIR",44)
   /usr/dev/test.gld
^HELP("s","ISV","s","$ZGBLDIR",45)
   YDB>SET $zgbldir="mumps.gld"
^HELP("s","ISV","s","$ZGBLDIR",46)
   YDB>WRITE $zgbldir
^HELP("s","ISV","s","$ZGBLDIR",47)
   mumps.gld
^HELP("s","ISV","s","$ZGBLDIR",48)
   YDB>HALT
^HELP("s","ISV","s","$ZGBLDIR",49)
   $ echo $ydb_gbldir
^HELP("s","ISV","s","$ZGBLDIR",50)
   test.gld
^HELP("s","ISV","s","$ZGBLDIR",51)

^HELP("s","ISV","s","$ZGBLDIR",52)
   This example defines the environment variable ydb_gbldir. Upon entering
^HELP("s","ISV","s","$ZGBLDIR",53)
   YottaDB Direct Mode, $ZGBLDIR has the value supplied by ydb_gbldir. The SET
^HELP("s","ISV","s","$ZGBLDIR",54)
   command changes the value. After the YottaDB image terminates, the echo
^HELP("s","ISV","s","$ZGBLDIR",55)
   command demonstrates that ydb_gbldir was not modified by the M SET command.
^HELP("s","ISV","s","$ZGBLDIR",56)

^HELP("s","ISV","s","$ZGBLDIR",57)
   $ ls test.gld
^HELP("s","ISV","s","$ZGBLDIR",58)
   test.gld not found
^HELP("s","ISV","s","$ZGBLDIR",59)
   $ gtm
^HELP("s","ISV","s","$ZGBLDIR",60)
   YDB>WRITE $zgbldir
^HELP("s","ISV","s","$ZGBLDIR",61)
   /usr/dev/mumps.gld
^HELP("s","ISV","s","$ZGBLDIR",62)
   YDB>set $zgbldir="test.gld"
^HELP("s","ISV","s","$ZGBLDIR",63)
   %YDB-E-ZGBLDIRACC, Cannot access global directory
^HELP("s","ISV","s","$ZGBLDIR",64)
   "/usr/dev/test.gld". Retaining /usr/dev/mumps.gld"
^HELP("s","ISV","s","$ZGBLDIR",65)
   %SYSTEM-E-ENO2, No such file or directory
^HELP("s","ISV","s","$ZGBLDIR",66)
   YDB>WRITE $zgbldir
^HELP("s","ISV","s","$ZGBLDIR",67)
   /usr/dev/mumps.gld
^HELP("s","ISV","s","$ZGBLDIR",68)
   YDB>halt
^HELP("s","ISV","s","$ZGBLDIR",69)
   $
^HELP("s","ISV","s","$ZGBLDIR",70)

^HELP("s","ISV","s","$ZGBLDIR",71)
   The SET command attempts to change the value of $ZGBLDIR to test.gld.
^HELP("s","ISV","s","$ZGBLDIR",72)
   Because the file does not exist, YottaDB reports an error and does not change
^HELP("s","ISV","s","$ZGBLDIR",73)
   the value of $ZGBLDIR.
^HELP("s","ISV","s","$ZGBLDIR",74)

^HELP("s","ISV","s","$ZHOROLOG")
$ZHorolog
^HELP("s","ISV","s","$ZHOROLOG",1)
   $ZHorolog
^HELP("s","ISV","s","$ZHOROLOG",2)

^HELP("s","ISV","s","$ZHOROLOG",3)
   $ZH[OROLOG] returns 4 comma-separated pieces (for example,
^HELP("s","ISV","s","$ZHOROLOG",4)
   "63638,39194,258602,14400"). The first two pieces are identical to the two
^HELP("s","ISV","s","$ZHOROLOG",5)
   pieces of $HOROLOG. $ZHOROLOG is a drop-in replacement for $HOROLOG in all
^HELP("s","ISV","s","$ZHOROLOG",6)
   application code of the form $PIECE($HOROLOG,",",...). For example,
^HELP("s","ISV","s","$ZHOROLOG",7)
   $ZHOROLOG can be used as the first argument of $ZDATE(). The third piece
^HELP("s","ISV","s","$ZHOROLOG",8)
   is the number of microseconds in the current second. The accuracy of the
^HELP("s","ISV","s","$ZHOROLOG",9)
   third piece is subject to the precision of the system clock. The fourth
^HELP("s","ISV","s","$ZHOROLOG",10)
   piece is an offset in seconds to UTC. For any valid UTC time offset, the
^HELP("s","ISV","s","$ZHOROLOG",11)
   fourth piece is a number between -43200 (for UTC-12:00) and +50400 (for
^HELP("s","ISV","s","$ZHOROLOG",12)
   UTC+14:00). The value of the fourth piece remains constant all through the
^HELP("s","ISV","s","$ZHOROLOG",13)
   year except for those places that observe daylight saving time. To obtain
^HELP("s","ISV","s","$ZHOROLOG",14)
   the $HOROLOG representation of UTC, add the fourth piece to the second
^HELP("s","ISV","s","$ZHOROLOG",15)
   piece of $ZHOROLOG and proceed as follows:
^HELP("s","ISV","s","$ZHOROLOG",16)

^HELP("s","ISV","s","$ZHOROLOG",17)
     o If the result is a negative number, subtract one from the first piece
^HELP("s","ISV","s","$ZHOROLOG",18)
       and add 86400 (number of seconds in a day) to the second piece.
^HELP("s","ISV","s","$ZHOROLOG",19)
     o If the result is a positive number greater than 86400, add one to the
^HELP("s","ISV","s","$ZHOROLOG",20)
       first piece and subtract 86400 from the second piece.
^HELP("s","ISV","s","$ZHOROLOG",21)

^HELP("s","ISV","s","$ZHOROLOG",22)
   Example:
^HELP("s","ISV","s","$ZHOROLOG",23)

^HELP("s","ISV","s","$ZHOROLOG",24)
   YDB>zprint ^zhoro
^HELP("s","ISV","s","$ZHOROLOG",25)
   zhoro(zone)
^HELP("s","ISV","s","$ZHOROLOG",26)
    set:'$data(zone) zone="Europe/London"
^HELP("s","ISV","s","$ZHOROLOG",27)
    new zutzh
^HELP("s","ISV","s","$ZHOROLOG",28)
    set zutzh=$$getzutzh(zone)
^HELP("s","ISV","s","$ZHOROLOG",29)
    do displaytzdetails(zutzh,zone)
^HELP("s","ISV","s","$ZHOROLOG",30)
    quit
^HELP("s","ISV","s","$ZHOROLOG",31)
   getzutzh(zone)
^HELP("s","ISV","s","$ZHOROLOG",32)
     set shcommand="TZ="_zone_" $ydb_dist/mumps -run %XCMD 'write $zut,"" "",$zhorolog,"" "",$zdate($horolog,""MON DD,YYYY 12:60:SS AM""),!'"
^HELP("s","ISV","s","$ZHOROLOG",33)
     set descname="tzpipe"
^HELP("s","ISV","s","$ZHOROLOG",34)
     open descname:(shell="/bin/sh":command=shcommand:readonly)::"pipe"
^HELP("s","ISV","s","$ZHOROLOG",35)
     use descname read dateline use $principal close descname
^HELP("s","ISV","s","$ZHOROLOG",36)
     quit dateline
^HELP("s","ISV","s","$ZHOROLOG",37)
   displaytzdetails(zutzh,zone)
^HELP("s","ISV","s","$ZHOROLOG",38)
    set zut=$piece(zutzh," ",1)   ; $ZUT
^HELP("s","ISV","s","$ZHOROLOG",39)
    set zh=$piece(zutzh," ",2)    ; $ZHOROLOG
^HELP("s","ISV","s","$ZHOROLOG",40)
    set zhfp=$piece(zh,",",1)     ; first piece of $ZH of zone
^HELP("s","ISV","s","$ZHOROLOG",41)
    set zhsp=$piece(zh,",",2)
^HELP("s","ISV","s","$ZHOROLOG",42)
    set zhtp=$piece(zh,",",3)
^HELP("s","ISV","s","$ZHOROLOG",43)
    set zhfop=$piece(zh,",",4)
^HELP("s","ISV","s","$ZHOROLOG",44)
    set tz=zhfop/3600,hours=$select(tz*tz=1:" Hour ",1:" Hours ")
^HELP("s","ISV","s","$ZHOROLOG",45)
    write "Time in ",zone," ",$piece(zutzh," ",3,6)," $ZUT=",zut,!,$select(tz<0:-tz_hours_"Ahead of",1:tz_hours_"Behind")," UTC",!
^HELP("s","ISV","s","$ZHOROLOG",46)
    set zhsp=zhsp+zhfop
^HELP("s","ISV","s","$ZHOROLOG",47)
    if zhsp>86400 set zhfp=zhfp+1,zhsp=zhsp-86400     ; 86400 seconds in a day
^HELP("s","ISV","s","$ZHOROLOG",48)
    else  if zhsp<1 set zhfp=zhfp-1,zhsp=zhsp+86400
^HELP("s","ISV","s","$ZHOROLOG",49)
    write "Time in UTC ",$zdate(zhfp_","_zhsp,"MON DD,YYYY 12:60:SS AM")
^HELP("s","ISV","s","$ZHOROLOG",50)
    quit
^HELP("s","ISV","s","$ZHOROLOG",51)
   YDB>do ^zhoro
^HELP("s","ISV","s","$ZHOROLOG",52)
   Time in Europe/London APR 10,2015 05:20:29 PM $ZUT=1428682829213711
^HELP("s","ISV","s","$ZHOROLOG",53)
   1 Hour Ahead of UTC
^HELP("s","ISV","s","$ZHOROLOG",54)
   Time in UTC APR 10,2015 04:20:29 PM
^HELP("s","ISV","s","$ZHOROLOG",55)
   YDB>
^HELP("s","ISV","s","$ZHOROLOG",56)

^HELP("s","ISV","s","$ZININTERRUPT")
$ZINInterrupt
^HELP("s","ISV","s","$ZININTERRUPT",1)
   $ZINInterrupt
^HELP("s","ISV","s","$ZININTERRUPT",2)

^HELP("s","ISV","s","$ZININTERRUPT",3)
   $ZINI[NTERRUPT] evaluates to 1 (TRUE) when a process is executing code
^HELP("s","ISV","s","$ZININTERRUPT",4)
   initiated by the interrupt mechanism, and otherwise 0 (FALSE).
^HELP("s","ISV","s","$ZININTERRUPT",5)

^HELP("s","ISV","s","$ZININTERRUPT",6)
   YottaDB does not permit the SET or NEW commands to modify $ZININTERRUPT.
^HELP("s","ISV","s","$ZININTERRUPT",7)

^HELP("s","ISV","s","$ZINTERRUPT")
$ZINTerrupt
^HELP("s","ISV","s","$ZINTERRUPT",1)
   $ZINTerrupt
^HELP("s","ISV","s","$ZINTERRUPT",2)

^HELP("s","ISV","s","$ZINTERRUPT",3)
   $ZINT[ERRUPT] specifies the code to be XECUTE'd when an interrupt (for
^HELP("s","ISV","s","$ZINTERRUPT",4)
   example, through a MUPIP INTRPT) is processed. While a $ZINTERRUPT action
^HELP("s","ISV","s","$ZINTERRUPT",5)
   is in process, any additional interrupt signals are discarded. When an
^HELP("s","ISV","s","$ZINTERRUPT",6)
   interrupt handler is invoked, the current values of $REFERENCE is saved
^HELP("s","ISV","s","$ZINTERRUPT",7)
   and restored when the interrupt handler returns. The current device ($IO)
^HELP("s","ISV","s","$ZINTERRUPT",8)
   is neither saved nor restored.
^HELP("s","ISV","s","$ZINTERRUPT",9)

^HELP("s","ISV","s","$ZINTERRUPT",10)
   YottaDB permits the SET command to modify the value of $ZINTERRUPT.
^HELP("s","ISV","s","$ZINTERRUPT",11)

^HELP("s","ISV","s","$ZINTERRUPT",12)
   If an interrupt handler changes the current IO device (via USE), it is the
^HELP("s","ISV","s","$ZINTERRUPT",13)
   responsibility of the interrupt handler to restore the current IO device
^HELP("s","ISV","s","$ZINTERRUPT",14)
   before returning. There are sufficient legitimate possibilities why an
^HELP("s","ISV","s","$ZINTERRUPT",15)
   interrupt routine would want to change the current IO device (for example;
^HELP("s","ISV","s","$ZINTERRUPT",16)
   daily log switching), that this part of the process context is not saved
^HELP("s","ISV","s","$ZINTERRUPT",17)
   and restored automatically.
^HELP("s","ISV","s","$ZINTERRUPT",18)

^HELP("s","ISV","s","$ZINTERRUPT",19)
   The initial value for $ZINTERRUPT is taken from the UNIX environment
^HELP("s","ISV","s","$ZINTERRUPT",20)
   variable ydb_zinterrupt if it is specified, otherwise it defaults to the
^HELP("s","ISV","s","$ZINTERRUPT",21)
   following string:
^HELP("s","ISV","s","$ZINTERRUPT",22)

^HELP("s","ISV","s","$ZINTERRUPT",23)
   IF $ZJOBEXAM()
^HELP("s","ISV","s","$ZINTERRUPT",24)

^HELP("s","ISV","s","$ZINTERRUPT",25)
   The IF statement executes the $ZJOBEXAM function but effectively discards
^HELP("s","ISV","s","$ZINTERRUPT",26)
   the return value.
^HELP("s","ISV","s","$ZINTERRUPT",27)

^HELP("s","ISV","s","$ZINTERRUPT",28)
   **Note**
^HELP("s","ISV","s","$ZINTERRUPT",29)

^HELP("s","ISV","s","$ZINTERRUPT",30)
   If the default value for $ZINTERRUPT is modified, no $ZJOBEXAM() will
^HELP("s","ISV","s","$ZINTERRUPT",31)
   occur unless the replacement value directly or indirectly invokes that
^HELP("s","ISV","s","$ZINTERRUPT",32)
   function. In other words, while $ZJOBEXAM() is part of the interrupt
^HELP("s","ISV","s","$ZINTERRUPT",33)
   handling by default, it is not an implicit part of the interrupt handling.
^HELP("s","ISV","s","$ZINTERRUPT",34)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING")
Interrupt_Handling
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",1)
   Interrupt Handling
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",2)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",3)
   YottaDB process execution is interruptible with the following events:
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",4)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",5)
   When YottaDB detects any of these events, it transfers control to a vector
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",6)
   that depends on the event. For CTRAP characters and ZMAXTPTIME, YottaDB uses
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",7)
   the $ETRAP or $ZTRAP vectors described in more detail in the Error
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",8)
   Processing chapter. For INTRPT and $ZTEXit, it XECUTEs the interrupt
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",9)
   handler code placed in $ZINTERRUPT. If $ZINTERRUPT is an empty string, the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",10)
   process ignores any MUPIP INTRPT directed at it. The default value of
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",11)
   $ZINTERRUPT is "IF $ZJOBEXAM()" which redirects a dump of ZSHOW "*" to a
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",12)
   file and reports each such occasion to the operator log. For <CTRL-C> with
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",13)
   CENABLE, it enters Direct Mode to give the programmer control. Without
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",14)
   CENABLE or CTRAP, YottaDB ignores <CTRL-C> on a $PRINCIPAL terminal.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",15)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",16)
   YottaDB recognizes most of these events when they occur but transfers control
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",17)
   to the interrupt vector at the start of each M line, at each iteration of
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",18)
   a FOR LOOP, at certain points during the execution of commands which may
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",19)
   take a "long" time. For example, ZWRITE, HANG, LOCK, MERGE, ZSHOW "V",
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",20)
   OPENs of disk files and FIFOs, OPENs of SOCKETs with the CONNECT parameter
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",21)
   (unless zero timeout,) WRITE /WAIT for SOCKETs, and READ for terminals,
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",22)
   SOCKETs, FIFOs, and PIPEs. If +$ZTEXIT evaluates to a truth value at the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",23)
   outermost TCOMMIT or TROLLBACK, YottaDB XECUTEs $ZINTERRUPT after completing
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",24)
   the commit or rollback. Except for <CTRL-C> YottaDB recognizes CTRAP
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",25)
   characters when READ. CTRAP characters other than <CTRL-C> tend to be
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",26)
   limited by terminal configuration.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",27)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",28)
   If an interrupt event occurs in a long running external call (for example,
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",29)
   waiting in a message queue), YottaDB recognizes the event but makes the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",30)
   vector transfer after the external call returns when it reaches the next
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",31)
   appropriate execution boundary.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",32)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",33)
   When an interrupt handler is invoked, YottaDB saves and restores the current
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",34)
   values of $REFERENCE. However, the current device ($IO) is neither saved
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",35)
   nor restored. If an interrupt handler changes $IO (via USE), ensure that
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",36)
   the interrupt handler restores the current device before returning. To
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",37)
   restore the device which was current when the interrupt handler began,
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",38)
   specify USE without any deviceparameters. Any attempt to do IO on a device
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",39)
   which was actively doing IO when the interrupt was recognized may result
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",40)
   in a ZINTERCURSEIO error.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",41)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",42)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",43)
   Example:
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",44)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",45)
   set $zinterrupt="do ^interrupthandler($io)"
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",46)
   interrupthandler(currentdev)
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",47)
          do ^handleinterrupt ; handle the interrupt
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",48)
          use currentdev      ; restore the device which was current when the interrupt was recognized
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",49)
          quit
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",50)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",51)
   The use of the INTRPT facility may create a temporary hang or pause while
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",52)
   the interrupt handler code is executed. For the default case where the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",53)
   interrupt handler uses IF $ZJOBEXAM() to create a dump, the pause duration
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",54)
   depends on the number of local variables in the process at the time of the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",55)
   dump and on the speed of the disk being written to. The dumps are slower
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",56)
   on a network-mounted disk than on a disk directly connected to the local
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",57)
   system. Any interrupt driven code should be designed to account for this
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",58)
   issue.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",59)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",60)
   **Important**
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",61)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",62)
   Because sending an interrupt signal requires the sender to have
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",63)
   appropriate permissions, the use of the job interrupt facility itself does
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",64)
   not present any inherent security exposures. Nonetheless, because the dump
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",65)
   files created by the default action contain the values of every local
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",66)
   variable in the context at the time they are made, inappropriate access to
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",67)
   the dump files would constitute a security exposure. Make sure the design
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",68)
   and implementation of any interrupt logic includes careful consideration
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",69)
   to security issues.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",70)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",71)
   During the execution of the interrupt handling code, $ZINITERRUPT
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",72)
   evaluates to 1 (TRUE).
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",73)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",74)
   If an error occurs while compiling the $ZINTERRUPT code, the error handler
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",75)
   is not invoked (the error handler is invoked if an error occurs while
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",76)
   executing the $ZINTERRUPT code), YottaDB sends the YDB-E-ERRWZINTR message and
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",77)
   the compiler error message to the operator log facility. If the YottaDB
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",78)
   process is at a direct mode prompt or is executing a direct mode command
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",79)
   (for example, a FOR loop), YottaDB sends also sends the YDB-E-EERRWZINTR error
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",80)
   message to the user console along with the compilation error. In both
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",81)
   cases, the interrupted process resumes execution without performing any
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",82)
   action specified by the defective $ZINTERRUPT vector.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",83)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",84)
   If YottaDB encounters an error during creation of the interrupt handler's
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",85)
   stack frame (before transferring control to the application code specified
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",86)
   by the vector), that error is prefixed with a YDB-E-ERRWZINTR error. The
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",87)
   error handler then executes normal error processing associated with the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",88)
   interrupted routine.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",89)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",90)
   **Note**
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",91)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",92)
   The interrupt handler does not operate "outside" the current M environment
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",93)
   but rather within the environment of the process.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",94)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",95)
   TP transaction is in progress (0<$TLEVEL), updates to globals are not safe
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",96)
   since a TP restart can be signaled at any time prior to the transaction
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",97)
   being committed - even after the interrupt handler returns. A TP restart
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",98)
   reverses all global updates and unwinds the M stack so it is as if the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",99)
   interrupt never occurred. The interrupt handler is not redriven as part of
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",100)
   a transaction restart. Referencing (reading) globals inside an interrupt
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",101)
   handler can trigger a TP restart if a transaction is active. When
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",102)
   programming interrupt handling, either discard interrupts when 0<$TLEVEL
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",103)
   (forcing the interrupting party to try again), or use local variables that
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",104)
   are not restored by a TRESTART to defer the interrupt action until after
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",105)
   the final TCOMMIT.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",106)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",107)
   The interrupt handler is executed by YottaDB when on a statement boundary or
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",108)
   on an appropriate boundary in a potentially long running COMMAND (in the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",109)
   same place as YottaDB recognizes <CTRL-C>). If a YottaDB process is in a long
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",110)
   running external call (for example; waiting in a message queue) YottaDB does
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",111)
   not have sufficient control of the process state to immediately drive the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",112)
   interrupt handler. YottaDB recognizes the interrupt request and drives the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",113)
   handler after the external call returns to YottaDB and the process reaches an
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",114)
   appropriate execution boundary.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",115)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",116)
   Since sending an interrupt signal requires the sender to have appropriate
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",117)
   permissions from UNIX, the use of the interrupt facility itself does not
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",118)
   present any inherent security exposures. Nonetheless, because the dump
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",119)
   files created by the default action contain the values of every local
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",120)
   variable in the context at the time they are made, inappropriate access to
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",121)
   the dump files could constitute a security exposure. Make sure the design
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",122)
   and implementation of any interrupt logic includes careful consideration
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",123)
   to security issues.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",124)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",125)
   If an error occurs while compiling the $ZINTERRUPT code, the action taken
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",126)
   depends on the process state at the time the interrupt was received and
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",127)
   the error handler is not invoked (the error handler is invoked if an error
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",128)
   occurs while executing the $ZINTERRUPT code). If the YottaDB process is at a
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",129)
   direct mode prompt or is executing a direct mode command (for example, a
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",130)
   FOR loop), the error message is sent to the user console along with the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",131)
   ERRWZINTR error (refer to the YottaDB Messages and Recovery Procedures Manual).
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",132)
   In addition, the ERRWZINTR error is also sent to the operator log facility.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",133)
   IF the process is not at a direct mode prompt or executing a direct mode
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",134)
   command, the ERRWZINTR message and the compiler error message are sent to
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",135)
   the operator log facility and nothing is displayed on the user's console.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",136)
   In both cases, the interrupted process resumes execution.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",137)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",138)
   If an error occurs during execution of the interrupt handler's stack frame
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",139)
   (before it calls anything), that error is prefixed with the ERRWZINTR
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",140)
   error. The error handler then executes normal error processing associated
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",141)
   with the module that was interrupted. Any other errors that occur in code
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",142)
   called by the interrupt handler are handled by normal error handling.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",143)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",144)
   **Note**
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",145)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",146)
   The interrupt handler does not operate "outside" the current M environment
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",147)
   but rather within the environment of the process.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",148)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",149)
   If a TP transaction is in progress (0<$TLEVEL), updates to globals are not
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",150)
   safe since a TP restart can be signaled at any time prior to the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",151)
   transaction being committed - even after the interrupt handler returns. A
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",152)
   TP restart reverses all global updates and unwinds the M stack so it is as
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",153)
   if the interrupt never occurred. The interrupt handler is not redriven as
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",154)
   part of a transaction restart. Referencing (reading) globals inside an
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",155)
   interrupt handler can trigger a TP restart if a transaction is active.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",156)
   When programming interrupt handling, either discard interrupts when
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",157)
   0<$TLEVEL (forcing the interrupting party to try again), or use local
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",158)
   variables that are not restored by a TRESTART to defer the interrupt
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",159)
   action until after the final TCOMMIT.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",160)

^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",161)
   Note that it is possible for the interrupt handler to be executed while
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",162)
   the process executing the M routine is holding the critical section for
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",163)
   one or more regions. Use of this feature may create temporary hangs or
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",164)
   pauses while the interrupt handler executes. For the default case where
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",165)
   the interrupt handler uses $ZJOBEXAM() to create a dump, the pause
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",166)
   duration depends on the number of local variables in the process at the
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",167)
   time of the dump and on the speed of the disk being written to. The dumps
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",168)
   are slower on a network-mounted disk than on a disk directly connected to
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",169)
   the local system. Any interrupt driven code should be designed to account
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",170)
   for this issue.
^HELP("s","ISV","s","$ZINTERRUPT","s","INTERRUPT_HANDLING",171)

^HELP("s","ISV","s","$ZIO")
$ZIO
^HELP("s","ISV","s","$ZIO",1)
   $ZIO
^HELP("s","ISV","s","$ZIO",2)

^HELP("s","ISV","s","$ZIO",3)
   $ZIO contains the translated name of the current device, in contrast to
^HELP("s","ISV","s","$ZIO",4)
   $IO, which contains the name as specified by the USE command.
^HELP("s","ISV","s","$ZIO",5)

^HELP("s","ISV","s","$ZIO",6)
   YottaDB does not permit the SET or NEW command to modify $ZIO.
^HELP("s","ISV","s","$ZIO",7)

^HELP("s","ISV","s","$ZIO",8)
   An example where $ZIO contains a value different from $IO is if the
^HELP("s","ISV","s","$ZIO",9)
   environment variable ydb_principal is defined.
^HELP("s","ISV","s","$ZIO",10)

^HELP("s","ISV","s","$ZIO",11)
   Example:
^HELP("s","ISV","s","$ZIO",12)

^HELP("s","ISV","s","$ZIO",13)
   $ ydb_principal="foo"
^HELP("s","ISV","s","$ZIO",14)
   $ export ydb_principal
^HELP("s","ISV","s","$ZIO",15)
   YDB>WRITE $IO
^HELP("s","ISV","s","$ZIO",16)
   foo
^HELP("s","ISV","s","$ZIO",17)
   YDB>WRITE $ZIO
^HELP("s","ISV","s","$ZIO",18)
   /dev/pts/8
^HELP("s","ISV","s","$ZIO",19)

^HELP("s","ISV","s","$ZIO",20)
   Notice that $ZIO contains the actual terminal device name while $IO
^HELP("s","ISV","s","$ZIO",21)
   contains the string pointed to by the environment variable ydb_principal.
^HELP("s","ISV","s","$ZIO",22)

^HELP("s","ISV","s","$ZJOB")
$ZJob
^HELP("s","ISV","s","$ZJOB",1)
   $ZJob
^HELP("s","ISV","s","$ZJOB",2)

^HELP("s","ISV","s","$ZJOB",3)
   $ZJ[OB] holds the pid of the process created by the last JOB command
^HELP("s","ISV","s","$ZJOB",4)
   performed by the current process.
^HELP("s","ISV","s","$ZJOB",5)

^HELP("s","ISV","s","$ZJOB",6)
   YottaDB initializes $ZJOB to zero (0) at process startup. If the JOB command
^HELP("s","ISV","s","$ZJOB",7)
   fails to spawn a new job, YottaDB sets $ZJOB to zero (0). Note that because
^HELP("s","ISV","s","$ZJOB",8)
   of the left to right evaluation order of M, using $ZJOB in the
^HELP("s","ISV","s","$ZJOB",9)
   jobparameter string results in using the value created by the last, rather
^HELP("s","ISV","s","$ZJOB",10)
   than the current JOB command, which is not likely to match common coding
^HELP("s","ISV","s","$ZJOB",11)
   practice.
^HELP("s","ISV","s","$ZJOB",12)

^HELP("s","ISV","s","$ZJOB",13)
   YottaDB does not permit the SET or NEW command to modify $ZJOB.
^HELP("s","ISV","s","$ZJOB",14)

^HELP("s","ISV","s","$ZKEY")
$ZKey
^HELP("s","ISV","s","$ZKEY",1)
   $ZKey
^HELP("s","ISV","s","$ZKEY",2)

^HELP("s","ISV","s","$ZKEY",3)
   For Socket devices:
^HELP("s","ISV","s","$ZKEY",4)

^HELP("s","ISV","s","$ZKEY",5)
   $ZKEY contains a list of sockets in the current SOCKET device which are
^HELP("s","ISV","s","$ZKEY",6)
   ready for use. Its contents include both non selected but ready sockets
^HELP("s","ISV","s","$ZKEY",7)
   from the prior WRITE /WAITs and any sockets with unread data in their YottaDB
^HELP("s","ISV","s","$ZKEY",8)
   buffer. $ZKEY can be used any time a SOCKET device is current. Once an
^HELP("s","ISV","s","$ZKEY",9)
   incoming socket (that is, "LISTENING") has been accepted either by being
^HELP("s","ISV","s","$ZKEY",10)
   selected by WRITE /WAIT or by USE socdev:socket="listeningsocket", it is
^HELP("s","ISV","s","$ZKEY",11)
   removed from $ZKEY.
^HELP("s","ISV","s","$ZKEY",12)

^HELP("s","ISV","s","$ZKEY",13)
   $ZKEY contains any one of the following values:
^HELP("s","ISV","s","$ZKEY",14)

^HELP("s","ISV","s","$ZKEY",15)
   "LISTENING|<listening_socket_handle>|{<portnumber>|</path/to/LOCAL_socket>}"
^HELP("s","ISV","s","$ZKEY",16)

^HELP("s","ISV","s","$ZKEY",17)
   "READ|<socket_handle>|<address>"
^HELP("s","ISV","s","$ZKEY",18)

^HELP("s","ISV","s","$ZKEY",19)
   If $ZKEY contains one or more "READ|<socket_handle>|<address>" entries, it
^HELP("s","ISV","s","$ZKEY",20)
   means there are ready to READ sockets that were selected by WRITE /WAIT or
^HELP("s","ISV","s","$ZKEY",21)
   were partially read and there is data left in their buffer. Each entry is
^HELP("s","ISV","s","$ZKEY",22)
   delimited by a ";".
^HELP("s","ISV","s","$ZKEY",23)

^HELP("s","ISV","s","$ZKEY",24)
   If $ZKEY contains one or more
^HELP("s","ISV","s","$ZKEY",25)
   "LISTENING|<listening_socket_handle>|{<portnumber|/path/to/LOCAL_socket>}"
^HELP("s","ISV","s","$ZKEY",26)
   entries, it means that there are pending connections and a USE
^HELP("s","ISV","s","$ZKEY",27)
   s:socket=listening_socket_handle will accept a pending connection and
^HELP("s","ISV","s","$ZKEY",28)
   remove the LISTENING|<listening_socket_handle> entry from $ZKEY.
^HELP("s","ISV","s","$ZKEY",29)

^HELP("s","ISV","s","$ZKEY",30)
   $ZKEY is empty if no sockets have data in the buffer and there are no
^HELP("s","ISV","s","$ZKEY",31)
   unaccepted incoming sockets from previous WRITE /WAITs.
^HELP("s","ISV","s","$ZKEY",32)

^HELP("s","ISV","s","$ZKEY",33)
   For Sequential File Device:
^HELP("s","ISV","s","$ZKEY",34)

^HELP("s","ISV","s","$ZKEY",35)
   $ZKEY contains the current position in the file based on the last READ.
^HELP("s","ISV","s","$ZKEY",36)
   This is in bytes for STREAM and VARIABLE formats, and in a record,byte
^HELP("s","ISV","s","$ZKEY",37)
   pair for FIXED format. For FIXED format, SEEKs and normal READs always
^HELP("s","ISV","s","$ZKEY",38)
   produce a zero byte position; a non-zero byte position in $ZKEY for FIXED
^HELP("s","ISV","s","$ZKEY",39)
   format operation indicates a partially read record, caused by a READ # or
^HELP("s","ISV","s","$ZKEY",40)
   READ *. In FIXED mode, the information returned for $ZKEY is a function of
^HELP("s","ISV","s","$ZKEY",41)
   record size, and, if a USE command changes record size by specifying the
^HELP("s","ISV","s","$ZKEY",42)
   WIDTH deviceparameter while the file is open, $ZKEY offsets change
^HELP("s","ISV","s","$ZKEY",43)
   accordingly; if record size changes, previously saved values of $ZKEY are
^HELP("s","ISV","s","$ZKEY",44)
   likely inappropriate for use with SEEK.
^HELP("s","ISV","s","$ZKEY",45)

^HELP("s","ISV","s","$ZLEVEL")
$ZLevel
^HELP("s","ISV","s","$ZLEVEL",1)
   $ZLevel
^HELP("s","ISV","s","$ZLEVEL",2)

^HELP("s","ISV","s","$ZLEVEL",3)
   $ZL[EVEL] contains an integer value indicating the "level of nesting"
^HELP("s","ISV","s","$ZLEVEL",4)
   caused by DO commands, XECUTE commands, and extrinsic functions in the M
^HELP("s","ISV","s","$ZLEVEL",5)
   invocation stack.
^HELP("s","ISV","s","$ZLEVEL",6)

^HELP("s","ISV","s","$ZLEVEL",7)
   $ZLEVEL has an initial value of one (1) and increments by one with each
^HELP("s","ISV","s","$ZLEVEL",8)
   DO, XECUTE or extrinsic function. Any QUIT that does not terminate a FOR
^HELP("s","ISV","s","$ZLEVEL",9)
   loop decrements $ZLEVEL. ZGOTO may also reduce $ZLEVEL. In accordance with
^HELP("s","ISV","s","$ZLEVEL",10)
   the M standard, a FOR command does not increase $ZLEVEL. M routines cannot
^HELP("s","ISV","s","$ZLEVEL",11)
   modify $ZLEVEL with the SET or NEW commands.
^HELP("s","ISV","s","$ZLEVEL",12)

^HELP("s","ISV","s","$ZLEVEL",13)
   Use $ZLEVEL in debugging or in an error-handling mechanism to capture a
^HELP("s","ISV","s","$ZLEVEL",14)
   level for later use in a ZGOTO argument.
^HELP("s","ISV","s","$ZLEVEL",15)

^HELP("s","ISV","s","$ZLEVEL",16)
   Example:
^HELP("s","ISV","s","$ZLEVEL",17)

^HELP("s","ISV","s","$ZLEVEL",18)
   YDB>zprint ^zleve
^HELP("s","ISV","s","$ZLEVEL",19)
   zleve;
^HELP("s","ISV","s","$ZLEVEL",20)
    do B
^HELP("s","ISV","s","$ZLEVEL",21)
    write X,!
^HELP("s","ISV","s","$ZLEVEL",22)
    quit
^HELP("s","ISV","s","$ZLEVEL",23)
   B
^HELP("s","ISV","s","$ZLEVEL",24)
    goto C
^HELP("s","ISV","s","$ZLEVEL",25)
    quit
^HELP("s","ISV","s","$ZLEVEL",26)
   C
^HELP("s","ISV","s","$ZLEVEL",27)
    do D
^HELP("s","ISV","s","$ZLEVEL",28)
    quit
^HELP("s","ISV","s","$ZLEVEL",29)
   D
^HELP("s","ISV","s","$ZLEVEL",30)
    set X=$ZLEVEL
^HELP("s","ISV","s","$ZLEVEL",31)
    quit
^HELP("s","ISV","s","$ZLEVEL",32)
   YDB>do ^zleve
^HELP("s","ISV","s","$ZLEVEL",33)
   4
^HELP("s","ISV","s","$ZLEVEL",34)
   YDB>
^HELP("s","ISV","s","$ZLEVEL",35)

^HELP("s","ISV","s","$ZLEVEL",36)
   This program, executed from Direct Mode, produces a value of 4 for
^HELP("s","ISV","s","$ZLEVEL",37)
   $ZLEVEL. If you run this program from the shell, the value of $ZLEVEL is
^HELP("s","ISV","s","$ZLEVEL",38)
   three (3).
^HELP("s","ISV","s","$ZLEVEL",39)

^HELP("s","ISV","s","$ZMAXTPTIME")
$ZMAXTPTIme
^HELP("s","ISV","s","$ZMAXTPTIME",1)
   $ZMAXTPTIme
^HELP("s","ISV","s","$ZMAXTPTIME",2)

^HELP("s","ISV","s","$ZMAXTPTIME",3)
   $ZMAXTPTI[ME] contains an integer value indicating the time duration YottaDB
^HELP("s","ISV","s","$ZMAXTPTIME",4)
   should wait for the completion of all activities fenced by the current
^HELP("s","ISV","s","$ZMAXTPTIME",5)
   transaction's outermost TSTART/TCOMMIT pair.
^HELP("s","ISV","s","$ZMAXTPTIME",6)

^HELP("s","ISV","s","$ZMAXTPTIME",7)
   $ZMAXTPTIME can be SET but cannot be NEWed.
^HELP("s","ISV","s","$ZMAXTPTIME",8)

^HELP("s","ISV","s","$ZMAXTPTIME",9)
   $ZMAXTPTIME takes its value from the environment variable ydb_zmaxtptime.
^HELP("s","ISV","s","$ZMAXTPTIME",10)
   If ydb_zmaxtptime is not defined, the initial value of $ZMAXTPTIME is zero
^HELP("s","ISV","s","$ZMAXTPTIME",11)
   (0) seconds which indicates "no timeout" (unlimited time). The value of
^HELP("s","ISV","s","$ZMAXTPTIME",12)
   $ZMAXTPTIME when a transaction's outermost TSTART operation executes
^HELP("s","ISV","s","$ZMAXTPTIME",13)
   determines the timeout setting for that transaction.
^HELP("s","ISV","s","$ZMAXTPTIME",14)

^HELP("s","ISV","s","$ZMAXTPTIME",15)
   When a $ZMAXTPTIME expires, YottaDB executes the $ETRAP/$ZTRAP exception
^HELP("s","ISV","s","$ZMAXTPTIME",16)
   handler currently in effect.
^HELP("s","ISV","s","$ZMAXTPTIME",17)

^HELP("s","ISV","s","$ZMAXTPTIME",18)
   **Note**
^HELP("s","ISV","s","$ZMAXTPTIME",19)

^HELP("s","ISV","s","$ZMAXTPTIME",20)
   Negative values of $ZMAXTPTIME are also treated as "no timeout". Timeouts
^HELP("s","ISV","s","$ZMAXTPTIME",21)
   apply only to the outermost transaction, that is, $ZMAXTPTIME has no
^HELP("s","ISV","s","$ZMAXTPTIME",22)
   effect when TSTART is nested within another transaction.
^HELP("s","ISV","s","$ZMAXTPTIME",23)

^HELP("s","ISV","s","$ZMAXTPTIME",24)
   Example:
^HELP("s","ISV","s","$ZMAXTPTIME",25)

^HELP("s","ISV","s","$ZMAXTPTIME",26)
   Test;testing TP timeouts
^HELP("s","ISV","s","$ZMAXTPTIME",27)
     set $ZMAXTPTIME=6,^X=0,^Y=0,^Z=0
^HELP("s","ISV","s","$ZMAXTPTIME",28)
     write "Start with $ZMAXTPTIME=",$ZMAXTPTIME,":",!
^HELP("s","ISV","s","$ZMAXTPTIME",29)
     for sleep=3:2:9 do
^HELP("s","ISV","s","$ZMAXTPTIME",30)
     . set retlvl=$zlevel
^HELP("s","ISV","s","$ZMAXTPTIME",31)
     . do longtran;ztrap on longtran
^HELP("s","ISV","s","$ZMAXTPTIME",32)
     ;continues execution
^HELP("s","ISV","s","$ZMAXTPTIME",33)
     ;on next line
^HELP("s","ISV","s","$ZMAXTPTIME",34)
     . write "(^X,^Y)=(",^X,",",^Y,")",!
^HELP("s","ISV","s","$ZMAXTPTIME",35)
     write !,"Done TP Timeout test.",!
^HELP("s","ISV","s","$ZMAXTPTIME",36)
    quit
^HELP("s","ISV","s","$ZMAXTPTIME",37)
   longtran ;I/O in TP doesn't get rolled back
^HELP("s","ISV","s","$ZMAXTPTIME",38)
     set $etrap=" goto err"
^HELP("s","ISV","s","$ZMAXTPTIME",39)
     tstart ():serial
^HELP("s","ISV","s","$ZMAXTPTIME",40)
     set ^X=1+^X
^HELP("s","ISV","s","$ZMAXTPTIME",41)
     write !,"^X=",^X,",will set ^Y to ",sleep
^HELP("s","ISV","s","$ZMAXTPTIME",42)
     write " in ",sleep," seconds..."
^HELP("s","ISV","s","$ZMAXTPTIME",43)
     hang sleep
^HELP("s","ISV","s","$ZMAXTPTIME",44)
     set ^Y=sleep
^HELP("s","ISV","s","$ZMAXTPTIME",45)
     write "^Y=",^Y
^HELP("s","ISV","s","$ZMAXTPTIME",46)
     tcommit
^HELP("s","ISV","s","$ZMAXTPTIME",47)
     write "...committed.",!
^HELP("s","ISV","s","$ZMAXTPTIME",48)
     quit
^HELP("s","ISV","s","$ZMAXTPTIME",49)
   err;
^HELP("s","ISV","s","$ZMAXTPTIME",50)
     write !,"In $ETRAP handler. Error was: "
^HELP("s","ISV","s","$ZMAXTPTIME",51)
     write !," ",$zstatus
^HELP("s","ISV","s","$ZMAXTPTIME",52)
     if $TLEVEL do ;test allows handler use outside of TP
^HELP("s","ISV","s","$ZMAXTPTIME",53)
     . trollback
^HELP("s","ISV","s","$ZMAXTPTIME",54)
     . write "Rolled back transaction."
^HELP("s","ISV","s","$ZMAXTPTIME",55)
     write !
^HELP("s","ISV","s","$ZMAXTPTIME",56)
     set $ecode=""
^HELP("s","ISV","s","$ZMAXTPTIME",57)
     zgoto retlvl
^HELP("s","ISV","s","$ZMAXTPTIME",58)

^HELP("s","ISV","s","$ZMAXTPTIME",59)
   Results:
^HELP("s","ISV","s","$ZMAXTPTIME",60)

^HELP("s","ISV","s","$ZMAXTPTIME",61)
   Start with $ZMAXTPTIME=6:
^HELP("s","ISV","s","$ZMAXTPTIME",62)
   ^X=1,will set ^Y to 3 in 3 seconds...^Y=3...committed.
^HELP("s","ISV","s","$ZMAXTPTIME",63)
   ^X=2,will set ^Y to 5 in 5 seconds...^Y=5...committed.
^HELP("s","ISV","s","$ZMAXTPTIME",64)
   ^X=3,will set ^Y to 7 in 7 seconds...
^HELP("s","ISV","s","$ZMAXTPTIME",65)
   In $ETRAP handler. Error was:
^HELP("s","ISV","s","$ZMAXTPTIME",66)
   150377322,longtran+7^tptime,%YDB-E-TPTIMEOUT, Transaction timeoutRolled back transaction.
^HELP("s","ISV","s","$ZMAXTPTIME",67)
   ^X=3,will set ^Y to 9 in 9 seconds...
^HELP("s","ISV","s","$ZMAXTPTIME",68)
   In $ETRAP handler. Error was:
^HELP("s","ISV","s","$ZMAXTPTIME",69)
   150377322,longtran+7^tptime,%YDB-E-TPTIMEOUT, Transaction timeoutRolled back transaction.
^HELP("s","ISV","s","$ZMAXTPTIME",70)
   Done TP Timeout test.
^HELP("s","ISV","s","$ZMAXTPTIME",71)

^HELP("s","ISV","s","$ZMODE")
$ZMOde
^HELP("s","ISV","s","$ZMODE",1)
   $ZMOde
^HELP("s","ISV","s","$ZMODE",2)

^HELP("s","ISV","s","$ZMODE",3)
   $ZMO[DE] contains a string value indicating the process execution mode.
^HELP("s","ISV","s","$ZMODE",4)

^HELP("s","ISV","s","$ZMODE",5)
   The mode can be:
^HELP("s","ISV","s","$ZMODE",6)

^HELP("s","ISV","s","$ZMODE",7)
     * INTERACTIVE
^HELP("s","ISV","s","$ZMODE",8)
     * OTHER
^HELP("s","ISV","s","$ZMODE",9)

^HELP("s","ISV","s","$ZMODE",10)
   M routines cannot modify $ZMODE.
^HELP("s","ISV","s","$ZMODE",11)

^HELP("s","ISV","s","$ZMODE",12)
   Example:
^HELP("s","ISV","s","$ZMODE",13)

^HELP("s","ISV","s","$ZMODE",14)
   YDB>WRITE $ZMODE
^HELP("s","ISV","s","$ZMODE",15)
   INTERACTIVE
^HELP("s","ISV","s","$ZMODE",16)

^HELP("s","ISV","s","$ZMODE",17)
   This displays the process mode.
^HELP("s","ISV","s","$ZMODE",18)

^HELP("s","ISV","s","$ZONLNRLBK")
$ZONLNrlbk
^HELP("s","ISV","s","$ZONLNRLBK",1)
   $ZONLNrlbk
^HELP("s","ISV","s","$ZONLNRLBK",2)

^HELP("s","ISV","s","$ZONLNRLBK",3)
   $ZONLNRLBK increments every time a process detects a concurrent MUPIP
^HELP("s","ISV","s","$ZONLNRLBK",4)
   JOURNAL -ONLINE -ROLLBACK.
^HELP("s","ISV","s","$ZONLNRLBK",5)

^HELP("s","ISV","s","$ZONLNRLBK",6)
   YottaDB initializes $ZONLNRLBK to zero (0) at process startup. YottaDB does not
^HELP("s","ISV","s","$ZONLNRLBK",7)
   permit the SET or NEW commands to modify $ZONLNRLBK.
^HELP("s","ISV","s","$ZONLNRLBK",8)

^HELP("s","ISV","s","$ZPATNUMERIC")
$ZPATNumeric
^HELP("s","ISV","s","$ZPATNUMERIC",1)
   $ZPATNumeric
^HELP("s","ISV","s","$ZPATNUMERIC",2)

^HELP("s","ISV","s","$ZPATNUMERIC",3)
   $ZPATN[UMERIC] is a read-only intrinsic special variable that determines
^HELP("s","ISV","s","$ZPATNUMERIC",4)
   how YottaDB interprets the patcode "N" used in the pattern match operator.
^HELP("s","ISV","s","$ZPATNUMERIC",5)

^HELP("s","ISV","s","$ZPATNUMERIC",6)
   With $ZPATNUMERIC="UTF-8", the patcode "N" matches any numeric character
^HELP("s","ISV","s","$ZPATNUMERIC",7)
   as defined by UTF-8 encoding. With $ZPATNUMERIC="M", YottaDB restricts the
^HELP("s","ISV","s","$ZPATNUMERIC",8)
   patcode "N" to match only ASCII digits 0-9 (that is, ASCII 48-57). When a
^HELP("s","ISV","s","$ZPATNUMERIC",9)
   process starts in UTF-8 mode, intrinsic special variable $ZPATNUMERIC
^HELP("s","ISV","s","$ZPATNUMERIC",10)
   takes its value from the environment variable ydb_patnumeric. YottaDB
^HELP("s","ISV","s","$ZPATNUMERIC",11)
   initializes the intrinsic special variable $ZPATNUMERIC to "UTF-8" if the
^HELP("s","ISV","s","$ZPATNUMERIC",12)
   environment variable ydb_patnumeric is defined to "UTF-8". If the
^HELP("s","ISV","s","$ZPATNUMERIC",13)
   environment variable ydb_patnumeric is not defined or set to a value other
^HELP("s","ISV","s","$ZPATNUMERIC",14)
   than "UTF-8", YottaDB initializes $ZPATNUMERIC to "M".
^HELP("s","ISV","s","$ZPATNUMERIC",15)

^HELP("s","ISV","s","$ZPATNUMERIC",16)
   YottaDB populates $ZPATNUMERIC at process initialization from the environment
^HELP("s","ISV","s","$ZPATNUMERIC",17)
   variable ydb_patnumeric and does not allow the process to change the
^HELP("s","ISV","s","$ZPATNUMERIC",18)
   value.
^HELP("s","ISV","s","$ZPATNUMERIC",19)

^HELP("s","ISV","s","$ZPATNUMERIC",20)
   **Warning**
^HELP("s","ISV","s","$ZPATNUMERIC",21)

^HELP("s","ISV","s","$ZPATNUMERIC",22)
   YottaDB performs operations on literals at compile time and the pattern codes
^HELP("s","ISV","s","$ZPATNUMERIC",23)
   settings may have an impact on such operations. Therefore, always compile
^HELP("s","ISV","s","$ZPATNUMERIC",24)
   with the same pattern code settings as those used at runtime.
^HELP("s","ISV","s","$ZPATNUMERIC",25)

^HELP("s","ISV","s","$ZPATNUMERIC",26)
   For UTF-8 characters, YottaDB assigns patcodes based on the default
^HELP("s","ISV","s","$ZPATNUMERIC",27)
   classification of the Unicode(R) character set by the ICU library with
^HELP("s","ISV","s","$ZPATNUMERIC",28)
   three adjustments:
^HELP("s","ISV","s","$ZPATNUMERIC",29)

^HELP("s","ISV","s","$ZPATNUMERIC",30)
    1. If $ZPATNUMERIC is not "UTF-8", non-ASCII decimal digits are
^HELP("s","ISV","s","$ZPATNUMERIC",31)
       classified as A.
^HELP("s","ISV","s","$ZPATNUMERIC",32)
    2. Non-decimal numerics (Nl and No) are classified as A.
^HELP("s","ISV","s","$ZPATNUMERIC",33)
    3. The remaining characters (those not classified by ICU functions:
^HELP("s","ISV","s","$ZPATNUMERIC",34)
       u_isalpha, u_isdigit, u_ispunct, u_iscntrl, 1), or 2) above) are
^HELP("s","ISV","s","$ZPATNUMERIC",35)
       classified into either patcode P or C. The ICU function u_isprint is
^HELP("s","ISV","s","$ZPATNUMERIC",36)
       used since is returns "TRUE" for non-control characters.
^HELP("s","ISV","s","$ZPATNUMERIC",37)

^HELP("s","ISV","s","$ZPATNUMERIC",38)
   The following table contains the resulting general category as per the
^HELP("s","ISV","s","$ZPATNUMERIC",39)
   Unicode standard to M patcode mapping:
^HELP("s","ISV","s","$ZPATNUMERIC",40)

^HELP("s","ISV","s","$ZPATNUMERIC",41)
   +------------------------------------------------------------------------+
^HELP("s","ISV","s","$ZPATNUMERIC",42)
   | General category as per the  |        YottaDB patcode class            |
^HELP("s","ISV","s","$ZPATNUMERIC",43)
   |     Unicode(R) standard      |                                         |
^HELP("s","ISV","s","$ZPATNUMERIC",44)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",45)
   | L* (all letters)             | A                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",46)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",47)
   | M* (all marks)               | P                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",48)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",49)
   | Nd (decimal numbers)         | N (if decimal digit is ASCII or         |
^HELP("s","ISV","s","$ZPATNUMERIC",50)
   |                              | $ZPATNUMERIC is "UTF-8", otherwise A    |
^HELP("s","ISV","s","$ZPATNUMERIC",51)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",52)
   | Nl (letter numbers)          | A (examples of Nl are Roman numerals)   |
^HELP("s","ISV","s","$ZPATNUMERIC",53)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",54)
   | No (other numbers)           | A (examples of No are fractions)        |
^HELP("s","ISV","s","$ZPATNUMERIC",55)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",56)
   | P* (all punctuation)         | P                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",57)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",58)
   | S* (all symbols)             | P                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",59)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",60)
   | Zs (spaces)                  | P                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",61)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",62)
   | Zl (line separators)         | C                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",63)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",64)
   | Zp (paragraph separators)    | C                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",65)
   |------------------------------+-----------------------------------------|
^HELP("s","ISV","s","$ZPATNUMERIC",66)
   | C* (all control code points) | C                                       |
^HELP("s","ISV","s","$ZPATNUMERIC",67)
   +------------------------------------------------------------------------+
^HELP("s","ISV","s","$ZPATNUMERIC",68)

^HELP("s","ISV","s","$ZPATNUMERIC",69)
   For a description of the Unicode general categories, refer to
^HELP("s","ISV","s","$ZPATNUMERIC",70)
   http://unicode.org/charts/.
^HELP("s","ISV","s","$ZPATNUMERIC",71)

^HELP("s","ISV","s","$ZPATNUMERIC",72)
   Example:
^HELP("s","ISV","s","$ZPATNUMERIC",73)

^HELP("s","ISV","s","$ZPATNUMERIC",74)
   YDB>write $zpatnumeric
^HELP("s","ISV","s","$ZPATNUMERIC",75)
   UTF-8
^HELP("s","ISV","s","$ZPATNUMERIC",76)
   YDB>Write $Char($$FUNC^%HD("D67"))?.N ; This is the Malayalam decimal digit 1
^HELP("s","ISV","s","$ZPATNUMERIC",77)
   1
^HELP("s","ISV","s","$ZPATNUMERIC",78)
   YDB>Write 1+$Char($$FUNC^%HD("D67"))
^HELP("s","ISV","s","$ZPATNUMERIC",79)
   1
^HELP("s","ISV","s","$ZPATNUMERIC",80)
   YDB>Write 1+$Char($$FUNC^%HD("31")) ; This is the ASCII digit 1
^HELP("s","ISV","s","$ZPATNUMERIC",81)
   2
^HELP("s","ISV","s","$ZPATNUMERIC",82)

^HELP("s","ISV","s","$ZPIN")
$ZPIN
^HELP("s","ISV","s","$ZPIN",1)
   $ZPIN
^HELP("s","ISV","s","$ZPIN",2)

^HELP("s","ISV","s","$ZPIN",3)
   When $PRINCIPAL has different input/output devices, the USE command
^HELP("s","ISV","s","$ZPIN",4)
   recognizes intrinsic special variable $ZPIN to apply appropriate
^HELP("s","ISV","s","$ZPIN",5)
   deviceparameters to the input side of $PRINCIPAL. A USE with $ZPIN sets
^HELP("s","ISV","s","$ZPIN",6)
   $IO to $PRINCIPAL for READs and WRITEs from the input and output side of
^HELP("s","ISV","s","$ZPIN",7)
   $PRINCIPAL. $ZSOCKET() also accepts $ZPIN as its first argument and, if
^HELP("s","ISV","s","$ZPIN",8)
   the device is a split SOCKET device, supplies information on the input
^HELP("s","ISV","s","$ZPIN",9)
   SOCKET device. In any context other than USE or $ZSOCKET(), or if
^HELP("s","ISV","s","$ZPIN",10)
   $PRINCIPAL is not a split device, $PRINCIPAL, $ZPIN and $ZPOUT are
^HELP("s","ISV","s","$ZPIN",11)
   synonyms. In the case of a split $PRINCIPAL, $ZPIN returns the value of
^HELP("s","ISV","s","$ZPIN",12)
   $PRINCIPAL followed by the string "< /" Any attempt to OPEN $ZPIN results
^HELP("s","ISV","s","$ZPIN",13)
   in a DEVOPENFAIL error.
^HELP("s","ISV","s","$ZPIN",14)

^HELP("s","ISV","s","$ZPIN",15)
   For more information refer to "$Principal", "$ZPOUT", and
^HELP("s","ISV","s","$ZPIN",16)
   "$ZSOCKET()".
^HELP("s","ISV","s","$ZPIN",17)

^HELP("s","ISV","s","$ZPOSITION")
$ZPOSition
^HELP("s","ISV","s","$ZPOSITION",1)
   $ZPOSition
^HELP("s","ISV","s","$ZPOSITION",2)

^HELP("s","ISV","s","$ZPOSITION",3)
   $ZPOS[ITION] contains a string value specifying the current entryref,
^HELP("s","ISV","s","$ZPOSITION",4)
   where entryref is [label][+offset]^routine, and the offset is evaluated
^HELP("s","ISV","s","$ZPOSITION",5)
   from the closest preceding label.
^HELP("s","ISV","s","$ZPOSITION",6)

^HELP("s","ISV","s","$ZPOSITION",7)
   YottaDB does not permit the SET or NEW commands to modify $ZPOSITION.
^HELP("s","ISV","s","$ZPOSITION",8)

^HELP("s","ISV","s","$ZPOSITION",9)
   Example:
^HELP("s","ISV","s","$ZPOSITION",10)

^HELP("s","ISV","s","$ZPOSITION",11)
   YDB>WRITE !,$ZPOS,! ZPRINT @$ZPOS
^HELP("s","ISV","s","$ZPOSITION",12)

^HELP("s","ISV","s","$ZPOSITION",13)
   This example displays the current location followed by the source code for
^HELP("s","ISV","s","$ZPOSITION",14)
   that line.
^HELP("s","ISV","s","$ZPOSITION",15)

^HELP("s","ISV","s","$ZPOUT")
$ZPOUT
^HELP("s","ISV","s","$ZPOUT",1)
   $ZPOUT
^HELP("s","ISV","s","$ZPOUT",2)

^HELP("s","ISV","s","$ZPOUT",3)
   When $PRINCIPAL has different input/output devices, the USE command
^HELP("s","ISV","s","$ZPOUT",4)
   recognizes intrinsic special variables $ZPOUT to apply appropriate
^HELP("s","ISV","s","$ZPOUT",5)
   deviceparameters to the output side of $PRINCIPAL. A USE with $ZPOUT sets
^HELP("s","ISV","s","$ZPOUT",6)
   $IO to $PRINCIPAL for READs and WRITEs from the input and output side of
^HELP("s","ISV","s","$ZPOUT",7)
   $PRINCIPAL. $ZSOCKET() also accepts $ZPOUT as its first argument and, if
^HELP("s","ISV","s","$ZPOUT",8)
   the device is a split SOCKET device, supplies information on the output
^HELP("s","ISV","s","$ZPOUT",9)
   SOCKET device. In any context other than USE or $ZSOCKET(), or if
^HELP("s","ISV","s","$ZPOUT",10)
   $PRINCIPAL is not a split device, $PRINCIPAL, $ZPIN and $ZPOUT are
^HELP("s","ISV","s","$ZPOUT",11)
   synonyms. In the case of a split $PRINCIPAL, $ZPOUT returns the value of
^HELP("s","ISV","s","$ZPOUT",12)
   $PRINCIPAL followed by the string "> /" Any attempt to OPEN $ZPOUT results
^HELP("s","ISV","s","$ZPOUT",13)
   in a DEVOPENFAIL error.
^HELP("s","ISV","s","$ZPOUT",14)

^HELP("s","ISV","s","$ZPOUT",15)
   For more information refer to "$Principal", "$ZPIN", and
^HELP("s","ISV","s","$ZPOUT",16)
   "$ZSOCKET()".
^HELP("s","ISV","s","$ZPOUT",17)

^HELP("s","ISV","s","$ZPOUT",18)
   Example:
^HELP("s","ISV","s","$ZPOUT",19)

^HELP("s","ISV","s","$ZPOUT",20)
   ;zpioin
^HELP("s","ISV","s","$ZPOUT",21)
   ;123456789012345678901234567890123456789012345678901234567890
^HELP("s","ISV","s","$ZPOUT",22)
   ;A12345678901234567890123456789012345678901234567890123456789
^HELP("s","ISV","s","$ZPOUT",23)
   zpio
^HELP("s","ISV","s","$ZPOUT",24)
     ; mumps -r zpio < zpioin
^HELP("s","ISV","s","$ZPOUT",25)
     write "$PRINCIPAL = ",$P,!
^HELP("s","ISV","s","$ZPOUT",26)
     write "$ZPIN = ",$ZPIN,!
^HELP("s","ISV","s","$ZPOUT",27)
     write "$ZPOUT = ",$ZPOUT,!
^HELP("s","ISV","s","$ZPOUT",28)
     write "Read first line from zpioin with default settings",!
^HELP("s","ISV","s","$ZPOUT",29)
     read x
^HELP("s","ISV","s","$ZPOUT",30)
     write x,!
^HELP("s","ISV","s","$ZPOUT",31)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",32)
     use $ZPIN:(wrap:width=50)
^HELP("s","ISV","s","$ZPOUT",33)
     write "After $ZPIN set to wrap and width set to 50",!
^HELP("s","ISV","s","$ZPOUT",34)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",35)
     write "Read next 50 characters from zpioin",!
^HELP("s","ISV","s","$ZPOUT",36)
     read y
^HELP("s","ISV","s","$ZPOUT",37)
     write y,!
^HELP("s","ISV","s","$ZPOUT",38)
     use $ZPOUT:wrap
^HELP("s","ISV","s","$ZPOUT",39)
     use $ZPIN:nowrap
^HELP("s","ISV","s","$ZPOUT",40)
     write "After $ZPOUT set to wrap and $ZPIN set to nowrap",!
^HELP("s","ISV","s","$ZPOUT",41)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",42)
     use $ZPOUT:nowrap
^HELP("s","ISV","s","$ZPOUT",43)
     write "After $ZPOUT set to nowrap",!
^HELP("s","ISV","s","$ZPOUT",44)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",45)
     use $P:wrap
^HELP("s","ISV","s","$ZPOUT",46)
     write "After $P set to wrap",!
^HELP("s","ISV","s","$ZPOUT",47)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",48)
     use $ZPOUT:width=40
^HELP("s","ISV","s","$ZPOUT",49)
     write "After $ZPOUT width set to 40",!
^HELP("s","ISV","s","$ZPOUT",50)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",51)
     use $ZPOUT:nowrap
^HELP("s","ISV","s","$ZPOUT",52)
     write "After $ZPOUT set to nowrap",!
^HELP("s","ISV","s","$ZPOUT",53)
     zshow "d"
^HELP("s","ISV","s","$ZPOUT",54)
     write x,!
^HELP("s","ISV","s","$ZPOUT",55)
     quit
^HELP("s","ISV","s","$ZPOUT",56)

^HELP("s","ISV","s","$ZPROMPT")
$ZPROMpt
^HELP("s","ISV","s","$ZPROMPT",1)
   $ZPROMpt
^HELP("s","ISV","s","$ZPROMPT",2)

^HELP("s","ISV","s","$ZPROMPT",3)
   $ZPROM[PT] contains a string value specifying the current Direct Mode
^HELP("s","ISV","s","$ZPROMPT",4)
   prompt. By default, YDB>is the Direct Mode prompt. M routines can modify
^HELP("s","ISV","s","$ZPROMPT",5)
   $ZPROMPT by means of a SET command. $ZPROMPT cannot exceed 16 characters.
^HELP("s","ISV","s","$ZPROMPT",6)
   If an attempt is made to assign $ZPROMPT to a longer string, only the
^HELP("s","ISV","s","$ZPROMPT",7)
   first 16 characters will be taken.
^HELP("s","ISV","s","$ZPROMPT",8)

^HELP("s","ISV","s","$ZPROMPT",9)
   In UTF-8 mode, if the 31st byte is not the end of a valid UTF-8 character,
^HELP("s","ISV","s","$ZPROMPT",10)
   YottaDB truncates the $ZPROMPT value at the end of last character that
^HELP("s","ISV","s","$ZPROMPT",11)
   completely fits within the 31 byte limit.
^HELP("s","ISV","s","$ZPROMPT",12)

^HELP("s","ISV","s","$ZPROMPT",13)
   The environment ydb_prompt initializes $ZPROMPT at process startup.
^HELP("s","ISV","s","$ZPROMPT",14)

^HELP("s","ISV","s","$ZPROMPT",15)
   Example:
^HELP("s","ISV","s","$ZPROMPT",16)

^HELP("s","ISV","s","$ZPROMPT",17)
   YDB>set $zprompt="Test01">"
^HELP("s","ISV","s","$ZPROMPT",18)
   Test01>set $zprompt="YDB>"
^HELP("s","ISV","s","$ZPROMPT",19)

^HELP("s","ISV","s","$ZPROMPT",20)
   This example changes the YottaDB prompt to Test01> and then back to YDB>.
^HELP("s","ISV","s","$ZPROMPT",21)

^HELP("s","ISV","s","$ZQUIT")
$ZQuit
^HELP("s","ISV","s","$ZQUIT",1)
   $ZQuit
^HELP("s","ISV","s","$ZQUIT",2)

^HELP("s","ISV","s","$ZQUIT",3)
   $ZQUIT indicates whether the functionality associated with the
^HELP("s","ISV","s","$ZQUIT",4)
   ydb_zquit_anyway environment variable is enabled. If the environment
^HELP("s","ISV","s","$ZQUIT",5)
   variable ydb_zquit_anyway is defined and evaluates to 1 or any
^HELP("s","ISV","s","$ZQUIT",6)
   case-independent string or leading substrings of "TRUE" or "YES", YottaDB
^HELP("s","ISV","s","$ZQUIT",7)
   sets $ZQUIT to 1 and executes code of the form QUIT <expr< as if it were
^HELP("s","ISV","s","$ZQUIT",8)
   SET <tmp>=<expr> QUIT:$QUIT tmp QUIT, where <tmp> is a temporary local
^HELP("s","ISV","s","$ZQUIT",9)
   variable in the YottaDB runtime system that is not visible to the application
^HELP("s","ISV","s","$ZQUIT",10)
   code. The value of $ZQUIT is a compile time setting, that is it can be set
^HELP("s","ISV","s","$ZQUIT",11)
   during run-time but it has no effect on the behavior existing object code
^HELP("s","ISV","s","$ZQUIT",12)
   - it only effects code generated by auto-ZLINK or the ZCOMPILE command.
^HELP("s","ISV","s","$ZQUIT",13)
   This setting has no effect on late bound code such as that in XECUTE
^HELP("s","ISV","s","$ZQUIT",14)
   arguments, $ETRAP, $ZTRAP device EXCEPTIONS.
^HELP("s","ISV","s","$ZQUIT",15)

^HELP("s","ISV","s","$ZQUIT",16)
   If ydb_zquit_anyway is not defined or evaluates to 0 or any
^HELP("s","ISV","s","$ZQUIT",17)
   case-independent string or leading substrings of "FALSE" or "NO", YottaDB sets
^HELP("s","ISV","s","$ZQUIT",18)
   $ZQUIT to 0 executes QUIT <expr> as specified by the standard. This
^HELP("s","ISV","s","$ZQUIT",19)
   feature is helpful when you want to run a block of code both as a routine
^HELP("s","ISV","s","$ZQUIT",20)
   and as an extrinsic function. Consider the following example:
^HELP("s","ISV","s","$ZQUIT",21)

^HELP("s","ISV","s","$ZQUIT",22)
   YDB>zprint ^rtnasfunc
^HELP("s","ISV","s","$ZQUIT",23)
   rtnasfunc(expr1)
^HELP("s","ISV","s","$ZQUIT",24)
     write "Hello ",expr1,!
^HELP("s","ISV","s","$ZQUIT",25)
     quit
^HELP("s","ISV","s","$ZQUIT",26)

^HELP("s","ISV","s","$ZQUIT",27)
   When the ydb_zquit_anyway functionality is diabled, extrinsic function
^HELP("s","ISV","s","$ZQUIT",28)
   invocations return an error as per the standard.
^HELP("s","ISV","s","$ZQUIT",29)

^HELP("s","ISV","s","$ZQUIT",30)
   YDB>write $zquit
^HELP("s","ISV","s","$ZQUIT",31)
   0
^HELP("s","ISV","s","$ZQUIT",32)
   YDB>write $$^rtnasfunc("jdoe")
^HELP("s","ISV","s","$ZQUIT",33)
   Hello jdoe
^HELP("s","ISV","s","$ZQUIT",34)
     %GTM-E-QUITARGREQD, Quit from an extrinsic must have an argument
^HELP("s","ISV","s","$ZQUIT",35)

^HELP("s","ISV","s","$ZQUIT",36)
   However, if you enable the ydb_zquit_anyway feature, extrinsic function
^HELP("s","ISV","s","$ZQUIT",37)
   invocations do not return an error.
^HELP("s","ISV","s","$ZQUIT",38)

^HELP("s","ISV","s","$ZQUIT",39)
   YDB>write $zquit
^HELP("s","ISV","s","$ZQUIT",40)
   1
^HELP("s","ISV","s","$ZQUIT",41)
   YDB>write $$^rtnasfunc("jdoe")
^HELP("s","ISV","s","$ZQUIT",42)
   Hello jdoe
^HELP("s","ISV","s","$ZQUIT",43)
   YDB>
^HELP("s","ISV","s","$ZQUIT",44)

^HELP("s","ISV","s","$ZREALSTOR")
$ZREalstor
^HELP("s","ISV","s","$ZREALSTOR",1)
   $ZREalstor
^HELP("s","ISV","s","$ZREALSTOR",2)

^HELP("s","ISV","s","$ZREALSTOR",3)
   $ZREALSTOR contains the total memory (in bytes) allocated by the YottaDB
^HELP("s","ISV","s","$ZREALSTOR",4)
   process, which may or may not actually be in use. It provides one view
^HELP("s","ISV","s","$ZREALSTOR",5)
   (see also $ZALLOCSTOR and ZUSEDSTOR) of the process memory utilization and
^HELP("s","ISV","s","$ZREALSTOR",6)
   can help identify storage related problems. YottaDB does not permit
^HELP("s","ISV","s","$ZREALSTOR",7)
   $ZREALSTOR to be SET or NEWed.
^HELP("s","ISV","s","$ZREALSTOR",8)

^HELP("s","ISV","s","$ZRELDATE")
$ZRELdate
^HELP("s","ISV","s","$ZRELDATE",1)
   $ZRELdate
^HELP("s","ISV","s","$ZRELDATE",2)

^HELP("s","ISV","s","$ZRELDATE",3)
   $ZRELDATE provides the UTC date / time of the YottaDB build in the form
^HELP("s","ISV","s","$ZRELDATE",4)
   YYYYMMDD 24:60 (using $ZDATE() notation). While $ZVERSION is probably a
^HELP("s","ISV","s","$ZRELDATE",5)
   better identifier for most uses, $ZRELDATE may be a helpful alternative
^HELP("s","ISV","s","$ZRELDATE",6)
   for those testing pre-release builds.
^HELP("s","ISV","s","$ZRELDATE",7)

^HELP("s","ISV","s","$ZROUTINES")
$ZROutines
^HELP("s","ISV","s","$ZROUTINES",1)
   $ZROutines
^HELP("s","ISV","s","$ZROUTINES",2)

^HELP("s","ISV","s","$ZROUTINES",3)
   $ZRO[UTINES] contains a string value specifying a directory or list of
^HELP("s","ISV","s","$ZROUTINES",4)
   directories containing object files. Each object directory may also have
^HELP("s","ISV","s","$ZROUTINES",5)
   an associated directory, or list of directories, containing the
^HELP("s","ISV","s","$ZROUTINES",6)
   corresponding source files. These directory lists are used by certain YottaDB
^HELP("s","ISV","s","$ZROUTINES",7)
   functions, primarily auto-ZLINK, to locate object and source files. The
^HELP("s","ISV","s","$ZROUTINES",8)
   order in which directories appear in a given list determines the order in
^HELP("s","ISV","s","$ZROUTINES",9)
   which they are searched for the appropriate item.
^HELP("s","ISV","s","$ZROUTINES",10)

^HELP("s","ISV","s","$ZROUTINES",11)
   Searches that use $ZROUTINES treat files as either object or source files.
^HELP("s","ISV","s","$ZROUTINES",12)
   YottaDB treats files with an extension of .o as object files and files with
^HELP("s","ISV","s","$ZROUTINES",13)
   an extension of .m as source files.
^HELP("s","ISV","s","$ZROUTINES",14)

^HELP("s","ISV","s","$ZROUTINES",15)
   **Note**
^HELP("s","ISV","s","$ZROUTINES",16)

^HELP("s","ISV","s","$ZROUTINES",17)
   Paths used in $ZROUTINES to locate routines must not include embedded
^HELP("s","ISV","s","$ZROUTINES",18)
   spaces, as $ZROUTINES uses spaces as delimiters.
^HELP("s","ISV","s","$ZROUTINES",19)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES")
$ZROutines_Examples
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",1)
   $ZROutines Examples
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",2)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",3)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",4)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",5)
   YDB>s $zroutines=".(../src) $ydb_dist"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",6)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",7)
   This example directs YottaDB to look for object modules first in your current
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",8)
   directory, then in the distribution directory that contains the percent
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",9)
   routines. YottaDB locates sources for objects in your current directory in
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",10)
   the sibling /src directory.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",11)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",12)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",13)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",14)
   $ ydb_routines="/usr/jones /usr/smith"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",15)
   $ export ydb_routines
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",16)
   $ gtm
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",17)
   YDB>write $zroutines
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",18)
   "/usr/jones /usr/smith"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",19)
   YDB>set $zro="/usr/jones/utl /usr/smith/utl"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",20)
   YDB>write $zroutines
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",21)
   "/usr/jones/utl /usr/smith/utl"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",22)
   YDB>halt
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",23)
   $ echo $ydb_routines
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",24)
   /usr/jones /usr/smith
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",25)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",26)
   This example defines the environment variable ydb_routines. Upon entering
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",27)
   YottaDB Direct Mode $zroutines has the value supplied by ydb_routines. The SET
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",28)
   command changes the value. When the YottaDB image terminates, the shell echo
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",29)
   command demonstrates that ydb_routines has not been modified by the M SET
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",30)
   command.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",31)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",32)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",33)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",34)
   YDB>SET $ZRO=". /usr/smith"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",35)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",36)
   This example sets $zroutines to a list containing two directories.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",37)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",38)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",39)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",40)
   YDB>set $zro="/usr/smith(/usr/smith/tax /usr/smith/fica)"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",41)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",42)
   This example specifies that YottaDB should search the directory /usr/smith
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",43)
   for object files, and the directories /usr/smith/tax and /usr/smith/fica
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",44)
   for source files. Note that in this example. YottaDB does not search
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",45)
   /usr/smith for source files.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",46)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",47)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",48)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",49)
   YDB>set $zro="/usr/smith(/usr/smith /usr/smith/tax /usr/smith/fica)"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",50)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",51)
   This example specifies that YottaDB should search the directory /usr/smith
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",52)
   for object files and the directories /usr/smith/tax and /usr/smith/fica
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",53)
   for source files. Note that the difference between this example and the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",54)
   previous one is that YottaDB searches /usr/smith for both object and source
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",55)
   files.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",56)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",57)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",58)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",59)
   YDB>set $zro="/usr/smith /usr/smith/tax() /usr/smith/fica"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",60)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",61)
   This specifies that YottaDB should search /usr/smith and /usr/smith/fica for
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",62)
   object and source files. However, because the empty parentheses indicate
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",63)
   directories searched only for object files, YottaDB does not search
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",64)
   /usr/smith/tax for source files.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",65)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",66)
   Omitting the parentheses indicates that YottaDB can search the directory for
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",67)
   both source and object files. $ZROUTINES=/usr/smith is equivalent to
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",68)
   $ZROUTINES=/usr/smith(/usr/smith).
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_EXAMPLES",69)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES")
$ZROutines_Search_Examples
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",1)
   $ZROutines Search Examples
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",2)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",3)
   This section describes a model for understanding $ZROUTINES operations and
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",4)
   the illustrating examples, which may assist you if you wish to examine the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",5)
   topic closely.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",6)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",7)
   You may think of $ZROUTINES as supplying a two dimensional matrix of
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",8)
   places to look for files. The matrix has one or more rows. The first row
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",9)
   in the matrix contains places to look for object and the second and
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",10)
   following rows contain places to look for source. Each column represents
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",11)
   the set of places that contain information related to the object modules
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",12)
   in the first row of the column.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",13)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",14)
   Example:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",15)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",16)
   YDB>s $zro=". /usr/smi/utl() /usr/jon/utl
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",17)
   (/usr/jon/utl/so /usr/smi/utl)"
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",18)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",19)
   The following table illustrates the matrix view of this $ZROUTINES.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",20)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",21)
   +--------------------------------------------------------+
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",22)
   |                $ZROUTINES Search Matrix                |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",23)
   |--------------------------------------------------------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",24)
   | SEARCH FOR | Column 1 |   Column 2   |    Column 3     |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",25)
   |------------+----------+--------------+-----------------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",26)
   | OBJECTS    | .        | /usr/smi/utl | /usr/jon/utl    |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",27)
   |------------+----------+--------------+-----------------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",28)
   | SOURCE     | .        |              | /usr/jon/utl/so |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",29)
   |------------+----------+--------------+-----------------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",30)
   |            |          |              | /usr/smi/utl    |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",31)
   +--------------------------------------------------------+
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",32)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",33)
   To perform object-only searches, YottaDB searches only the directories or
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",34)
   object libraries in the top 'objects' row for each column starting at
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",35)
   column one. If YottaDB does not locate the object file in a directory or
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",36)
   object library in the 'objects' row of a column, YottaDB begins searching
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",37)
   again in the next column. If YottaDB cannot locate the file in any of the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",38)
   columns, it issues a run-time error.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",39)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",40)
   As illustrated in the preceding table, YottaDB searches for object files in
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",41)
   the directories . ,/usr/smi/utl and /usr/jon/utl.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",42)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",43)
   To perform source-only searches, YottaDB looks down to the 'source' row at
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",44)
   the bottom of each column, excluding columns headed by object-only
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",45)
   directories (that is, those object directories, which consist of an empty
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",46)
   list of source directories) or object libraries. If YottaDB cannot locate the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",47)
   source file in the 'source' row of a column, it searches the next eligible
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",48)
   column.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",49)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",50)
   To perform object-source match searches, YottaDB looks at each column
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",51)
   starting at column one. YottaDB does an object-only search in the 'objects'
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",52)
   row of a column and a source-only search in the 'source' row(s) of a
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",53)
   column. If YottaDB locates either the object-file or the souce-file, the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",54)
   search is completed. Else, YottaDB starts searching the next column. If YottaDB
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",55)
   cannot locate either the object file or the source file in any of the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",56)
   columns, it issues a run-time error.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",57)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",58)
   As illustrated in the preceding table, YottaDB searches for source-files in
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",59)
   the directory "." in column one. If YottaDB cannot locate the source file in
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",60)
   ".", it omits column two because it is an object-only directory and
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",61)
   instead searches column three. Since column three specifies
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",62)
   /usr/jon/utl/so and /usr/smi/utl, YottaDB searches for the source-file in
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",63)
   these directories in column three and not in /usr/jon/utl. If YottaDB cannot
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",64)
   locate the source-file in column three, it terminates the search and
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",65)
   issues a run-time error.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",66)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",67)
   Once the object-source match search is done, YottaDB now has either the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",68)
   object-file or source-file or both available. YottaDB then recompiles the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",69)
   source-file based on certain conditions, before linking the object-file
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",70)
   into the current image.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",71)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",72)
   If auto-ZLINK or ZLINK determines that the source file requires
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",73)
   [re]compilation, YottaDB places the object file in the above object directory
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",74)
   in the same column as the source file. For example, if YottaDB locates the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",75)
   source file in /usr/smi/utl in column three, YottaDB places the resultant
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",76)
   object file in /usr/jon/utl.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_EXAMPLES",77)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES")
$ZROutines_Search_Types
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",1)
   $ZROutines Search Types
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",2)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",3)
   YottaDB uses $ZRO[UTINES] to perform three types of searches:
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",4)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",5)
     * Object-only when the command or function using $ZROUTINES requires a
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",6)
       .o file extension.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",7)
     * Source-only when the command or function using $ZROUTINES requires a
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",8)
       file extension other than .o.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",9)
     * Object-source match when the command or function using $ZROUTINES does
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",10)
       not specify a file extension.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",11)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",12)
   An explicit ZLINK that specifies a non .OBJ .o extension is considered as
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",13)
   a function that has not specified a file extension for the above searching
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",14)
   purposes.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",15)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",16)
   All searches proceed from left to right through $ZROUTINES. By default,
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",17)
   YottaDB searches directories for both source and object files. YottaDB searches
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",18)
   directories followed by empty parentheses ( ) for object files only. YottaDB
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",19)
   searches directories in parentheses only for source files.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",20)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",21)
   Once an object-matching search locates an object file, the source search
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",22)
   becomes limited. If the directory containing the object file has an
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",23)
   attached parenthetical list of directories, YottaDB only searches the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",24)
   directories in the attached list for matching source files. If the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",25)
   directory containing the object files does not have following parentheses,
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",26)
   YottaDB restricts the search for matching source files to the same directory.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",27)
   If the object module is in a directory qualified by empty parentheses,
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",28)
   YottaDB cannot perform any operation that refers to the source file.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",29)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",30)
   The following table shows YottaDB commands and functions using $ZROUTINES and
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",31)
   the search types they support.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",32)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",33)
   +------------------------------------------------------+
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",34)
   |      YottaDB Commands and $ZROUTINES Search Types    |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",35)
   |------------------------------------------------------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",36)
   |  SEARCH/   |   FILE    |                             |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",37)
   |  FUNCTION  | EXTENSION |         SEARCH TYPE         |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",38)
   |            | SPECIFIED |                             |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",39)
   |------------+-----------+-----------------------------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",40)
   |            |           | OBJ-ONLY | SRC-ONLY | MATCH |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",41)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",42)
   | EXPLICIT   |           |          |          |       |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",43)
   |            | .o        | X        |          |       |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",44)
   | ZLINK      |           |          |          |       |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",45)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",46)
   |            | Not .o    |          |          | X     |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",47)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",48)
   |            | None      |          |          | X     |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",49)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",50)
   | AUTO-ZLINK | None      |          |          | X     |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",51)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",52)
   | ZEDIT      | Not .o    |          | X        |       |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",53)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",54)
   | ZPRINT     | None      |          | X        |       |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",55)
   |------------+-----------+----------+----------+-------|
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",56)
   | $TEXT      | None      |          | X        |       |
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",57)
   +------------------------------------------------------+
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",58)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",59)
   If ZPRINT or $TEXT() require a source module for a routine that is not in
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",60)
   the current image, YottaDB first performs an auto-ZLINK with a matching
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",61)
   search.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",62)

^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",63)
   ZPRINT or $TEXT locate the source module using a file specification for
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",64)
   the source file located in the object module. If YottaDB finds the source
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",65)
   module in the directory where it was when it was compiled, the run-time
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",66)
   system does not use $ZROUTINES. If YottaDB cannot find the source file in the
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",67)
   indicated location, the run-time system uses $ZROUTINES.
^HELP("s","ISV","s","$ZROUTINES","s","$ZROUTINES_SEARCH_TYPES",68)

^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES")
Establishing_the_Value_from_$ydb_routines
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",1)
   Establishing the Value from $ydb_routines
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",2)

^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",3)
   When the environment variable ydb_routines is defined, YottaDB initializes
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",4)
   $ZROUTINES to the value of ydb_routines. Otherwise, YottaDB initializes
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",5)
   $ZROUTINES to ".". When $ZROUTINES is ".", YottaDB attempts to locate all
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",6)
   source and object files in the current working directory. $ZROUTINES="" is
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",7)
   equivalent to $ZROUTINES=".".
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",8)

^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",9)
   Commands or functions such as DO, GOTO, ZGOTO, ZBREAK, ZPRINT, and $TEXT
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",10)
   may auto-ZLINK and thereby indirectly use $ZROUTINES. If their argument
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",11)
   does not specify a directory, ZEDIT and explicit ZLINK use $ZROUTINES.
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",12)
   ZPRINT and $TEXT use $ZROUTINES to locate a source file if YottaDB cannot
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",13)
   find the source file pointed to by the object file.
^HELP("s","ISV","s","$ZROUTINES","s","ESTABLISHING_THE_VALUE_FROM_$YDB_ROUTINES",14)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES")
Setting_a_Value_for_$ZROutines
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",1)
   Setting a Value for $ZROutines
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",2)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",3)
   $ZRO[UTINES] is a read-write Intrinsic Special Variable, so M can also SET
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",4)
   the value.
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",5)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",6)
   By default, each directory entry in $ZROUTINES is assumed to contain both
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",7)
   object and source files. However, each object directory may have an
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",8)
   associated directory or list of directories to search for the
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",9)
   corresponding source files. This is done by specifying the source
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",10)
   directory list, in parentheses, following the object directory
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",11)
   specification.
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",12)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",13)
   If the command specifies more than one source directory for an object
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",14)
   directory, the source directories must be separated by spaces, and the
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",15)
   entire list must be enclosed in parentheses ( ) following the object
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",16)
   directory-specification. If the object directory should also be searched
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",17)
   for source, the name of that directory must be included in the
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",18)
   parentheses, (usually as the first element in the list).
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",19)
   Directory-specifications may also include empty parentheses, directing
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",20)
   YottaDB to proceed as if no source files exist for objects located in the
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",21)
   qualified directory.
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",22)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",23)
   To set $ZROUTINES outside of M, use the appropriate shell command to set
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",24)
   ydb_routines. Because ydb_routines is a list, enclose the value in quotation
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",25)
   marks (" ").
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",26)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",27)
   Changes to the value of $ZROUTINES during a YottaDB invocation only last for
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",28)
   the current invocation, and do not change the value of ydb_routines.
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",29)

^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",30)
   Directory specifications may include an environment variable. When YottaDB
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",31)
   SETs $ZROUTINES, it translates all environment variables and verifies the
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",32)
   syntax and the existence of all specified directories. If $ZROUTINES is
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",33)
   set to an invalid value, YottaDB generates a run-time error and does not
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",34)
   change the value of $ZROUTINES. Because the environment variables are
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",35)
   translated when $ZROUTINES is set, any changes to their definition have no
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",36)
   effect until $ZROUTINES is set again.
^HELP("s","ISV","s","$ZROUTINES","s","SETTING_A_VALUE_FOR_$ZROUTINES",37)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES")
Shared_Library_File_Specification_in_$ZROUTINES
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",1)
   Shared Library File Specification in $ZROUTINES
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",2)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",3)
   The $ZROUTINES ISV allows individual UNIX shared library file names to be
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",4)
   specified in the search path. During a search for auto-ZLINK, when a
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",5)
   shared library is encountered, it is probed for a given routine and, if
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",6)
   found, that routine is linked/loaded into the image. During an explicit
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",7)
   ZLINK, all shared libraries in $ZROUTINES are ignored and are not searched
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",8)
   for a given routine.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",9)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",10)
   $ZROUTINES syntax contains a file-specification indicating shared library
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",11)
   file path. YottaDB does not require any designated extension for the shared
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",12)
   library component of $ZROUTINES. Any file specification that does not name
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",13)
   a directory is treated as shared library. However, it is recommended that
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",14)
   the extension commonly used on a given platform for shared library files
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",15)
   be given to any YottaDB shared libraries. A shared library component cannot
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",16)
   specify source directories. YottaDB reports an error at an attempt to
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",17)
   associate any source directory with a shared library in $ZROUTINES.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",18)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",19)
   The following traits of $ZROUTINES help support shared libraries:
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",20)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",21)
     * The $ZROUTINES search continues to find objects in the first place,
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",22)
       processing from left to right, that holds a copy; it ignores any
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",23)
       copies in subsequent locations. However, now for auto-ZLINK, shared
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",24)
       libraries are accepted as object repositories with the same ability to
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",25)
       supply objects as directories.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",26)
     * Explicit ZLINK, never searches Shared Libraries. This is because
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",27)
       explicit ZLINK is used to link a newly created routine or re-link a
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",28)
       modified routine and there is no mechanism to load new objects into an
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",29)
       active shared library.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",30)
     * ZPRINT and $TEXT() of the routines in a shared library, read source
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",31)
       file path from the header of the loaded routine. If the image does not
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",32)
       contain the routine, an auto-ZLINK is initiated. If the source file
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",33)
       path recorded in the routine header when the module was compiled
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",34)
       cannot be located, ZPRINT and $TEXT() initiate a search from the
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",35)
       beginning of $ZROUTINES, skipping over the shared library file
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",36)
       specifications. If the located source does not match the code in image
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",37)
       (checked via checksum), ZPRINT generates an object-source mismatch
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",38)
       status and $TEXT() returns a null string.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",39)
     * ZEDIT, when searching $ZROUTINES, skips shared libraries like explicit
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",40)
       ZLINK for the same reasons. $ZSOURCE ISV is implicitly set to the
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",41)
       appropriate source file.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",42)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",43)
   For example, if libshare.so is built with foo.o compiled from
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",44)
   ./shrsrc/foo.m, the following commands specify that YottaDB should search the
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",45)
   library ./libshare.so for symbol foo when do ^foo is encountered.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",46)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",47)
   YDB>SET $ZROUTINES="./libshare.so ./obj(./shrsrc)"
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",48)
   YDB>DO ^foo;auto-ZLINK foo - shared
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",49)
   YDB>ZEDIT "foo";edit ./shrsrc/foo.m
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",50)
   YDB>W $ZSOURCE,!;prints foo
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",51)
   YDB>ZPRINT +0^foo;issues a source-object mismatch status TXTSRCMAT error message
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",52)
   YDB>ZLINK "foo";re-compile ./shrsrc/foo.m to generate ./obj/foo.o.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",53)
   YDB>W $TEXT(+0^foo);prints foo
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",54)

^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",55)
   Note that ZPRINT reports an error, as foo.m does not match the routine
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",56)
   already linked into image. Also note that, to recompile and re-link the
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",57)
   ZEDITed foo.m, its source directory needs to be attached to the object
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",58)
   directory [./obj] in $ZROUTINES. The example assumes the shared library
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",59)
   (libshare.so) has been built using shell commands.
^HELP("s","ISV","s","$ZROUTINES","s","SHARED_LIBRARY_FILE_SPECIFICATION_IN_$ZROUTINES",60)

^HELP("s","ISV","s","$ZSOURCE")
$ZSOurce
^HELP("s","ISV","s","$ZSOURCE",1)
   $ZSOurce
^HELP("s","ISV","s","$ZSOURCE",2)

^HELP("s","ISV","s","$ZSOURCE",3)
   $ZSO[URCE] contains a string value specifying the default pathname for the
^HELP("s","ISV","s","$ZSOURCE",4)
   ZEDIT and ZLINK commands. ZEDIT or ZLINK without an argument is equivalent
^HELP("s","ISV","s","$ZSOURCE",5)
   to ZEDIT/ZLINK $ZSOURCE.
^HELP("s","ISV","s","$ZSOURCE",6)

^HELP("s","ISV","s","$ZSOURCE",7)
   $ZSOURCE initially contains the null string. When ZEDIT and ZLINK commands
^HELP("s","ISV","s","$ZSOURCE",8)
   have a pathname for an argument, they implicitly set $ZSOURCE to that
^HELP("s","ISV","s","$ZSOURCE",9)
   argument. This ZEDIT/ZLINK argument can include a full pathname or a
^HELP("s","ISV","s","$ZSOURCE",10)
   relative one. A relative path could include a file in the current
^HELP("s","ISV","s","$ZSOURCE",11)
   directory, or the path to the file from the current working directory. In
^HELP("s","ISV","s","$ZSOURCE",12)
   the latter instance, do not include the slash before the first directory
^HELP("s","ISV","s","$ZSOURCE",13)
   name. $ZSOURCE will prefix the path to the current working directory
^HELP("s","ISV","s","$ZSOURCE",14)
   including that slash.
^HELP("s","ISV","s","$ZSOURCE",15)

^HELP("s","ISV","s","$ZSOURCE",16)
   The file name may contain a file extension. If the extension is .m or .o,
^HELP("s","ISV","s","$ZSOURCE",17)
   $ZSOURCE drops it. The ZEDIT command accepts arguments with extensions
^HELP("s","ISV","s","$ZSOURCE",18)
   other than .m or .o. $ZSOURCE retains the extension when such arguments
^HELP("s","ISV","s","$ZSOURCE",19)
   are passed.
^HELP("s","ISV","s","$ZSOURCE",20)

^HELP("s","ISV","s","$ZSOURCE",21)
   If $ZSOURCE contains a file with an extension other than .m or .o, ZEDIT
^HELP("s","ISV","s","$ZSOURCE",22)
   processes it but ZLINK returns an error message
^HELP("s","ISV","s","$ZSOURCE",23)

^HELP("s","ISV","s","$ZSOURCE",24)
   $ZSOURCE is a read-write Intrinsic Special Variable, (i.e., it can appear
^HELP("s","ISV","s","$ZSOURCE",25)
   on the left side of the equal sign (=) in the argument to the SET
^HELP("s","ISV","s","$ZSOURCE",26)
   command). A $ZSOURCE value may include an environment variable. YottaDB
^HELP("s","ISV","s","$ZSOURCE",27)
   handles logical names that translate to other logical names by performing
^HELP("s","ISV","s","$ZSOURCE",28)
   iterative translations according to VMS conventions. If a logical name
^HELP("s","ISV","s","$ZSOURCE",29)
   translates to a VMS search list, YottaDB uses only the first name in the
^HELP("s","ISV","s","$ZSOURCE",30)
   list.
^HELP("s","ISV","s","$ZSOURCE",31)

^HELP("s","ISV","s","$ZSOURCE",32)
   Example:
^HELP("s","ISV","s","$ZSOURCE",33)

^HELP("s","ISV","s","$ZSOURCE",34)
   YDB>ZEDIT "subr.m"
^HELP("s","ISV","s","$ZSOURCE",35)
   .
^HELP("s","ISV","s","$ZSOURCE",36)
   .
^HELP("s","ISV","s","$ZSOURCE",37)
   YDB>WRITE $ZSOURCE
^HELP("s","ISV","s","$ZSOURCE",38)
   subr
^HELP("s","ISV","s","$ZSOURCE",39)

^HELP("s","ISV","s","$ZSOURCE",40)
   Example:
^HELP("s","ISV","s","$ZSOURCE",41)

^HELP("s","ISV","s","$ZSOURCE",42)
   YDB>ZEDIT "test"
^HELP("s","ISV","s","$ZSOURCE",43)
   .
^HELP("s","ISV","s","$ZSOURCE",44)
   .
^HELP("s","ISV","s","$ZSOURCE",45)
   .
^HELP("s","ISV","s","$ZSOURCE",46)
   YDB>WRITE $ZSOURCE
^HELP("s","ISV","s","$ZSOURCE",47)
   "test"
^HELP("s","ISV","s","$ZSOURCE",48)

^HELP("s","ISV","s","$ZSOURCE",49)
   Example:
^HELP("s","ISV","s","$ZSOURCE",50)

^HELP("s","ISV","s","$ZSOURCE",51)
   YDB>ZEDIT "/usr/smith/report.txt"
^HELP("s","ISV","s","$ZSOURCE",52)
   .
^HELP("s","ISV","s","$ZSOURCE",53)
   .
^HELP("s","ISV","s","$ZSOURCE",54)
   .
^HELP("s","ISV","s","$ZSOURCE",55)
   YDB>WRITE $ZSOURCE
^HELP("s","ISV","s","$ZSOURCE",56)
   /usr/smith/report.txt
^HELP("s","ISV","s","$ZSOURCE",57)

^HELP("s","ISV","s","$ZSOURCE",58)
   Example:
^HELP("s","ISV","s","$ZSOURCE",59)

^HELP("s","ISV","s","$ZSOURCE",60)
   YDB>ZLINK "BASE.O"
^HELP("s","ISV","s","$ZSOURCE",61)
   .
^HELP("s","ISV","s","$ZSOURCE",62)
   .
^HELP("s","ISV","s","$ZSOURCE",63)
   .
^HELP("s","ISV","s","$ZSOURCE",64)
   YDB>WRITE $ZSOURCE
^HELP("s","ISV","s","$ZSOURCE",65)
   BASE
^HELP("s","ISV","s","$ZSOURCE",66)

^HELP("s","ISV","s","$ZSTATUS")
$ZStatus
^HELP("s","ISV","s","$ZSTATUS",1)
   $ZStatus
^HELP("s","ISV","s","$ZSTATUS",2)

^HELP("s","ISV","s","$ZSTATUS",3)
   $ZS[TATUS] contains a string value specifying the error condition code and
^HELP("s","ISV","s","$ZSTATUS",4)
   location of the last exception condition that occurred during routine
^HELP("s","ISV","s","$ZSTATUS",5)
   execution.
^HELP("s","ISV","s","$ZSTATUS",6)

^HELP("s","ISV","s","$ZSTATUS",7)
   YottaDB maintains $ZSTATUS as a string consisting of three or more
^HELP("s","ISV","s","$ZSTATUS",8)
   substrings. The string consists of the following:
^HELP("s","ISV","s","$ZSTATUS",9)

^HELP("s","ISV","s","$ZSTATUS",10)
   Format: %<FAC>-<SEV>-<ID>, <TEXT>
^HELP("s","ISV","s","$ZSTATUS",11)
   Example: %YDB-E-DIVZERO, Attempt to divide by zero
^HELP("s","ISV","s","$ZSTATUS",12)

^HELP("s","ISV","s","$ZSTATUS",13)
   YottaDB sets $ZSTATUS when it encounters errors during program execution, but
^HELP("s","ISV","s","$ZSTATUS",14)
   not when it encounters errors in a Direct Mode command.
^HELP("s","ISV","s","$ZSTATUS",15)

^HELP("s","ISV","s","$ZSTATUS",16)
   $ZSTATUS is a read-write Intrinsic Special Variable, (i.e., it can occur
^HELP("s","ISV","s","$ZSTATUS",17)
   on the left side of the equal sign (=) in the argument to the SET
^HELP("s","ISV","s","$ZSTATUS",18)
   command). While it will accept any string, YottaDB recommends setting it to
^HELP("s","ISV","s","$ZSTATUS",19)
   null. M routines cannot modify $ZSTATUS with the NEW command.
^HELP("s","ISV","s","$ZSTATUS",20)

^HELP("s","ISV","s","$ZSTATUS",21)
   Example:
^HELP("s","ISV","s","$ZSTATUS",22)

^HELP("s","ISV","s","$ZSTATUS",23)
   YDB>WRITE $ZSTATUS
^HELP("s","ISV","s","$ZSTATUS",24)
   150373110,+1^MYFILE,%YDB-E-DIVZERO,
^HELP("s","ISV","s","$ZSTATUS",25)
   Attempt to divide by zero
^HELP("s","ISV","s","$ZSTATUS",26)

^HELP("s","ISV","s","$ZSTATUS",27)
   This example displays the status generated by a divide by zero (0).
^HELP("s","ISV","s","$ZSTATUS",28)

^HELP("s","ISV","s","$ZSTEP")
$ZSTep
^HELP("s","ISV","s","$ZSTEP",1)
   $ZSTep
^HELP("s","ISV","s","$ZSTEP",2)

^HELP("s","ISV","s","$ZSTEP",3)
   $ZST[EP] contains a string value specifying the default action for the
^HELP("s","ISV","s","$ZSTEP",4)
   ZSTEP command. $ZSTEP provides the ZSTEP action only when the ZSTEP
^HELP("s","ISV","s","$ZSTEP",5)
   command does not specify an action.
^HELP("s","ISV","s","$ZSTEP",6)

^HELP("s","ISV","s","$ZSTEP",7)
   $ZSTEP initially contains the the value of the $ydb_zstep environment
^HELP("s","ISV","s","$ZSTEP",8)
   variable or string "B" if $ydb_zstep is not defined; note that the default
^HELP("s","ISV","s","$ZSTEP",9)
   "B" causes the process to enter direct mode. $ZSTEP is a read-write
^HELP("s","ISV","s","$ZSTEP",10)
   Intrinsic Special Variable, (that is, it can appear on the left side of
^HELP("s","ISV","s","$ZSTEP",11)
   the equal sign (=) in the argument to the SET command).
^HELP("s","ISV","s","$ZSTEP",12)

^HELP("s","ISV","s","$ZSTEP",13)
   Example:
^HELP("s","ISV","s","$ZSTEP",14)

^HELP("s","ISV","s","$ZSTEP",15)
   YDB>WRITE $ZSTEP
^HELP("s","ISV","s","$ZSTEP",16)
   B
^HELP("s","ISV","s","$ZSTEP",17)
   YDB>
^HELP("s","ISV","s","$ZSTEP",18)

^HELP("s","ISV","s","$ZSTEP",19)
   This example displays the current value of $ZSTEP, which is the default.
^HELP("s","ISV","s","$ZSTEP",20)

^HELP("s","ISV","s","$ZSTEP",21)
   Example:
^HELP("s","ISV","s","$ZSTEP",22)

^HELP("s","ISV","s","$ZSTEP",23)
   YDB>SET $ZSTEP="ZP @$ZPOS B"
^HELP("s","ISV","s","$ZSTEP",24)

^HELP("s","ISV","s","$ZSTEP",25)
   This example sets $ZSTEP to code that displays the contents of the next
^HELP("s","ISV","s","$ZSTEP",26)
   line to execute, and then enters Direct Mode.
^HELP("s","ISV","s","$ZSTEP",27)

^HELP("s","ISV","s","$ZSTRPLLIM")
$ZSTRPllim
^HELP("s","ISV","s","$ZSTRPLLIM",1)
   $ZSTRPllim
^HELP("s","ISV","s","$ZSTRPLLIM",2)

^HELP("s","ISV","s","$ZSTRPLLIM",3)
   $ZSTRP[LLIM] provides a way for a process to limit its process private
^HELP("s","ISV","s","$ZSTRPLLIM",4)
   memory used for local variable and scratch storage. When the value is 0 or
^HELP("s","ISV","s","$ZSTRPLLIM",5)
   negative, the default, there is no limit. A positive value specifies a
^HELP("s","ISV","s","$ZSTRPLLIM",6)
   byte limit. When a request for additional memory exceeds the limit, YottaDB
^HELP("s","ISV","s","$ZSTRPLLIM",7)
   does the expansion and then produces an STPCRIT error. By default, a later
^HELP("s","ISV","s","$ZSTRPLLIM",8)
   request for memory produces an STPOFLOW, unless subsequent to STPCRIT ,
^HELP("s","ISV","s","$ZSTRPLLIM",9)
   $ZSTRPLLIM has been set to the same or higher limit. Note that YottaDB
^HELP("s","ISV","s","$ZSTRPLLIM",10)
   allocates memory in large blocks so the interaction of $ZSTRPLLIM with
^HELP("s","ISV","s","$ZSTRPLLIM",11)
   memory growth is not exact. When the ydb_string_pool_limit environment
^HELP("s","ISV","s","$ZSTRPLLIM",12)
   variable specifies a positive value, YottaDB uses it for the initial value of
^HELP("s","ISV","s","$ZSTRPLLIM",13)
   $ZSTRPLLIM.
^HELP("s","ISV","s","$ZSTRPLLIM",14)

^HELP("s","ISV","s","$ZSYSTEM")
$ZSYstem
^HELP("s","ISV","s","$ZSYSTEM",1)
   $ZSYstem
^HELP("s","ISV","s","$ZSYSTEM",2)

^HELP("s","ISV","s","$ZSYSTEM",3)
   $ZSY[STEM] holds the value of the status code for the last subprocess
^HELP("s","ISV","s","$ZSYSTEM",4)
   invoked with the ZSYSTEM command.
^HELP("s","ISV","s","$ZSYSTEM",5)

^HELP("s","ISV","s","$ZTEXIT")
$ZTExit
^HELP("s","ISV","s","$ZTEXIT",1)
   $ZTExit
^HELP("s","ISV","s","$ZTEXIT",2)

^HELP("s","ISV","s","$ZTEXIT",3)
   $ZTE[XIT] contains an expression that controls the YottaDB interrupt facility
^HELP("s","ISV","s","$ZTEXIT",4)
   at the transaction commit or rollback. At each outermost TCOMMIT or
^HELP("s","ISV","s","$ZTEXIT",5)
   TROLLBACK, If +$ZTEXIT evaluates to non-zero (TRUE), then $ZINTERRUPT is
^HELP("s","ISV","s","$ZTEXIT",6)
   XECUTEd after completing the commit or rollback.
^HELP("s","ISV","s","$ZTEXIT",7)

^HELP("s","ISV","s","$ZTEXIT",8)
   $ZTEXIT is a read-write ISV, that is, it can appear on the left side of
^HELP("s","ISV","s","$ZTEXIT",9)
   the equal sign (=) in the argument to the SET command. M routines cannot
^HELP("s","ISV","s","$ZTEXIT",10)
   NEW $ZTEXIT. YottaDB initializes $ZTEXIT to null at the process startup. Note
^HELP("s","ISV","s","$ZTEXIT",11)
   that the changes to the value of $ZTEXIT during a YottaDB invocation last for
^HELP("s","ISV","s","$ZTEXIT",12)
   the entire duration of the process, so it is the application's
^HELP("s","ISV","s","$ZTEXIT",13)
   responsibility to reset $ZTEXIT after $ZINTERRUPT is delivered in order to
^HELP("s","ISV","s","$ZTEXIT",14)
   turn off redelivering the interrupt every subsequent transaction commit or
^HELP("s","ISV","s","$ZTEXIT",15)
   rollback.
^HELP("s","ISV","s","$ZTEXIT",16)

^HELP("s","ISV","s","$ZTEXIT",17)
   Example:
^HELP("s","ISV","s","$ZTEXIT",18)

^HELP("s","ISV","s","$ZTEXIT",19)
   $ export sigusrval=10
^HELP("s","ISV","s","$ZTEXIT",20)
   $ /usr/local/lib/yottadb/r130/ydb
^HELP("s","ISV","s","$ZTEXIT",21)
   YDB>zprint ^ztran
^HELP("s","ISV","s","$ZTEXIT",22)
   foo;
^HELP("s","ISV","s","$ZTEXIT",23)
     set $ztexit=1
^HELP("s","ISV","s","$ZTEXIT",24)
     set $zinterrupt="d ^throwint"
^HELP("s","ISV","s","$ZTEXIT",25)
     tstart ()
^HELP("s","ISV","s","$ZTEXIT",26)
     for i=1:1:10 do
^HELP("s","ISV","s","$ZTEXIT",27)
     . set ^ACN(i,"bal")=i*100
^HELP("s","ISV","s","$ZTEXIT",28)
     tstart ()
^HELP("s","ISV","s","$ZTEXIT",29)
     do ^throwint
^HELP("s","ISV","s","$ZTEXIT",30)
     ;do ^proc
^HELP("s","ISV","s","$ZTEXIT",31)
     tcommit:$tlevel=2
^HELP("s","ISV","s","$ZTEXIT",32)
     for i=1:1:10 do
^HELP("s","ISV","s","$ZTEXIT",33)
     . set ^ACN(i,"int")=i*0.05
^HELP("s","ISV","s","$ZTEXIT",34)
     ;do ^srv
^HELP("s","ISV","s","$ZTEXIT",35)
     if $tlevel trollback
^HELP("s","ISV","s","$ZTEXIT",36)
     ;do ^exc
^HELP("s","ISV","s","$ZTEXIT",37)
     set $ztexit="",$zinterrupt=""
^HELP("s","ISV","s","$ZTEXIT",38)
     quit
^HELP("s","ISV","s","$ZTEXIT",39)
   bar;
^HELP("s","ISV","s","$ZTEXIT",40)
     write "Begin Transaction",!
^HELP("s","ISV","s","$ZTEXIT",41)
     set $ztexit=1
^HELP("s","ISV","s","$ZTEXIT",42)
     tstart ()
^HELP("s","ISV","s","$ZTEXIT",43)
     i '$zsigproc($j,$ztrnlnm("sigusrval")) write "interrupt sent...",!!
^HELP("s","ISV","s","$ZTEXIT",44)
     for i=1:1:4 set ^B(i)=i*i
^HELP("s","ISV","s","$ZTEXIT",45)
     tcommit
^HELP("s","ISV","s","$ZTEXIT",46)
     write "End Transaction",!
^HELP("s","ISV","s","$ZTEXIT",47)
     ;do ^srv
^HELP("s","ISV","s","$ZTEXIT",48)
     quit
^HELP("s","ISV","s","$ZTEXIT",49)
   YDB>zprint ^throwint
^HELP("s","ISV","s","$ZTEXIT",50)
   throwint
^HELP("s","ISV","s","$ZTEXIT",51)
     set $zinterrupt="write !,""interrupt occurred at : "",$stack($stack-1,""PLACE""),! set $ztexit=1"
^HELP("s","ISV","s","$ZTEXIT",52)
     if '$zsigproc($job,$ztrnlnm("sigusrval")) write "interrupt sent to process"
^HELP("s","ISV","s","$ZTEXIT",53)
     write "***************************************",!!
^HELP("s","ISV","s","$ZTEXIT",54)
     quit
^HELP("s","ISV","s","$ZTEXIT",55)
   YDB>do foo^ztran
^HELP("s","ISV","s","$ZTEXIT",56)
   interrupt sent to process
^HELP("s","ISV","s","$ZTEXIT",57)
   interrupt occurred at : throwint+3^throwint
^HELP("s","ISV","s","$ZTEXIT",58)
   ***************************************
^HELP("s","ISV","s","$ZTEXIT",59)
   interrupt occurred at : foo+13^ztran
^HELP("s","ISV","s","$ZTEXIT",60)
   YDB>
^HELP("s","ISV","s","$ZTEXIT",61)

^HELP("s","ISV","s","$ZTEXIT",62)
   In the above call to foo^ztran, the interrupt handler is a user-defined
^HELP("s","ISV","s","$ZTEXIT",63)
   routine, throwint. The process is sent a signal (SIGUSR1), and $ZINTERRUPT
^HELP("s","ISV","s","$ZTEXIT",64)
   is executed. At the outermost trollback, the interrupt is rethrown,
^HELP("s","ISV","s","$ZTEXIT",65)
   causing $ZINTERRUPT to be executed again.
^HELP("s","ISV","s","$ZTEXIT",66)

^HELP("s","ISV","s","$ZTEXIT",67)
   Example:
^HELP("s","ISV","s","$ZTEXIT",68)

^HELP("s","ISV","s","$ZTEXIT",69)
   YDB>w $zinterrupt
^HELP("s","ISV","s","$ZTEXIT",70)
   "IF $ZJOBEXAM()"
^HELP("s","ISV","s","$ZTEXIT",71)
   YDB>zsystem "ls YDB*"
^HELP("s","ISV","s","$ZTEXIT",72)
   ls: No match.
^HELP("s","ISV","s","$ZTEXIT",73)
   YDB>do bar^ztran
^HELP("s","ISV","s","$ZTEXIT",74)
   Begin Transaction
^HELP("s","ISV","s","$ZTEXIT",75)
   interrupt sent...
^HELP("s","ISV","s","$ZTEXIT",76)
   End Transaction
^HELP("s","ISV","s","$ZTEXIT",77)
   YDB>zsystem "ls YDB*"
^HELP("s","ISV","s","$ZTEXIT",78)
   YDB_JOBEXAM.ZSHOW_DMP_3951_1  YDB_JOBEXAM.ZSHOW_DMP_3951_2
^HELP("s","ISV","s","$ZTEXIT",79)
   YDB>
^HELP("s","ISV","s","$ZTEXIT",80)

^HELP("s","ISV","s","$ZTEXIT",81)
   This uses the default value of $ZINTERRUPT to service interrupts issued to
^HELP("s","ISV","s","$ZTEXIT",82)
   the process. The $ZJOBEXAM function executes a ZSHOW "*", and stores the
^HELP("s","ISV","s","$ZTEXIT",83)
   output in each YDB_JOBEXAM_ZSHOW_DMP for the initial interrupt, and at
^HELP("s","ISV","s","$ZTEXIT",84)
   tcommit when the interrupt is rethrown.
^HELP("s","ISV","s","$ZTEXIT",85)

^HELP("s","ISV","s","$ZTIMEOUT")
$ZTIMeout
^HELP("s","ISV","s","$ZTIMEOUT",1)
   $ZTIMeout
^HELP("s","ISV","s","$ZTIMEOUT",2)

^HELP("s","ISV","s","$ZTIMEOUT",3)
   $ZTIMEOUT controls a single process wide timer. The format of the
^HELP("s","ISV","s","$ZTIMEOUT",4)
   $ZTIMEOUT ISV is:
^HELP("s","ISV","s","$ZTIMEOUT",5)

^HELP("s","ISV","s","$ZTIMEOUT",6)
   $ZTIMeout=([timeout][:labelref])
^HELP("s","ISV","s","$ZTIMEOUT",7)

^HELP("s","ISV","s","$ZTIMEOUT",8)
     o The optional timeout in seconds specifies with millisecond accuracy
^HELP("s","ISV","s","$ZTIMEOUT",9)
       how long from the current time the timer interrupts the process. If
^HELP("s","ISV","s","$ZTIMEOUT",10)
       the specified timeout is negative, YottaDB cancels the timer. If the
^HELP("s","ISV","s","$ZTIMEOUT",11)
       timeout is zero, YottaDB treats it as it would a DO of the vector.
^HELP("s","ISV","s","$ZTIMEOUT",12)
     o The optional labelref specifies a code vector defining a fragment of M
^HELP("s","ISV","s","$ZTIMEOUT",13)
       code to which YottaDB transfers control as if with a DO when the timeout
^HELP("s","ISV","s","$ZTIMEOUT",14)
       expires. If the timeout is missing, the assignment must start with a
^HELP("s","ISV","s","$ZTIMEOUT",15)
       colon and only changes the vector, and in this case, if the timeout is
^HELP("s","ISV","s","$ZTIMEOUT",16)
       the empty string, YottaDB removes any current vector.
^HELP("s","ISV","s","$ZTIMEOUT",17)

^HELP("s","ISV","s","$ZTIMEOUT",18)
   Note that YottaDB only recognizes interrupts such as from $ZTIMEOUT at points
^HELP("s","ISV","s","$ZTIMEOUT",19)
   where it can properly resume operation, such as the beginning of a line,
^HELP("s","ISV","s","$ZTIMEOUT",20)
   when waiting on a command with a timeout, or when starting a FOR
^HELP("s","ISV","s","$ZTIMEOUT",21)
   iteration. When a timeout occurs, if the last assignment specified no
^HELP("s","ISV","s","$ZTIMEOUT",22)
   vector, YottaDB uses the current $ETRAP or $ZTRAP. YottaDB rejects an attempted
^HELP("s","ISV","s","$ZTIMEOUT",23)
   KILL of $ZTIMeout with the VAREXPECTED error and an attempted NEW of
^HELP("s","ISV","s","$ZTIMEOUT",24)
   $ZTIMeout with the SVNONEW error.
^HELP("s","ISV","s","$ZTIMEOUT",25)

^HELP("s","ISV","s","$ZTIMEOUT",26)
   Example:
^HELP("s","ISV","s","$ZTIMEOUT",27)

^HELP("s","ISV","s","$ZTIMEOUT",28)
   YDB>zprint ^ztimeout
^HELP("s","ISV","s","$ZTIMEOUT",29)
   ztimeout
^HELP("s","ISV","s","$ZTIMEOUT",30)
     ; Display $ztimeout
^HELP("s","ISV","s","$ZTIMEOUT",31)
       write !,$ztimeout               ; display $ZTIMeout - in this case the initial value -1
^HELP("s","ISV","s","$ZTIMEOUT",32)
                                       ; set with a vector (do ^TIMEOUT)
^HELP("s","ISV","s","$ZTIMEOUT",33)
       set $ztimeout="60:do ^TIMEOUT"  ; timeout of 1 minute. After timeout expires, XECUTEs do ^TIMEOUT
^HELP("s","ISV","s","$ZTIMEOUT",34)
       write !,$ztimeout               ; displays the remaining time:vector until timeout
^HELP("s","ISV","s","$ZTIMEOUT",35)
     ; set without a vector
^HELP("s","ISV","s","$ZTIMEOUT",36)
       set $ztimeout=120               ; set the timeout to 2 minutes without changing the vector
^HELP("s","ISV","s","$ZTIMEOUT",37)
       set $ztimeout="1234do ^TIMEOUT" ; missing colon creates a timeout for 1234 seconds
^HELP("s","ISV","s","$ZTIMEOUT",38)
       set $ztimeout="10:"             ; set the timeout to 10 seconds and vector to current etrap or ztrap
^HELP("s","ISV","s","$ZTIMEOUT",39)
       set $ztimeout=-1                ; set cancels the timeout
^HELP("s","ISV","s","$ZTIMEOUT",40)
     ; Note that set to 0 triggers an immediate timeout
^HELP("s","ISV","s","$ZTIMEOUT",41)
       set $ztimeout=0                 ; triggers the current vector
^HELP("s","ISV","s","$ZTIMEOUT",42)
       set $ztimeout="0:DO FOO"        ; this has the same effect as DO FOO
^HELP("s","ISV","s","$ZTIMEOUT",43)
   YDB>
^HELP("s","ISV","s","$ZTIMEOUT",44)

^HELP("s","ISV","s","$ZTRAP")
$ZTrap
^HELP("s","ISV","s","$ZTRAP",1)
   $ZTrap
^HELP("s","ISV","s","$ZTRAP",2)

^HELP("s","ISV","s","$ZTRAP",3)
   $ZT[RAP] contains a string value that YottaDB XECUTEs when an error occurs
^HELP("s","ISV","s","$ZTRAP",4)
   during routine execution.
^HELP("s","ISV","s","$ZTRAP",5)

^HELP("s","ISV","s","$ZTRAP",6)
   **Note**
^HELP("s","ISV","s","$ZTRAP",7)

^HELP("s","ISV","s","$ZTRAP",8)
   The following discussion assumes that $ETRAP error handling is
^HELP("s","ISV","s","$ZTRAP",9)
   simultaneously not in effect (that is, $ETRAP="").
^HELP("s","ISV","s","$ZTRAP",10)

^HELP("s","ISV","s","$ZTRAP",11)
   When the $ZTRAP variable is not null, YottaDB executes $ZTRAP at the current
^HELP("s","ISV","s","$ZTRAP",12)
   level. The $ZTRAP variable has the initial value of "B," and puts the
^HELP("s","ISV","s","$ZTRAP",13)
   process in Direct Mode when an error condition occurs. If the value of
^HELP("s","ISV","s","$ZTRAP",14)
   $ZTRAP is null (""), an exception causes the image to run-down with the
^HELP("s","ISV","s","$ZTRAP",15)
   condition code associated with the exception. If $ZTRAP contains invalid
^HELP("s","ISV","s","$ZTRAP",16)
   source code, YottaDB displays an error message and puts the process into
^HELP("s","ISV","s","$ZTRAP",17)
   Direct Mode.
^HELP("s","ISV","s","$ZTRAP",18)

^HELP("s","ISV","s","$ZTRAP",19)
   $ZTRAP is a read-write Intrinsic Special Variable, (that is, it can appear
^HELP("s","ISV","s","$ZTRAP",20)
   on the left side of the equal sign (=) in the argument to the SET
^HELP("s","ISV","s","$ZTRAP",21)
   command).
^HELP("s","ISV","s","$ZTRAP",22)

^HELP("s","ISV","s","$ZTRAP",23)
   $ZTRAP may also appear as an argument to an inclusive NEW command. NEW
^HELP("s","ISV","s","$ZTRAP",24)
   $ZTRAP causes YottaDB to stack the current $ZTRAP value, and set its value to
^HELP("s","ISV","s","$ZTRAP",25)
   the empty string ($ZTRAP=""). The NEW command puts the $ZTRAP in control
^HELP("s","ISV","s","$ZTRAP",26)
   for error handling. When the program QUITs from the invocation level where
^HELP("s","ISV","s","$ZTRAP",27)
   the NEW occurred, YottaDB restores the value previously stacked by the NEW.
^HELP("s","ISV","s","$ZTRAP",28)
   NEW $ZTRAP provides nesting of $ZTRAP. Because $ZTRAP="" terminates the
^HELP("s","ISV","s","$ZTRAP",29)
   image when an error occurs, SET $ZTRAP= generally follows immediately
^HELP("s","ISV","s","$ZTRAP",30)
   after NEW $ZTRAP. You may use this technique to construct error handling
^HELP("s","ISV","s","$ZTRAP",31)
   strategies corresponding to the nesting of your programs. If the
^HELP("s","ISV","s","$ZTRAP",32)
   environment variable ydb_ztrap_new evaluates to boolean TRUE (case
^HELP("s","ISV","s","$ZTRAP",33)
   insensitive string "TRUE", or case insensitive string "YES", or a non-zero
^HELP("s","ISV","s","$ZTRAP",34)
   number), $ZTRAP is NEWed when $ZTRAP is SET; otherwise $ZTRAP is not
^HELP("s","ISV","s","$ZTRAP",35)
   stacked when it is SET.
^HELP("s","ISV","s","$ZTRAP",36)

^HELP("s","ISV","s","$ZTRAP",37)
   **Note**
^HELP("s","ISV","s","$ZTRAP",38)

^HELP("s","ISV","s","$ZTRAP",39)
   QUIT from a $ZTRAP terminates the level at which the $ZTRAP was activated.
^HELP("s","ISV","s","$ZTRAP",40)

^HELP("s","ISV","s","$ZTRAP",41)
   Keep $ZTRAP simple and put complicated logic in another routine. If the
^HELP("s","ISV","s","$ZTRAP",42)
   action specified by $ZTRAP results in another run-time error before
^HELP("s","ISV","s","$ZTRAP",43)
   changing the value of $ZTRAP, YottaDB invokes $ZTRAP until it exhausts the
^HELP("s","ISV","s","$ZTRAP",44)
   process stack space, terminating the image. Carefully debug exception
^HELP("s","ISV","s","$ZTRAP",45)
   handling.
^HELP("s","ISV","s","$ZTRAP",46)

^HELP("s","ISV","s","$ZTRAP",47)
   Example:
^HELP("s","ISV","s","$ZTRAP",48)

^HELP("s","ISV","s","$ZTRAP",49)
   YDB>S $ZTRAP="ZP @$ZPOS B"
^HELP("s","ISV","s","$ZTRAP",50)

^HELP("s","ISV","s","$ZTRAP",51)
   This example modifies $ZTRAP to display source code for the line where
^HELP("s","ISV","s","$ZTRAP",52)
   YottaDB encounters an error before entering Direct Mode.
^HELP("s","ISV","s","$ZTRAP",53)

^HELP("s","ISV","s","$ZTRAP",54)
   There are four settings of $ZTRAP controlled by the UNIX environment
^HELP("s","ISV","s","$ZTRAP",55)
   variable ydb_ztrap_form.
^HELP("s","ISV","s","$ZTRAP",56)

^HELP("s","ISV","s","$ZTRAP",57)
   The four settings of ydb_ztrap_form are:
^HELP("s","ISV","s","$ZTRAP",58)

^HELP("s","ISV","s","$ZTRAP",59)
     o code - If ydb_ztrap_form evaluates to "code" (or a value that is not
^HELP("s","ISV","s","$ZTRAP",60)
       one of the subsequently described values), then YottaDB treats $ZTRAP as
^HELP("s","ISV","s","$ZTRAP",61)
       code and handles it as previously described in the documentation.
^HELP("s","ISV","s","$ZTRAP",62)
     o entryref - If ydb_ztrap_form evaluates to "entryref" then YottaDB treats
^HELP("s","ISV","s","$ZTRAP",63)
       it as an entryref argument to an implicit GOTO command.
^HELP("s","ISV","s","$ZTRAP",64)
     o adaptive - If ydb_ztrap_form evaluates to "adaptive" then if $ZTRAP
^HELP("s","ISV","s","$ZTRAP",65)
       does not compile to valid M code, then $ZTRAP is treated as just
^HELP("s","ISV","s","$ZTRAP",66)
       described for "entryref." Since there is little ambiguity, code and
^HELP("s","ISV","s","$ZTRAP",67)
       entryref forms of $ZTRAP can be intermixed in the same application.
^HELP("s","ISV","s","$ZTRAP",68)

^HELP("s","ISV","s","$ZTRAP",69)
   **Important**
^HELP("s","ISV","s","$ZTRAP",70)

^HELP("s","ISV","s","$ZTRAP",71)
       YottaDB attempts to compile $ZTRAP before evaluating $ZTRAP as an
^HELP("s","ISV","s","$ZTRAP",72)
       entryref. Because YottaDB allows commands without arguments such as QUIT,
^HELP("s","ISV","s","$ZTRAP",73)
       ZGOTO, or HANG as valid labels, be careful not to use such keywords as
^HELP("s","ISV","s","$ZTRAP",74)
       labels for error handling code in "adaptive" mode.
^HELP("s","ISV","s","$ZTRAP",75)

^HELP("s","ISV","s","$ZTRAP",76)
     o pope[ntryref] / popa[daptive] - If ydb_ztrap_form evaluates to
^HELP("s","ISV","s","$ZTRAP",77)
       "POPE[NTRYREF]" or "POPA[DAPTIVE]" (case insensitive) and $ZTRAP value
^HELP("s","ISV","s","$ZTRAP",78)
       is in the form of entryref, YottaDB unwinds the M stack from the level at
^HELP("s","ISV","s","$ZTRAP",79)
       which an error occurred to (but not including) the level at which
^HELP("s","ISV","s","$ZTRAP",80)
       $ZTRAP was last SET. Then, YottaDB transfers control to the entryref in
^HELP("s","ISV","s","$ZTRAP",81)
       $ZTRAP at the level where the $ZTRAP value was SET. If the UNIX
^HELP("s","ISV","s","$ZTRAP",82)
       environment variable ydb_zyerror is defined to a valid entryref, YottaDB
^HELP("s","ISV","s","$ZTRAP",83)
       transfers control to the entryref specified by $ydb_zyerror (with an
^HELP("s","ISV","s","$ZTRAP",84)
       implicit DO) after unwinding the stack and before transferring control
^HELP("s","ISV","s","$ZTRAP",85)
       to the entyref specified in $ZTRAP.
^HELP("s","ISV","s","$ZTRAP",86)

^HELP("s","ISV","s","$ZTRAP",87)
   **Note**
^HELP("s","ISV","s","$ZTRAP",88)

^HELP("s","ISV","s","$ZTRAP",89)
   Like $ZTRAP values, invocation of device EXCEPTION values follow the
^HELP("s","ISV","s","$ZTRAP",90)
   pattern specified by the current ydb_ztrap_form setting except that there
^HELP("s","ISV","s","$ZTRAP",91)
   is never any implicit popping with EXCEPTION action.
^HELP("s","ISV","s","$ZTRAP",92)

^HELP("s","ISV","s","$ZUSEDSTOR")
$ZUSedstor
^HELP("s","ISV","s","$ZUSEDSTOR",1)
   $ZUSedstor
^HELP("s","ISV","s","$ZUSEDSTOR",2)

^HELP("s","ISV","s","$ZUSEDSTOR",3)
   $ZUSEDSTOR is the value in $ZALLOCSTOR minus storage management overhead
^HELP("s","ISV","s","$ZUSEDSTOR",4)
   and represents the actual memory, in bytes, requested by current
^HELP("s","ISV","s","$ZUSEDSTOR",5)
   activities. It provides one view (see also $ZALLOCSTOR and $ZREALSTOR) of
^HELP("s","ISV","s","$ZUSEDSTOR",6)
   the process memory utilization and can help identify storage related
^HELP("s","ISV","s","$ZUSEDSTOR",7)
   problems. YottaDB does not permit $ZUSEDSTOR to be SET or NEWed.
^HELP("s","ISV","s","$ZUSEDSTOR",8)

^HELP("s","ISV","s","$ZUT")
$ZUT
^HELP("s","ISV","s","$ZUT",1)
   $ZUT
^HELP("s","ISV","s","$ZUT",2)

^HELP("s","ISV","s","$ZUT",3)
   $ZUT (UNIX time or universal time) returns the number of microseconds
^HELP("s","ISV","s","$ZUT",4)
   since January 1, 1970 00:00:00 UTC, which provides a time stamp for
^HELP("s","ISV","s","$ZUT",5)
   directly comparing different timezones. $ZUT accuracy is subject to the
^HELP("s","ISV","s","$ZUT",6)
   precision of the system clock (use man gettimeofday from the UNIX shell
^HELP("s","ISV","s","$ZUT",7)
   for more information).
^HELP("s","ISV","s","$ZUT",8)

^HELP("s","ISV","s","$ZVERSION")
$ZVersion
^HELP("s","ISV","s","$ZVERSION",1)
   $ZVersion
^HELP("s","ISV","s","$ZVERSION",2)

^HELP("s","ISV","s","$ZVERSION",3)
   $ZV[ERSION] contains a string value specifying the currently installed
^HELP("s","ISV","s","$ZVERSION",4)
   YottaDB. $ZV[ERSION] is a space-delimited string with four pieces as follows:
^HELP("s","ISV","s","$ZVERSION",5)

^HELP("s","ISV","s","$ZVERSION",6)
   <product> <release> <OS> <architecture>
^HELP("s","ISV","s","$ZVERSION",7)

^HELP("s","ISV","s","$ZVERSION",8)
     o <product> is always "YottaDB".
^HELP("s","ISV","s","$ZVERSION",9)
     o <release> always begins with "V", and has the structure
^HELP("s","ISV","s","$ZVERSION",10)
       V<DB_Format>.<major_release>-<minor_release>[<bug_fix_level>] where:
^HELP("s","ISV","s","$ZVERSION",11)
     o <OS> is the host operating system name.
^HELP("s","ISV","s","$ZVERSION",12)
     o <architecture> is the hardware architecture for which the release of
^HELP("s","ISV","s","$ZVERSION",13)
       YottaDB is compiled. Note that YottaDB retains it original names for
^HELP("s","ISV","s","$ZVERSION",14)
       continuity even if vendor branding changes, for example, "RS6000".
^HELP("s","ISV","s","$ZVERSION",15)

^HELP("s","ISV","s","$ZVERSION",16)
   M routines cannot modify $ZVERSION.
^HELP("s","ISV","s","$ZVERSION",17)

^HELP("s","ISV","s","$ZVERSION",18)
   **Warning**
^HELP("s","ISV","s","$ZVERSION",19)

^HELP("s","ISV","s","$ZVERSION",20)
   YottaDB treats $ZVERSION as a literal at compile time. Therefore, always
^HELP("s","ISV","s","$ZVERSION",21)
   compile with the same version as that used at runtime.
^HELP("s","ISV","s","$ZVERSION",22)

^HELP("s","ISV","s","$ZVERSION",23)
   Example:
^HELP("s","ISV","s","$ZVERSION",24)

^HELP("s","ISV","s","$ZVERSION",25)
   YDB>w $zversion
^HELP("s","ISV","s","$ZVERSION",26)
   YottaDB V6.0-003 Linux x86_64
^HELP("s","ISV","s","$ZVERSION",27)

^HELP("s","ISV","s","$ZVERSION",28)
   This example displays the current version identifier for YottaDB.
^HELP("s","ISV","s","$ZVERSION",29)

^HELP("s","ISV","s","$ZYERROR")
$ZYERror
^HELP("s","ISV","s","$ZYERROR",1)
   $ZYERror
^HELP("s","ISV","s","$ZYERROR",2)

^HELP("s","ISV","s","$ZYERROR",3)
   $ZYER[ROR] is a read/write ISV that contains a string value pointing to an
^HELP("s","ISV","s","$ZYERROR",4)
   entryref. After YottaDB encounters an error, if $ZYERROR is set a non-null
^HELP("s","ISV","s","$ZYERROR",5)
   value, YottaDB invokes the routine at the entryref specified by $ZYERROR with
^HELP("s","ISV","s","$ZYERROR",6)
   an implicit DO. It is intended that the code invoked by $ZYERROR use the
^HELP("s","ISV","s","$ZYERROR",7)
   value of $ZSTATUS to select or construct a value to which it SETs $ZERROR.
^HELP("s","ISV","s","$ZYERROR",8)
   If $ZYERROR is not a valid entryref or if an error occurs while executing
^HELP("s","ISV","s","$ZYERROR",9)
   the entryref specified by $ZYERROR, YottaDB SETs $ZERROR to the error status
^HELP("s","ISV","s","$ZYERROR",10)
   encountered. YottaDB then returns control to the M code specified by
^HELP("s","ISV","s","$ZYERROR",11)
   $ETRAP/$ZTRAP or device EXCEPTION.
^HELP("s","ISV","s","$ZYERROR",12)

^HELP("s","ISV","s","$ZYERROR",13)
   $ZYERROR is implicitly NEWed on entry to the routine specified by
^HELP("s","ISV","s","$ZYERROR",14)
   $ZYERROR. However, if YottaDB fails to compile, YottaDB does not transfer
^HELP("s","ISV","s","$ZYERROR",15)
   control to the entryref specified by $ZYERROR.
^HELP("s","ISV","s","$ZYERROR",16)

^HELP("s","ISV","s","$ZYERROR",17)
   YottaDB permits $ZYERROR to be modified by the SET and NEW commands.
^HELP("s","ISV","s","$ZYERROR",18)

^HELP("s","ISV","s","TRIGGERS_ISVS")
Triggers_ISVs
^HELP("s","ISV","s","TRIGGERS_ISVS",1)
   Triggers ISVs
^HELP("s","ISV","s","TRIGGERS_ISVS",2)

^HELP("s","ISV","s","TRIGGERS_ISVS",3)
   YottaDB provides nine ISVs (Intrinsic Special Variables) to facilitate
^HELP("s","ISV","s","TRIGGERS_ISVS",4)
   trigger operations. With the exception of $ZTWORMHOLE, all numeric
^HELP("s","ISV","s","TRIGGERS_ISVS",5)
   trigger-related ISVs return zero (0) outside of a trigger context;
^HELP("s","ISV","s","TRIGGERS_ISVS",6)
   non-numeric ISVs return the empty string.
^HELP("s","ISV","s","TRIGGERS_ISVS",7)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA")
$ZTDAta
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",1)
   $ZTDAta
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",3)
   Within trigger context, $ZTDATA returns $DATA(@$REFERENCE)#2 for a SET or
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",4)
   $DATA(@$REFERENCE) for a KILL, ZKILL or ZWITHDRAW prior to the explicit
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",5)
   update. This provides a fast path alternative, avoiding the need for
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",6)
   indirection in trigger code, to help trigger code determine the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",7)
   characteristics of the triggering node prior to the triggering update. For
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",8)
   a SET, it shows whether the node did or did not hold data - whether a SET
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",9)
   is modifying the contents of an existing node or creating data at a new
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",10)
   node. For a KILL it shows whether the node had descendants and whether it
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",11)
   had data.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDATA",12)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM")
$ZTDElim
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",1)
   $ZTDElim
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",3)
   Within a SET trigger context, $ZTDE[LIM] returns the piece separator, as
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",4)
   specified by -delim in the trigger definition. This allows triggers to
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",5)
   extract updated pieces defined in $ZTUPDATE without having the piece
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",6)
   separator hard coded into the routine. Outside of a SET trigger context,
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",7)
   $ZTDELIM is null.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTDELIM",8)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL")
$ZTLevel
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",1)
   $ZTLevel
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",3)
   Within trigger context, $ZTLEVEL returns the current level of trigger
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",4)
   nesting (invocation by a trigger of an additional trigger by an update in
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",5)
   trigger context).
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",6)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",7)
   $ZTLEVEL greater than one (>1) indicates that there are nested triggers in
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",8)
   progress. When a single update invokes multiple triggers solely because of
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",9)
   multiple trigger matches of that initial (non-trigger) update, they are
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",10)
   not nested (they are chained) and thus all have same $ZTLEVEL.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",11)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",12)
   Example:
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",13)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",14)
   +^Cycle(1) -commands=Set -xecute="Write ""$ZTLevel for ^Cycle(1) is: "",$ZTLevel Set ^Cycle(2)=1"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",15)
   +^Cycle(2) -commands=Set -xecute="Write ""$ZTLevel for ^Cycle(2) is: "",$ZTLevel Set ^Cycle(1)=1"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",16)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",17)
   These trigger definitions show different values of $ZTLEVEL when two
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",18)
   triggers are called recursively (and pathologically).
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",19)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",20)
   +^Acct("ID") -commands=set -xecute="set ^Acct(1)=$ztvalue+1"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",21)
   +^Acct(sub=:) -command=set -xecute="set ^X($ztvalue)=sub"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",22)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",23)
   SET ^Acct("ID")=10 invokes both the above triggers in some order and
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",24)
   $ZTLEVEL will have the same value in both because these triggers are
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",25)
   chained rather than nested.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTLEVEL",26)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTNAME")
$ZTNAME
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTNAME",1)
   $ZTNAME
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTNAME",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTNAME",3)
   Within a trigger context, $ZTNAME returns the trigger name. Outside a
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTNAME",4)
   trigger context, $ZTNAME returns an empty string.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTNAME",5)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL")
$ZTOLdval
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",1)
   $ZTOLdval
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",3)
   Within trigger context, $ZTOLDVAL returns the prior (old) value of the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",4)
   global node whose update caused the trigger invocation. This provides a
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",5)
   fast path alternative to $GET(@$REFERENCE) at trigger entry (which avoids
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",6)
   the heavyweight indirection ). If there are multiple triggers matching the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",7)
   same node (chained), $ZTOLDVAL returns the same result for each of them.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",8)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",9)
   Example:
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",10)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",11)
   +^Acct(1,"ID") -commands=Set -xecute="Write:$ZTOLdval ""The prior value of ^Acct(1,ID) was: "",$ZTOLdval"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",12)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",13)
   This trigger gets invoked with a SET and displays the prior value (if it
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",14)
   exists) of ^Acct(1,"ID").
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",15)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",16)
   YDB>w ^Acct(1,"ID")
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",17)
   1975
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",18)
   YDB>s ^Acct(1,"ID")=2011
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",19)
   The prior value of ^Acct(1,ID) was: 1975
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTOLDVAL",20)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP")
$ZTRIggerop
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP",1)
   $ZTRIggerop
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP",3)
   Within trigger context, for SET (including MERGE and $INCREMENT()
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP",4)
   operations), $ZTRIGGEROP has the value "S". For KILL, $ZTRIGGEROP has the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP",5)
   value "K" For ZKILL or ZWITHDRAW, $ZTRIGGEROP has the value "ZK".
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTRIGGEROP",6)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE")
$ZTSlate
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",1)
   $ZTSlate
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",3)
   $ZTSLATE allows you to specify a string that you want to make available in
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",4)
   chained or nested triggers invoked for an outermost transaction (when a
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",5)
   TSTART takes $TLEVEL from 0 to 1). You might use $ZTSLATE to accumulate
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",6)
   transaction-related information, for example $ZTOLDVAL and $ZTVALUE,
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",7)
   available within trigger context for use in a subsequent trigger later in
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",8)
   the same transaction. For example, you can use $ZTSLATE to build up an
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",9)
   application history or journal record to be written when a transaction is
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",10)
   about to commit.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",11)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",12)
   You can SET $ZTSLATE only while a database trigger is active. YottaDB clears
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",13)
   $ZTSLATE for the outermost transaction or on a TRESTART. However, YottaDB
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",14)
   retains $ZTSLATE for all sub-transactions (where $TLEVEL>1).
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",15)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",16)
   Example:
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",17)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",18)
    TSTART ()       ; Implicitly clears $ZTSLAT
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",19)
    SET ^ACC(ACN1,BAL)=AMT          ; Trigger sets $ZTSLATE=ACN_"|"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",20)
    SET ^ACC(ACN2,BAL)=-AMT         ; Trigger sets $ZTSLATE=$ZTSLATE_ACN_"|"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",21)
    ZTRIGGER ^ACT("TRANS")          ; Trigger uses $ZTSLATE to update transaction log
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",22)
    TCOMMIT
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTSLATE",23)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE")
$ZTUPdate
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",1)
   $ZTUPdate
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",3)
   Within trigger context, for SET commands where the YottaDB trigger specifies
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",4)
   a piece separator, $ZTUPDATE provides a comma separated list of piece
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",5)
   numbers of pieces that differ between the current values of $ZTOLDVAL and
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",6)
   $ZTVALUE. If the trigger specifies a piece separator, but does not specify
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",7)
   any pieces of interest, $ZTUPDATE identifies all changed pieces. $ZTUPDATE
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",8)
   is 0 in all other cases (that is: for SET commands where the YottaDB trigger
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",9)
   does not specify a piece separator or for KILLs). Note that if an update
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",10)
   matches more than one trigger, all matching triggers see the same
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",11)
   $ZTOLDVAL at trigger entry but potentially different values of $ZTVALUE so
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",12)
   $ZTUPDATE could change due to the actions of each matching trigger even
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",13)
   though all matching triggers have identical -[z]delim and -piece
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",14)
   specifications.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",15)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",16)
   Example:
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",17)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",18)
   +^trigvn -commands=Set -pieces=1;3:6 -delim="|" -xecute="Write !,$ZTUPDATE"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",19)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",20)
   In the above trigger definition entry, $ZTUPDATE displays a comma
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",21)
   separated list of the changed piece numbers if on of the pieces of
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",22)
   interest: 1,3,4,5,or 6 are modified by the update.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",23)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",24)
   YDB>write ^trigvn
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",25)
   Window|Table|Chair|Curtain|Cushion|Air Conditioner
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",26)
   YDB>set ^trigvn="Window|Dining Table|Chair|Vignette|Pillow|Air Conditioner"
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",27)
   4,5
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",28)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",29)
   Note that even though piece numbers 2,4 and 5 are changed, $ZTUPDATE
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",30)
   displays only 4,5 because the trigger is not defined for updates for the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",31)
   second piece.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTUPDATE",32)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE")
$ZTVAlue
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",1)
   $ZTVAlue
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",3)
   For SET, $ZTVALUE has the value assigned to the node by the explicit SET
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",4)
   operation. Modifying $ZTVALUE within a trigger modifies the eventual value
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",5)
   YottaDB assigns to the node. Note that changing $ZTVALUE has a small
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",6)
   performance impact because it causes an additional update operation on the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",7)
   node once all trigger code completes. If a node has multiple associated
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",8)
   triggers each trigger receives the current value of $ZTVALUE, however,
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",9)
   because the triggers run in arbitrary order, YottaDB strongly recommends no
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",10)
   more than one trigger change any given element of application data, for
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",11)
   example, a particular piece. For KILL and its variants, $ZTVALUE returns
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",12)
   the empty string. While YottaDB accepts updates to $ZTVALUE within the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",13)
   trigger code invoked for a KILL or any of its variants, it ultimately
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",14)
   discards any such value. Outside trigger context, attempting to SET
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",15)
   $ZTVALUE produces a SETINTRIGONLY error.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTVALUE",16)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE")
$ZTWOrmhole
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",1)
   $ZTWOrmhole
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",2)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",3)
   $ZTWORMHOLE allows you to specify a string up to 128KB of information you
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",4)
   want to make available during trigger execution. You can use $ZTWORMHOLE
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",5)
   to supply an application-context or process context to your trigger logic.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",6)
   Because YottaDB makes $ZTWORMHOLE available throughout the duration of the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",7)
   process, you can access or update $ZTWORMHOLE both from inside and outside
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",8)
   a trigger.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",9)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",10)
   $ZTWORMHOLE provides a mechanism to access information from a
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",11)
   process/application context that is otherwise unavailable in trigger
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",12)
   context. YottaDB records any non-empty string value of $ZTWORMHOLE in the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",13)
   YottaDB database journal file as part of any update that invokes at least one
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",14)
   trigger which references $ZTWORMHOLE. YottaDB also transmits any non-NULL
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",15)
   $ZTWORMHOLE value in the replication stream, thus providing the same
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",16)
   context to triggers invoked by MUPIP processes (either as part of the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",17)
   replicating instance update process or as part of MUPIP journal
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",18)
   recovery/rollback). Therefore, whenever you use $ZTWORMHOLE in a trigger,
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",19)
   you create something like a wormhole for process context that is otherwise
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",20)
   NEWed in the run-time or non-existent in MUPIP.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",21)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",22)
   Note that if trigger code does not reference $ZTMORMHOLE, YottaDB does not
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",23)
   make it available to MUPIP (via the journal files or replication stream).
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",24)
   Therefore, if a replicating secondary has different trigger code than the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",25)
   initiating primary (an unusual configuration) and the triggers on the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",26)
   replicating node require information from $ZTWORMHOLE, the triggers on the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",27)
   initiating node must reference $ZTWORMHOLE to ensure YottaDB maintains the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",28)
   data it contains for use by the update process on the replicating node.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",29)
   While you can change $ZTWORMHOLE within trigger code, because of the
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",30)
   arbitrary ordering of triggers on the same node, such an approach requires
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",31)
   careful design and implementation. YottaDB allows $ZTWORMHOLE to be NEW'd.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",32)
   NEWing $ZTWORMHOLE is slightly different from NEWing other ISVs/variables
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",33)
   in the sense that the former retains its original value whereas the latter
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",34)
   does not. However, like other NEWs, YottaDB restores $ZTWORMHOLE's value when
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",35)
   the stack level pops.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",36)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",37)
   The following table summarizes the read/write permissions assigned to all
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",38)
   trigger-related ISVs within trigger context and outside trigger context.
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",39)

^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",40)
   +------------------------------------------------------------------------+
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",41)
   | Intrinsic Special | Within Trigger |               Notes               |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",42)
   |     Variable      |    Context     |                                   |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",43)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",44)
   |                   |                | Set to ydb_trigger_etrap or the   |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",45)
   | $ETRAP            | Read / Write   | empty string when entering        |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",46)
   |                   |                | trigger context.                  |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",47)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",48)
   | $REFERENCE        | Read only      | Restored at the completion of a   |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",49)
   |                   |                | trigger.                          |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",50)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",51)
   | $TEST             | Read only      | Restored at the completion of a   |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",52)
   |                   |                | trigger.                          |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",53)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",54)
   |                   |                | Always >=1 in trigger code; must  |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",55)
   | $TLEVEL           | Read only      | be the same as the completion of  |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",56)
   |                   |                | processing a trigger as it was at |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",57)
   |                   |                | the start.                        |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",58)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",59)
   | $ZTNAME           | Read only      | Returns the trigger name.         |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",60)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",61)
   | $ZTDATA           | Read only      | Shows prior state.                |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",62)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",63)
   | $ZTLEVEL          | Read only      | Shows trigger nesting.            |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",64)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",65)
   | $ZTOLDVAL         | Read only      | Shows the pre-update value.       |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",66)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",67)
   | $ZTRAP            | Read only - "" | Must use $ETRAP in trigger code.  |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",68)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",69)
   | $ZTRIGGEROP       | Read only      | Shows the triggering command.     |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",70)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",71)
   | $ZTUPDATE         | Read only      | Lists modified pieces (if         |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",72)
   |                   |                | requested) for SET.               |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",73)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",74)
   | $ZTVALUE          | Read / Write   | Can change the eventual applied   |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",75)
   |                   |                | value for SET.                    |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",76)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",77)
   |                   |                | Holds application context because |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",78)
   | $ZTWORMHOLE       | Read / Write   | trigger code has no access to the |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",79)
   |                   |                | local variable context.           |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",80)
   |-------------------+----------------+-----------------------------------|
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",81)
   |                   |                | Holds outermost transaction       |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",82)
   | $ZTSLATE          | Read/ Write    | context for chained or nested     |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",83)
   |                   |                | triggers.                         |
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",84)
   +------------------------------------------------------------------------+
^HELP("s","ISV","s","TRIGGERS_ISVS","s","$ZTWORMHOLE",85)

^HELP("s","LANGUAGE_EXTENSIONS")
Language_Extensions
^HELP("s","LANGUAGE_EXTENSIONS",1)
   Language Extensions
^HELP("s","LANGUAGE_EXTENSIONS",2)

^HELP("s","LANGUAGE_EXTENSIONS",3)
   In addition to providing all of the ANSI standard M features, YottaDB offers
^HELP("s","LANGUAGE_EXTENSIONS",4)
   a number of language extensions. In this chapter, the language extensions
^HELP("s","LANGUAGE_EXTENSIONS",5)
   are grouped by intended function to demonstrate their relationships to
^HELP("s","LANGUAGE_EXTENSIONS",6)
   each other and to the programming process. A summary table is provided in
^HELP("s","LANGUAGE_EXTENSIONS",7)
   each section.
^HELP("s","LANGUAGE_EXTENSIONS",8)

^HELP("s","LANGUAGE_EXTENSIONS",9)
   The following sections describe the YottaDB language extensions listed below:
^HELP("s","LANGUAGE_EXTENSIONS",10)

^HELP("s","LANGUAGE_EXTENSIONS",11)
     * UNIX interface facilities
^HELP("s","LANGUAGE_EXTENSIONS",12)
     * Debugging tools
^HELP("s","LANGUAGE_EXTENSIONS",13)
     * Exception-handling extensions
^HELP("s","LANGUAGE_EXTENSIONS",14)
     * Journaling extensions
^HELP("s","LANGUAGE_EXTENSIONS",15)
     * Extensions providing additional capability
^HELP("s","LANGUAGE_EXTENSIONS",16)
     * Device Handling Extensions
^HELP("s","LANGUAGE_EXTENSIONS",17)
     * Alias Variables Extensions
^HELP("s","LANGUAGE_EXTENSIONS",18)
     * Extensions for Unicode Support
^HELP("s","LANGUAGE_EXTENSIONS",19)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS")
Alias_Variables_Extensions
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",1)
   Alias Variables Extensions
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",3)
   Alias variables provide a layer of abstraction between the name of a local
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",4)
   variable and an array analogous to that provided by M pass by reference in
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",5)
   routines and function calls. Multiple local variables can be aliased to
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",6)
   the same array, and a SET or KILL to one acts as a SET or KILL to all.
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",7)
   Alias container variables provide a way using a subscripted local to store
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",8)
   a reference to an entire local variable array, which protects the
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",9)
   associated array even when it's not accessible through any current local
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",10)
   variable name.
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",11)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",12)
   YottaDB aliases provide low level facilities on which an application can
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",13)
   implement object-oriented techniques. An object can be mapped onto, and
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",14)
   stored and manipulated in an array, then saved in an alias container
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",15)
   variable whence it can be retrieved for processing. The use of appropriate
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",16)
   subscripts in the array used for a container, provides a way to organize
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",17)
   the stored objects and retrieve them by using the $ORDER() function to
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",18)
   traverse the container array. The use of alias variables to implement
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",19)
   objects provides significant efficiencies over traditional local variables
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",20)
   because alias variables and alias container variables eliminate the need
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",21)
   to execute MERGE commands to move objects.
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",22)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",23)
   Example:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",24)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",25)
   YDB>kill A,B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",26)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",27)
   YDB>set A=1,*B=A ; B & A are aliases
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",28)
   YDB>write B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",29)
   1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",30)
   YDB>
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",31)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",32)
   The following table summarizes Alias Variables extensions.
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",33)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",34)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",35)
   |                  YottaDB Extensions for Alias Variables                |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",36)
   |------------------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",37)
   |      EXTENSION       |                   EXPLANATION                   |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",38)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",39)
   | Set *                | Explicitly creates an alias.                    |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",40)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",41)
   | Kill *               | Removes the association between its arguments,  |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",42)
   |                      | and any associated data cells.                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",43)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",44)
   |                      | When QUIT * terminates an extrinsic function or |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",45)
   |                      | an extrinsic special variable, it always        |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",46)
   | Quit *               | returns an alias container. For more            |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",47)
   |                      | information, refer to the description of QUIT * |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",48)
   |                      | in "Quit".                                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",49)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",50)
   | ZWrite / ZSHow "V"   | Produces Alias Variables format output.         |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",51)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",52)
   | New                  | For the scope of the NEW, a NEW of a name       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",53)
   |                      | suspends its alias association.                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",54)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",55)
   |                      | Create a scope in which some associations       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",56)
   | Exclusive New        | between an lname or an lvn and an array may be  |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",57)
   |                      | invisible.                                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",58)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",59)
   |                      | returns a unique identifier (handle) for the    |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",60)
   | $ZAHandle()          | array associated with an lname or an alias      |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",61)
   |                      | container; for an subscripted lvn that is not   |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",62)
   |                      | an alias container, it returns an empty string. |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",63)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",64)
   |                      | Extends $DATA() to reflect the current alias    |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",65)
   | $ZDATA()             | state of the lvn or lname argument in order to  |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",66)
   |                      | identify alias and alias container variables.   |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",67)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",68)
   | View and $View()     |                                                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",69)
   |----------------------+-------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",70)
   |                      | TSTART command can optionally list names whose  |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",71)
   |                      | arrays are restored on a transaction RESTART.   |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",72)
   | TSTART, RESTART, and | If any of these are alias variables or have     |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",73)
   | ROLLBACK             | nodes which are alias container variables,      |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",74)
   |                      | their associations are also restored on         |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",75)
   |                      | transaction RESTART.                            |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",76)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS",77)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES")
Examples
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",1)
   Examples
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",3)
   Example:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",4)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",5)
   $ /usr/local/lib/yottadb/r130/ydb -run ^tprestart
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",6)
   tprestart ; Transaction restart variable association also restored on restart
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",7)
     zprint ; Print this program
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",8)
     set A="Malvern",C="Pennsylvania",E="USA"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",9)
     set *B=C,*D(19355)=E
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",10)
     write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",11)
     write "Initial values & association",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",12)
     zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",13)
     tstart (B,D) ; On restart: A not restored, B,D restored, C,E restored by association
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",14)
     if '$TRestart Do  ; Change C,E if first time through
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",15)
     .set C="Wales",E="UK"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",16)
     .kill *D(19355)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",17)
     .write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",18)
     .write "First time through transaction; B,C,D,E changed",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",19)
     .zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",20)
     .set A="Brynmawr"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",21)
     .kill *B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",22)
     .write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",23)
     .write "A changed; association between B & C and D & E killed; B,D have no value",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",24)
     .zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",25)
     .trestart
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",26)
     else  Do  ; Show restored values on restart
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",27)
     write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",28)
     write "Second time through transaction; B,C,D,E & association restored",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",29)
     zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",30)
     tcommit ; No global updates in this transaction!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",31)
     quit
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",32)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",33)
   Initial values & association
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",34)
   A="Malvern"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",35)
   B="Pennsylvania" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",36)
   *C=B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",37)
   *D(19355)=E
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",38)
   E="USA" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",39)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",40)
   First time through transaction; B,C,D,E changed
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",41)
   A="Malvern"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",42)
   B="Wales" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",43)
   *C=B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",44)
   E="UK" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",45)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",46)
   A changed; association between B & C and D & E killed; B,D have no value
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",47)
   A="Brynmawr"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",48)
   C="Wales" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",49)
   E="UK" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",50)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",51)
   Second time through transaction; B,C,D,E & association restored
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",52)
   A="Brynmawr"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",53)
   B="Pennsylvania" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",54)
   *C=B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",55)
   *D(19355)=E
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",56)
   E="USA" ;*
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",57)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",58)
   Note that TROLLBACK does not restore alias variables:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",59)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",60)
   /usr/local/lib/yottadb/r130/ydb -run ^tprollback
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",61)
   tprollback ;
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",62)
     zprint ; Print this program
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",63)
     set A(1)=1,A(2)=2,A(3)=3
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",64)
     set B(1)="1b",*B(2)=A,B(3)=3 ; B includes a container for A
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",65)
     set *C(1)=B   ; C includes a container for B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",66)
     kill *A,*B   ; C is the only way to the data
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",67)
     write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",68)
     write "Only containers before transaction:",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",69)
     zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",70)
     tstart (C)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",71)
     if '$trestart
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",72)
     .set *D=C(1) ; D is now an alias for what used to be B
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",73)
     .set D(3)=-D(3)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",74)
     .set *D=D(2) ; D is now an alias for what used to be A
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",75)
     .set D(1)=-D(1)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",76)
     .kill *D  ; Kill D after is used to manipulate the arrays
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",77)
     .write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",78)
     .write "Changed values before restart:",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",79)
     .zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",80)
     .trestart
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",81)
     write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",82)
     write "Restored values restart:",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",83)
     zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",84)
     kill C ; Kill only handle to arrays
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",85)
     write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",86)
     write "No local arrays left:",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",87)
     zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",88)
     trollback  ; Rollback transaction, don't commit it
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",89)
     write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",90)
     write "Rollback doesnt restore names and local arrays",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",91)
     zwrite
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",92)
     quit
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",93)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",94)
   Only containers before transaction:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",95)
   $ZWRTAC=""
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",96)
   *C(1)=$ZWRTAC1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",97)
   $ZWRTAC1(1)="1b"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",98)
   *$ZWRTAC1(2)=$ZWRTAC2
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",99)
   $ZWRTAC2(1)=1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",100)
   $ZWRTAC2(2)=2
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",101)
   $ZWRTAC2(3)=3
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",102)
   $ZWRTAC1(3)=3
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",103)
   $ZWRTAC=""
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",104)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",105)
   Restored values restart:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",106)
   $ZWRTAC=""
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",107)
   *C(1)=$ZWRTAC1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",108)
   $ZWRTAC1(1)="1b"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",109)
   *$ZWRTAC1(2)=$ZWRTAC2
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",110)
   $ZWRTAC2(1)=1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",111)
   $ZWRTAC2(2)=2
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",112)
   $ZWRTAC2(3)=3
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",113)
   $ZWRTAC1(3)=3
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",114)
   $ZWRTAC=""
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",115)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",116)
   No local arrays left:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",117)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",118)
   Rollback doesnt restore names and local arrays
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",119)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",120)
   Example:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",121)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",122)
   $ /usr/local/lib/yottadb/r130/ydb -run ^aliasexample; Extended annotated alias example
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",123)
       zprint
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",124)
       write "------------",!
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",125)
       set x="name level",x(1)=1,x(1,2)="1,2",x("foo")="bar"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",126)
       write $ZDATA(x),! ; x is a conventional lvn - output 11
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",127)
       set *y=x ; x an y are now alias variables
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",128)
       write $ZDATA(x),! ; output appears as 111
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",129)
       set *a(1)=y ; a(1) is now an alias container variable
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",130)
       set b="bness",b("b")="bbness" ; b is a conventional lvn
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",131)
       set *b=a(1) ; b joins x and y as alias variables for the same data
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",132)
       ; prior b values are lost
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",133)
       ; set *<name> is equivalent to Kill *<name> Set *<name>
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",134)
       set y("hi")="sailor" ; Assignment applies to all of {b,x,y}
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",135)
       kill b("foo") ; Kill applies to all of {b,x,y}
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",136)
       kill *x ; x is undefined and no longer an alias variable
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",137)
       ; b and y still provide access to the data
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",138)
       write a(1),"<",! ; output appears as <
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",139)
       write a(1)*3,! ; output appears as 0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",140)
       write $length(a(1)),! ; output appears as 0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",141)
       set c=y,c("legs")="tars" ; c is conventional lvn with value "name level"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",142)
       do sub1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",143)
       write $Data(c),! ; output is 1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",144)
       do sub2(.c)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",145)
       set a(1)="" ; a(1) ceases to be an alias container variable
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",146)
       ; has the value ""
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",147)
       write $D(i),! ; output is 0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",148)
       kill *c,*y ; c and y become undefined lvns
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",149)
       zwrite b ; output is b("got")="a match"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",150)
       ; it's no longer an alias variable
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",151)
       ; as everything else has gone
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",152)
       quit
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",153)
   sub1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",154)
       new y ; in this scope y is no longer an alias for b
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",155)
       set *y=c ; in this scope c and y are alias variables
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",156)
       kill y("legs") ; Kill apples to all of {c,y}
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",157)
       kill *y ; in this scope y is no longer an alias for c
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",158)
       ; this is really redundant as
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",159)
       ; the Quit implicitly does the same thing
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",160)
       quit
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",161)
   sub2(i) ; i and c are joined due to pass-by-reference
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",162)
       write $ZAHandle(c)=$ZAHandle(i),! ; output appears as 1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",163)
       kill b ; data for {b,y} is gone
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",164)
       ; both are undefined, but remain alias variables
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",165)
       set *c=a(1) ; c joins {b,y} as alias variable; prior value of c lost
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",166)
       ; c is no longer alias of i
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",167)
       write $ZAHandle(c)=$ZAHandle(i),! ; output appears as 0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",168)
       set i=a(1) ; Assignment applies to i - value is ""
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",169)
       wet c("got")="a match" ; Assignment applies to all of {b,c,y)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",170)
       quit
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",171)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",172)
   ------------
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",173)
   11
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",174)
   111
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",175)
   <
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",176)
   0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",177)
   0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",178)
   1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",179)
   1
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",180)
   0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",181)
   0
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",182)
   b("got")="a match"
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","EXAMPLES",183)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES")
SET_*_and_QUIT_*_Examples
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",1)
   SET * and QUIT * Examples
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",3)
   The following table show the type of data movement of alias and alias
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",4)
   container variables from QUIT * in a function to a SET * target:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",5)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",6)
   +-------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",7)
   |                      |  QUIT *  |       SET *       |  Result   |ZWRITE |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",8)
   |----------------------+----------+-------------------+-----------+-------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",9)
   |                      |Creates an|Dereferences the   |Same as set|       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",10)
   |set *a=$$makealias(.c)|alias     |alias container    |*a=c       |*c=a   |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",11)
   |                      |container |                   |           |       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",12)
   |----------------------+----------+-------------------+-----------+-------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",13)
   |set                   |Creates an|Dereferences the   |Same as set|       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",14)
   |*a(1)=$$makealias(.c) |alias     |alias container    |*a(1)=c    |*a(1)=c|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",15)
   |                      |container |                   |           |       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",16)
   |----------------------+----------+-------------------+-----------+-------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",17)
   |                      |Returns an|Copies the alias   |Same as set|       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",18)
   |set *a=$$makecntnr(.c)|alias     |container          |*a=c(1)    |*c=a   |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",19)
   |                      |container |                   |           |       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",20)
   |----------------------+----------+-------------------+-----------+-------|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",21)
   |set                   |Returns an|Copies the alias   |Same as set|       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",22)
   |*a(1)=$$makecntnr(.c) |alias     |container          |*a(1)=c(1) |*a(1)=c|
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",23)
   |                      |container |                   |           |       |
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",24)
   +-------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",25)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",26)
   The makealias function returns an alias of the argument:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",27)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",28)
   makealias(var)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",29)
    quit *var
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",30)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",31)
   The makecntr function returns an alias container of the argument:
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",32)

^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",33)
   makecntnr(var)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",34)
    new cont
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",35)
    set *cont(1)=var
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",36)
    quit *cont(1)
^HELP("s","LANGUAGE_EXTENSIONS","s","ALIAS_VARIABLES_EXTENSIONS","s","SET_*_AND_QUIT_*_EXAMPLES",37)

^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES")
Debugging_Facilities
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",1)
   Debugging Facilities
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",3)
   YottaDB provides a number of debugging features. These features include the
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",4)
   ability to:
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",5)

^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",6)
     * Interactively execute routines using M commands.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",7)
     * Display lines that may contain errors using the ZPRINT command and the
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",8)
       $ZPOSITION special variable.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",9)
     * Redisplay error messages using the $ZSTATUS special variable and the
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",10)
       ZMESSAGE command.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",11)
     * Set breakpoints and actions to bypass an error using the ZBREAK
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",12)
       command.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",13)
     * Execute a line at a time using the ZSTEP command.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",14)
     * Display information about the M environment using the ZSHOW command.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",15)
     * Modify the invocation stack with QUIT and ZGOTO.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",16)
     * Incrementally add or modify code using the ZLINK and ZEDIT commands.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",17)
     * Continue execution using the ZCONTINUE command.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",18)
     * Establish "watch points" with triggers to trap incorrect accesses on
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",19)
       global variable updates.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",20)

^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",21)
   The following table summarizes the YottaDB language extensions that
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",22)
   facilitate debugging.
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",23)

^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",24)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",25)
   |                          YottaDB Debugging Tools                       |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",26)
   |------------------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",27)
   |  EXTENSION  |                       EXPLANATION                        |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",28)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",29)
   | ZBreak      | Establishes a temporary breakpoint, with optional M      |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",30)
   |             | action and/or activation count.                          |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",31)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",32)
   | ZContinue   | Continues routine execution from a break.                |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",33)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",34)
   | ZEDit       | Invokes the UNIX text editor specified by the EDITOR     |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",35)
   |             | environment variable.                                    |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",36)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",37)
   | ZGoto       | Removes multiple levels from the M invocation stack and  |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",38)
   |             | transfers control.                                       |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",39)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",40)
   | ZLink       | Includes a new or modified M routine in the current M    |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",41)
   |             | image; automatically recompiles if necessary.            |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",42)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",43)
   | ZMessage    | Signals the specified condition.                         |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",44)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",45)
   | ZPrint      | Displays lines of source code.                           |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",46)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",47)
   | ZSHow       | Displays information about the M environment.            |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",48)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",49)
   | ZSTep       | Incrementally executes a routine to the beginning of the |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",50)
   |             | next line of the same type.                              |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",51)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",52)
   | ZWRite      | Displays all or some local or global variables.          |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",53)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",54)
   | $ZCSTATUS   | Holds the value of the status code for the last compile  |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",55)
   |             | performed by a ZCOMPILE command.                         |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",56)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",57)
   | $ZEDit      | Contains the status code for the last ZEDit.             |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",58)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",59)
   | $ZJOBEXAM() | Performs a ZSHOW "*" to a default file location and      |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",60)
   |             | name, or the one optionally specified by the argument.   |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",61)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",62)
   | $ZLEVel     | Contains the current level of DO/XECUTE nesting.         |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",63)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",64)
   | $ZMessage() | Translates an error condition code into text form.       |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",65)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",66)
   | $ZPOSition  | Contains a string indicating the current execution       |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",67)
   |             | location.                                                |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",68)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",69)
   | $ZPROmpt    | Controls the symbol displayed as the direct mode prompt. |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",70)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",71)
   | $ZROutines  | Contains a string specifying a directory list containing |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",72)
   |             | the object, and optionally the source, files.            |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",73)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",74)
   |             | Contains name of the M source program most recently      |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",75)
   | $ZSOurce    | ZLINKed or ZEDITed; default name for next ZEDIT or       |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",76)
   |             | ZLINK.                                                   |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",77)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",78)
   | $ZStatus    | Contains error condition code and location of the last   |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",79)
   |             | exception condition occurring during routine execution.  |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",80)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",81)
   | $ZSTep      | Controls the default ZSTep action.                       |
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",82)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","DEBUGGING_FACILITIES",83)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES")
Exception_Handling_Facilities
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",1)
   Exception Handling Facilities
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",3)
   The YottaDB exception trapping allows you to do the following:
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",4)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",5)
     * DO a recovery routine and resume the original command stream.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",6)
     * GOTO any special handling; an extended ZGOTO provides for context
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",7)
       management.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",8)
     * Report an error and enter Direct Mode for debugging.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",9)
     * OPEN Input/Output devices with specific traps in addition to the main
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",10)
       trap.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",11)
     * Trap and process an exception based on a device error.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",12)
     * Trap and process an exception based on terminal input.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",13)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",14)
   The following table summarizes the YottaDB language extensions that
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",15)
   facilitate exception handling.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",16)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",17)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",18)
   |                   YottaDB Exception Handling Extensions                |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",19)
   |------------------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",20)
   |  EXTENSION  |                       EXPLANATION                        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",21)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",22)
   | ZGoto       | Removes zero or more levels from the M Invocation stack  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",23)
   |             | and, optionally, transfers control.                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",24)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",25)
   | ZMessage    | Signals the specified condition.                         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",26)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",27)
   | $ZCSTATUS   | Holds the value of the status code for the last compile  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",28)
   |             | performed by a ZCOMPILE command.                         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",29)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",30)
   | $ZEOF       | Contains indication of whether the last READ reached     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",31)
   |             | end-of-file.                                             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",32)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",33)
   | $ZMessage() | Translates an error condition code into text form.       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",34)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",35)
   | $ZLevel     | Contains current level of DO/XECUTE nesting.             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",36)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",37)
   | $ZStatus    | Contains error condition code and location of last       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",38)
   |             | exception condition occurring during routine execution.  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",39)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",40)
   | $ZSYstem    | Contains the status code of the last ZSYSTEM.            |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",41)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",42)
   | $ZTrap      | Contains an XECUTE string or entryref that YottaDB       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",43)
   |             | invokes upon encountering an exception condition.        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",44)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",45)
   |             | Provides a deviceparameter specifying an XECUTE string   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",46)
   | EXCEPTION   | or entryref that YottaDB invokes upon encountering a     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",47)
   |             | device-related exception condition.                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",48)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","EXCEPTION_HANDLING_FACILITIES",49)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD")
Extensions_for_the_support_for_the_Unicode(R)_standard
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",1)
   Extensions for the support for the Unicode(R) standard
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",3)
   To represent and process strings that use international characters, YottaDB
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",4)
   processes can use the UTF-8 encoding defined by the Unicode(R) standard.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",5)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",6)
   If the environment variable ydb_chset has a value of UTF-8 and either
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",7)
   LC_ALL or LC_CTYPE is set to a locale with UTF-8 support (for example,
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",8)
   zh_CN.utf8), a YottaDB process interprets strings as containing characters
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",9)
   encoded in the UTF-8 representation. In the UTF-8 mode, YottaDB no longer
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",10)
   assumes that one character is one byte, or that the glyph display width of
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",11)
   a character is one. Depending on how ICU is built on a computer system, in
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",12)
   order to operate in UTF-8 mode, a YottaDB process may well also need a third
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",13)
   environment variable, ydb_icu_version set appropriately.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",14)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",15)
   If the environment variable ydb_chset has no value, the string "M", or any
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",16)
   value other than "UTF-8", YottaDB treats each 8-bit byte as a character,
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",17)
   which suffices for English, and many single-language applications.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",18)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",19)
   All YottaDB components related to M mode reside in the top level directory
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",20)
   in which a YottaDB release is installed and the environment variable
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",21)
   ydb_dist should points to that directory for M mode processes. All YottaDB
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",22)
   components related to the UTF-8 mode reside in the utf8 subdirectory and
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",23)
   the environment variable ydb_dist should point to that subdirectory for
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",24)
   UTF-8 mode processes. So, in addition to the values of the environment
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",25)
   variables ydb_chset and LC_ALL/LC_CTYPE, ydb_dist for a UTF-8 process
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",26)
   should also point to the utf8 subdirectory.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",27)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",28)
   M mode and UTF-8 mode are set for the process, not for the database. As a
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",29)
   subset of UTF-8 characters, ASCII characters ($CHAR() values 0 through
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",30)
   127) are interpreted identically by processes in M and UTF-8 modes. The
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",31)
   indexes and values in the database are simply sequences of bytes and
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",32)
   therefore it is possible for one process to interpret a global node as
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",33)
   encoded in UTF-8 and for another to interpret the same node as bytecodes.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",34)
   Note that such an application configuration would be extremely unusual,
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",35)
   except perhaps during a transition phase or in connection with data
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",36)
   import/export.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",37)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",38)
   In UTF-8 mode, string processing functions (such as $EXTRACT()) operate on
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",39)
   strings of multi-byte characters, and can therefore produce different
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",40)
   results in M and UTF-8 modes, depending on the actual data processed. Each
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",41)
   function has a "Z" alter ego (for example, $ZEXTRACT()) that can be used
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",42)
   to operate on sequences of bytes identically in M and UTF-8 modes (that
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",43)
   is, in M mode, $EXTRACT() and $ZEXTRACT() behave identically).
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",44)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",45)
   In M mode, the concept of an illegal character does not exist. In UTF-8
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",46)
   mode, a sequence of bytes may not represent a valid character, and
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",47)
   generates an error when encountered by functions that expect and process
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",48)
   UTF-8 strings. During a migration of an application to add the support for
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",49)
   UTF-8 mode, illegal character errors may be frequent and indicative of
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",50)
   application code that is yet to be modified. VIEW "NOBADCHAR" suppresses
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",51)
   these errors at times when their presence impedes development.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",52)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",53)
   In UTF-8 mode, YottaDB also supports IO encoded in UTF-16 variants as well as
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",54)
   in the traditional one byte per character encoding from devices other than
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",55)
   $PRINCIPAL.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",56)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",57)
   The following table summarizes YottaDB's support for the Unicode(R) standard.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",58)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",59)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",60)
   |       EXTENSION        |                  EXPLANATION                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",61)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",62)
   |                        | IN UTF-8 mode, the $ASCII() function returns  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",63)
   |                        | the integer UTF-8 code-point value of a       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",64)
   | $ASCII()               | character in the given string. Note that the  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",65)
   |                        | name $ASCII() is somewhat anomalous for UTF-8 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",66)
   |                        | data but that name is the logical extension   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",67)
   |                        | of the function from M mode to UTF-8 mode.    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",68)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",69)
   |                        | In UTF-8 mode, $CHAR() returns a string       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",70)
   | $Char()                | composed of characters represented by the     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",71)
   |                        | integer equivalents of the UTF-8 code-points  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",72)
   |                        | specified in its argument(s).                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",73)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",74)
   | $Extract()             | The $EXTRACT() function returns a substring   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",75)
   |                        | of a given string.                            |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",76)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",77)
   |                        | The $FIND() function returns an integer       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",78)
   | $Find()                | character position that locates the           |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",79)
   |                        | occurrence of a substring within a string.    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",80)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",81)
   | $Justify()             | The $JUSTIFY function returns a formatted     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",82)
   |                        | string.                                       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",83)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",84)
   |                        | The $LENGTH() function returns the length of  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",85)
   | $Length()              | a string measured in characters, or in        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",86)
   |                        | "pieces" separated by a delimiter specified   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",87)
   |                        | by its optional second argument.              |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",88)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",89)
   |                        | The $PIECE() function returns a substring     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",90)
   | $Piece()               | delimited by a specified string delimiter     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",91)
   |                        | made up of one or more characters.            |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",92)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",93)
   |                        | The $TRANSLATE() function returns a string    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",94)
   |                        | that results from replacing or dropping       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",95)
   | $TRanslate()           | characters in the first of its arguments as   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",96)
   |                        | specified by the patterns of its other        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",97)
   |                        | arguments.                                    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",98)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",99)
   |                        | For UTF-8 mode and TRM and SD output, $X      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",100)
   | $X                     | increases by the display-columns (width in    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",101)
   |                        | glyphs) of a given string that is written to  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",102)
   |                        | the current device.                           |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",103)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",104)
   |                        | The $ZASCII() function returns the numeric    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",105)
   | $ZASCII()              | byte value (0 through 255) of a given         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",106)
   |                        | sequence of octets (8-bit bytes).             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",107)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",108)
   |                        | The read-only intrinsic special variable      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",109)
   |                        | $ZCHSET takes its value from the environment  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",110)
   |                        | variable ydb_chset. An application can obtain |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",111)
   | $ZCHset                | the character set used by a YottaDB process   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",112)
   |                        | by the value of $ZCHSET. $ZCHSET can have     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",113)
   |                        | only two values "M", or "UTF-8" and it cannot |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",114)
   |                        | appear on the left of an equal sign in the    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",115)
   |                        | SET command.                                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",116)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",117)
   |                        | The $ZCHAR() function returns a byte sequence |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",118)
   | $ZCHar()               | of one or more bytes corresponding to numeric |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",119)
   |                        | byte value (0 through 255) specified in its   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",120)
   |                        | argument(s).                                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",121)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",122)
   |                        | The $ZCONVERT() function returns its first    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",123)
   |                        | argument as a string converted to a different |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",124)
   | $ZCOnvert()            | encoding. The two argument form changes the   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",125)
   |                        | encoding for case within a character set. The |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",126)
   |                        | three argument form changes the encoding      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",127)
   |                        | scheme.                                       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",128)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",129)
   |                        | The $ZEXTRACT() function returns a byte       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",130)
   | $ZExtract()            | sequence of a given sequence of octets (8-bit |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",131)
   |                        | bytes).                                       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",132)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",133)
   |                        | The $ZFIND() function returns an integer byte |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",134)
   | $ZFind()               | position that locates the occurrence of a     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",135)
   |                        | byte sequence within a sequence of            |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",136)
   |                        | octets(8-bit bytes).                          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",137)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",138)
   | $ZJustify()            | The $JUSTIFY() function returns a formatted   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",139)
   |                        | and fixed length byte sequence.               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",140)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",141)
   |                        | The $ZLENGTH() function returns the length of |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",142)
   | $ZLength()             | a sequence of octets measured in bytes, or in |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",143)
   |                        | "pieces" separated by a delimiter specified   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",144)
   |                        | by its optional second argument.              |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",145)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",146)
   |                        | ZPATN[UMERIC] is a read-only intrinsic        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",147)
   |                        | special variable that determines how YottaDB  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",148)
   |                        | interprets the patcode N used in the pattern  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",149)
   |                        | match operator. With $ZPATNUMERIC="UTF-8",    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",150)
   | $ZPATNumeric           | the patcode N matches any numeric character   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",151)
   |                        | as defined by the Unicode standard. By        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",152)
   |                        | default patcode N only matches the ASCII      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",153)
   |                        | digits, which are the only digits which M     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",154)
   |                        | actually treats as numerics.                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",155)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",156)
   |                        | The $ZPIECE() function returns a sequence of  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",157)
   |                        | bytes delimited by a specified byte sequence  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",158)
   | $ZPIece()              | made up of one or more bytes. In M, $ZPIECE() |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",159)
   |                        | typically returns a logical field from a      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",160)
   |                        | logical record.                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",161)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",162)
   |                        | $ZPROM[PT] contains a string value specifying |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",163)
   |                        | the current Direct Mode prompt. By default,   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",164)
   |                        | YDB> is the Direct Mode prompt. M routines    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",165)
   |                        | can modify $ZPROMPT by means of a SET         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",166)
   |                        | command. $ZPROMPT cannot exceed 31 bytes. If  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",167)
   |                        | an attempt is made to assign $ZPROMPT to a    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",168)
   | $ZPROMpt               | longer string, YottaDB takes only the first   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",169)
   |                        | 31 bytes and truncates the rest. With         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",170)
   |                        | character set UTF-8 specified, if the 31st    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",171)
   |                        | byte is not the end of a valid UTF-8          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",172)
   |                        | character, YottaDB truncates the $ZPROMPT     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",173)
   |                        | value at the end of last character that       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",174)
   |                        | completely fits within the 31 byte limit.     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",175)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",176)
   | $ZSUBstr()             | The $ZSUBSTR() function returns a properly    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",177)
   |                        | encoded string from a sequence of bytes.      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",178)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",179)
   |                        | The $ZTRANSLATE() function returns a byte     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",180)
   |                        | sequence that results from replacing or       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",181)
   | $ZTRanslate()          | dropping bytes in the first of its arguments  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",182)
   |                        | as specified by the patterns of its other     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",183)
   |                        | arguments. $ZTRANSLATE() provides a tool for  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",184)
   |                        | tasks such as encryption.                     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",185)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",186)
   |                        | The $ZWIDTH() function returns the numbers of |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",187)
   | $ZWidth()              | columns required to display a given string on |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",188)
   |                        | the screen or printer.                        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",189)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",190)
   |                        | The YottaDB %HEX2UTF utility returns the      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",191)
   |                        | YottaDB encoded character string from the     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",192)
   | %HEX2UTF               | given bytestream in hexadecimal notation.     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",193)
   |                        | This routine has entry points for both        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",194)
   |                        | interactive and non-interactive use.          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",195)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",196)
   |                        | The YottaDB %UTF2HEX utility returns the      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",197)
   |                        | hexadecimal notation of the internal byte     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",198)
   | %UTF2HEX               | encoding of a UTF-8 encoded YottaDB character |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",199)
   |                        | string. This routine has entry points for     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",200)
   |                        | both interactive and non-interactive use.     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",201)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",202)
   |                        | Enables or disables automatic record          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",203)
   |                        | termination. When the current record size     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",204)
   | [NO]WRAP (USE)         | ($X) reaches the maximum WIDTH and the device |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",205)
   |                        | has WRAP enabled, YottaDB starts a new record,|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",206)
   |                        | as if the routine had issued a WRITE !        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",207)
   |                        | command.                                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",208)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",209)
   |                        | In UTF-8 mode, DSE and LKE accept Unicode     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",210)
   |                        | characters in all their command qualifiers    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",211)
   | DSE and LKE            | that require file names, keys, or data (such  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",212)
   |                        | as DSE -KEY, DSE -DATA and LKE -LOCK          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",213)
   |                        | qualifiers).                                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",214)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",215)
   |                        | GDE allows the name of a file to include      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",216)
   |                        | UTF-8 characters                              |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",217)
   | GDE Objects            |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",218)
   |                        | In UTF-8 mode, GDE considers a text file to   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",219)
   |                        | be encoded in UTF-8 when it is executed via   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",220)
   |                        | the "@" command.                              |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",221)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",222)
   |                        | Specifies character filtering for specified   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",223)
   |                        | cursor movement sequences on devices where    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",224)
   |                        | FILTER applies.                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",225)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",226)
   |                        | In UTF-8 mode, the usual Unicode line         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",227)
   | FILTER[=expr]          | terminators (U+000A (LF), U+0000D (CR),       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",228)
   |                        | U+000D followed by U+000A (CRLF), U+0085      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",229)
   |                        | (NEL), U+000C (FF), U+2028 (LS) and U+2029    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",230)
   |                        | (PS)) are recognized. If FILTER=CHARACTER is  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",231)
   |                        | enabled, all of the terminators are           |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",232)
   |                        | recognized to maintain the values of $X and   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",233)
   |                        | $Y.                                           |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",234)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",235)
   |                        | The Job command spawns a background process   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",236)
   |                        | with the same environment as the M process    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",237)
   |                        | doing the spawning. Therefore, if the parent  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",238)
   |                        | process is operating in UTF-8 mode, the Job'd |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",239)
   | Job                    | process also operates in UTF-8 mode. In the   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",240)
   |                        | event that a background process must have a   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",241)
   |                        | different mode from the parent, create a      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",242)
   |                        | shell script to alter the environment as      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",243)
   |                        | needed, and spawn it with a ZSYstem command   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",244)
   |                        | or start it as a PIPE device.                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",245)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",246)
   |                        | MUPIP EXTRACT                                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",247)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",248)
   |                        | In UTF-8 mode, MUPIP EXTRACT, MUPIP JOURNAL   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",249)
   |                        | -EXTRACT and MUPIP JOURNAL -LOSTTRANS write   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",250)
   |                        | sequential output files in the UTF-8          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",251)
   |                        | character encoding form. For example, in      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",252)
   |                        | UTF-8 mode if ^A has the value of             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",253)
   |                        | ************, the sequential output file of   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",254)
   |                        | the MUPIP EXTRACT command is:                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",255)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",256)
   |                        | 09-OCT-2006 04:27:53 ZWR                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",257)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",258)
   |                        | YottaDB MUPIP EXTRACT UTF-8                   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",259)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",260)
   | MUPIP                  | ^A="************"                             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",261)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",262)
   |                        | MUPIP LOAD                                    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",263)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",264)
   |                        | MUPIP LOAD command considers a sequential     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",265)
   |                        | file as encoded in UTF-8 if the environment   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",266)
   |                        | variable ydb_chset is set to UTF-8. Ensure    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",267)
   |                        | that MUPIP EXTRACT commands and corresponding |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",268)
   |                        | MUPIP LOAD commands execute with the same     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",269)
   |                        | setting for the environment variable          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",270)
   |                        | ydb_chset. The M utility programs %GO and %GI |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",271)
   |                        | have the same requirement for mode matching.  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",272)
   |                        | For more information on MUPIP EXTRACT and     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",273)
   |                        | MUPIP LOAD, refer to the General Database     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",274)
   |                        | Management chapter in YottaDB Administration  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",275)
   |                        | and Operations Guide.                         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",276)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",277)
   |                        | In UTF-8 mode, the OPEN command recognizes    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",278)
   | Open                   | ICHSET, OCHSET, and CHSET as three additional |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",279)
   |                        | deviceparameters to determine the encoding of |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",280)
   |                        | the input / output devices.                   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",281)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",282)
   |                        | YottaDB allows the pattern string literals to |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",283)
   | Pattern Match Operator | contain UTF-8 characters. Additionally,       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",284)
   | (?)                    | YottaDB extends the M standard pattern codes  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",285)
   |                        | (patcodes) A, C, N, U, L, P and E to the      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",286)
   |                        | UTF-8 character set.                          |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",287)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",288)
   |                        | In UTF-8 mode, the READ command uses the      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",289)
   |                        | character set value specified on the device   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",290)
   |                        | OPEN as the character encoding of the input   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",291)
   |                        | device. If character set "M" or "UTF-8" is    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",292)
   |                        | specified, the data is read with no           |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",293)
   |                        | transformation. If character set is "UTF-16", |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",294)
   | Read                   | "UTF-16LE", or "UTF-16BE", the data is read   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",295)
   |                        | with the specified encoding and transformed   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",296)
   |                        | to UTF-8. If the READ command encounters an   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",297)
   |                        | illegal character or a character outside the  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",298)
   |                        | selected representation, it triggers a        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",299)
   |                        | run-time error. The READ command recognizes   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",300)
   |                        | all Unicode line terminators for non-FIXED    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",301)
   |                        | devices.                                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",302)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",303)
   |                        | When a number sign (#) and a non-zero integer |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",304)
   |                        | expression immediately follow the variable    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",305)
   |                        | name, the integer expression determines the   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",306)
   |                        | maximum number of characters accepted as the  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",307)
   |                        | input to the READ command. In UTF-8 or UTF-16 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",308)
   | Read #                 | modes, this can occur in the middle of a      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",309)
   |                        | sequence of combining code-points (some of    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",310)
   |                        | which are typically non-spacing). When this   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",311)
   |                        | happens, any display on the input device, may |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",312)
   |                        | not represent the characters returned by the  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",313)
   |                        | fixed-length READ (READ #).                   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",314)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",315)
   |                        | In UTF-8 or UTF-16 modes, the READ * command  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",316)
   | Read *                 | accepts one Unicode character of input and    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",317)
   |                        | puts the numeric UTF-8 code-point value for   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",318)
   |                        | that character into the variable.             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",319)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",320)
   |                        | As an aid to migrating applications to using  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",321)
   |                        | the Unicode standard, this UTF-8 mode VIEW    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",322)
   | View "[NO]BADCHAR"     | command determines whether UTF-8 enabled      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",323)
   |                        | functions trigger errors when they encounter  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",324)
   |                        | illegal strings.                              |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",325)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",326)
   |                        | For some languages (such as Chinese), the     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",327)
   |                        | ordering of character strings encoded with    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",328)
   |                        | UTF-8 may not be the linguistically or        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",329)
   |                        | culturally correct ordering. Supporting       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",330)
   |                        | applications in such languages requires       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",331)
   | User-defined Collation | development of collation modules - YottaDB    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",332)
   |                        | natively supports M collation, but does not   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",333)
   |                        | include pre-built collation modules for any   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",334)
   |                        | specific natural language. Therefore,         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",335)
   |                        | applications that use UTF-8 characters may    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",336)
   |                        | need to implement their own collation         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",337)
   |                        | functions.                                    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",338)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",339)
   |                        | When ICHSET is UTF-16, YottaDB uses BOM       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",340)
   |                        | (U+FEFF) to automatically determine the       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",341)
   |                        | endianess. For this to happen, the BOM must   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",342)
   |                        | appear at the beginning of the file or data   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",343)
   |                        | stream. If BOM is not present, YottaDB        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",344)
   |                        | assumes big endianess. SEEK or APPEND         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",345)
   |                        | operations require specifying the endianess   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",346)
   |                        | (UTF-16LE or UTF-16BE) because they do not go |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",347)
   |                        | to the beginning of the file or data stream   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",348)
   |                        | to automatically determine the endianess.     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",349)
   |                        | When endianess is not specified, SEEK or      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",350)
   |                        | APPEND assume big endianess.                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",351)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",352)
   | Unicode(R) Byte Order  | If the character set of a device is UTF-8,    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",353)
   | Marker (BOM)           | YottaDB checks for and ignores a BOM on input.|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",354)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",355)
   |                        | If the BOM does not match the character set   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",356)
   |                        | specified at device OPEN, YottaDB produces an |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",357)
   |                        | error. READ does not return BOM to the        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",358)
   |                        | application and the BOM is not counted as     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",359)
   |                        | part of the first record.                     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",360)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",361)
   |                        | If the output character set for a device is   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",362)
   |                        | UTF-16 (but not UTF-16BE or UTF-16LE,)        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",363)
   |                        | YottaDB writes a BOM before the initial       |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",364)
   |                        | output. The application code does not need to |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",365)
   |                        | explicitly write the BOM.                     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",366)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",367)
   |                        | In UTF-8 mode and TRM and SD output, the      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",368)
   |                        | WIDTH deviceparameter specifies the           |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",369)
   | WIDTH=intexpr (USE)    | display-columns and is used with $X to        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",370)
   |                        | control truncation and WRAPing of the visual  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",371)
   |                        | representation of the stream.                 |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",372)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",373)
   |                        | In UTF-8 mode, the WRITE command uses the     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",374)
   |                        | character set specified on the device OPEN as |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",375)
   |                        | the character encoding of the output device.  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",376)
   |                        | If character set specifies "M" or "UTF-8",    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",377)
   | Write                  | YottaDB WRITEs the data with no               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",378)
   |                        | transformation. If character set specifies    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",379)
   |                        | "UTF-16", "UTF-16LE" or "UTF-16BE", the data  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",380)
   |                        | is assumed to be encoded in UTF-8 and WRITE   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",381)
   |                        | transformsit to the character encoding        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",382)
   |                        | specified bycharacter set device parameter.   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",383)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",384)
   |                        | When the argument of a WRITE command consists |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",385)
   |                        | of a leading asterisk (*) followed by an      |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",386)
   | Write *                | integer expression, the WRITE command outputs |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",387)
   |                        | the character represented by the code-point   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",388)
   |                        | value of that integer expression.             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",389)
   |------------------------+-----------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",390)
   |                        | In UTF-8 mode, the ZSHOW command exhibits     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",391)
   |                        | byte-oriented and display-oriented behavior   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",392)
   |                        | as follows:                                   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",393)
   |                        |                                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",394)
   |                        |  1. ZSHOW targeted to a device (ZSHOW "*")    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",395)
   |                        |     aligns the output according to the        |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",396)
   |                        |     numbers of display columns specified by   |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",397)
   |                        |     the WIDTH deviceparameter.                |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",398)
   | ZSHow                  |  2. ZSHOW targeted to a local (ZSHOW "*":lcl) |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",399)
   |                        |     truncates data exceeding 2048KB at the    |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",400)
   |                        |     last character that fully fits within the |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",401)
   |                        |     2048KB limit.                             |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",402)
   |                        |  3. ZSHOW targeted to a global (ZSHOW         |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",403)
   |                        |     "*":^CC) truncates data exceeding the     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",404)
   |                        |     maximum record size for the target global |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",405)
   |                        |     at the last character that fully fits     |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",406)
   |                        |     within that record size.                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",407)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD",408)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU")
ICU
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",1)
   ICU
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",3)
   ICU is a widely used, defacto standard package (see http://icu-project.org
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",4)
   for more information) that YottaDB relies on for most operations that require
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",5)
   knowledge of the Unicode(R) character sets, such as text boundary
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",6)
   detection, character string conversion between UTF-8 and UTF-16, and
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",7)
   calculating glyph display widths.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",8)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",9)
   **Important**
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",10)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",11)
   Unless the support for the Unicode standard is sought for a process (that
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",12)
   is, unless the environment variable ydb_chset is UTF-8"), YottaDB processes
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",13)
   do not need ICU. In other words, existing applications that are not based
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",14)
   on the Unicode standard continue to work on supported platforms without
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",15)
   ICU.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",16)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",17)
   An ICU version number is of the form major.minor.milli.micro where major,
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",18)
   minor, milli and micro are integers. Two versions that have different
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",19)
   major and/or minor version numbers can differ in functionality and API
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",20)
   compatibility is not guaranteed. Differences in milli or micro versions
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",21)
   are maintenance releases that preserve functionality and API
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",22)
   compatibility. ICU reference releases are defined by major and minor
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",23)
   version numbers. Note that display widths for some characters changed in
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",24)
   ICU 4.0 and may change again in the future, as both languages and ICU
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",25)
   evolve.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",26)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",27)
   An operating system's distribution generally includes an ICU library
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",28)
   tailored to the OS and hardware, therefore YottaDB does not provide any ICU
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",29)
   library. In order to support UTF-8 functionality, YottaDB requires an
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",30)
   appropriate version of ICU to be installed on the system - check the
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",31)
   release notes for your YottaDB release for supported ICU versions.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",32)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",33)
   YottaDB expects ICU to be compiled with symbol renaming disabled and will
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",34)
   issue an error at startup if the available version of ICU is built with
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",35)
   symbol renaming enabled. To use a version of ICU built with symbol
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",36)
   renaming enabled, the $ydb_icu_version environment variable indicates the
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",37)
   MAJOR VERSION and MINOR VERSION numbers of the desired ICU formatted as
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",38)
   MajorVersion.MinorVersion (for example "3.6" to denote ICU-3.6). When
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",39)
   $ydb_icu_version is so defined, YottaDB attempts to open the specific version
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",40)
   of ICU. In this case, YottaDB works regardless of whether or not symbols in
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",41)
   this ICU have been renamed. A missing or ill-formed value for this
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",42)
   environment variable causes YottaDB to only look for non-renamed ICU symbols.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",43)
   The release notes for each YottaDB release identify the required reference
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",44)
   release version number as well as the milli and micro version numbers that
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",45)
   were used to test YottaDB prior to release. In general, it should be safe to
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",46)
   use any version of ICU with the specific ICU reference version number
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",47)
   required and milli and micro version numbers greater than those identified
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",48)
   in the release notes for that YottaDB version.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",49)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",50)
   ICU supports multiple threads within a process, and an ICU binary library
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",51)
   can be compiled from source code to either support or not support multiple
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",52)
   threads. In contrast, YottaDB does not support multiple threads within a
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",53)
   YottaDB process. On some platforms, the stock ICU library, which is usually
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",54)
   compiled to support multiple threads, may work unaltered with YottaDB. On
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",55)
   other platforms, it may be required to rebuild ICU from its source files
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",56)
   with support for multiple threads turned off. Refer to the release notes
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",57)
   for each YottaDB release for details about the specific configuration tested
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",58)
   and supported. In general, the YottaDB team's preference for ICU binaries
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",59)
   used for each YottaDB version are, in decreasing order of preference:
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",60)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",61)
    1. The stock ICU binary provided with the operating system distribution.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",62)
    2. A binary distribution of ICU from the download section of the ICU
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",63)
       project page.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",64)
    3. A version of ICU locally compiled from source code provided by the
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",65)
       operating system distribution with a configuration disabling
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",66)
       multi-threading.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",67)
    4. A version of ICU locally compiled from the source code from the ICU
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",68)
       project page with a configuration disabling multi-threading.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",69)

^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",70)
   YottaDB uses the POSIX function dlopen() to dynamically link to ICU. In the
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",71)
   event you have other applications that require ICU compiled with threads,
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",72)
   place the different builds of ICU in different locations, and use the
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",73)
   dlopen() search path feature (for example, the LD_LIBRARY_PATH environment
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",74)
   variable on Linux) to enable each application to link with its appropriate
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",75)
   ICU.
^HELP("s","LANGUAGE_EXTENSIONS","s","EXTENSIONS_FOR_THE_SUPPORT_FOR_THE_UNICODE(R)_STANDARD","s","ICU",76)

^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS")
Journaling_Extensions
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",1)
   Journaling Extensions
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",3)
   Journaling records redundant copies of database update information to
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",4)
   increase protection against loss of information due to hardware and
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",5)
   software failure. In YottaDB, TSTART and TCOMMIT mark the beginning and end
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",6)
   of an application (logical) transaction, which may consist of multiple
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",7)
   global variable updates. When a TCOMMIT takes $TLEVEL from one (1) to zero
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",8)
   (0), it transfer all of the transaction updates to the journal file, and,
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",9)
   except if TRANSACTIONID="BATCH", returns control to the application only
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",10)
   after the associated records reach the secondary storage holding the
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",11)
   journal file.
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",12)

^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",13)
   The following table summarizes the YottaDB language extensions for
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",14)
   journaling.
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",15)

^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",16)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",17)
   |                         Journaling Extensions                          |
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",18)
   |------------------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",19)
   | EXTENSION |                        EXPLANATION                         |
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",20)
   |-----------+------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",21)
   | View      | Extended to ensure that YottaDB has transferred all        |
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",22)
   |           | updates to the journal file.                               |
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",23)
   |-----------+------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",24)
   | $View()   | Extended for examining journaling status.                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",25)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","JOURNALING_EXTENSIONS",26)

^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES")
_Interface_Facilities
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",1)
    Interface Facilities
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",2)

^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",3)
   To improve efficiency and reduce duplication and inconsistency, YottaDB is
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",4)
   closely integrated with the host operating system environment. With YottaDB
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",5)
   you can gain access to the operating system facilities to examine:
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",6)

^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",7)
     * System information, such as quotas and SIDs
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",8)
     * Jobs and processes
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",9)
     * Directories and files
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",10)
     * Devices
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",11)
     * Messages
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",12)
     * Privileges
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",13)

^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",14)
   The following table summarizes the YottaDB operating system interface
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",15)
   facilities.
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",16)

^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",17)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",18)
   |                 Operating System Interface Facilities                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",19)
   |------------------------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",20)
   |  EXTENSION  |                       EXPLANATION                        |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",21)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",22)
   | ZSYstem     | Provides access to the shell.                            |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",23)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",24)
   | $ZMessage() | Translates an error condition code into text form.       |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",25)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",26)
   | $ZCMdline   | Contains a string value specifying the "excess" portion  |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",27)
   |             | of the command line that invoked the YottaDB process.    |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",28)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",29)
   | $ZJob       | Holds the pid of the process created by the last JOB     |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",30)
   |             | command performed by the current process.                |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",31)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",32)
   | $ZPARSE()   | Parses a UNIX filename.                                  |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",33)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",34)
   | $ZSEARCH()  | Searches for one or more UNIX files.                     |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",35)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",36)
   | $ZSYstem    | Contains the status code of the last ZSYSTEM.            |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",37)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",38)
   | $ZTRNLNM()  | Translates an environment variable.                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",39)
   |-------------+----------------------------------------------------------|
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",40)
   | $ZDIRectory | Contains current working directory.                      |
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",41)
   +------------------------------------------------------------------------+
^HELP("s","LANGUAGE_EXTENSIONS","s","_INTERFACE_FACILITIES",42)

^HELP("s","M_LANG_FEATURES")
M_Lang_Features
^HELP("s","M_LANG_FEATURES",1)
   M Lang Features
^HELP("s","M_LANG_FEATURES",2)

^HELP("s","M_LANG_FEATURES",3)
   MUMPS is a general purpose language with an embedded database system. This
^HELP("s","M_LANG_FEATURES",4)
   section describes the features of the language that are not covered as
^HELP("s","M_LANG_FEATURES",5)
   Commands, Functions, or Intrinsic Special Variables chapters.
^HELP("s","M_LANG_FEATURES",6)

^HELP("s","M_LANG_FEATURES","s","COMMANDS")
Commands
^HELP("s","M_LANG_FEATURES","s","COMMANDS",1)
   Commands
^HELP("s","M_LANG_FEATURES","s","COMMANDS",2)

^HELP("s","M_LANG_FEATURES","s","COMMANDS",3)
   M commands may be abbreviated to a defined prefix. Most commands have
^HELP("s","M_LANG_FEATURES","s","COMMANDS",4)
   arguments. However, some commands have either optional arguments or no
^HELP("s","M_LANG_FEATURES","s","COMMANDS",5)
   arguments. When a command has no argument and is followed by more commands
^HELP("s","M_LANG_FEATURES","s","COMMANDS",6)
   on the same line, at least two spaces (<SP>) must follow the command
^HELP("s","M_LANG_FEATURES","s","COMMANDS",7)
   without arguments. Commands that accept arguments generally accept
^HELP("s","M_LANG_FEATURES","s","COMMANDS",8)
   multiple arguments on the same command. M treats multiple arguments the
^HELP("s","M_LANG_FEATURES","s","COMMANDS",9)
   same as multiple occurrences of the same command, each with its own
^HELP("s","M_LANG_FEATURES","s","COMMANDS",10)
   argument.
^HELP("s","M_LANG_FEATURES","s","COMMANDS",11)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS")
Postconditionals
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",1)
   Postconditionals
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",2)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",3)
   M provides postconditionals as a tool for placing a condition on the
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",4)
   execution of a single command and, in some cases, a single command
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",5)
   argument. A postconditional consists of a colon (:) delimiter followed by
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",6)
   a truth-valued expression. When the expression evaluates to true, M
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",7)
   executes the command occurrence. When the expression evaluates to false, M
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",8)
   does not execute the command occurrence.
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS",9)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS")
Argument_Postconditionals
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",1)
   Argument Postconditionals
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",2)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",3)
   Commands that affect the flow of control may accept postconditionals on
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",4)
   individual command arguments. Because multiple arguments act as multiple
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",5)
   commands, this is a straight-forward application of the same principal as
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",6)
   command postconditional. The only M standard commands that accept argument
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",7)
   postconditionals are DO, GOTO, and XECUTE. The YottaDB command extensions
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",8)
   that accept argument postconditionals are BREAK, ZGOTO, and ZSYSTEM.
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","ARGUMENT_POSTCONDITIONALS",9)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS")
Command_Postconditionals
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",1)
   Command Postconditionals
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",2)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",3)
   Command postconditionals appear immediately following a command and apply
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",4)
   to all arguments for the command when it has multiple arguments. All
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",5)
   commands except commands that themselves have a conditional aspect accept
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",6)
   a command postconditional. Among the M standard commands, ELSE, FOR, and
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",7)
   IF do not accept command postconditionals. All the YottaDB command extensions
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",8)
   accept command postconditionals. When a postconditional evaluates to a
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",9)
   literal FALSE (0), YottaDB discards the command and its arguments at compile
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",10)
   time, which means it does not perform any validity checking on the
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",11)
   arguments.
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","POSTCONDITIONALS","s","COMMAND_POSTCONDITIONALS",12)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS")
Timeouts
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",1)
   Timeouts
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",2)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",3)
   M provides timeouts as a tool to retain program control over commands of
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",4)
   indefinite duration. A timeout consists of a colon (:) delimiter on an
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",5)
   argument, followed by a numeric expression specifying the number of
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",6)
   seconds to millisecond (three decimal place) precision for M to attempt to
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",7)
   execute the command. When the timeout is zero (0), M makes a single
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",8)
   attempt to complete the command.
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",9)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",10)
   YottaDB caps the maximum timeout to 2,147,483,647 seconds (about 24.8 days),
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",11)
   and converts values greater than the maximum timeout to that cap. When a
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",12)
   command has a timeout, M maintains the $TEST intrinsic special variable as
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",13)
   the command completes. If the command completes successfully, M sets $TEST
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",14)
   to TRUE (1). If the command times out before successful completion, M sets
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",15)
   $TEST to FALSE (0). When a command argument does not specify a timeout, M
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",16)
   does not maintain $TEST.
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",17)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",18)
     o LOCK
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",19)
     o JOB
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",20)
     o OPEN
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",21)
     o READ
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",22)
     o ZALLOCATE
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",23)

^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",24)
   When a READ times out, M returns any characters that have arrived between
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",25)
   the start of the command and the timeout. M does not produce any partial
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",26)
   results for any of the other timed commands.
^HELP("s","M_LANG_FEATURES","s","COMMANDS","s","TIMEOUTS",27)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES")
Data_Types
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES",1)
   Data Types
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES",2)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES",3)
   M operates with a single basic data type, string. However, M evaluates
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES",4)
   data using methods that vary according to context.
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES",5)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS")
Integer_Expressions
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS",1)
   Integer Expressions
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS",2)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS",3)
   When M syntax specifies an intexpr, M evaluates the data as it would a
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS",4)
   numexpr except that it stops the evaluation at any decimal point including
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS",5)
   the first.
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","INTEGER_EXPRESSIONS",6)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY")
Numeric_Accuracy
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY",1)
   Numeric Accuracy
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY",2)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY",3)
   YottaDB provides 18 digits of accuracy, independent of the decimal point (.)
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY",4)
   placement, and a numeric range from 10**(-43) to (10**47). Numbers with
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY",5)
   three digits or fewer to the right of the decimal point are precise.
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_ACCURACY",6)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS")
Numeric_Expressions
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",1)
   Numeric Expressions
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",2)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",3)
   When M syntax specifies a numexpr, M evaluates the data as a sequence of
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",4)
   ASCII characters that specify a number. M stops the evaluation and
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",5)
   provides the result generated from successfully evaluated characters when
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",6)
   it encounters any character that is not the following:
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",7)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",8)
     * A digit 0-9
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",9)
     * A plus sign (+) or minus sign (-) and also the first character in the
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",10)
       string
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",11)
     * The first decimal point (.) in the string
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","NUMERIC_EXPRESSIONS",12)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS")
Truth-valued_Expressions
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",1)
   Truth-valued Expressions
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",2)

^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",3)
   When M syntax specifies a tvexpr, M evaluates the data as a numeric.
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",4)
   However, it stops the evaluation and returns a true value (1) as soon as
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",5)
   it encounters a non-zero digit, otherwise it returns a false value (0). In
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",6)
   other words, M treats expressions that have a non-zero numeric value as
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",7)
   true, and expressions that have a zero numeric value as false. The sign
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",8)
   and/or decimal have no affect on the evaluation of a truth-valued
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",9)
   expression.
^HELP("s","M_LANG_FEATURES","s","DATA_TYPES","s","TRUTH-VALUED_EXPRESSIONS",10)

^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS")
Expressions
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",1)
   Expressions
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",2)

^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",3)
   The following items are legal M expression atoms (expratom). An expression
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",4)
   atom is a component of an M expression.
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",5)

^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",6)
     * Local variables
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",7)
     * Global variables
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",8)
     * Intrinsic special variables
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",9)
     * Intrinsic functions
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",10)
     * Extrinsic functions
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",11)
     * Extrinsic special variables
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",12)
     * Numeric literals
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",13)
     * String literals
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",14)
     * An expression enclosed in parentheses
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",15)
     * Any of the above preceded by a unary operator
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",16)

^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",17)
   In addition, any of these items may be combined with a binary operator and
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",18)
   another expression atom.
^HELP("s","M_LANG_FEATURES","s","EXPRESSIONS",19)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS")
External_Calls
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",1)
   External Calls
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",2)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",3)
   YottaDB allows references to a YottaDB database from programs written in other
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",4)
   programming languages that run under UNIX.
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",5)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",6)
   In YottaDB, calls to C language routines may be made with the following
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",7)
   syntax:
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",8)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",9)
   DO &[packagename.]name[^name][parameter-list]
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",10)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",11)
   or as an expression element,
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",12)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",13)
   $&[packagename.]name[^name][parameter-list]
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",14)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",15)
   Where packagename, like the name elements is a valid M name. Because of
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",16)
   the parsing conventions of M, the identifier between the ampersand (&) and
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",17)
   the optional parameter-list has precisely constrained punctuation - a
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",18)
   later section describes how to transform this into a more richly
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",19)
   punctuated name should that be appropriate for the called function. While
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",20)
   the intent of the syntax is to permit the name^name to match an M
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",21)
   labelref, there is no semantic implication to any use of the caret (^).
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",22)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",23)
   **Note**
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",24)

^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",25)
   For more information on external calls, see Chapter 11: "Integrate
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",26)
   External".
^HELP("s","M_LANG_FEATURES","s","EXTERNAL_CALLS",27)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS")
Extrinsic_Functions
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",1)
   Extrinsic Functions
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",2)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",3)
   An extrinsic function is an M subroutine that another M routine can invoke
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",4)
   to return a value.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",5)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",6)
   The format for extrinsic functions is:
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",7)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",8)
   $$[label][^routinename]([expr|.lname[,...]])
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",9)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",10)
   M stacks $TEST for extrinsic functions. This is one of the two major
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",11)
   differences between the DO command with parameters and extrinsics. On
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",12)
   return from an extrinsic function, M restores the value of $TEST to what
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",13)
   it was before the extrinsic function, regardless of the actions executed
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",14)
   by the invoked routine.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",15)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",16)
   M requires a routine that implements an extrinsic function to terminate
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",17)
   with an explicit QUIT command which has an argument. M returns the value
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",18)
   of the QUIT command argument as the value of the extrinsic function. This
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",19)
   is the other major difference between the DO command with parameters and
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",20)
   extrinsics. It is now possible to invoke a C function in a package via the
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",21)
   external call mechanism.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",22)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",23)
   Example:
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",24)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",25)
   POWER(V,X,S,T);extrinsic to raise to a power
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",26)
   ;ignores fractional powers
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",27)
   SET T=1,S=0
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",28)
   IF X<0 SET X=-X,S=1
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",29)
   FOR X=1:1:X S T=T*V
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",30)
   QUIT $S(S:1/T,1:T)
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",31)
   YDB> WRITE $$^POWER(3,4)
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",32)
   81
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",33)
   YDB>
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",34)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",35)
   **Note**
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",36)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",37)
   The POWER routine uses a formallist that is longer than the "expected"
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",38)
   actuallist to protect local working variables. Such practice may be
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",39)
   encouraged or discouraged by your institution's standards.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_FUNCTIONS",40)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES")
Extrinsic_Special_Variables
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",1)
   Extrinsic Special Variables
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",2)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",3)
   An extrinsic special variable is a user-written M subroutine that another
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",4)
   M routine can invoke to return a value.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",5)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",6)
   The format for extrinsic special variables is:
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",7)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",8)
   $$[label][^routinename]
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",9)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",10)
   An extrinsic special variable can be thought of as an extrinsic function
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",11)
   without input parameters. $$x is equivalent in operation to $$x().
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",12)
   Extrinsic special variables are the only case where invocation of a
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",13)
   formallabel does not require an actuallist. M stacks $TEST for extrinsic
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",14)
   special variables.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",15)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",16)
   M requires that a routine that implements an extrinsic special variable
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",17)
   terminate with an explicit QUIT command which has an argument. M returns
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",18)
   the value of the QUIT command argument as the value of the extrinsic
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",19)
   special variable.
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",20)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",21)
   Example:
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",22)

^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",23)
   YDB>ZPRINT ^DAYOWEEK
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",24)
   DAYOWEEK();extrinsic special variable to
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",25)
   ;provide the day of the week
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",26)
   QUIT $ZD($H,"DAY")
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",27)
   YDB>WRITE $$DAYOWEEK^DAYOWEEK
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",28)
   MON
^HELP("s","M_LANG_FEATURES","s","EXTRINSIC_SPECIAL_VARIABLES",29)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION")
Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION",1)
   Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION",3)
   M provides indirection as a means to defer definition of elements of the
^HELP("s","M_LANG_FEATURES","s","INDIRECTION",4)
   code until run-time. Indirection names a variable that holds or "points"
^HELP("s","M_LANG_FEATURES","s","INDIRECTION",5)
   to the element. The indirection operator is the "at" symbol (@).
^HELP("s","M_LANG_FEATURES","s","INDIRECTION",6)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION")
Argument_Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",1)
   Argument Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",3)
   Most commands accept indirection of their entire argument.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",4)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",5)
   Example:
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",6)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",7)
   YDB>set x="^INDER"
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",8)
   YDB>do @x
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",9)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",10)
   This example is equivalent to do ^INDER.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ARGUMENT_INDIRECTION",11)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION")
Atomic_Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",1)
   Atomic Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",3)
   Any expratom or any local or global variable name may be replaced by
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",4)
   indirection.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",5)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",6)
   Example:
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",7)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",8)
   YDB>set x="HOOP",b="x"
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",9)
   YDB>set a="HULA "_@b
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",10)
   YDB>write a
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",11)
   HULA HOOP
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",12)
   YDB>
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",13)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",14)
   This example uses indirection within a concatenation operation.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ATOMIC_INDIRECTION",15)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION")
Entryref_Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",1)
   Entryref Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",3)
   Any element of an entryref may be replaced by indirection.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",4)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",5)
   Example:
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",6)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",7)
   YDB>set lab="START",routine="PROG"
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",8)
   YDB>do @lab^@routine
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",9)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",10)
   This example is equivalent to do START^PROG.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","ENTRYREF_INDIRECTION",11)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS")
Indirection_Concerns
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",1)
   Indirection Concerns
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",3)
   M indirection provides a very powerful tool for allowing program
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",4)
   abstraction. However, because indirection is frequently unnecessary and
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",5)
   has some disadvantages, use it carefully.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",6)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",7)
   Because routines that use indirection in some ways do not contain adequate
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",8)
   information for easy reading, such routines tend to be more difficult to
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",9)
   debug and maintain.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",10)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",11)
   To improve run-time performance, YottaDB tends to move work from run-time to
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",12)
   compile-time. Indirection forces compiler actions to occur at run-time,
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",13)
   which minimizes the benefits of compilation.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",14)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",15)
   M allows most forms of indirection to be recursive. However, in real
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",16)
   applications, recursive indirection typically makes the code obscure and
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",17)
   slow.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",18)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",19)
   There are circumstances where indirection serves a worthwhile purpose. For
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",20)
   instance, certain utility functions with a general nature may be clearly
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",21)
   abstracted and coded using indirection. Because M has no "CASE" command,
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",22)
   DO (or GOTO) with argument indirection provides a clear solution to the
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",23)
   problem of providing complex branching.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",24)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",25)
   Some M users prototype with indirection and then replace indirection with
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",26)
   generated code that reduces run-time overhead. In any case, always
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",27)
   consider whether indirection can be replaced with a clearer or more
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",28)
   efficient approach.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",29)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",30)
   Run-time errors from indirection or XECUTEs maintain $STATUS and $ZSTATUS
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",31)
   related information and cause normal error handling but do not provide
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",32)
   compiler supplied information on the location of any error within the code
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",33)
   fragment.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","INDIRECTION_CONCERNS",34)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION")
Name_Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",1)
   Name Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",3)
   Indirection may replace the prefix of a subscripted global or local
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",4)
   variable name. This "name" indirection requires two indirection operators,
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",5)
   a leading operator similar to the other forms of indirection, and a
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",6)
   trailing operator marking the transition to those subscripts that are not
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",7)
   specified by indirection.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",8)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",9)
   Example:
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",10)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",11)
   YDB>SET from="B",to="^A(15)",x=""
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",12)
   YDB>FOR SET x=$O(@from@(x)) Q:x="" S @to@(x)=@from@(x)
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",13)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",14)
   This example uses name indirection to copy the level contents of a local
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",15)
   array to a part of a global array. The example assumes that all existing
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",16)
   first level nodes of variable B have data.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","NAME_INDIRECTION",17)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION")
Pattern_Code_Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",1)
   Pattern Code Indirection
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",2)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",3)
   A pattern code may be replaced by indirection.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",4)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",5)
   Example:
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",6)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",7)
   YDB>FOR p="1U.20A1"",""1U.20A",5N IF x?@p QUIT
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",8)
   YDB>ELSE WRITE !,"Incorrect format" QUIT
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",9)

^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",10)
   This example uses pattern code indirection to test x for either a name or
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",11)
   a number.
^HELP("s","M_LANG_FEATURES","s","INDIRECTION","s","PATTERN_CODE_INDIRECTION",12)

^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS")
Intrinsic_Functions
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",1)
   Intrinsic Functions
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",2)

^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",3)
   M Intrinsic Functions start with a single dollar sign ($) and have one or
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",4)
   more arguments enclosed in parentheses () and separated by commas (,).
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",5)
   These functions provide an expression result by performing actions that
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",6)
   would be impossible or difficult to perform using M commands. It is now
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",7)
   possible to invoke a C function in a package via the external call
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",8)
   mechanism.
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_FUNCTIONS",9)

^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES")
Intrinsic_Special_Variables
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",1)
   Intrinsic Special Variables
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",2)

^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",3)
   M Intrinsic Special Variables start with a single dollar sign ($). YottaDB
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",4)
   provides such variables for program examination. In some cases, the
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",5)
   Intrinsic Special Variables may be SET to modify the corresponding part of
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",6)
   the environment.
^HELP("s","M_LANG_FEATURES","s","INTRINSIC_SPECIAL_VARIABLES",7)

^HELP("s","M_LANG_FEATURES","s","LITERALS")
Literals
^HELP("s","M_LANG_FEATURES","s","LITERALS",1)
   Literals
^HELP("s","M_LANG_FEATURES","s","LITERALS",2)

^HELP("s","M_LANG_FEATURES","s","LITERALS",3)
   M has both string and numeric literals.
^HELP("s","M_LANG_FEATURES","s","LITERALS",4)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS")
Numeric_Literals
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",1)
   Numeric Literals
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",2)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",3)
   In M, numeric literals (numlit) are entered without surrounding
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",4)
   delimiters.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",5)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",6)
   Example:
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",7)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",8)
   YDB>WRITE 1
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",9)
   1
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",10)
   YDB> WRITE 1.1
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",11)
   1.1
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",12)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",13)
   These display numeric literals that are integer and decimal.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",14)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",15)
   M also accepts numeric literals in the form of a mantissa and an exponent,
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",16)
   separated by a delimiter of "E" in uppercase. The mantissa may be an
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",17)
   integer or a decimal fraction. The integer exponent may have an optional
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",18)
   leading minus sign (-).
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",19)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",20)
   Example:
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",21)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",22)
   YDB>WRITE 8E6
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",23)
   8000000
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",24)
   YDB> WRITE 8E-6
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",25)
   .000008
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",26)
   YDB>
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",27)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",28)
   **Caution**
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",29)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",30)
   The exponential numeric form may lead to ambiguities in the meaning of
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",31)
   subscripts. Because numeric subscripts collate ahead of string subscripts,
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",32)
   the string subscript "01E5" is not the same as the numeric subscript 01E5.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",33)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",34)
   YottaDB handles numeric strings which are not canonical within the
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",35)
   implementation as strings unless the application specifically requests
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",36)
   they be treated as numbers. Any use in a context defined as numeric
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",37)
   elicits numeric treatment; this includes operands of numeric operators,
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",38)
   numeric literals, and some intrinsic function arguments. When the code
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",39)
   creates a large number out of range , YottaDB gives a NUMOFLOW error. When
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",40)
   the code creates a small fractional number out of range YottaDB treats it as
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",41)
   zero (0). The YottaDB number range is (to the limit of accuracy) 1E-43 to
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",42)
   1E47. When the application creates an in-range number that exceeds the
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",43)
   YottaDB numeric accuracy of 18 significant digits, YottaDB silently retains the
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",44)
   most significant digits. With standard collation, YottaDB collates canonic
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",45)
   numeric strings used as subscripts numerically, while it collates
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",46)
   non-canonic numbers as strings.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","NUMERIC_LITERALS",47)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS")
String_Literals
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",1)
   String Literals
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",2)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",3)
   A string literal (strlit) is enclosed in quotation marks (" ") and can
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",4)
   contain a sequence of ASCII and Unicode(R) UTF-8 characters. While the
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",5)
   standard indicates the characters must be graphic, YottaDB accepts
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",6)
   non-graphic characters and, at compile-time, gives a warning. Using
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",7)
   $CHAR() and concatenate to represent non-graphic characters in strings
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",8)
   not only avoids the warning but is less error prone and makes for easier
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",9)
   understanding. M attempts to use character text that appears outside of
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",10)
   quotation mark delimiters according to context, which generally means
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",11)
   as a local variable name.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",12)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",13)
   To include a quotation mark (") within a strlit, use a set of two
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",14)
   quotation marks ("" "").
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",15)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",16)
   Example:
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",17)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",18)
   YDB>write """"
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",19)
   "
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",20)
   YDB>
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",21)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",22)
   The WRITE displays a single quotation mark because the first quotation
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",23)
   mark delimits the beginning of the string literal, the next two quotation
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",24)
   marks denote a single quote within the string, and the last quotation mark
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",25)
   delimits the end of the string literal.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",26)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",27)
   Use the $[Z]CHAR() function and the concatenation operator to include
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",28)
   control characters within a string.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",29)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",30)
   Example:
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",31)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",32)
   YDB>WRITE "A"_$CHAR(9)_"B"
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",33)
   A B
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",34)
   YDB>
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",35)

^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",36)
   The WRITE displays an "A," followed by a tab (<HT>), followed by a "B"
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",37)
   using $CHAR(), to introduce the non-graphic character.
^HELP("s","M_LANG_FEATURES","s","LITERALS","s","STRING_LITERALS",38)

^HELP("s","M_LANG_FEATURES","s","M_LOCKS")
M_Locks
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",1)
   M Locks
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",2)

^HELP("s","M_LANG_FEATURES","s","M_LOCKS",3)
   The LOCK command reserves one or more resource names. Only one process at
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",4)
   a time can reserve a resource name. Resource names follow exactly the same
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",5)
   formation rules as M variables. They may be unsubscripted or subscripted
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",6)
   and may or may not have a leading caret (^) prefix. M code commonly uses
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",7)
   LOCKs as flags that control access to global data. Generally, a LOCK
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",8)
   specifies the resource with the same name as the global variable that
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",9)
   requires protected access. However, this is only a convention. LOCKing
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",10)
   does not keep two or more processes from modifying the same global
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",11)
   variable. It only keeps another process from LOCKing the same resource
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",12)
   name at the same time.
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",13)

^HELP("s","M_LANG_FEATURES","s","M_LOCKS",14)
   M LOCKs are hierarchical. If one process holds a LOCK on a resource, no
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",15)
   other process can LOCK either an ancestor or a descendant resource. For
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",16)
   example, a LOCK on ^A(1,2) blocks LOCKs on either ^A(1), or ^A(1,2,3), but
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",17)
   not on, for example, ^A(2) or its descendants.
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",18)

^HELP("s","M_LANG_FEATURES","s","M_LOCKS",19)
   A LOCK argument may contain any subscripted or unsubscripted M variable
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",20)
   name including a name without a preceding caret symbol (^). As they have
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",21)
   the appearance of local variable names, resource names with no preceding
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",22)
   caret symbol (^) are commonly referred to as "local LOCKs" even though
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",23)
   these LOCKs interact with other processes.
^HELP("s","M_LANG_FEATURES","s","M_LOCKS",24)

^HELP("s","M_LANG_FEATURES","s","M_NAMES")
M_Names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",1)
   M Names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",2)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",3)
   M uses names for variables, LOCK command arguments, labels on lines, and
^HELP("s","M_LANG_FEATURES","s","M_NAMES",4)
   routine names. M names are alphanumeric and must start with an alphabetic
^HELP("s","M_LANG_FEATURES","s","M_NAMES",5)
   character or a percent sign (%).
^HELP("s","M_LANG_FEATURES","s","M_NAMES",6)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",7)
   The percent sign can only appear as the first character in a name. By
^HELP("s","M_LANG_FEATURES","s","M_NAMES",8)
   convention, names starting with percent signs are generally
^HELP("s","M_LANG_FEATURES","s","M_NAMES",9)
   application-independent or distinguished in some similar way.
^HELP("s","M_LANG_FEATURES","s","M_NAMES",10)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",11)
   M does not reserve any names. That is, M always distinguishes keywords by
^HELP("s","M_LANG_FEATURES","s","M_NAMES",12)
   context. Therefore, M permits a variable or a label called SET even though
^HELP("s","M_LANG_FEATURES","s","M_NAMES",13)
   the language has a command called SET.
^HELP("s","M_LANG_FEATURES","s","M_NAMES",14)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",15)
   M names are case sensitive. That is, M treats ABC, Abc, ABc, AbC ABC, and
^HELP("s","M_LANG_FEATURES","s","M_NAMES",16)
   abc as six different names.
^HELP("s","M_LANG_FEATURES","s","M_NAMES",17)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",18)
   M does not restrict the length of names in the main body of the standard.
^HELP("s","M_LANG_FEATURES","s","M_NAMES",19)
   However, the portability section of the standard recommends limiting names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",20)
   to a maximum of eight (8) characters. YottaDB's limit of 31 characters
^HELP("s","M_LANG_FEATURES","s","M_NAMES",21)
   applies to:
^HELP("s","M_LANG_FEATURES","s","M_NAMES",22)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",23)
     * Local variables names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",24)
     * Global variables names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",25)
     * Routine names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",26)
     * Source and object file names (not including the extension)
^HELP("s","M_LANG_FEATURES","s","M_NAMES",27)
     * Label names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",28)
     * Local lock resource names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",29)
     * Global lock resource names
^HELP("s","M_LANG_FEATURES","s","M_NAMES",30)

^HELP("s","M_LANG_FEATURES","s","M_NAMES",31)
   A trigger name is up to 28 characters and a replication instance name is
^HELP("s","M_LANG_FEATURES","s","M_NAMES",32)
   up to 15 characters.
^HELP("s","M_LANG_FEATURES","s","M_NAMES",33)

^HELP("s","M_LANG_FEATURES","s","OPERATORS")
Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS",1)
   Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS",3)
   M has both unary and binary operators.
^HELP("s","M_LANG_FEATURES","s","OPERATORS",4)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS")
Arithmetic_Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",1)
   Arithmetic Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",3)
   All arithmetic operators force M to evaluate the expressions to which they
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",4)
   apply as numeric. The arithmetic operators are:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",5)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",6)
   + as a unary operator simply forces M to evaluate the expression following
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",7)
   as numeric; as a binary operator it causes M to perform addition.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",8)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",9)
   - as a unary operator causes M to negate the expression following; as a
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",10)
   binary operator it causes M to perform subtraction.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",11)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",12)
   * binary operator for multiplication.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",13)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",14)
   ** binary operator for exponentiation.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",15)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",16)
   / binary operator for fractional division.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",17)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",18)
   \ binary operator for integer division.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",19)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",20)
   # binary operator for modulo, that is, causes M to produce the remainder
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",21)
   from integer division of the first argument by the second.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",22)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",23)
   Because of the practice of using it to intentionally induce an error, YottaDB
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",24)
   does not produce a DIVZERO error at compile time, only at run time, for
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",25)
   divide or integer divide by a literal expression that evaluates to zero
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",26)
   (0).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",27)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",28)
   Remember that precedence is left to right for all arithmetic operators.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",29)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",30)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",31)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",32)
   YDB>WRITE 1+1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",33)
   2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",34)
   YDB>WRITE 2-1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",35)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",36)
   YDB>WRITE 2*2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",37)
   4
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",38)
   YDB>WRITE 3**2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",39)
   9
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",40)
   YDB>WRITE 4/2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",41)
   2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",42)
   YDB>WRITE 7
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",43)
   2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",44)
   YDB>WRITE 7#3
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",45)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",46)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",47)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",48)
   This simple example demonstrates how each arithmetic binary operation uses
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",49)
   numeric literals.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",50)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",51)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",52)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",53)
   YDB>WRITE +"12ABC"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",54)
   12
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",55)
   YDB>WRITE --"-3-4"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",56)
   -3
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",57)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",58)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",59)
   The first WRITE shows the unary plus sign (+) operation forcing the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",60)
   numeric evaluation of a string literal. The second WRITE demonstrates the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",61)
   unary minus sign (-). Note the second minus sign within the string literal
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",62)
   does not cause subtraction, but rather, terminates the numeric evaluation
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",63)
   with the result of negative three (-3). Each of the leading minus signs
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",64)
   causes one negation and therefore, the result is negative three (-3).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","ARITHMETIC_OPERATORS",65)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS")
Logical_Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",1)
   Logical Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",3)
   M logical operators always produce a result that is TRUE (1) or FALSE (0).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",4)
   All logical operators force M to evaluate the expressions to which they
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",5)
   apply as truth-valued. The logical operators are:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",6)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",7)
   ' unary NOT operator negates current truth-value; M accepts placement of
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",8)
   the NOT operator next to a relational operator, for example, A'=B as
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",9)
   meaning '(A=B).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",10)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",11)
   &binary AND operator produces a true result only if both of the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",12)
   expressions are true.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",13)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",14)
   ! binary OR operator produces a true result if either of the expressions
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",15)
   is true.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",16)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",17)
   Remember that precedence is always left to right, and that logical
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",18)
   operators have the same precedence as all other operators.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",19)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",20)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",21)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",22)
   YDB>WRITE '0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",23)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",24)
   YDB>WRITE '1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",25)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",26)
   YDB>WRITE '5689
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",27)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",28)
   YDB>WRITE '-1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",29)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",30)
   YDB>WRITE '"ABC"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",31)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",32)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",33)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",34)
   The above example demonstrates the unary NOT operation. Note that any
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",35)
   non-zero numeric value is true and has a false negation.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",36)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",37)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",38)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",39)
   YDB>WRITE 0&0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",40)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",41)
   YDB>WRITE 1&0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",42)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",43)
   YDB>WRITE 0&1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",44)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",45)
   YDB>WRITE 1&1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",46)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",47)
   YDB>WRITE 2&1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",48)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",49)
   YDB>WRITE 0!0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",50)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",51)
   YDB>WRITE 1!0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",52)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",53)
   YDB>WRITE 0!1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",54)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",55)
   YDB>WRITE 1!1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",56)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",57)
   YDB>WRITE 2!1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",58)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",59)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",60)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",61)
   The above example demonstrates all cases covered by the binary logical
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",62)
   operators.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","LOGICAL_OPERATORS",63)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS")
Numeric_Relational_Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",1)
   Numeric Relational Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",3)
   M relational operators always generate a result of TRUE (1) or FALSE (0).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",4)
   All numeric relational operators force M to evaluate the expressions to
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",5)
   which they apply as numeric. The numeric relational operators are:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",6)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",7)
   >binary arithmetic greater than
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",8)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",9)
   <binary arithmetic less than
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",10)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",11)
   The equal sign (=) does not force numeric evaluation, and should be viewed
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",12)
   as a string operator. However, the equal sign between two numeric values
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",13)
   tests for numeric equality.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",14)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",15)
   Other numeric relations are formed using the logical NOT operator
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",16)
   apostrophe (') as follows:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",17)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",18)
   '> not greater than, that is, less than or equal to
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",19)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",20)
   '< not less than, that is, greater than or equal to
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",21)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",22)
   >= greater than or equal to, that is, not less than
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",23)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",24)
   <= less than or equal to, that is, not greater than
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",25)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",26)
   '= not equal, numeric or string operation
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",27)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",28)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",29)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",30)
   YDB>WRITE 1>2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",31)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",32)
   YDB>WRITE 1<2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",33)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",34)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",35)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",36)
   The above example demonstrates the basic arithmetic relational operations.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",37)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",38)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",39)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",40)
   YDB>WRITE 1'<2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",41)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",42)
   YDB>WRITE 2'<1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",43)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",44)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",45)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",46)
   The above example demonstrates combinations of arithmetic, relational
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",47)
   operators with the logical NOT operator.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","NUMERIC_RELATIONAL_OPERATORS",48)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR")
Pattern_Match_Operator
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",1)
   Pattern Match Operator
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",3)
   The pattern match operator (?) causes M to return a TRUE if the expression
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",4)
   ahead of the operator matches the characteristics described by the pattern
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",5)
   following the operator. The pattern is not an expression.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",6)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",7)
   Patterns are made up of two elements:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",8)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",9)
    1. A repetition count
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",10)
    2. A pattern code, a string literal or an alternation list
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",11)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",12)
   The element following the pattern match operator may consist of an
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",13)
   indirection operator, followed by an element that evaluates to a
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",14)
   legitimate pattern.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",15)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",16)
   The repetition count consists of either a single integer literal or a
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",17)
   period (.) delimiter with optional leading and trailing integer literals.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",18)
   A single integer literal specifies an exact repetition count. The period
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",19)
   syntax specifies a range of repetitions where the leading number is a
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",20)
   minimum and the trailing number is a maximum. When the repetition count is
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",21)
   missing the leading number, M assumes there is no minimum, (i.e., a
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",22)
   minimum of zero). When the repetition count is missing the trailing
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",23)
   number, M does not place a maximum on the number of repetitions.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",24)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",25)
   The pattern codes are:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",26)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",27)
   A alphabetic characters upper or lower case
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",28)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",29)
   C control characters ASCII 0-31 and 127
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",30)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",31)
   E any character; used to pass all characters in portions of the string
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",32)
   where the pattern is not restricted
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",33)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",34)
   L lower-case alphabetic characters, ASCII 97-122
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",35)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",36)
   N digits 0-9, ASCII 48-57
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",37)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",38)
   P punctuation, ASCII 32-47, 58-64, 91-96, 123-126
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",39)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",40)
   U upper-case alphabetic characters, ASCII 65-90
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",41)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",42)
   Pattern codes may be upper or lower case and may be replaced with a string
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",43)
   literal. YottaDB allows the M pattern match definition of patcodes A, C, N,
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",44)
   U, L, and P to be extended or changed, (A can only be modified implicitly
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",45)
   by modifying L or U) and new patcodes added. For detailed information on
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",46)
   enabling this functionality, refer to the "Internationalization" chapter
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",47)
   in the YottaDB Programmer's Guide.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",48)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",49)
   **Note**
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",50)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",51)
   The YottaDB compiler accepts pattern codes other than those explicitly
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",52)
   defined above. If, at run-time, the pattern codes come into use and no
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",53)
   pattern definitions are available, YottaDB issues a run-time error
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",54)
   (PATNOTFOUND). YottaDB does not currently implement a mechanism for Y and Z
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",55)
   patterns and continues to treat those as compile-time syntax errors. YottaDB
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",56)
   defers literal optimizations involving patterns within an XECUTE as well
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",57)
   as evaluations that encounter issues with the pattern table.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",58)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",59)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",60)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",61)
   YDB>WRITE "ABC"?3U
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",62)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",63)
   YDB>WRITE "123-45-6789"?3N1"-"2N1"-"4N
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",64)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",65)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",66)
   The first WRITE has a simple one-element pattern while the second has
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",67)
   multiple elements including both codes and string literals. All the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",68)
   repetition counts are fixed.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",69)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",70)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",71)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",72)
   I x?.E1C.E W !,"Must not contain a control character" Q
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",73)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",74)
   This example uses a pattern match to test for control characters.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",75)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",76)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",77)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",78)
   I acn?1U.20A1","1U.10A D
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",79)
   .S acn=$G((^ACX($P(acn,","),$P(acn,",",2)))
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",80)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",81)
   This example uses a pattern match with implicit minimums to determine that
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",82)
   an "account number" is actually a name, and to trigger a look-up of the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",83)
   corresponding account number in the ^ACX cross index.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",84)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",85)
   The pattern match operator accepts the alteration syntax. Alteration
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",86)
   consists of a repeat count followed by a comma-delimited list of patatoms
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",87)
   enclosed in parentheses "()". The semantic is that the pattern matches if
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",88)
   any of the listed patterns matches the operand string. For example,
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",89)
   ?1(2N1"-"7N,3N1"-"2N1"-"4N).1U might be a way to match either a social
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",90)
   security number or a taxpayer ID. Since alternation is defined as one of
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",91)
   the ways of constructing a patatom, alternation can nest (be used
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",92)
   recursively).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",93)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",94)
   **Note**
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",95)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",96)
   Complex pattern matches may not be efficient to evaluate, so every effort
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",97)
   should be made to simplify any commonly used pattern and to determine if
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",98)
   more efficient alternative logic would be more appropriate.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PATTERN_MATCH_OPERATOR",99)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE")
Precedence
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",1)
   Precedence
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",3)
   All unary operations have right to left precedence.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",4)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",5)
   All M binary operations have strict left to right precedence. This
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",6)
   includes all arithmetic, string, and logical operations. Hierarchies of
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",7)
   operations require explicit establishment of precedence using parentheses
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",8)
   (). Although this rule is counterintuitive, it is easy to remember and has
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",9)
   no exceptions.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","PRECEDENCE",10)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS")
String_Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",1)
   String Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",3)
   All string operators force M to evaluate the expressions to which they
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",4)
   apply as strings. The string operator is:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",5)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",6)
   _binary operator causes M to concatenate the second expression with the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",7)
   first expresion
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",8)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",9)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",10)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",11)
   YDB>WRITE "B"_"A"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",12)
   BA
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",13)
   YDB>WRITE "A"_1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",14)
   A1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",15)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",16)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",17)
   The above example demonstrates M concatenation.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_OPERATORS",18)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS")
String_Relational_Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",1)
   String Relational Operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",2)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",3)
   M relational operators always generate a result of TRUE (1) or FALSE (0).
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",4)
   All string relational operators force M to evaluate the expressions to
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",5)
   which they apply as strings. The string relational operators are:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",6)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",7)
   = binary operator causes M to produce a TRUE if the expressions are equal.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",8)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",9)
   [ binary operator causes M to produce a TRUE if the first expression
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",10)
   contains the ordered sequence of characters in the second expression.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",11)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",12)
   ] binary operator causes M to produce a TRUE if the first expression
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",13)
   lexically follows the second expression in the character encoding
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",14)
   sequence, which by default is ASCII.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",15)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",16)
   ]] binary operator causes M to produce a TRUE if the first expression
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",17)
   lexically sorts after the second expression in the subscript collation
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",18)
   sequence.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",19)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",20)
   Note that all non-empty strings lexically follow the empty string, and
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",21)
   every string contains the empty string.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",22)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",23)
   Other string relations are formed using the logical NOT operator
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",24)
   apostrophe (') as follows:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",25)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",26)
   '[ does not contain.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",27)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",28)
   '] does not follow, that is, lexically less than or equal to.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",29)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",30)
   ']] does not sort after, that is, lexically less than or equal to in the
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",31)
   subscript collation sequence.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",32)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",33)
   '= not equal, numeric or string operation.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",34)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",35)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",36)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",37)
   YDB>WRITE "A"="B"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",38)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",39)
   YDB>WRITE "C"="C"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",40)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",41)
   YDB>WRITE "A"["B"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",42)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",43)
   YDB>WRITE "ABC"["C"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",44)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",45)
   YDB>WRITE "A"]"B"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",46)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",47)
   YDB>WRITE "B"]"A"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",48)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",49)
   YDB>WRITE "A"]]"B"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",50)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",51)
   YDB>WRITE "B"]]"A"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",52)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",53)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",54)
   These examples demonstrate the string relational operators using string
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",55)
   literals.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",56)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",57)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",58)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",59)
   YDB>WRITE 2]10
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",60)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",61)
   YDB>WRITE 2]]10
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",62)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",63)
   YDB>WRITE 0]"$"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",64)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",65)
   YDB>WRITE 0]]"$"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",66)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",67)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",68)
   These examples illustrate that when using the primary ASCII character set,
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",69)
   the main difference in the "follows" (]) operator and the "sorts-after"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",70)
   (]]) operator is the way they treat numbers.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",71)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",72)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",73)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",74)
   YDB>WRITE 1=1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",75)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",76)
   YDB>WRITE 1=2
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",77)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",78)
   YDB>WRITE 1="1"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",79)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",80)
   YDB>WRITE 1=01
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",81)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",82)
   YDB>WRITE 1="01"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",83)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",84)
   YDB>WRITE 1=+"01"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",85)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",86)
   YDB>
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",87)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",88)
   These examples illustrate the dual nature of the equal sign operator. If
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",89)
   both expressions are string or numeric, the results are straight forward.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",90)
   However, when the expressions are mixed, the native string data type
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",91)
   prevails.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",92)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",93)
   Example:
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",94)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",95)
   YDB>WRITE "a"'="A"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",96)
   1
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",97)
   YDB>WRITE "FRED"'["RED"
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",98)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",99)
   YDB>WRITE "ABC"']""
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",100)
   0
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",101)

^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",102)
   These examples demonstrate combinations of the string relational operators
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",103)
   with the NOT operator.
^HELP("s","M_LANG_FEATURES","s","OPERATORS","s","STRING_RELATIONAL_OPERATORS",104)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING")
Parameter_Passing
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",1)
   Parameter Passing
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",3)
   Parameter passing provides a way of explicitly controlling some or all of
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",4)
   the variable context transferred between M routines.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",5)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",6)
   M uses parameter passing for:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",7)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",8)
     * A DO command with parameters
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",9)
     * Extrinsic functions and special variables
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",10)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",11)
   Parameter passing is optional on DO commands.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",12)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",13)
   Parameter passing uses two argument lists: the actuallist that specifies
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",14)
   the parameters that M passes to an invoked routine, and the formalist that
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",15)
   specifies the local variables to receive or associate with the parameters.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING",16)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS")
Actuallists
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",1)
   Actuallists
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",3)
   An actuallist specifies the parameters M passes to the invoked routine.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",4)
   The actuallist contains a list of zero or more parameters enclosed in
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",5)
   parentheses, immediately following a DO or extrinsic function.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",6)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",7)
   An actuallist:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",8)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",9)
     * Is made up of items separated by commas
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",10)
     * Contains expressions and/or actualnames. Items may be missing, that
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",11)
       is, two commas may appear next to each other, with nothing between
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",12)
       them.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",13)
     * Must be used in an invocation of a label with a formallist, except in
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",14)
       the case of extrinsic special variables.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",15)
     * Must not contain undefined variables.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",16)
     * Must not have more items than a formallist with which it is used.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",17)
     * May contain the same item in more than one position.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",18)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",19)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",20)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",21)
   YDB>DO MULT(3,X,.RESULT)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",22)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",23)
     o 3 - a numeric literal
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",24)
     o X - a local variable
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",25)
     o .RESULT - an actualname
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALLISTS",26)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES")
Actualnames
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",1)
   Actualnames
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",3)
   An actualname starts with a leading period (.) delimiter, followed by an
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",4)
   unsubscripted local variable name. Actualnames identify variables that are
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",5)
   passed by reference, as described in a subsequent section. While
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",6)
   expressions in an actualname are evaluated when control is transferred to
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",7)
   a formallabel, the variables identified by actualnames are not; therefore,
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",8)
   they do not need to be defined at the time control is transferred.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","ACTUALNAMES",9)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLABEL")
Formallabel
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLABEL",1)
   Formallabel
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLABEL",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLABEL",3)
   A label followed by a formallist is called a formallabel.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLABEL",4)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS")
Formallists
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",1)
   Formallists
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",3)
   A formallist specifies the variables M uses to hold passed values. A
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",4)
   formallist contains a list of zero or more parameters enclosed in
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",5)
   parentheses, immediately following a label.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",6)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",7)
     o Is made up of items separated by commas.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",8)
     o Contains unsubscripted local variable names.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",9)
     o Must be used and only used with a label invoked with an actuallist or
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",10)
       an extrinsic.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",11)
     o May contain undefined variables.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",12)
     o May have more items than an actuallist with which it is used.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",13)
     o Must not contain the same item in more than one position.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",14)
     o Must contain at least as many items as the actuallist with which it is
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",15)
       used.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",16)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",17)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",18)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",19)
   MULT(MP,MC,RES)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",20)
   SET RES=MP*MC
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",21)
   QUIT RES
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",22)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",23)
     o MP
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",24)
     o MC
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",25)
     o RES
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","FORMALLISTS",26)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS")
Parameter_Passing_Extensions
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",1)
   Parameter Passing Extensions
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",3)
   The standard does not provide for indirection of a labelref because the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",4)
   syntax has an ambiguity.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",5)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",6)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",7)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",8)
   DO @X(1)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",9)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",10)
   This example could be:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",11)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",12)
     * An invocation of the label specified by X with a parameter of 1.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",13)
     * An invocation of the label specified by X(1) with no parameter list.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",14)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",15)
   YottaDB processes the latter interpretation as illustrated in the following
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",16)
   example.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",17)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",18)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",19)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",20)
   The syntax:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",21)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",22)
   SET A(1)="CUBE",X=5
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",23)
   DO @A(1)(.X)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",24)
   WRITE X,!
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",25)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",26)
   CUBE(C);cube a variable
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",27)
   SET C=C*C*C
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",28)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",29)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",30)
   Produces the result:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",31)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",32)
   125
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",33)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",34)
   YottaDB follows analogous syntax for routine indirection:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",35)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",36)
   DO ^@X(A) invokes the routine specified by X(A).
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",37)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",38)
   DO ^@(X)(A) invokes the routine specified by X and passes the parameter A.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",39)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",40)
   DO ^@X(A)(A) invokes the routine specified by X(A) and passes the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",41)
   parameter A.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_EXTENSIONS",42)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS")
Parameter_Passing_Mechanisms
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",1)
   Parameter Passing Mechanisms
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",3)
   M passes the actuallist values to the invoked routine using two
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",4)
   parameter-passing mechanisms:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",5)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",6)
     * Call-by-Value - where expressions appear
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",7)
     * Call-by-Reference - where actualnames appear
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",8)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",9)
   A call-by-value passes a copy of the value of the actuallist expression to
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",10)
   the invoked routine by assigning the copy to a formallist variable. If the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",11)
   parameter is a variable, the invoked routine may change that variable.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",12)
   However, because M constructs that variable to hold the copy, it deletes
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",13)
   the variable holding the copy when the QUIT restores the prior formallist
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",14)
   values. This also means that changes to the variable by the invoked
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",15)
   routine do not affect the value of the variable in the invoking routine.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",16)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",17)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",18)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",19)
   SET X=30
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",20)
   DO SQR(X)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",21)
   ZWRITE
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",22)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",23)
   SQR(Z)SET Z=Z*Z
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",24)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",25)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",26)
   Produces:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",27)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",28)
   X=30
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",29)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",30)
   A period followed by a name identifies an actualname and causes a
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",31)
   call-by-reference.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",32)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",33)
   A call-by-reference passes a pointer to the variable of the invoked
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",34)
   routine so operations on the assigned formallist variable also act on the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",35)
   actualname variable. Changes, including KILLs to the formallist variable,
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",36)
   immediately have the same affect on the corresponding actualname variable.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",37)
   This means that M passes changes to formallist variables in the invoked
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",38)
   routine back to the invoking routine as changes in actualname variables.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",39)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",40)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",41)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",42)
   SET X=30
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",43)
   DO SQR(.X)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",44)
   ZWRITE
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",45)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",46)
   SQR(Z)SET Z=Z*Z
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",47)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",48)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",49)
   Produces:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",50)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",51)
   X=900
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_MECHANISMS",52)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION")
Parameter_Passing_Operation
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",1)
   Parameter Passing Operation
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",2)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",3)
   M performs an implicit NEW on the formallist names and replaces the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",4)
   formallist items with the actuallist items.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",5)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",6)
   M provides the actuallist values to the invoked procedure by giving each
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",7)
   element in the formallist the value or reference provided by the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",8)
   corresponding element in the actuallist. M associates the first name in
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",9)
   the formallist with the first item in the actuallist, the second name in
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",10)
   the formallist with the second item in the actuallist and so on. If the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",11)
   actuallist is shorter than the formallist, M ensures that the formallist
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",12)
   items with no corresponding value are in effect NEWed. If the formallist
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",13)
   item has no corresponding item in the actuallist (indicated by two
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",14)
   adjacent commas in the actuallist), that item in the formallist becomes
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",15)
   undefined.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",16)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",17)
   If the actuallist item is an expression and the corresponding formallist
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",18)
   variable is an array, parameter passing does not affect the subscripted
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",19)
   elements of the array. If an actualname corresponds to a formallist
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",20)
   variable, M reflects array operations on the formallist variable, by
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",21)
   reference, in the variable specified by the actualname.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",22)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",23)
   M treats variables that are not part of the formallist as if parameter
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",24)
   passing did not exist (i.e., M makes them available to the invoked
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",25)
   routine).
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",26)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",27)
   M initiates execution at the first command following the formallabel.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",28)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",29)
   A QUIT command terminates execution of the invoked routine. At the time of
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",30)
   the QUIT, M restores the formallist items to the values they had at the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",31)
   invocation of the routine.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",32)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",33)
   **Note**
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",34)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",35)
   In the case where a variable name appears as an actualname in the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",36)
   actuallist, and also as a variable in the formallist, the restored value
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",37)
   reflects any change made by reference.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",38)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",39)
   A QUIT from a DO does not take an argument, while a QUIT from an extrinsic
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",40)
   must have an argument. This represents one of the two major differences
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",41)
   between the DO command with parameters and the extrinsics. M returns the
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",42)
   value of the QUIT command argument as the value of the extrinsic function
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",43)
   or special variable. The other difference is that M stacks $TEST for
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",44)
   extrinsics.
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",45)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",46)
   Example:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",47)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",48)
   SET X=30,Z="Hello"
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",49)
   DO WRTSQR(X)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",50)
   ZWRITE
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",51)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",52)
   WRTSQR(Z)
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",53)
   SET Z=Z*Z
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",54)
   WRITE Z,!
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",55)
   QUIT
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",56)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",57)
   Produces:
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",58)

^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",59)
   900
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",60)
   X=30
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",61)
   Z="Hello"
^HELP("s","M_LANG_FEATURES","s","PARAMETER_PASSING","s","PARAMETER_PASSING_OPERATION",62)

^HELP("s","M_LANG_FEATURES","s","ROUTINES")
Routines
^HELP("s","M_LANG_FEATURES","s","ROUTINES",1)
   Routines
^HELP("s","M_LANG_FEATURES","s","ROUTINES",2)

^HELP("s","M_LANG_FEATURES","s","ROUTINES",3)
   M routines have a name and consist of lines of code followed by a
^HELP("s","M_LANG_FEATURES","s","ROUTINES",4)
   formfeed. M separates the name of a routine from the body of the routine
^HELP("s","M_LANG_FEATURES","s","ROUTINES",5)
   with an end-of-line which is a line-feed. This form is mostly used for
^HELP("s","M_LANG_FEATURES","s","ROUTINES",6)
   interchange with other M implementations and can be read and written by
^HELP("s","M_LANG_FEATURES","s","ROUTINES",7)
   the %RI and %RO utility routines.
^HELP("s","M_LANG_FEATURES","s","ROUTINES",8)

^HELP("s","M_LANG_FEATURES","s","ROUTINES",9)
   YottaDB stores routine sources in UNIX text files.
^HELP("s","M_LANG_FEATURES","s","ROUTINES",10)

^HELP("s","M_LANG_FEATURES","s","ROUTINES",11)
   In M, a routine has no particular impact on variable management and may
^HELP("s","M_LANG_FEATURES","s","ROUTINES",12)
   include code that is invoked at different times and has no logical
^HELP("s","M_LANG_FEATURES","s","ROUTINES",13)
   intersection.
^HELP("s","M_LANG_FEATURES","s","ROUTINES",14)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES")
Entry_References
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",1)
   Entry References
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",2)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",3)
   M entryrefs provide a generalized target for referring to a line within a
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",4)
   routine. An entryref may contain some combination of a label, an offset,
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",5)
   and a routine name (in that order). The offset is delimited by a plus sign
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",6)
   (+) and the routinename is delimited by a caret symbol(^). When an
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",7)
   entryref does not contain a label, M assumes the offset is from the
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",8)
   beginning of the routine. When an entryref does not contain an offset, M
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",9)
   uses an offset of zero (0). When an entryref does not contain a routine
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",10)
   name, M assumes the routine that is currently executing.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",11)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",12)
   M permits every element in an entryref to have the form of an indirection
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",13)
   operator, followed by an element that evaluates to a legitimate occurrence
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",14)
   of that portion of the entryref.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",15)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",16)
   **Note**
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",17)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",18)
   YottaDB accepts an offset without a label (for example +3^RTN) for an
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",19)
   entryref argument to DO, GOTO and ZGOTO but prohibits the same during
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",20)
   paramter passing with the JOB command.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",21)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",22)
   Offsets provide an extremely useful tool for debugging. However, avoid
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",23)
   their use in production code because they generally produce maintenance
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",24)
   problems.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","ENTRY_REFERENCES",25)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LABEL_REFERENCES")
Label_References
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LABEL_REFERENCES",1)
   Label References
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LABEL_REFERENCES",2)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LABEL_REFERENCES",3)
   M labelrefs are a subset of entryrefs that exclude offsets and separate
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LABEL_REFERENCES",4)
   indirection. Labelrefs are used with parameter passing.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LABEL_REFERENCES",5)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES")
Lines
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",1)
   Lines
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",2)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",3)
   A line of M code consists of the following elements in the following
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",4)
   order:
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",5)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",6)
     * An optional label.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",7)
     * A line-start delimiter. The standard defines the line-start delimiter
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",8)
       as a space (<SP>) character. In order to enhance routine readability,
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",9)
       YottaDB extends M by accepting one or more tab (<HT>) characters as
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",10)
       line-start delimiters.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",11)
     * Zero or more level indicators, which are periods (.). The level
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",12)
       indicators show the level of nesting for argumentless DO commands: the
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",13)
       more periods, the deeper the nesting. M ignores lines that contain
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",14)
       level indicators unless they directly follow an argumentless DO
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",15)
       command with a matching level of nesting.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",16)
     * Zero or more commands and their arguments. M accepts multiple commands
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",17)
       on a line. The argument(s) of one command are separated from the next
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",18)
       command by a command-start delimiter, consisting of one or more spaces
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",19)
       (<SP>).
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",20)
     * A terminating end-of-line, which is a line feed.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES",21)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS")
Comments
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",1)
   Comments
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",2)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",3)
   In addition to commands, a line may also contain a comment that starts
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",4)
   with a leading semi-colon (;) delimiter. The scope of a comment is the
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",5)
   remainder of the line. In other words, M ignores anything to the right of
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",6)
   the comment delimiter. The standard defines the comment delimiter (;) as
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",7)
   it would a command, and therefore requires that it always appear after a
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",8)
   linestart. YottaDB extends the standard to permit comments to start at the
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",9)
   first character of a line or in an argument position.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","COMMENTS",10)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS")
Labels
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",1)
   Labels
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",2)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",3)
   In addition to labels that follow the rules for M names, M accepts labels
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",4)
   consisting only of digits. In a label consisting only of digits, leading
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",5)
   zeros are considered significant. For example, labels 1 and 01 are
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",6)
   different. Formalists may immediately follow a label. A Formalists
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",7)
   consists of one or more names enclosed in parentheses (). Formalists
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",8)
   identify local variables that "receive" passed values in M parameter
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",9)
   passing. For more information, see "Parameter Passing".
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",10)

^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",11)
   In YottaDB, a colon (:) delimiter may be appended to the label, which causes
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",12)
   the label to be treated as "local." Within the routine in which they
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",13)
   appear, they perform exactly as they would without the trailing colon but
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",14)
   they are available only during compilation and inaccessible to other
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",15)
   routines and to indirection or XECUTE. Because references to local labels
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",16)
   preceding their position in a routine produce a LABELUNKNOWN error at
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",17)
   run-time, YottaDB recommends omitting the routinename from labelrefs to a
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",18)
   local label. Using local labels reduces object size and linking overhead
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",19)
   for both all types for dynamic linking except indirection and XECUTE. Use
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",20)
   of local labels may either improve or impair performance; typically any
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",21)
   difference is modest. The more likely they are to all be used within the
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",22)
   code block at run-time, the more likely an improvement. In other words,
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",23)
   conditional code paths which prevent all references to local variables
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",24)
   appearing in the block may actually impair performance.
^HELP("s","M_LANG_FEATURES","s","ROUTINES","s","LINES","s","LABELS",25)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING")
Transaction_Processing
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",1)
   Transaction Processing
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",2)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",3)
   Transaction Processing (TP) provides a way for M programs to organize
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",4)
   database updates into logical groups that occur as a single event (i.e.,
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",5)
   either all the database updates in a transaction occur, or none of them
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",6)
   occur). With a properly constructed transaction, no other actor or process
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",7)
   behaves as if it observed any intermediate state. Transaction processing
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",8)
   has been designed to improve throughput and minimize the possibility and
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",9)
   impact of "live lock" conditions.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING",10)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS")
TP_Definitions
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",1)
   TP Definitions
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",2)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",3)
   In M, a transaction is a sequence of commands that begins with a TSTART
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",4)
   command, ends with a TCOMMIT command, and is not within the scope of
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",5)
   another transaction. Applications can nest TSTART/TCOMMIT commands to
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",6)
   create sub-transactions, but sub-transactions only commit at the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",7)
   outer-most TCOMMIT. $TLEVEL greater than 1 indicates sub-transaction
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",8)
   nesting.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",9)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",10)
   A successful transaction ends with a COMMIT that is triggered by the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",11)
   TCOMMIT command at the end of the transaction. A COMMIT causes all the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",12)
   database updates performed within the transaction to become available to
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",13)
   other processes.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",14)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",15)
   An unsuccessful transaction ends with a ROLLBACK. ROLLBACK is invoked
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",16)
   explicitly by the TROLLBACK command, or implicitly at a process
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",17)
   termination that occurs during a transaction in progress. An error within
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",18)
   a transaction does not cause an implicit ROLLBACK. A ROLLBACK removes any
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",19)
   database updates performed within the transaction before they are made
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",20)
   available to other processes. ROLLBACK also releases all resources LOCKed
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",21)
   since the start of the transaction, and makes the naked reference
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",22)
   undefined.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",23)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",24)
   A RESTART is a transfer of control to the TSTART at the beginning of the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",25)
   transaction. RESTART implicitly includes a ROLLBACK and may optionally
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",26)
   restore local variables to the values they had when the initial TSTART was
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",27)
   originally executed. A RESTART always restores $TEST and the naked
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",28)
   reference to the values they had when the initial TSTART was executed.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",29)
   RESTART does not manage device state information. A RESTART is invoked by
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",30)
   the TRESTART command or by M if it is determined that the transaction is
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",31)
   in conflict with other database updates. RESTART can only successfully
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",32)
   occur if the initial TSTART includes an argument that enables RESTART.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_DEFINITIONS",33)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE")
TP_Performance
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",1)
   TP Performance
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",2)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",3)
   To achieve the best YottaDB performance, transactions should:
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",4)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",5)
     * be as short as possible
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",6)
     * consist, as much as possible, only of global updates
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",7)
     * be SERIAL with no associated LOCKs
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",8)
     * have RESTART enabled with a minimum of local variables protected by a
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",9)
       restart portion of the TSTART argument.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",10)
     * Large concurrent transactions using TCOMMIT may result in repeated and
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",11)
       inefficient attempts by competing processes to capture needed scarce
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",12)
       resources, resulting in poor performance.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",13)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",14)
   Example:
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",15)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",16)
    TSTART ():SERIAL
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",17)
    SET (ACCT,^M(0))=^M(0)+1
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",18)
    SET ^M(ACCT)=PREC,^PN(NAM)=ACCT
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",19)
    TCOMMIT
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",20)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",21)
   Example:
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",22)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",23)
    TSTART ():SERIAL
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",24)
    IF $TRESTART>3 DO QUIT
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",25)
    .TROLLBACK
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",26)
    .WRITE !,"Too many RESTARTs"
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",27)
    .QUIT
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",28)
    SET (NEXT,^ID(0))=^ID(0)+1
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",29)
    SET ^ID(NEXT)=RECORD,^XID(ZIP,NEXT)=""
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",30)
    TCOMMIT
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",31)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",32)
   %YDB-I-TPRESTART, Database /gbls/dtx/dtx.dat; code: L; blk: 0x00BA13DD in glbl: ^DTX; pvtmods: 0, blkmods: 1, blklvl: 1, type: 4, readset: 3, writeset: 1, local_tn: 0x00000000000002D0, zpos: LABEL+108^ROUTINENAME
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",33)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",34)
     * pvtmods - Is always less than or equal to blkmods. This means it can
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",35)
       be 1 only if "blkmods" is also 1. If it is 1, it means that process P1
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",36)
       was planning to UPDATE (not just READ) the block number (indicated as
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",37)
       "blk: ..." in the TPRESTART message) as part of its TP transaction.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",38)
     * blkmods - Is either 1 or 0. 1 implies the transaction restarted
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",39)
       because this process (P1) is attempting to READ/UPDATE a block that
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",40)
       has concurrently been updated by another process (P2) since P1 access
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",41)
       the block as part of its TP transaction. This means the "code: ..."
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",42)
       output in the TPRESTART message will have L as the last letter. 0
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",43)
       implies the restart occurred because of a different reason. The "code:
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",44)
       ..." then has something other than "L" as the last letter. Note that
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",45)
       each letter in "code: ..." corresponds to the failure code in each
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",46)
       try/retry in the order of occurrence.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",47)
     * blklvl - Is the level in the GDS structure of the block ("blk: ..."
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",48)
       field in the TPRESTART message) that caused the TP restart.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",49)
     * type - A value of 0,1,2,4 shows the restart occurred in the TP
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",50)
       transaction BEFORE executing TCOMMIT; whether it is a 0 or 1 or 2 or 4
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",51)
       should not matter to the user. These values would typically be used
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",52)
       for debugging by your YottaDB support channel. A value of 3 shows the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",53)
       restart occurred at TCOMMIT time.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",54)
     * readset - The number of GDS blocks that accessed as part of this TP
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",55)
       transaction in the region containing the global ("glbl: ..." in the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",56)
       TPRESTART message).
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",57)
     * writeset - Out of the readset number, the number of GDS blocks this
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",58)
       process was attempted to UPDATE as part of this TP transaction in the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",59)
       region containing the global ("glbl: ..." in the TPRESTART message).
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",60)
     * local_tn - This is a never-decreasing counter (starting at 1 at
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",61)
       process startup) incremented for every new TP transaction, TP restart,
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",62)
       and TP rollback. Two TPRESTART messages by the same process should
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",63)
       never have the same value of local_tn. The difference between the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",64)
       local_tn values of two messages from the same process indicates the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",65)
       number of TP transactions done by that process in the time interval
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",66)
       between the two messages.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",67)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",68)
   **Note**
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",69)

^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",70)
     o Use VIEW [NO]LOGT[PRESTART][=intexpr] to enable or disable the logging
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",71)
       of TPRESTART messages. Note that you can use the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",72)
       ydb_tprestart_log_delta and ydb_tprestart_log_first environment
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",73)
       variables to set the frequency of TPRESTART messages.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",74)
     o Use VIEW [NO]LOGN[ONTP][=intexpr] to enable or disable the logging of
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",75)
       NONTPRESTART messages. This facility is the analog of TPRESTART
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",76)
       tracking, but for non-TP mini-transacstions. Note that you can use the
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",77)
       ydb_nontprestart_log_delta and ydb_nontprestart_log_first environment
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",78)
       variables to set the frequency of the NONTPRESTART messages.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",79)
     o For more information, refer to "Key Words" and the Environment
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",80)
       Variables section of YottaDB Administration and Operations Guide.
^HELP("s","M_LANG_FEATURES","s","TRANSACTION_PROCESSING","s","TP_PERFORMANCE",81)

^HELP("s","M_LANG_FEATURES","s","VARIABLES")
Variables
^HELP("s","M_LANG_FEATURES","s","VARIABLES",1)
   Variables
^HELP("s","M_LANG_FEATURES","s","VARIABLES",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES",3)
   M does not require predefinition of variable type or size. M variables are
^HELP("s","M_LANG_FEATURES","s","VARIABLES",4)
   either local or global. Any variable may be unsubscripted or subscripted.
^HELP("s","M_LANG_FEATURES","s","VARIABLES",5)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS")
Arrays_and_Subscripts
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",1)
   Arrays and Subscripts
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",3)
   In M, subscripted variables identify elements in sparse arrays. Sparse
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",4)
   arrays comprise existing subscripts and data nodes -; no space is reserved
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",5)
   for potential data nodes. These arrays generally serve logical, rather
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",6)
   than mathematical, purposes.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",7)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",8)
   M array subscripts are expressions, and are not restricted to numeric
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",9)
   values.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",10)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",11)
   The format for an M global or local variable is:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",12)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",13)
   [^]name[(expr1[,...])]
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",14)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",15)
   The body of the M standard places no restrictions on variable names.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",16)
   However, the portability section of the standard does suggest limits on
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",17)
   the length of an individual subscript expression, and on the total length
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",18)
   of a variable name. The measurement for the length of names includes the
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",19)
   length of the global variable name itself, the sum of the lengths of all
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",20)
   the evaluated subscripts, and an allowance for an overhead of two (2)
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",21)
   times the number of subscripts. The total must not exceed 237. For
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",22)
   globals, YottaDB permits this total to be modified with GDE up to 255. For
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",23)
   locals, YottaDB limits the length of individual subscripts to the maximum
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",24)
   string length of 32,767. YottaDB restricts the number of subscripts for local
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",25)
   or global variables to 31.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","ARRAYS_AND_SUBSCRIPTS",26)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS")
Global_Variable_Name_Environments
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",1)
   Global Variable Name Environments
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",3)
   M recognizes an optional environment specification in global names. The
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",4)
   environment specification designates one of some set of alternative
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",5)
   database files.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",6)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",7)
   The syntax for global variable names that include an environment
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",8)
   specification is:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",9)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",10)
   ^|expr|name[(subscript[,...])]
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",11)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",12)
   In YottaDB, the expression identifies the Global Directory for mapping the
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",13)
   global variable.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",14)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",15)
   Environment specifications permit easy access to global variables in
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",16)
   alternative databases, including other "copies" of active variables in the
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",17)
   current database. Environment specifications are sometimes referred to as
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",18)
   extended global syntax or extended value syntax.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",19)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",20)
   YottaDB also allows:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",21)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",22)
   ^|expr1,expr2|name[(subscript[,...])]
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",23)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",24)
   Where the first expression identifies the Global Directory and the second
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",25)
   expression is accepted but ignored by YottaDB.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",26)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",27)
   To improve compatibility with some other M implementations, YottaDB also
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",28)
   accepts another non-standard syntax. In this syntax, the leading and
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",29)
   trailing up-bar (|) are respectively replaced by a left square-bracket ([)
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",30)
   and a right square-bracket (]). This syntax also requires expratoms,
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",31)
   rather than expressions.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",32)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",33)
   The formats for this non-standard syntax are:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",34)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",35)
   ^[expratom1]name[(subscript...)]
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",36)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",37)
   or
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",38)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",39)
   ^[expratom1,expratom2]name[(subscript...)]
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",40)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",41)
   Where expratom1 identifies the Global Directory and expratom2 is a dummy
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",42)
   variable. Note that the first set of brackets in each format is part of
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",43)
   the syntax. The second set of square brackets is part of the meta-language
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",44)
   identifying an optional element.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",45)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",46)
   Example:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",47)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",48)
   $ ydb_gbldir=Test.GLD
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",49)
   $ export ydb_gbldir
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",50)
   $ $ydb_dist/mumps -direct
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",51)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",52)
   YDB>WRITE $ZGBLDIR
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",53)
   TEST.GLD
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",54)
   YDB>WRITE ^A
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",55)
   THIS IS ^A IN DATABASE RED
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",56)
   YDB>WRITE ^|"M1.GLD"|A
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",57)
   THIS IS ^A IN DATABASE WHITE
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",58)
   YDB>WRITE $ZGBLDIR
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",59)
   TEST.GLD
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",60)
   YDB>HALT
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",61)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",62)
   $ echo ydb_gbldir
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",63)
   TEST.GLD
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",64)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",65)
   The statement WRITE ^|"M1.GLD"|A writes variable ^A using the Global
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",66)
   Directory, M1.GLD, but does not change the current Global Directory.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",67)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",68)
   Example:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",69)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",70)
   YDB>WRITE $ZGBLDIR
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",71)
   M1.GLD
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",72)
   YDB>WRITE ^A
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",73)
   THIS IS ^A IN DATABASE WHITE
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",74)
   YDB>WRITE ^|"M1.GLD"|A
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",75)
   THIS IS ^A IN DATABASE WHITE
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",76)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",77)
   The statement WRITE ^|"M1.GLD"|A is equivalent to WRITE ^A.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",78)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",79)
   Specifying separate Global Directories does not always translate to using
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",80)
   separate databases.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",81)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",82)
   Example:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",83)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",84)
   YDB>WRITE ^|"M1.GLD"|A,!,^|"M2.GLD"|A,!,^|"M3.GLD"
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",85)
   |A,!
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",86)
   THIS IS ^A IN DATABASE WHITE
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",87)
   THIS IS ^A IN DATABASE BLUE
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",88)
   THIS IS ^A IN DATABASE WHITE
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",89)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",90)
   In this example, the WRITE does not display ^A from three YottaDB database
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",91)
   files. Mapping specified by the Global Directory Editor (GDE) determines
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",92)
   the database file to which a Global Directory points.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",93)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",94)
   This result could have occurred under the following mapping:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",95)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",96)
   ^|"M1.GLD"|A --> REGIONA --> SEGMENTA --> FILE1.DAT
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",97)
   ^|"M2.GLD"|A --> REGIONA --> SEGMENT1 --> FILE2.DAT
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",98)
   ^|"M3.GLD"|A --> REGION3 --> SEGMENT3 --> FILE1.DAT
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",99)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",100)
   For more information on Global Directories, refer to the "Global Directory
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",101)
   Editor" chapter of the YottaDB Administration and Operations Guide.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GLOBAL_VARIABLE_NAME_ENVIRONMENTS",102)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV")
GV_and_Resource_Name_Env
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",1)
   GV and Resource Name Env
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",3)
   M recognizes an optional environment specification in global names or in
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",4)
   the LOCK resource names (nrefs), which have analogous syntax. Global
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",5)
   variable names have a leading caret symbol (^) as a delimiter.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",6)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",7)
   M makes a global variable available, and subject to modification by all
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",8)
   routines executed within all processes in an environment, from the time
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",9)
   that variable is first SET until it is KILLed.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","GV_AND_RESOURCE_NAME_ENV",10)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES")
Local_Variables
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",1)
   Local Variables
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",3)
   A local variable in M refers to a variable used solely within the scope of
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",4)
   a single process. Local variable names have no leading delimiter.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",5)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",6)
   M makes a local variable available and subject to modification by all
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",7)
   routines executed within a process from the time that variable is first
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",8)
   SET until it is KILLed, or until the process stops executing M. However, M
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",9)
   "protects" a local variable after that variable appears as an argument to
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",10)
   a NEW command, or after it appears as an element in a formalist used in
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",11)
   parameter passing. When M protects a local variable, it saves a copy of
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",12)
   the variable's value and makes that variable undefined. M restores the
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",13)
   variable to its saved value during execution of the QUIT that terminates
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",14)
   the process stack level associated with the "protecting" NEW or formalist.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",15)
   For more information on NEW and QUIT, refer to the "Commands" chapter in
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",16)
   the YottaDB Programmer's Guide.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",17)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",18)
   M restricts the following uses of variables to local variables:
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",19)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",20)
     * FOR command control variables.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",21)
     * Elements within the parentheses of an "exclusive" KILL.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",22)
     * TSTART [with local variables list].
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",23)
     * A KILL with no arguments removes all current local variables.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",24)
     * NEW command arguments.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",25)
     * Actualnames used by pass-by-reference parameter passing.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","LOCAL_VARIABLES",26)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES")
M_Collation_Sequences
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",1)
   M Collation Sequences
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",3)
   M collates all canonic numeric subscripts ahead of all string subscripts,
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",4)
   including strings such as those with leading zeros that represent
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",5)
   non-canonic numbers. Numeric subscripts collate from negative to positive
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",6)
   in value order. String subscripts collate in ASCII sequence. In addition,
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",7)
   YottaDB allows the empty string subscript in most contexts, (the null, or
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",8)
   empty, string collates ahead of all canonic numeric subscripts).
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",9)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",10)
   YottaDB allows definition of alternative collation sequences. For complete
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",11)
   information on enabling this functionality, refer to the
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",12)
   "Internationalization" chapter in the YottaDB Programmer's Guide.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","M_COLLATION_SEQUENCES",13)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES")
Naked_References
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",1)
   Naked References
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",2)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",3)
   M accepts an abbreviation of the global name under some circumstances.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",4)
   When the leading caret symbol (^) immediately precedes the left
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",5)
   parenthesis delimiting subscripts, the global variable reference is called
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",6)
   a naked reference. M evaluates a naked reference by prefixing the last
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",7)
   used global variable name, except for its last subscript, to the list of
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",8)
   subscripts specified by the naked reference. The prefixed portion is known
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",9)
   as the naked indicator. An attempt to use a naked reference when the prior
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",10)
   global reference does not exist, or did not contain a subscript, generates
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",11)
   an error.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",12)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",13)
   Because M has only one process-wide naked indicator which it maintains as
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",14)
   a side affect of every evaluation of a global variable, using the naked
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",15)
   reference requires an understanding of M execution sequence. M execution
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",16)
   generally proceeds from left to right within a line, subject to commands
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",17)
   that change the flow of control. However, M evaluates the portion of a SET
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",18)
   command argument to the right side of the equal sign before the left side.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",19)
   Also, M does not evaluate any further $SELECT() arguments within the
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",20)
   function after it encounters a true selection argument.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",21)

^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",22)
   In general, using naked references only in very limited circumstances
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",23)
   prevents problems associated with the naked indicator.
^HELP("s","M_LANG_FEATURES","s","VARIABLES","s","NAKED_REFERENCES",24)

^HELP("s","OPR_DBG_DIR_MODE")
Opr_Dbg_Dir_Mode
^HELP("s","OPR_DBG_DIR_MODE",1)
   Opr Dbg Dir Mode
^HELP("s","OPR_DBG_DIR_MODE",2)

^HELP("s","OPR_DBG_DIR_MODE",3)
   Direct Mode is an important tool in YottaDB because it allows you to
^HELP("s","OPR_DBG_DIR_MODE",4)
   interactively debug, modify, and execute M routines. Direct Mode is a
^HELP("s","OPR_DBG_DIR_MODE",5)
   shell that immediately compiles and executes YottaDB commands providing an
^HELP("s","OPR_DBG_DIR_MODE",6)
   interpretive-like interface. M simplifies debugging by using the same
^HELP("s","OPR_DBG_DIR_MODE",7)
   commands for debugging that are used for programming.
^HELP("s","OPR_DBG_DIR_MODE",8)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE")
Operate_Direct_Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",1)
   Operate Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",3)
   This section provides an overview of the following basic operational
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",4)
   issues in Direct Mode:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",5)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",6)
     * Entering Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",7)
     * Available functionality
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",8)
     * Exiting Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE",9)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE")
Entering_Direct_Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",1)
   Entering Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",3)
   To enter Direct Mode, type $ydb_dist/mumps -direct at the shell prompt.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",4)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",5)
   $ $ydb_dist/mumps -direct
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",6)
   YDB>
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",7)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",8)
   This shows using $ydb_dist/mumps -direct at the prompt to enter Direct
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",9)
   Mode.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",10)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",11)
   To create a gtm alias in your shell startup file (in the example below the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",12)
   startup file is assumed to be a .profile file):
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",13)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",14)
    1. Open an edition session for your .profile file by typing:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",15)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",16)
       $vi .profile
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",17)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",18)
    2. Add a function to the file to define your gtm alias:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",19)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",20)
       gtm(){ $ydb_dist/mumps -direct}
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",21)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",22)
    3. Save the file.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",23)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",24)
   Now, when you want to enter Direct Mode for an editing or debugging
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",25)
   session, simply type gtm at the shell prompt.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",26)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",27)
   Example:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",28)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",29)
   $ gtm
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",30)
   YDB>
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",31)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",32)
   This shows that the gtm alias typed at the shell prompt also takes you to
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",33)
   the Direct Mode.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","ENTERING_DIRECT_MODE",34)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE")
Exiting_Direct_Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",1)
   Exiting Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",3)
   Five M commands can terminate a Direct Mode session:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",4)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",5)
     * HALT
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",6)
     * ZHALT
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",7)
     * ZCONTINUE
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",8)
     * GOTO
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",9)
     * ZGOTO
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",10)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",11)
   The HALT command exits Direct Mode and terminates the M process.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",12)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",13)
   The ZHALT command exits Direct Mode and returns the exit status to the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",14)
   calling environment.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",15)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",16)
   The ZCONTINUE command instructs YottaDB to exit Direct Mode and resume
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",17)
   routine execution at the current point in the M invocation stack. This may
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",18)
   be the point where YottaDB interrupted execution and entered Direct Mode.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",19)
   However, when the Direct Mode interaction includes a QUIT command, it
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",20)
   modifies the invocation stack and causes ZCONTINUE to resume execution at
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",21)
   another point.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",22)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",23)
   The GOTO and ZGOTO commands instruct YottaDB to leave Direct Mode, and
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",24)
   transfer control to a specified entry reference.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","EXITING_DIRECT_MODE",25)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE")
Functionality_Available_in_Direct_Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE",1)
   Functionality Available in Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE",3)
   This section provides an overview of basic functionality and concepts that
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE",4)
   enhance your use of Direct Mode.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE",5)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL")
Command_Recall
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",1)
   Command Recall
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",3)
   Direct Mode includes a line command recall function to display previously
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",4)
   entered command lines. Use <CTRL-B> or the Up Arrow key at the YDB> prompt
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",5)
   to scroll back through command lines. Use the Down Arrow key to scroll
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",6)
   forward through the command lines. YottaDB displays one command line at a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",7)
   time.You may delete and reenter characters starting at the end of a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",8)
   recalled line.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",9)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",10)
   The RECALL command is another way to access previously entered Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",11)
   command lines. RECALL is only valid in Direct Mode and causes an error if
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",12)
   it appears in other M code.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",13)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",14)
   The format of the RECALL command is:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",15)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",16)
   REC[ALL] [intlit|strlit]
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",17)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",18)
     o The optional integer literal specifies a previously entered command by
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",19)
       the counting back from the present.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",20)
     o The optional string literal specifies the most recently entered
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",21)
       command line that starts with characters matching the (case-sensitive)
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",22)
       literal.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",23)
     o When the RECALL command has no argument, it displays up to a maximum
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",24)
       of 99 available past Direct Mode entries.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",25)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",26)
   If the Direct Mode session has just started, you may not have entered 99
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",27)
   lines for YottaDB to save and therefore you will not have 99 lines to look
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",28)
   at. The most recently entered YottaDB command line has the number one (1),
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",29)
   older lines have higher numbers. YottaDB does not include the RECALL command
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",30)
   in the listing. If the RECALL command is issued from a location other than
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",31)
   the Direct Mode prompt, YottaDB issues a run-time error.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",32)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",33)
   Example:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",34)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",35)
   YDB>write $zgbldir
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",36)
   /usr/local/lib/yottadb/r130/mumps.gld
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",37)
   YDB>set $zgbldir="test.gld"
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",38)
   YDB>set a=10
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",39)
   YDB>set b=a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",40)
   YDB>recall
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",41)
   1 set b=a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",42)
   2 set a=10
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",43)
   3 set $zgbldir="test.gld"
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",44)
   4 write $zgbldir
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",45)
   YDB>
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",46)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",47)
   This REC[ALL] command displays the previously entered commands.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",48)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",49)
   You can also display a selected command by entering RECALL and the line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",50)
   number of the command you want to retrieve.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",51)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",52)
   Example:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",53)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",54)
   YDB>recall 2
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",55)
   YDB>set a=10
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",56)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",57)
   This RECALLs the line number two (2).
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",58)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",59)
   If the RE[CALL] command includes a text parameter, YottaDB displays the most
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",60)
   recent command matching the text after the RE[CALL] command.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",61)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",62)
   Example:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",63)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",64)
   YDB>recall write
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",65)
   YDB>write $zgbldir
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",66)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",67)
   This RECALLs "WRITE", the command most recently beginning with this text.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",68)
   Note that the RECALL command text is case sensitive. The RECALL command
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",69)
   with a text argument treats WRITE and write differently, that is, it
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",70)
   treats them case sensitively. If you first type the WRITE command in
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",71)
   lower-case and then type WRITE in upper-case to recall it, the RECALL
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",72)
   command does not find a match.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","COMMAND_RECALL",73)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING")
Line_Editing
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",1)
   Line Editing
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",3)
   YottaDB permits the use of the YottaDB command line editor at the Direct Mode
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",4)
   prompt and during M READs from a terminal. The YottaDB line editor allows
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",5)
   cursor positioning using the <CTRL> key, edit keypad and function keys.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",6)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",7)
   The YottaDB Direct Mode line editing keys are as follows:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",8)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",9)
   Backspace: Deletes the character to the left of the cursor
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",10)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",11)
   Delete: Deletes the character under the cursor
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",12)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",13)
   Up-arrow: Moves to a less recent item in the RECALL list
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",14)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",15)
   Down-arrow: Moves to a more recent item in the RECALL list
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",16)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",17)
   Left-arrow: Moves the cursor one character to the left
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",18)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",19)
   Right-arrow: Moves the cursor one character to the right
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",20)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",21)
   <CTRL-A>: Moves the cursor to the beginning of the line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",22)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",23)
   <CTRL-B>: Moves the cursor one character towards the beginning of the line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",24)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",25)
   <CTRL-D>: On an empty line, terminates YottaDB and returns control to the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",26)
   shell.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",27)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",28)
   <CTRL-E>: Moves the cursor to the end of the line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",29)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",30)
   <CTRL-F>: Moves the cursor one character towards the end of the line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",31)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",32)
   <CTRL-K>: Deletes all characters from the cursor to the end of the line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",33)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",34)
   <CTRL-U>: Deletes the entire line
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",35)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",36)
   **Note**
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",37)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",38)
   When entering commands at the direct mode prompt, the insert mode can be
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",39)
   toggled for that line by using the insert key. When YottaDB starts, insert
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",40)
   mode is enabled unless the value of the ydb_principal_editing environment
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",41)
   variable includes the string NOINSERT. If insert mode is disabled or
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",42)
   enabled for the $PRINCIPAL device by an USE statement before returning to
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",43)
   direct mode, it will remain disabled or enabled at direct mode. The insert
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",44)
   mode can be toggled within a direct mode line using the terminal's INSERT
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",45)
   key.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",46)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",47)
   **Important**
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",48)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",49)
   YottaDB deletes the character under the cursor when you press the key on the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",50)
   keyboard that sends the escape sequence which maps to the kdch1 capability
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",51)
   in your current terminfo entry (by convention, the Delete key). If the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",52)
   current terminfo entry is missing the kdch1 capability, YottaDB uses a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",53)
   default value derived from members of the DEC VT terminal family, as it
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",54)
   does for selected other missing terminfo capabilities. If you wish the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",55)
   Backspace and Delete keys to behave the same, the simplest way is to
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",56)
   configure your terminal emulator to send the same character sequences for
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",57)
   the Delete key that it does for the Backspace key. You can alternatively
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",58)
   modify your terminfo setting: for example, create an editable version of
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",59)
   your terminfo entry in a temporary file with a command such as: infocmp >
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",60)
   /tmp/$$_$TERM and edit the temporary file to replace the entry for the kbs
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",61)
   capability with the one in the kdch1 capability. Save your changes, and
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",62)
   compile the edited file into a usable terminfo entry, for example:
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",63)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",64)
   export TERMINFO=$HOME/.terminfo # You may need to add this to your login profile
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",65)
   profilemkdir -p $TERMINFO
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",66)
   tic /tmp/$$_$TERM # or whatever your temporary file name was
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",67)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",68)
   When modifying terminfo capabilities, always look for unintended changes
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",69)
   in the behavior of other applications, for example, text editors, that
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",70)
   also rely on those capabilities. In the worst case, you may need to toggle
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",71)
   between alternate terminfo entries for YottaDB and other applications while
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",72)
   you evaluate different options. Also, for terminfo entries without the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",73)
   cud1 capability, YottaDB uses a linefeed when moving to the next line in
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",74)
   direct mode.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","LINE_EDITING",75)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK")
The_M_Invocation_Stack
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",1)
   The M Invocation Stack
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",2)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",3)
   The ANSI M Standard describes certain M operations in terms of how a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",4)
   stack-based virtual machine would operate. A stack is a repository for
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",5)
   tracking temporary information on a "last-in/first-out" (LIFO) basis. M
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",6)
   program behavior can be understood using a stack-based model. However, the
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",7)
   standard is not explicit in defining how an implementation must maintain a
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",8)
   stack or even whether it must use one at all.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",9)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",10)
   The stack model provides a trail of routines currently in progress that
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",11)
   shows the location of all the M operations that performed the invocations
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",12)
   leading to the current point.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",13)

^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",14)
   The ZSHOW command makes this stack information available within YottaDB.
^HELP("s","OPR_DBG_DIR_MODE","s","OPERATE_DIRECT_MODE","s","FUNCTIONALITY_AVAILABLE_IN_DIRECT_MODE","s","THE_M_INVOCATION_STACK",15)

^HELP("s","PROGRAM_CYCLE")
Program_Cycle
^HELP("s","PROGRAM_CYCLE",1)
   Program Cycle
^HELP("s","PROGRAM_CYCLE",2)

^HELP("s","PROGRAM_CYCLE",3)
   In contrast to M environments that interpret M code, YottaDB compiles M code
^HELP("s","PROGRAM_CYCLE",4)
   from source files into the target machine language. The YottaDB compiler
^HELP("s","PROGRAM_CYCLE",5)
   produces object files, which are dynamically linked into an image. Source
^HELP("s","PROGRAM_CYCLE",6)
   files and object files may be managed independently, or placed together in
^HELP("s","PROGRAM_CYCLE",7)
   a specific directory. YottaDB permits access to source and object files in
^HELP("s","PROGRAM_CYCLE",8)
   multiple directories.
^HELP("s","PROGRAM_CYCLE",9)

^HELP("s","PROGRAM_CYCLE",10)
   YottaDB databases are UNIX files identified by a small file called a Global
^HELP("s","PROGRAM_CYCLE",11)
   Directory. Global Directories allow management of the database files to be
^HELP("s","PROGRAM_CYCLE",12)
   independent of the placement of files containing M routines. By changing
^HELP("s","PROGRAM_CYCLE",13)
   the Global Directory, you can use the same programs to access different
^HELP("s","PROGRAM_CYCLE",14)
   databases.
^HELP("s","PROGRAM_CYCLE",15)

^HELP("s","PROGRAM_CYCLE",16)
   Program development may utilize both YottaDB and UNIX development tools. The
^HELP("s","PROGRAM_CYCLE",17)
   development methodology and environment chosen for a particular
^HELP("s","PROGRAM_CYCLE",18)
   installation, and tailored by the individual user, determines the actual
^HELP("s","PROGRAM_CYCLE",19)
   mix of tools. These tools may vary from entirely YottaDB with little UNIX, to
^HELP("s","PROGRAM_CYCLE",20)
   mostly UNIX with a modest use of YottaDB.
^HELP("s","PROGRAM_CYCLE",21)

^HELP("s","PROGRAM_CYCLE",22)
   Direct Mode serves as an interactive interface to the YottaDB run-time
^HELP("s","PROGRAM_CYCLE",23)
   environment and the compiler. In Direct Mode, the user enters M commands
^HELP("s","PROGRAM_CYCLE",24)
   at the YottaDB prompt, and YottaDB compiles and executes the command. This
^HELP("s","PROGRAM_CYCLE",25)
   feature provides immediate turnaround for rapid program development and
^HELP("s","PROGRAM_CYCLE",26)
   maintenance.
^HELP("s","PROGRAM_CYCLE",27)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM")
Compile_Source_Program
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",1)
   Compile Source Program
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",3)
   If you wish to focus on program development outside the YottaDB environment,
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",4)
   skip the next section and continue with the section "Compiling from the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",5)
   Shell".
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",6)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",7)
   YottaDB compiles M source code files and produces object files for complete
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",8)
   integration into the UNIX enviroment. The object modules have the same
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",9)
   name as the compiled M source file with an .o file extension, unless
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",10)
   otherwise specified. The object files contain machine instructions and
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",11)
   information necessary to connect the routine with other routines, and map
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",12)
   it into memory. An M routine source file must be compiled after it is
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",13)
   created or modified. You can compile explicitly with the ZLINK command or
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",14)
   implicitly with auto-ZLINK. At the shell command line, compile by issuing
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",15)
   the mumps command.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",16)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",17)
   The compiler checks M code for syntax errors and displays error messages
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",18)
   on the terminal, when processing is complete. Each error message provides
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",19)
   the source line in error with an indicator pointing to the place on the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",20)
   line where the error is occurring. For a list and description of the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",21)
   compiler error messages, refer to the YottaDB Message and Recovery Procedures
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",22)
   Reference Manual.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",23)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",24)
   You can generate a listing file containing the compile results by
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",25)
   including the -list qualifier as a modifier to the argument to the ZLINK
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",26)
   command in Direct Mode. This can also be done by redirecting the compiler
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",27)
   messages to a file by adding >filename 2>&1 to the mumps command when
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",28)
   compiling a program from the shell. See "Compile from the Shell"
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",29)
   for an explanation of the M command describing -list, and other valid
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",30)
   qualifiers for the M and ZLINK commands.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",31)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",32)
   The compiler stops processing a routine line when it detects an error on
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",33)
   that line. Under most conditions the compiler continues processing the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",34)
   remaining routine lines. This allows the compiler to produce a more
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",35)
   complete error analysis of the routine and to generate code that may have
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",36)
   valid executable paths. The compiler does not report multiple syntax
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",37)
   errors on the same line. When it detects more than 127 syntax errors in a
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",38)
   source file, the compiler ceases to process the file.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM",39)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE")
Compile
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",1)
   Compile
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",3)
   In Direct Mode, YottaDB provides access to the compiler explicitly through
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",4)
   the ZLINK and ZCOMPILE commands, and implicitly through automatic
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",5)
   invocation of ZLINK functionality (auto-ZLINK) to add required routines to
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",6)
   the image. ZCOMPILE is a YottaDB routine compilation command, it compiles the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",7)
   routine and creates a new object module. The primary task of ZLINK is to
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",8)
   place the object code in memory and "connect" it with other routines.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",9)
   However, under certain circumstances, ZLINK may first use the YottaDB
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",10)
   compiler to create a new object module.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",11)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",12)
   The difference between ZCOMPILE and ZLINK is that ZCOMPILE creates a new
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",13)
   object module on compiling, whereas the ZLINK command links the object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",14)
   module with other routines and places the object code in memory.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",15)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",16)
   ZLINK compiles under these circumstances:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",17)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",18)
     * ZLINK cannot locate a copy of the object module but can locate a copy
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",19)
       of the source module.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",20)
     * ZLINK can locate both object and source module, and finds the object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",21)
       module to be older than the source module.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",22)
     * The file-specification portion of the ZLINK argument includes an
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",23)
       explicit extension of .m.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",24)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",25)
   Auto-ZLINK compiles under the first two circumstances, but can never
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",26)
   encounter the last one.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",27)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",28)
   When a command refers to an M routine that is not part of the current
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",29)
   image, YottaDB automatically attempts to ZLINK and, if necessary, compile
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",30)
   that routine. In Direct Mode, the most common method to invoke the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",31)
   compiler through an auto-ZLINK is to enter DO ^routinename at the YDB>
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",32)
   prompt. When the current image does not contain the routine, YottaDB does the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",33)
   following:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",34)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",35)
     o Locates the source and object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",36)
     o Determines whether the source has been edited since it was last
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",37)
       compiled
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",38)
     o Compiles the routine, if appropriate
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",39)
     o Adds the object to the image
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",40)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",41)
   By using the DO command, you implicitly instruct YottaDB to compile, link,
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",42)
   and execute the program. With this method, you can test your routine
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",43)
   interactively.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",44)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",45)
   Example:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",46)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",47)
   YDB>do ^payroll
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",48)
   YDB>do ^taxes
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",49)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",50)
   This uses the M DO command to invoke the YottaDB compiler implicitly from the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",51)
   YDB> prompt if the routine requires new object code. When the compiler
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",52)
   runs, it produces two object module files, payroll.o and taxes.o.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",53)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",54)
   If you receive error messages from the compilation, you may fix them
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",55)
   immediately by returning to the editor and correcting the source. By
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",56)
   default, the YottaDB compiler operates in "compile-as-written" mode, and
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",57)
   produces object code even when a routine contains syntax errors. This code
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",58)
   includes all lines that are correct and all commands on a line with an
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",59)
   error, up to the error. Therefore, you may decide to tailor the debugging
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",60)
   cycle by running the program without removing the syntax errors.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",61)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",62)
   **Caution**
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",63)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",64)
   The DO command does not add an edited routine to the current image if the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",65)
   image already includes a routine matching the DO argument routine name.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",66)
   When the image contains a routine, YottaDB simply executes the routine
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",67)
   without examining whether a more recent version of the module exists. If
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",68)
   you have a routine in your image, and you wish to change it, you must
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",69)
   explicitly ZLINK that routine.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",70)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",71)
   Example:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",72)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",73)
   YDB>zlink "payroll"
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",74)
   YDB>zlink "taxes.m"
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",75)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",76)
   The first ZLINK compiles payroll.m if it cannot locate payroll, or if it
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",77)
   finds that payroll.m has a more recent date/time stamp than payroll.o. The
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",78)
   second ZLINK always compiles taxes.m producing a new taxes.o.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE",79)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL")
Compile_from_the_Shell
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",1)
   Compile from the Shell
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",3)
   From the shell, invoke the compiler by entering mumps file-name at the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",4)
   shell prompt.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",5)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",6)
   Example:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",7)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",8)
   $ mumps payroll.m
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",9)
   $ mumps taxes.m
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",10)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",11)
   This uses the mumps command to invoke the YottaDB compiler from the shell
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",12)
   prompt, and creates .o versions of these files.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",13)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",14)
   Use the mumps command at the shell prompt to:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",15)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",16)
     * Check the syntax of a newly entered program.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",17)
     * Optionally, get a formatted listing of the program.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",18)
     * Ensure that all object code is up to date before linking.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",19)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",20)
   The mumps command invokes the compiler to translate an M source file into
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",21)
   object code.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",22)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",23)
   The format for the MUMPS command is:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",24)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",25)
   MUMPS [-qualifier[...]] pathname
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",26)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",27)
   The * wildcard accepts any legal combination of numbers and characters
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",28)
   including a null, in the position the wildcard holds.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",29)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",30)
   The ? wildcard accepts exactly one legal character in its position.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",31)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",32)
   For example, mumps *.m compiles all files in the current default directory
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",33)
   with an .m extension. mumps *pay?.m compiles .m files with names that
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",34)
   contain any characters followed by pay, followed by one character. Unlike
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",35)
   when using ZLINK or ZCOMPILE, the filename must be fully specified when
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",36)
   compiling from the shell.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",37)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",38)
   **Caution**
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",39)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",40)
   When forming routine names, the compiler truncates object filenames to a
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",41)
   maximum length of 31 characters. For example, for a source file called
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",42)
   Adatabaseenginewithscalabilityproven.m the compiler generates an object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",43)
   file called Adatabaseenginewithscalabilityp.o. Ensure that the first 31
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",44)
   characters of source file names are unique.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","COMPILE_FROM_THE_SHELL",45)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS")
mumps_qualifiers
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",1)
   mumps qualifiers
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",3)
   The mumps command allows qualifiers that customize the type and form of
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",4)
   the compiler output to meet specific programming needs. MUMPS command
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",5)
   qualifiers may also appear as a modifier to the argument to the YottaDB ZLINK
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",6)
   and ZCOMPILE commands. The following section describes the mumps command
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",7)
   qualifiers. Make sure the arguments are specified ahead of file name and
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",8)
   after the command itself.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]")
di[rect_mode]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",1)
   di[rect_mode]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",3)
   Invokes a small YottaDB image that immediately initiates Direct Mode.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",4)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",5)
   -direct_mode does not invoke the M compiler.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",6)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",7)
   The -direct_mode qualifier is incompatible with a file specification and
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",8)
   with all other qualifiers.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DI[RECT_MODE]",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]")
dy[namic_literals]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",1)
   dy[namic_literals]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",3)
   Compiles certain data structures associated with literals used in the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",4)
   source code in a way that they are dynamically loaded and unloaded from
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",5)
   the object code. The dynamic loading and unloading of these data
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",6)
   structures:
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",7)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",8)
     o Supersedes any specification of -NOINLINE_LITERALS.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",9)
     o Reduces the amount of private memory required by each process which in
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",10)
       turn allows more processes to execute with the same memory.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",11)
     o In some circumstances, increases application performance by making
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",12)
       more memory available for file system buffers.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",13)
     o Increases the CPU and stack costs of local variable processing.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",14)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",15)
   With no -DYNAMIC_LITERALS specified, these data structures continue to be
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",16)
   generated when a routine is linked and stay in the private memory of each
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",17)
   process. As the use of -DYNAMIC_LITERALS increases object code size, and
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",18)
   as the dynamic loading and unloading only saves memory when the object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",19)
   code is in shared libraries, YottaDB recommends restricting the use of
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",20)
   -DYNAMIC_LITERALS to only when compiling object code to be loaded into
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",21)
   shared libraries or executed from an auto relink enabled directory.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","DY[NAMIC_LITERALS]",22)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES")
le[ngth]=lines
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",1)
   le[ngth]=lines
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",3)
   Controls the page length of the listing file.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",4)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",5)
   The M compiler ignores the -length qualifier unless it appears with the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",6)
   -list qualifier.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",7)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",8)
   By default, the listing has -length=66.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","LE[NGTH]=LINES",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]")
noin[line_literals]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",1)
   noin[line_literals]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",3)
   Compiles routines to use library code in order to load literals instead of
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",4)
   generating in-line code thereby reducing the routine size. At the cost of
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",5)
   a small increase in CPU, the use of -NOINLINE_LITERAL may help counteract
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",6)
   growth in object size due to -DYNAMIC_LITERALS.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",7)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",8)
   **Important**
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",10)
   Both -DYNAMIC_LITERALS and -NOINLINE_LITERNALS help optimize performance
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",11)
   and virtual memory usage for applications whose source code includes
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",12)
   literals. As the scalability and performance from reduced per-process
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",13)
   memory usage may or may not compensate for the incremental cost of
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",14)
   dynamically loading and unloading the data structures, and as the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",15)
   performance of routines vs. inline code can be affected by the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",16)
   availability of routines in cache, YottaDB suggests benchmarking to determine
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",17)
   the combination of qualifiers best suited to each workload. Note that
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",18)
   applications can freely mix routines compiled with different combinations
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",19)
   of qualifiers.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","NOIN[LINE_LITERALS]",20)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]")
r[un]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",1)
   r[un]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",3)
   Invokes YottaDB in Autostart Mode.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",4)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",5)
   The next argument is taken to be an M entryref. That routine is
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",6)
   immediately executed, bypassing Direct Mode. Depending on the shell, you
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",7)
   may need to put the entryref in quotation marks (""). This qualifier does
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",8)
   not invoke the M compiler and is not compatible with any other qualifier.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","R[UN]",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES")
s[pace]=lines
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",1)
   s[pace]=lines
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",3)
   Controls the spacing of the output in the listing file. -space=n specifies
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",4)
   n-1 blank lines separating every source line in the listing file. If n<1,
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",5)
   the M command uses single spacing in the listing.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",6)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",7)
   If this qualifier appears without the -list qualifier, the M compiler
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",8)
   ignores the -space qualifier.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",10)
   By default, listings use single spaced output (-space=1).
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","S[PACE]=LINES",11)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE")
[no]embed_source
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",1)
   [no]embed_source
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",3)
   Instructs YottaDB to embeds routine source code in the object code. The
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",4)
   default is NOEMBED_SOURCE. Like other YottaDB compilation qualifiers, this
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",5)
   qualifier can be specified through the $ZCOMPILE intrinsic special
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",6)
   variable and ydb_compile environment variable. EMBED_SOURCE provides $TEXT
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",7)
   and ZPRINT access to the correct source code, even if the original M
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",8)
   source file has been edited or removed. Where the source code is not
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",9)
   embedded in the object code, YottaDB attempts to locate the source code file.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",10)
   If it cannot find source code matching the object code, $TEXT() returns a
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",11)
   null string. ZPRINT prints whatever source code found and also prints a
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",12)
   TXTSRCMAT message in direct mode; if it cannot find a source file, ZPRINT
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",13)
   issues a FILENOTFND error.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]EMBED_SOURCE",14)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]")
[no]i[gnore]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",1)
   [no]i[gnore]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",3)
   Instructs the compiler to produce an object file even when the compiler
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",4)
   detects errors in the source code (-ignore), or not to produce an object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",5)
   file when the compiler encounters an error (-noignore).
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",6)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",7)
   When used with the -noobject qualifier, the -ignore qualifier has no
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",8)
   effect.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",10)
   Execution of a routine that compiles with errors produces run-time errors
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",11)
   when the execution path encounters any of the compile time errors.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",12)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",13)
   This compile-as-written mode facilitates a flexible approach to debugging
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",14)
   and expedites conversion to YottaDB from an interpreted environment. Many M
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",15)
   applications from an interpreted environment contain syntax abnormalities.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",16)
   This feature of compiling and later executing a routine provides the feel
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",17)
   of developing in an interpreted environment.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",18)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",19)
   By default, the compiler operates in -ignore mode and produces an object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",20)
   module even when the source routine contains errors.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]I[GNORE]",21)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]")
[no]li[st][=filename]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",1)
   [no]li[st][=filename]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",3)
   Instructs the compiler to produce a source program listing file, and
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",4)
   optionally specifies a name for the listing file. The listing file
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",5)
   contains numbered source program text lines. When the routine has errors,
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",6)
   the listing file also includes an error count, information about the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",7)
   location, and the cause of the errors.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",8)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",9)
   When you do not specify a file name for the listing file, the compiler
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",10)
   produces a listing file with the same name as the source file with a .lis
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",11)
   file extension.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",12)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",13)
   The -length and -space qualifiers modify the format and content of the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",14)
   listing file. The M compiler ignores these qualifiers unless the command
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",15)
   includes the -list qualifier.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",16)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",17)
   By default, the compiler operates -nolist and does not produce listings.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]LI[ST][=FILENAME]",18)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]")
[no]o[bject][=filename]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",1)
   [no]o[bject][=filename]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",3)
   Instructs the compiler to produce an output object file and optionally
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",4)
   specifies a name for the object file using the optional filename argument.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",5)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",6)
   When you do not specify a file name, the compiler produces an object file
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",7)
   with the same file name as the source file and an .o file extension.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",8)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",9)
   When forming routine names, the compiler truncates object filenames to a
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",10)
   maximum length of 31 characters. For example, for a source file called
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",11)
   Adatabaseenginewithscalabilityproven.m the compiler generates an object
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",12)
   file called Adatabaseenginewithscalabilityp.o. Ensure that first 31
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",13)
   characters of source file names are unique.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",14)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",15)
   The -noobject qualifier suppresses the production of an object file and is
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",16)
   usually used with the -list qualifier to produce only a listing file.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",17)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",18)
   Compilation with -OBJECT without -NAMEOFRTN implicitly names the first
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",19)
   routine to match the name specified with -OBJECT.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",20)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",21)
   By default, the compiler produces object modules.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]O[BJECT][=FILENAME]",22)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]")
[no]w[arning]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",1)
   [no]w[arning]
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",3)
   Instructs the compiler to suppress error output; the default is -warning.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",4)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",5)
   When used with the -list qualifier, the -nowarning qualifier does not
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",6)
   affect errors in the listing.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",7)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",8)
   **Note**
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",9)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",10)
   When used with the -noobject qualifier, the -nowarning qualifier instructs
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",11)
   the compiler to produce no object with no indication of the fact or the
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",12)
   cause of any errors.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[NO]W[ARNING]",13)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME")
[n]ameofrtn=filename
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME",1)
   [n]ameofrtn=filename
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME",2)

^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME",3)
   Instructs the compiler to produce an output object file with the specified
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME",4)
   name. You can use -NAMEOFRTN and -OBJECT to create two object files with
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME",5)
   different names from the same .m source file.
^HELP("s","PROGRAM_CYCLE","s","COMPILE_SOURCE_PROGRAM","s","MUMPS_QUALIFIERS","s","[N]AMEOFRTN=FILENAME",6)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL")
Execute_from_Shell
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",1)
   Execute from Shell
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",2)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",3)
   You can run a program from the shell prompt using the following command:
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",4)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",5)
   $ mumps -run ^filename
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",6)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",7)
   The mumps command searches the directories specified by the environment
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",8)
   variable ydb_routines to locate the specified file name.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",9)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",10)
   Example:
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",11)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",12)
   $ mumps -run ^payroll
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",13)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",14)
   This executes a routine named payroll.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_FROM_SHELL",15)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM")
Execute_Source_Program
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM",1)
   Execute Source Program
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM",2)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM",3)
   M source programs can be executed either from the shell or from YottaDB
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM",4)
   (Direct Mode).
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM",5)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE")
Execute_in_Direct_Mode
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",1)
   Execute in Direct Mode
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",2)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",3)
   As discussed in the section on compiling source programs, the YottaDB command
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",4)
   ZLINK compiles the source code into an object module and adds the object
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",5)
   module to the current image.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",6)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",7)
   The run-time system also invokes auto-ZLINKing when an M command, in a
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",8)
   program or in Direct Mode, refers to a routine that is not part of the
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",9)
   current image.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",10)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",11)
   M commands and functions that may initiate auto-ZLINKing are:
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",12)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",13)
     * DO
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",14)
     * GOTO
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",15)
     * ZBREAK
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",16)
     * ZGOTO
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",17)
     * ZPRINT
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",18)
     * $TEXT()
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",19)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",20)
   $ZROUTINES is a read-write special variable that contains a directory
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",21)
   search path used by ZLINK and auto-ZLINK to locate source and object
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",22)
   files.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",23)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",24)
   When the argument to a ZLINK command includes a pathname, $ZSOURCE
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",25)
   maintains that pathname as a default for ZEDIT and ZLINK. $ZSOURCE is a
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",26)
   read-write special variable.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",27)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",28)
   Once you use the ZEDIT or ZLINK commands, $ZSOURCE can contain a partial
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",29)
   file specification. The partial file specification can be a directory path
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",30)
   (full or relative), a file name, and a file extension. You can set
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",31)
   $ZSOURCE with an M SET command. A ZLINK without an argument is equivalent
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",32)
   to ZLINK $ZSOURCE.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",33)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",34)
   For additional information on $ZSOURCE and $ZROUTINES, refer to Chapter 8:
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",35)
   "ISV".
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",36)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",37)
   Example:
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",38)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",39)
   YDB>ZLINK "taxes"
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",40)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",41)
   If ZLINK finds taxes.m or taxes.o, the command adds the routine taxes to
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",42)
   the current image. When ZLINK cannot locate taxes.o, or when it finds
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",43)
   taxes.o is older than taxes.m, it compiles taxes.m, producing a new
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",44)
   taxes.o. Then, it adds the contents of the new object file to the image.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","EXECUTE_IN_DIRECT_MODE",45)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY")
Locate_Source_Directory
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",1)
   Locate Source Directory
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",2)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",3)
   A ZLINK command that does not specify a directory uses $ZROUTINES to
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",4)
   locate files. When $ZROUTINES is null, ZLINK uses the current directory.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",5)
   $ZROUTINES is initialized to the value of the ydb_routines environment
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",6)
   variable.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",7)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",8)
   When the file being linked includes an explicit directory, ZLINK and
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",9)
   auto-ZLINK searches only that directory for both the object and the source
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",10)
   files. If compilation is required, ZLINK places the new object file in the
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",11)
   named directory.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",12)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",13)
   A subsequent ZLINK searching for this object file will never find the
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",14)
   object file in the specified directory unless the directory is added to
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",15)
   the search path in $ZROUTINES, or the object file is moved to another
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",16)
   directory already in the search path.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",17)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",18)
   ZLINK cannot change a currently active routine, (e.g., a routine displayed
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",19)
   in a ZSHOW "S" of the stack). ZLINK a currently active routine by first
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",20)
   removing it from the M stack, using ZGOTO, or one or more QUITs.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",21)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",22)
   To maintain compatibility with other editions of YottaDB that do not permit
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",23)
   the percent sign (%) in a file name, YottaDB uses an underscore (_) in place
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",24)
   of the percent in the file name.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",25)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",26)
   Example:
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",27)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",28)
   YDB>zlink "_MGR"
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",29)

^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",30)
   This ZLINK links the M routine %MGR into the current image.
^HELP("s","PROGRAM_CYCLE","s","EXECUTE_SOURCE_PROGRAM","s","LOCATE_SOURCE_DIRECTORY",31)

^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS")
Processing_Errors
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",1)
   Processing Errors
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",2)

^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",3)
   +------------------------------------------------------------------------+
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",4)
   |         |  Executing in Direct  | Executing from the Shell (mumps -run |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",5)
   |         |         Mode          |              ^routine)               |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",6)
   |---------+-----------------------+--------------------------------------|
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",7)
   |         | Suitable for          |                                      |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",8)
   | Usage   | development and       | Suitable for production.             |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",9)
   |         | debugging.            |                                      |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",10)
   |---------+-----------------------+--------------------------------------|
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",11)
   |         | Not invoked for code  | Errors are suppressed and cause a    |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",12)
   |         | entered at the direct | silent process exit. Set the         |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",13)
   |         | mode prompt; Note     | environment variable ydb_etrap which |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",14)
   |         | that XECUTE code is   | overrides the default $ZTRAP="B".    |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",15)
   |         | treated as not        |                                      |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",16)
   | Error   | entered at the direct | If needed, error handlers can        |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",17)
   | Handler | mode prompt           | include appropriate error            |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",18)
   |         |                       | notification to $PRINCIPAL. For      |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",19)
   |         | The default           | example, the ydb_set_env script sets |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",20)
   |         | $ZTRAP="B" brings a   | a default $ETRAP value of            |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",21)
   |         | process to the Direct | "Write:(0=$STACK) ""Error occurred:  |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",22)
   |         | Mode for debugging.   | "",$ZStatus,!" which you can         |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",23)
   |         |                       | customize to suit your needs.        |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",24)
   |---------+--------------------------------------------------------------|
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",25)
   |         | YottaDB processes send error messages to stderr only under   |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",26)
   |         | the following conditions:                                    |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",27)
   |         |                                                              |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",28)
   |         |   * The error is fatal which means that the process is about |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",29)
   | stderr  |     to terminate                                             |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",30)
   |         |   * During compilation except of indirection or XECUTE       |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",31)
   |         |   * The process is about to enter direct mode due to a BREAK |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",32)
   |         |     command                                                  |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",33)
   |         |   * The erroneous code was entered at the direct mode prompt |
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",34)
   +------------------------------------------------------------------------+
^HELP("s","PROGRAM_CYCLE","s","PROCESSING_ERRORS",35)

^HELP("s","TRIGGERS")
Triggers
^HELP("s","TRIGGERS",1)
   Triggers
^HELP("s","TRIGGERS",2)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS")
M_Coding_Standards_-_Do's_and_Don'ts
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",1)
   M Coding Standards - Do's and Don'ts
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",2)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",3)
   M coding standards help:
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",4)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",5)
     o Improve quality and maintainability by producing uniform standardized
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",6)
       code.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",7)
     o Aid in readability and comprehension of developed source code by
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",8)
       providing an unambiguous, easy to read standard to follow.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",9)
     o Avoid common errors that would not be picked up by a compiler by using
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",10)
       these as a framework for good coding practices.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",11)
     o Provide an objective reference point for the code authors,
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",12)
       maintainers, and reviewers.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS",13)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S")
Do's
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",1)
   Do's
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",2)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",3)
   Character Set
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",4)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",5)
           Construct literal strings using only graphic ASCII characters .
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",6)
           For non-graphic characters, use the $CHAR() or $ZCHAR() functions
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",7)
           to build strings, use a resource file, or build them from comments
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",8)
           in the source code using $TEXT().
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",9)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",10)
           Use VIEW "BADCHAR" in production environments.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",11)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",12)
   Internationalization
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",13)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",14)
           Use standard M functions - $ASCII(), $CHAR(), $EXTRACT(), $FIND(),
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",15)
           $JUSTIFY(), $LENGTH(), $PIECE(), and $TRANSLATE() - for
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",16)
           character-oriented operations. Use analogous byte-oriented
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",17)
           functions - $ZASCII(), $ZCHAR(), $ZEXTRACT() / $ZSUBSTR(),
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",18)
           $ZFIND(), $ZJUSTIFY(), $ZLENGTH(), $ZPIECE(), and $ZTRANSLATE()
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",19)
           when the logic calls for byte, rather than character operations.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",20)
           Use $ZSUBSTR() to ensure the byte-oriented operation produces a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",21)
           valid character result and $ZEXTRACT() when the operation is
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",22)
           strictly byte-oriented, with no character implications.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",23)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",24)
           Use $ZCONVERT() rather than $TRANSLATE() / $ZTRANSLATE() for case
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",25)
           conversion.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",26)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",27)
   Alias Variables and Containers
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",28)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",29)
           Use Alias Variables and Containers where they promote modularity
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",30)
           and an appropriate object-like approach.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",31)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",32)
   Parameter Passing
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",33)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",34)
           Use parameter passing to minimize scoping risk and to implicitly
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",35)
           document [sub]routine interfaces. Place variables that are
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",36)
           optionally passed at the end of the parameter list. Choose
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",37)
           pass-by-reference variable names for clarity and to avoid side
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",38)
           effects. Note that using the same name in the actuallist and the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",39)
           formallist may have implications.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",40)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",41)
   Naked References
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",42)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",43)
           Avoid naked references except when they reduce the width of the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",44)
           line and materially improve readability. In such cases, ensure any
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",45)
           naked references follows the full reference, on the same line with
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",46)
           no intervening invocation of other code.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",47)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",48)
   Entryrefs
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",49)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",50)
           Use the top entryref for invocation from the shell rather than
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",51)
           from another routine. Where there is a risk of inadvertent
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",52)
           execution from the shell of a routine intended only to be called
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",53)
           from M code, protect the top entryref with code that uses $STACK
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",54)
           to validate whether or not it is invoked from the shell. Existing
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",55)
           utility routines with interfaces documented as not requiring a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",56)
           label are exempt from this requirement.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",57)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",58)
   Lines with multiple commands
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",59)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",60)
           Use lines with multiple, related commands to improve readability
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",61)
           as long as they are not too long. Avoid lines with multiple,
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",62)
           unrelated commands.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",63)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",64)
   Lines Width
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",65)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",66)
           Limit lines to no wider than 132 columns.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",67)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",68)
   **Note**
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",69)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",70)
           The line oriented nature of M means that sometimes a single long
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",71)
           line can be more readable than a block of code. Such occasional
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",72)
           long lines are permissible where so justified.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",73)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",74)
   Error Handling
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",75)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",76)
           All product code must have an error trap. Unless the intent of the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",77)
           code is to invoke Direct Mode, the error handler must never use a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",78)
           BREAK explicitly or implicitly to do so. The base error handler in
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",79)
           a program suite, and possibly some other error handlers, must
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",80)
           provide a way to appropriately preserve the context of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",81)
           unpredictable errors.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",82)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",83)
           New code should generally use $ETRAP error handling rather than
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",84)
           $ZTRAP error handling. As changing error handling can be risky
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",85)
           (for example, indirect references in databases), retain error
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",86)
           handling in existing code unless you have tested and verified the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",87)
           safety of the change.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",88)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",89)
   Transaction Processing
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",90)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",91)
           Except for tests, code transactions as restartable, avoid
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",92)
           non-Isolated actions (BREAK, JOB, LOCK ZSYSTEM or I/O) within
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",93)
           transactions; minimize transaction size, use TRANSACTION="BATCH"
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",94)
           for better performance where the solution doesn't require strong
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",95)
           Durability or provides Durability with application logic. When
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",96)
           LOCKs are appropriate, place them outside the transaction.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",97)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",98)
   BREAK
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",99)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",100)
           To prevent applications from inadvertently falling into direct
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",101)
           mode, only use the BREAK command when there is a specific
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",102)
           requirement for its use. When circumstances require BREAK commands
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",103)
           more persistent than those placed with ZBREAK, or in places within
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",104)
           lines, conditionalize them on a debug setting, for example
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",105)
           BREAK:($get(debug)&(<condition>)).
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",106)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",107)
   Argumentless Do
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",108)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",109)
           This language construct provides a way to code an embedded
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",110)
           subroutine, which stacks $TEST - something extrinsic functions
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",111)
           ($$) also do, but DO with an entryref argument does not. It also
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",112)
           provides some relief from the line-oriented structure of the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",113)
           language, albeit at some cost.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",114)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",115)
           When the logic calls for multiple invocations of a subroutine
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",116)
           avoid using multiple copies of the same argumentless DO body.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",117)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",118)
           Leave a space between the last level indicator (li) and the first
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",119)
           command or a comment delimiter.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",120)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",121)
           Be careful with level indicators, as any reduction in number, even
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",122)
           for a comment, terminates one or more levels.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",123)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",124)
   GOTO and ZGOTO
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",125)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",126)
           Except for handling logic to effect an exit from nested logic and
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",127)
           nested function calls or where appropriate in test code, avoid the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",128)
           use of GOTO and ZGOTO commands. When using these commands outside
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",129)
           of test code, you must include a comment explaining why such use
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",130)
           works better than any refactoring that would eliminate the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",131)
           [Z]GOTO.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",132)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",133)
   HALT, QUIT, and HALT
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",134)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",135)
           Choose QUIT, rather than HALT, to terminate a routine, unless
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",136)
           there is a clear requirement to the contrary.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",137)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",138)
           Account for the difference in QUIT from a FOR, which does not
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",139)
           change the stack level of the M virtual machine and QUIT from a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",140)
           [sub]routine which does change the stack level. This may require
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",141)
           the use of a state flag to terminate a FOR that invokes a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",142)
           subroutine.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",143)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",144)
           Choose the argumentless (which requires a following double space)
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",145)
           or value form of QUIT as appropriate. When a subroutine can be
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",146)
           invoked with either a DO or extrinsic ($$), explicitly code the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",147)
           alternative exits, rather than relying on a setting of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",148)
           $ZQUIT_ANYWAY.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",149)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",150)
           QUIT at the end of a [sub]routine is required unless the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",151)
           [sub]routine ends in a HALT. QUIT at the end of an argumentless DO
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",152)
           level is optional.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",153)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",154)
           Use ZHALT to return an invocation to the shell that the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",155)
           termination is abnormal.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",156)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",157)
   LOCK, ZALLOCATE, and ZDEALLOCATE
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",158)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",159)
           Always specify a timeout on LOCK or LOCK+ commands.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",160)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",161)
           Use a protocol for resource name order to minimize deadlocks. Use
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",162)
           the standard incremental LOCK (+/-), rather than ZALLOCATE and
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",163)
           ZDEALLOCATE.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",164)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",165)
   NEW
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",166)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",167)
           Minimize use of argumentless and exclusive NEW except to satisfy
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",168)
           requirements. These variants may be appropriate at the beginning
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",169)
           of the base routine of an application.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",170)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",171)
   READ
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",172)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",173)
           Always use a timeout, except when READing from a file in NOFOLLOW
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",174)
           mode. Except when collecting raw or externally validated data,
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",175)
           READ into a local variable and validate that the value is
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",176)
           appropriate - check for length, range, delimiters and any value
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",177)
           restrictions. Always validate input before using it in ways that
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",178)
           assume it meets expectations; this is critical when using it in
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",179)
           indirection or XECUTE, or storing it durably in a global variable.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",180)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",181)
   SET
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",182)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",183)
           When setting several nodes to the same value, specify a list of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",184)
           names within parentheses, rather than separately, e.g., SET
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",185)
           (A,B,C)=0 vs. SET A=0,B=0,C=0.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",186)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",187)
   XECUTE, Indirection, $ZSYSTEM and PIPE device commands
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",188)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",189)
           To minimize run-time errors and prevent out-of-design user induced
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",190)
           outcomes, ensure strings for use by the indirection operator, the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",191)
           XECUTE command, the ZSYSTEM command and PIPE device commands are
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",192)
           valid, either by program design and implementation, or by
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",193)
           validating the value prior to use.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",194)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",195)
   Else
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",196)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",197)
           Use ELSE with care. Because YottaDB stacks $TEST only at the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",198)
           execution of an extrinsic or an argumentless DO command, any
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",199)
           XECUTE or DO with an argument has the potential side effect of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",200)
           altering $TEST.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",201)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",202)
   Post conditionals
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",203)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",204)
           When conditionalizing a single command or transfer of control
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",205)
           argument, and there is no need to set $TEST, use postconditionals,
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",206)
           as they provide a slight performance advantage and tend to improve
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",207)
           readability by tying the condition closely to the action. For
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",208)
           example, choose SET:<condition> over IF <condition> SET.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",209)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",210)
   $ZDATA() and $DATA()
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",211)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",212)
           Use $ZDATA() rather than $DATA() unless the logic needs to ignore
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",213)
           alias implications.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",214)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",215)
   $Increment
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",216)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",217)
           You may use an IF to discard the result of INCREMENT() in order to
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",218)
           take advantage of the INCREMENT() side-effect.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",219)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",220)
   $Next
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",221)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",222)
           Use $ORDER() rather than $NEXT(), which is deprecated.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",223)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",224)
   $Piece()
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",225)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",226)
           If using a piece of data more than once, extract the data to a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",227)
           local variable for reuse, rather than using repeated invocations
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",228)
           of $PIECE() to extract the same piece of data.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",229)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",230)
   $Random()
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",231)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",232)
           $RANDOM(1) always returns 0 and so is never appropriate. Adjust
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",233)
           $RANDOM() results with appropriate arithmetic to achieve the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",234)
           desired range.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",235)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",236)
   $ZPREVIOUS()
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",237)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",238)
           Use the standard $ORDER(x,-1), rather than $ZPREVIOUS(x).
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",239)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",240)
   $ETrap vs. $ZTRAP
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",241)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",242)
           Use $ETRAP rather than $ZTRAP unless there are good reasons not
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",243)
           to.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",244)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",245)
   $KEY vs. $ZB
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",246)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",247)
           Use $KEY rather than $ZB, unless code must run on old versions of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",248)
           YottaDB which do not maintain $KEY for the target device.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",249)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",250)
   $STack vs. $ZLEVEL
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",251)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",252)
           Use $STACK rather than $ZLEVEL, unless it eliminated arithmetic or
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",253)
           existing uses of $ZLEVEL are so numerous as to make a change high
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",254)
           risk.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",255)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",256)
   $ZCMDLINE
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",257)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",258)
           Validate all input from $ZCMDLINE as if it were from a READ for
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",259)
           user input.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",260)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",261)
   Extrinsic Functions and Special Variables ($$)
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",262)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",263)
           When a subroutine needs to return a single value or an an array of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",264)
           values, choose an Extrinsic invocation over a DO in order to
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",265)
           minimize scoping risks.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",266)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",267)
   Triggers
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",268)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",269)
           While YottaDB does not restrict trigger code from performing I/O
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",270)
           operations, avoid using OPEN, USE, READ, WRITE and CLOSE within
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",271)
           trigger application code. Such operations may be useful for
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",272)
           development and diagnostic purposes. Triggers implicitly run as TP
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",273)
           transactions and I/O violates the ACID property of Isolation , as
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",274)
           do JOB, LOCK, ZSYSTEM and external calls. ($&) .
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",275)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",276)
           Use comprehensive and strong coding conventions for trigger code
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",277)
           or rely on user-specified names in managing the deletion and
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",278)
           replacement of triggers.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",279)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",280)
           Except when using triggers for debugging, use journaling any
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",281)
           region that uses triggers.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",282)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",283)
   Call-in/Call-outs
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",284)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",285)
           Use gtm_malloc/gtm_free in the external functions for enhanced
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",286)
           performance and better debugging capability in case memory
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",287)
           management problems occur with external calls.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",288)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",289)
           Use gtm *t types defined in gtmxc_types.h be used instead of the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",290)
           native types (int, float, char, etc) to avoid potential size
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",291)
           mismatches with the parameter types.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",292)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",293)
   Autorelink
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",294)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",295)
           Either auto-relink-enable or auto-relink-disable the directory in
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",296)
           the $zroutines for the life of the process.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",297)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",298)
           Use the same value of $ydb_linktmpdir for all processes. All
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",299)
           processes that share a directory whose contents are subject to
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",300)
           ZRUPDATE use the same value for $ydb_linktmpdir so that all
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",301)
           processes see update notifications - with different values of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",302)
           $ydb_linktmpdir, a ZRUPDATE by a process with one value of
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",303)
           $ydb_linktmpdir would not be observed by a process with a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",304)
           different value of that environment variable.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DO'S",305)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS")
Don'ts
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",1)
   Don'ts
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",2)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",3)
   Source and Object Files
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",4)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",5)
           Never change the name of an object file.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",6)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",7)
           When forming routine names, the compiler truncates object
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",8)
           filenames to a maximum length of 31 characters. For example, for a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",9)
           source file called Adatabaseenginewithscalabilityproven.m the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",10)
           compiler generates an object file called
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",11)
           Adatabaseenginewithscalabilityp.o. Never let YottaDB routines file
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",12)
           names exceed 31 characters.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",13)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",14)
   kill -9
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",15)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",16)
           Don't killing a process with kill -9 and it may cause database
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",17)
           damage. Use MUPIP STOP or MUPIP INTRPT instead. Use kill -9 as the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",18)
           last resort if the process does not respond to MUPIP STOP. kill -9
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",19)
           terminates the process abruptly and may leave database files
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",20)
           improperly closed and require a MUPIP RUNDOWN. Because kill -9 may
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",21)
           cause database damage, perform a MUPIP INTEG immediately after a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",22)
           kill -9.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",23)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",24)
   Operate as root
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",25)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",26)
           Never run a routine as root.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",27)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",28)
           Other than YottaDB installation, never perform any YottaDB operation as
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",29)
           root.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",30)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",31)
   Triggers
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",32)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",33)
           Never use chained and nested triggers that potentially update the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",34)
           same piece of a global variable. You should always assess the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",35)
           significance of having chained triggers for a database update
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",36)
           especially because of the arbitrary trigger execution order.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",37)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",38)
           Never access ^#t with DSE, except with guidance from your YottaDB
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",39)
           support channel. Manage trigger definitions with MUPIP TRIGGER and
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",40)
           $ZTRIGGER().
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",41)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",42)
   Local variables
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",43)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",44)
           Never use exponential numeric form in the subscripts. It may lead
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",45)
           to ambiguities. Because numeric subscripts collate ahead of string
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",46)
           subscripts, the string subscript "01E5" is not the same as the
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",47)
           numeric subscript 01E5.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",48)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",49)
           Never SET $ZWRTACn "variables". They are used by YottaDB to make
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",50)
           ZWRITE output more useful but are not supported for any other
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",51)
           purpose. They are only mentioned here because you may see them in
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",52)
           the output of ZWRITE and ZSHOW "V".
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",53)

^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",54)
           You can use SET @ to process ZWRITE or ZSHOW "V" output containing
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",55)
           $ZWRTACn variables for restoring an alias container variable to a
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",56)
           prior state. While processing the output, never attempt to inject
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",57)
           or manipulate $ZWRTACn lines as it may lead to unintended
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",58)
           consequences or undermine the benefit you might achieve from using
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",59)
           alias containers. Lines containing SET $ZWRTACn=<value> are no-ops
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",60)
           unless they have a preceding SET $ZWRTAC="" and an alias container
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",61)
           variable association. In the ZWRITE or ZSHOW "V" output of an
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",62)
           alias container, SET $ZWRTAC lines appear in the order that YottaDB
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",63)
           expects for restoration.
^HELP("s","TRIGGERS","s","M_CODING_STANDARDS_-_DO'S_AND_DON'TS","s","DON'TS",64)

^HELP("s","TRIGGERS","s","SEMANTICS")
Semantics
^HELP("s","TRIGGERS","s","SEMANTICS",1)
   Semantics
^HELP("s","TRIGGERS","s","SEMANTICS",2)

^HELP("s","TRIGGERS","s","SEMANTICS",3)
   YottaDB stores Triggers for each global variable in the database file for
^HELP("s","TRIGGERS","s","SEMANTICS",4)
   that global variable. When a global directory maps a global variable to
^HELP("s","TRIGGERS","s","SEMANTICS",5)
   its database file, it also maps triggers for that global variable to the
^HELP("s","TRIGGERS","s","SEMANTICS",6)
   same database file. When an extended reference uses a different global
^HELP("s","TRIGGERS","s","SEMANTICS",7)
   directory to map a global variable to a database file, that global
^HELP("s","TRIGGERS","s","SEMANTICS",8)
   directory also maps triggers for that global variable to that same
^HELP("s","TRIGGERS","s","SEMANTICS",9)
   database file.
^HELP("s","TRIGGERS","s","SEMANTICS",10)

^HELP("s","TRIGGERS","s","SEMANTICS",11)
   Although triggers for SET and KILL / ZKILL commands can be specified
^HELP("s","TRIGGERS","s","SEMANTICS",12)
   together, the command invoking a trigger is always unique. The ISV
^HELP("s","TRIGGERS","s","SEMANTICS",13)
   $ZTRIGGEROP provides the trigger code which matched the triggering
^HELP("s","TRIGGERS","s","SEMANTICS",14)
   command.
^HELP("s","TRIGGERS","s","SEMANTICS",15)

^HELP("s","TRIGGERS","s","SEMANTICS",16)
   Whenever a command updates a global variable, the YottaDB runtime system
^HELP("s","TRIGGERS","s","SEMANTICS",17)
   first determines whether there are any triggers for that global variable.
^HELP("s","TRIGGERS","s","SEMANTICS",18)
   If there are any triggers, it scans the signatures for subscripts and node
^HELP("s","TRIGGERS","s","SEMANTICS",19)
   values to identify matching triggers. If multiple triggers match, YottaDB
^HELP("s","TRIGGERS","s","SEMANTICS",20)
   invokes them in an arbitrary order. Since a future version of YottaDB,
^HELP("s","TRIGGERS","s","SEMANTICS",21)
   potentially multi-threaded, may well choose to execute multiple triggers
^HELP("s","TRIGGERS","s","SEMANTICS",22)
   in parallel, you should ensure that when a node has multiple triggers,
^HELP("s","TRIGGERS","s","SEMANTICS",23)
   they are coded so that correct application behavior does not rely on the
^HELP("s","TRIGGERS","s","SEMANTICS",24)
   order in which they execute.
^HELP("s","TRIGGERS","s","SEMANTICS",25)

^HELP("s","TRIGGERS","s","SEMANTICS",26)
   When a process executes a KILL, ZKILL or SET command, the target is the
^HELP("s","TRIGGERS","s","SEMANTICS",27)
   global variable node specified by the command argument for modification.
^HELP("s","TRIGGERS","s","SEMANTICS",28)
   With SET and ZKILL, the target is a single node. In the case of KILL, the
^HELP("s","TRIGGERS","s","SEMANTICS",29)
   target may represent an entire sub-tree of nodes. YottaDB only matches the
^HELP("s","TRIGGERS","s","SEMANTICS",30)
   trigger against the target node, and only invokes the trigger once for
^HELP("s","TRIGGERS","s","SEMANTICS",31)
   each KILL command. YottaDB does not check nodes in sub-trees to see whether
^HELP("s","TRIGGERS","s","SEMANTICS",32)
   they have matching triggers.
^HELP("s","TRIGGERS","s","SEMANTICS",33)

^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE")
Accessing_Xecute_Source_Code
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",1)
   Accessing Xecute Source Code
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",2)

^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",3)
   ZPRINT/$TEXT()/ZBREAK recognize both a runtime-disambiguator, delimited
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",4)
   with a hash-sign (#), and a region-disambiguator, delimited by a slash(/).
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",5)
   ZPRINT and ZBREAK treat a trigger-not-found case as a TRIGNAMENF error,
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",6)
   while $TEXT() returns the empty string. When their argument contains a
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",7)
   region-disambiguator, these features ignore a null runtime-disambiguator.
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",8)
   When their argument does not contain a region-disambiguator, these
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",9)
   features act as if runtime-disambiguator is specified, even if it has an
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",10)
   empty value. When an argument specifies both runtime-disambiguator and
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",11)
   region-disambiguator and the runtime-disambiguator identifies a trigger
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",12)
   loaded from a region different from the specified region, or the
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",13)
   region-disambiguator identifies a region which holds a trigger that is not
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",14)
   mapped by $ZGBLDIR, these features treat the trigger as not found.
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",15)

^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",16)
   ZPRINT or $TEXT() of trigger code may be out-of-date if the process
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",17)
   previously loaded the code, but a $ZTRIGGER() or MUPIP TRIGGER has since
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",18)
   changed the code. In other words, execution of a trigger (not $TEXT())
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",19)
   ensures that trigger code returned with $TEXT() is current.
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",20)

^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",21)
Appendix A. M Coding Standards - Do's and Don'ts
^HELP("s","TRIGGERS","s","SEMANTICS","s","ACCESSING_XECUTE_SOURCE_CODE",22)

^HELP("s","TRIGGERS","s","TRIGGERS")
Triggers
^HELP("s","TRIGGERS","s","TRIGGERS",1)
   Triggers
^HELP("s","TRIGGERS","s","TRIGGERS",2)

^HELP("s","TRIGGERS","s","TRIGGERS",3)
   YottaDB allows you to set up a trigger mechanism that automatically executes
^HELP("s","TRIGGERS","s","TRIGGERS",4)
   a defined action in response to a database update operation on a matching
^HELP("s","TRIGGERS","s","TRIGGERS",5)
   global node.The trigger mechanism executes a fragment of M code (trigger
^HELP("s","TRIGGERS","s","TRIGGERS",6)
   code) "before" or "as part of" a database update. You can define the
^HELP("s","TRIGGERS","s","TRIGGERS",7)
   specifications of this mechanism in a Trigger Definition File. For a
^HELP("s","TRIGGERS","s","TRIGGERS",8)
   trigger on KILL (and ZKILL), YottaDB executes trigger code "before" the KILL
^HELP("s","TRIGGERS","s","TRIGGERS",9)
   operation. For example, a trigger on KILL ^CIF(:,1) might clear old cross
^HELP("s","TRIGGERS","s","TRIGGERS",10)
   references. For a trigger on SET, YottaDB executes trigger code "as part of"
^HELP("s","TRIGGERS","s","TRIGGERS",11)
   the SET operation. Within trigger logic, the ISV $ZTOLDVAL provides read
^HELP("s","TRIGGERS","s","TRIGGERS",12)
   access to the value of global node prior to the update and $ZTVALUE
^HELP("s","TRIGGERS","s","TRIGGERS",13)
   provides read/write access to the tentative SET value. This allows you to
^HELP("s","TRIGGERS","s","TRIGGERS",14)
   modify the tentative SET value before YottaDB commits it to the database. The
^HELP("s","TRIGGERS","s","TRIGGERS",15)
   term "as part of" means that SET triggers execute intertwined with the SET
^HELP("s","TRIGGERS","s","TRIGGERS",16)
   operation. Although it is not yet committed the database, the tentative
^HELP("s","TRIGGERS","s","TRIGGERS",17)
   new value appears to the process as assigned but the process must SET
^HELP("s","TRIGGERS","s","TRIGGERS",18)
   $ZTVALUE to make any revision to the tentative value, because a SET of the
^HELP("s","TRIGGERS","s","TRIGGERS",19)
   global node would nest the trigger recursively - a pathological condition.
^HELP("s","TRIGGERS","s","TRIGGERS",20)
   YottaDB executes SET triggers during a MERGE update where YottaDB internally
^HELP("s","TRIGGERS","s","TRIGGERS",21)
   performs a series of SET operations and while performing a $INCREMENT()
^HELP("s","TRIGGERS","s","TRIGGERS",22)
   operation where YottaDB internally performs a SET operation.For all triggers,
^HELP("s","TRIGGERS","s","TRIGGERS",23)
   YottaDB handles the database update event and the triggered actions as an
^HELP("s","TRIGGERS","s","TRIGGERS",24)
   Atomic (all or nothing) transaction. Because triggers use application code
^HELP("s","TRIGGERS","s","TRIGGERS",25)
   and are always part of an implicit or explicit TP transaction, trigger
^HELP("s","TRIGGERS","s","TRIGGERS",26)
   code must conform to ACID conventions discussed in the TP documentation.
^HELP("s","TRIGGERS","s","TRIGGERS",27)

^HELP("s","TRIGGERS","s","TRIGGERS",28)
   Triggers meet many application needs including (but not limited to) the
^HELP("s","TRIGGERS","s","TRIGGERS",29)
   following:
^HELP("s","TRIGGERS","s","TRIGGERS",30)

^HELP("s","TRIGGERS","s","TRIGGERS",31)
    1. Enforce schema-level consistency: Since database schema created in a
^HELP("s","TRIGGERS","s","TRIGGERS",32)
       normal M application are implicit, M applications implement logic to
^HELP("s","TRIGGERS","s","TRIGGERS",33)
       maintain and enforce conformance with an application schema. Using
^HELP("s","TRIGGERS","s","TRIGGERS",34)
       triggers to enforce schema-level consistency ensures all processes
^HELP("s","TRIGGERS","s","TRIGGERS",35)
       invoke the code uniformly, and increases code modularity and
^HELP("s","TRIGGERS","s","TRIGGERS",36)
       maintainability.
^HELP("s","TRIGGERS","s","TRIGGERS",37)
    2. Allow an application to maintain one or more non-primary key indexes.
^HELP("s","TRIGGERS","s","TRIGGERS",38)
       For example, a trigger on updates to global nodes containing a
^HELP("s","TRIGGERS","s","TRIGGERS",39)
       customer id can maintain an index on the last name.
^HELP("s","TRIGGERS","s","TRIGGERS",40)
    3. Implement business logic: For example, an update to an account could
^HELP("s","TRIGGERS","s","TRIGGERS",41)
       automatically trigger updates to related accounts.
^HELP("s","TRIGGERS","s","TRIGGERS",42)
    4. Reducing replication traffic: Since the YottaDB replication stream
^HELP("s","TRIGGERS","s","TRIGGERS",43)
       carries only the triggering updates, not the triggered updates,
^HELP("s","TRIGGERS","s","TRIGGERS",44)
       triggers reduce network traffic.
^HELP("s","TRIGGERS","s","TRIGGERS",45)
    5. Automate application defined logging or journaling of updates or
^HELP("s","TRIGGERS","s","TRIGGERS",46)
       maintaining historical records. Triggers can be used to control these.
^HELP("s","TRIGGERS","s","TRIGGERS",47)
    6. Implement referential integrity: For example, a trigger can prevent
^HELP("s","TRIGGERS","s","TRIGGERS",48)
       the posting of a bank transaction for an inactive account and display
^HELP("s","TRIGGERS","s","TRIGGERS",49)
       a rule violation message.
^HELP("s","TRIGGERS","s","TRIGGERS",50)
    7. Debugging: Debugging an application with multiple concurrent accesses
^HELP("s","TRIGGERS","s","TRIGGERS",51)
       is hard. You can use triggers to establish "watch points" on global
^HELP("s","TRIGGERS","s","TRIGGERS",52)
       variable updates to trap incorrect accesses. For example, if an
^HELP("s","TRIGGERS","s","TRIGGERS",53)
       application is failing because certain global variable nodes either
^HELP("s","TRIGGERS","s","TRIGGERS",54)
       have incorrect values or when previously set values disappear. A
^HELP("s","TRIGGERS","s","TRIGGERS",55)
       trigger can be used to trap all such accesses.
^HELP("s","TRIGGERS","s","TRIGGERS",56)
    8. Implement a dataflow based programming paradigm. Although not a
^HELP("s","TRIGGERS","s","TRIGGERS",57)
       primary goal of the implementation of triggers, you can use them to
^HELP("s","TRIGGERS","s","TRIGGERS",58)
       implement applications that use a dataflow programming paradigm.
^HELP("s","TRIGGERS","s","TRIGGERS",59)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION")
Trigger_Definition
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",1)
   Trigger Definition
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",2)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",3)
   A trigger definition file is a text file used for adding new triggers,
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",4)
   modifying existing triggers, or removing obsolete triggers. A trigger
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",5)
   definition file consists of one or more trigger definitions. A trigger
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",6)
   definition includes the following information:
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",7)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",8)
     * Trigger signature: A trigger signature consists of global variable,
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",9)
       subscripts, value, command, and trigger code. YottaDB uses a combination
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",10)
       of global variable, subscripts, value, and command to find the
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",11)
       matching trigger to invoke for a database update.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",12)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",13)
         1. Global Variable: The name of a specific global to which this
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",14)
            trigger applies.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",15)
         2. Subscripts: Subscripts for global variable nodes of the named
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",16)
            global, specified using the same patterns as the ZWRITE command.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",17)
         3. Value: For commands that SET or update the value at a node, YottaDB
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",18)
            honors an optional pattern to screen for changes to delimited
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",19)
            parts of the value. A value pattern includes a piece separator
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",20)
            and a list of pieces of interest.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",21)
         4. Command: There are four commands: SET, KILL, ZTRIGGER, and ZKILL
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",22)
            (ZWITHDRAW is identical to ZKILL) the shorter name for the
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",23)
            command is used when specifying triggers. MERGE is logically
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",24)
            treated as equivalent to a series of SET operations performed in
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",25)
            a loop. YottaDB handles $INCREMENT() of a global matching a SET
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",26)
            trigger definition as a triggering update.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",27)
         5. Trigger code: A string containing M code that YottaDB executes when
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",28)
            application code updates, including deletions by KILL and like
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",29)
            commands, a global node with a matching trigger. The specified
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",30)
            code can invoke additional routines and subroutines.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",31)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",32)
   **Note**
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",33)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",34)
            While YottaDB does not restrict trigger code from performing I/O
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",35)
            operations, YottaDB recommends against using OPEN, USE, READ, WRITE
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",36)
            and CLOSE within trigger application code. Such operations may be
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",37)
            useful for development and diagnostic purposes. However, triggers
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",38)
            implicitly run as TP transactions and I/O violates the ACID
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",39)
            property of Isolation. In addition, MUPIP has somewhat different
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",40)
            I/O handling characteristics than the main YottaDB run-time, so I/O
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",41)
            within triggers run by MUPIP may behave differently than within
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",42)
            the originating application environment.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",43)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",44)
     * ACID property modifiers for triggered database updates: Currently,
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",45)
       YottaDB merely performs a syntax check on this part of a trigger
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",46)
       definition. YottaDB ensures the triggering database update, and any
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",47)
       updates generated by trigger logic executed with transaction
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",48)
       semantics. With the VIEW "NOISOLATION" command, YottaDB transaction
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",49)
       processing has long provided a mechanism for an application to inform
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",50)
       the YottaDB runtime system that it need not enforce Isolation. In such a
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",51)
       case, the application and schema design provides Isolation by ensuring
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",52)
       only one process ever updates nodes in a particular global at any
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",53)
       given time, say by using $JOB as a subscript. This property
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",54)
       anticipates a time when a trigger specification can provide
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",55)
       NOISOLATION for particular nodes, in contrast to entire globals, and
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",56)
       for every update to that node, in contrast to by process use of a VIEW
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",57)
       command. Currently, the YottaDB runtime system enforces Consistency for
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",58)
       application logic inside a transaction and for triggered updates. This
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",59)
       property anticipates a time when a trigger specification permits an
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",60)
       application to inform the runtime system the application and schema
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",61)
       design ensures appropriate Consistency for a trigger and its logic,
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",62)
       thus relieving the YottaDB runtime system from that task.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",63)
     * Trigger Name: You can optionally specify a trigger name that uniquely
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",64)
       identifies each trigger. YottaDB uses a trigger name for error reporting
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",65)
       and configuration management of triggers - for example, a ZSHOW "S"
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",66)
       reports the name of each trigger on the stack. If you do not specify a
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",67)
       trigger name, YottaDB automatically generates one using the global name
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",68)
       as a base. User-specified trigger names and automatically generated
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",69)
       trigger names occupy different name space; both last for the life of
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",70)
       the definition. A user-specified trigger name is an alphanumeric
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",71)
       string of up to 28 characters. It must start with an alphabetic
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",72)
       character or a percent sign (%). For a trigger name, YottaDB uses the
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",73)
       same naming convention as an M name. In other contexts, YottaDB truncates
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",74)
       M names at 31 characters. However, YottaDB treats a trigger name of over
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",75)
       28 characters as an error. This is because a trigger name uniquely
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",76)
       identifies a trigger and truncation may cause duplication.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",77)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",78)
   An automatically generated trigger name is a string comprised of two
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",79)
   parts. Using the global name as a base, YottaDB takes the first part as an
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",80)
   alphanumeric string of up to 21 characters starting with an alphabetic
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",81)
   character or a percent sign (%). The trailing part consists of an
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",82)
   automatically incremented number in the form of #n# where n is a whole
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",83)
   number that monotonically increases from 1 to 999999 that uniquely
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",84)
   identifies a trigger for the same update. For example, if no trigger names
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",85)
   are specified in the trigger definition file, YottaDB automatically generates
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",86)
   trigger names Account#1#, Account#2#, and Account#3# for the first three
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",87)
   triggers defined for global variable ^Account. An attempt to use automatic
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",88)
   assignment for more than a million triggers produces an error. Once the
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",89)
   numeric portion of the auto generated names reaches 999999, you must
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",90)
   reload all triggers associated with the global variables that use the auto
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",91)
   generated name space. At run-time YottaDB generates a trailing suffix of a
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",92)
   hash-sign (#) followed by up to two characters to ensure that every
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",93)
   trigger has a unique designation, even when the environment is complex.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",94)
   The run-time suffix applies to both user-specified and automatically
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",95)
   generated trigger names. It helps in differentiating triggers with the
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",96)
   same name in different database files.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",97)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",98)
   To apply this trigger definition file to YottaDB, all you do is to load it
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",99)
   using MUPIP TRIGGER -TRIGGERFILE or $ZTRIGGER(). YottaDB would invoke trigger
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",100)
   name TrigAcct on every SET operation on ^Acct("ID"). Internally, YottaDB
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",101)
   stores trigger TrigAcct in the same database file where ^Acct is stored.
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",102)
   The syntax of an entry in a trigger definition file is:
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",103)

^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",104)
   {-triggername|-triggername-prefix*|-*|{+|-}trigvn -commands=cmd[,...]
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",105)
   -xecute=strlit1 [-[z]delim=expr][-pieces=[lvn=]int1[:int2][;...]]
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",106)
   [-options={[no]i[solation]|[no]c[onsistencycheck]}...] [-name=strlit2]}
^HELP("s","TRIGGERS","s","TRIGGER_DEFINITION",107)

^HELP("s","UTILITY_ROUTINES")
Utility_Routines
^HELP("s","UTILITY_ROUTINES",1)
   Utility Routines
^HELP("s","UTILITY_ROUTINES",2)

^HELP("s","UTILITY_ROUTINES",3)
   YottaDB provides library utilities to perform frequently used tasks, and to
^HELP("s","UTILITY_ROUTINES",4)
   access frequently used information. Most of the utilities are for YottaDB
^HELP("s","UTILITY_ROUTINES",5)
   programmers, but some provide tools for system administration and
^HELP("s","UTILITY_ROUTINES",6)
   operation.
^HELP("s","UTILITY_ROUTINES",7)

^HELP("s","UTILITY_ROUTINES",8)
   The YottaDB distribution includes the source files for these utilities. The
^HELP("s","UTILITY_ROUTINES",9)
   default installation compiles them to produce object modules in the
^HELP("s","UTILITY_ROUTINES",10)
   $ydb_dist distribution library.
^HELP("s","UTILITY_ROUTINES",11)

^HELP("s","UTILITY_ROUTINES",12)
   You may wish to examine the utilities and include some of them in your
^HELP("s","UTILITY_ROUTINES",13)
   programs if the programs access the function frequently or you may want to
^HELP("s","UTILITY_ROUTINES",14)
   modify the utilities to better fit your particular needs. If you modify a
^HELP("s","UTILITY_ROUTINES",15)
   utility, store your copy in a directory that precedes ydb_dist in the
^HELP("s","UTILITY_ROUTINES",16)
   search list $ZROUTINES to prevent a new release of YottaDB from overwriting
^HELP("s","UTILITY_ROUTINES",17)
   your copy.
^HELP("s","UTILITY_ROUTINES",18)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES")
Using_the_Utilities
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",1)
   Using the Utilities
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",2)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",3)
   You can either use a utility in Direct Mode or include it in a source
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",4)
   application program with one or more of the following formats.
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",5)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",6)
     * DO ^%UTILITYNAME
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",7)
     * DO LABEL^%UTILITYNAME
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",8)
     * $$FUNC^%UTILITYNAME[(para1,...)]
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",9)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",10)
   Many utilities contain labels that invoke variations of the basic utility
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",11)
   functionality. Some also provide the label FUNC to invoke an extrinsic
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",12)
   function with optional or required parameters.
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",13)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",14)
   Example:
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",15)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",16)
   YDB>SET %ds="11/22/2010"
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",17)
   YDB>DO INT^%DATE
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",18)
   YDB>ZWRITE
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",19)
   %DN=62047
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",20)
   %ds="11/22/2010"
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES",21)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE")
YottaDB_Utilities_Summary_Table
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",1)
   YottaDB Utilities Summary Table
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",2)

^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",3)
   +------------------------------------------------------------------------+
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",4)
   | YottaDB Utilities Summary                                              |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",5)
   |------------------------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",6)
   | UTILITY NAME | DESCRIPTION                                             |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",7)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",8)
   | %D           | Displays the current date in [d]d-mmm-[yy]yy format.    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",9)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",10)
   | %DATE        | Converts input date to $HOROLOG format.                 |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",11)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",12)
   | %DH          | Converts decimal numbers to hexadecimal.                |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",13)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",14)
   | %DO          | Converts decimal numbers to octal.                      |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",15)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",16)
   | %EXP         | Raises number to the power of another number.           |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",17)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",18)
   | %FL          | Lists comment lines at the beginning of the source      |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",19)
   |              | programs.                                               |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",20)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",21)
   | %FREECNT     | Displays the number of free blocks in the database      |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",22)
   |              | files associated with the current global directory.     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",23)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",24)
   | %G           | Displays global variables and their values.             |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",25)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",26)
   | %GBLDEF      | Manipulates the collation sequence assigned to a        |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",27)
   |              | global.                                                 |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",28)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",29)
   | %GC          | Copies a global or global sub-tree.                     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",30)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",31)
   | %GCE         | Replaces a specified value or part of a value in a set  |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",32)
   |              | of global variables.                                    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",33)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",34)
   |              | Displays existing globals in the current global         |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",35)
   | %GD          | directory without displaying their values or            |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",36)
   |              | descendants.                                            |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",37)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",38)
   | %GED         | Provides full-screen editing capabilities for global    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",39)
   |              | variables and values.                                   |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",40)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",41)
   | %GI          | Enters global variables and their values from a         |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",42)
   |              | sequential file into a database.                        |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",43)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",44)
   | %GO          | Copies globals from the current database to a           |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",45)
   |              | sequential output file.                                 |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",46)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",47)
   | %GSE         | Displays global variables and their values when the     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",48)
   |              | values contain a specified string or number.            |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",49)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",50)
   | %GSEL        | Selects globals by name.                                |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",51)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",52)
   | %H           | Converts date and time to and from $HOROLOG format.     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",53)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",54)
   | %HD          | Converts hexadecimal numbers to decimal.                |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",55)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",56)
   | %HEX2UTF     | Converts the given bytestream in hexadecimal notation   |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",57)
   |              | to YottaDB encoded character string.                    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",58)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",59)
   | %HO          | Converts hexadecimal numbers to octal.                  |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",60)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",61)
   | %LCASE       | Converts a string to all lower case.                    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",62)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",63)
   | %LCLCOL      | Manipulates the collation sequence assigned to local    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",64)
   |              | variables.                                              |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",65)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",66)
   | %OD          | Converts octal numbers to decimal.                      |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",67)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",68)
   | %OH          | Converts octal numbers to hexadecimal.                  |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",69)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",70)
   | %PATCODE     | Loads pattern definition files for use within an active |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",71)
   |              | database.                                               |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",72)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",73)
   | %RCE         | Replaces every occurrence of a text string with another |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",74)
   |              | string in a routine or list of routines.                |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",75)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",76)
   | %RD          | Lists routine names available through your $ZROUTINES   |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",77)
   |              | search list.                                            |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",78)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",79)
   | %RI          | Transfers routines from ANSI sequential format into     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",80)
   |              | individual .m files in YottaDB format.                  |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",81)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",82)
   | %RO          | Writes M routines in ANSI transfer format.              |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",83)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",84)
   | %RSE         | Searches for every occurrence of a text string in a     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",85)
   |              | routine or a list of routines.                          |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",86)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",87)
   | %RSEL        | Selects M routines and places their directories and     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",88)
   |              | names in a local array.                                 |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",89)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",90)
   | %SQROOT      | Calculates the square root of a number.                 |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",91)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",92)
   | %T           | Displays the current time in [h]h:mm AM/PM format.      |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",93)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",94)
   | %TI          | Converts time to $HOROLOG format.                       |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",95)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",96)
   | %TO          | Converts the current time from $HOROLOG format to       |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",97)
   |              | [h]h:mm AM/PM format.                                   |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",98)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",99)
   | %UCASE       | Converts a string to all upper case.                    |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",100)
   |--------------+---------------------------------------------------------|
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",101)
   | %UTF2HEX     | Converts UTF-8 encoded YottaDB character string to      |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",102)
   |              | bytestream in hexadecimal notation.                     |
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",103)
   +------------------------------------------------------------------------+
^HELP("s","UTILITY_ROUTINES","s","USING_THE_UTILITIES","s","YOTTADB_UTILITIES_SUMMARY_TABLE",104)



